// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  True
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __ADAPTIVENAVIERSTOKES_H
#define __ADAPTIVENAVIERSTOKES_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class adaptivenavierstokes_finite_element_0: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_0();
  }

};


class adaptivenavierstokes_finite_element_1: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_0();
    case 1:
        return new adaptivenavierstokes_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

};


class adaptivenavierstokes_finite_element_2: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 10;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][10] = { { 0.047140452079103154, -0.028867513459481253, -0.01666666666666666, 0.07824607964359515, 0.06060915267313264, 0.034992710611188284, -0.06013377943029551, -0.050822319538420375, -0.039366799437586794, -0.022728432252424755 } };
    static const double coefficients1[1][10] = { { 0.04714045207910318, 0.02886751345948132, -0.016666666666666653, 0.07824607964359517, -0.06060915267313264, 0.0349927106111883, 0.06013377943029547, -0.050822319538420355, 0.039366799437586815, -0.02272843225242476 } };
    static const double coefficients2[1][10] = { { 0.04714045207910328, 0.0, 0.03333333333333337, 0.0, 0.0, 0.10497813183356475, 0.0, 0.0, 0.0, 0.09091372900969896 } };
    static const double coefficients3[1][10] = { { 0.10606601717798203, 0.2598076211353315, -0.14999999999999994, 0.11736911946539273, 0.06060915267313259, -0.07873359887517362, 0.0, 0.10164463907684071, -0.13122266479195596, 0.09091372900969896 } };
    static const double coefficients4[1][10] = { { 0.10606601717798211, 0.0, 0.3, 0.0, 0.15152288168283168, 0.026244532958391187, 0.0, 0.0, 0.13122266479195596, -0.13637059351454844 } };
    static const double coefficients5[1][10] = { { 0.10606601717798221, -0.25980762113533146, -0.15000000000000002, 0.11736911946539275, -0.06060915267313259, -0.07873359887517363, 0.0, 0.10164463907684076, 0.13122266479195593, 0.09091372900969899 } };
    static const double coefficients6[1][10] = { { 0.10606601717798203, 0.0, 0.30000000000000004, 0.0, -0.15152288168283165, 0.02624453295839125, 0.0, 0.0, -0.13122266479195596, -0.1363705935145485 } };
    static const double coefficients7[1][10] = { { 0.1060660171779821, -0.25980762113533157, -0.15000000000000002, -0.07824607964359516, 0.09091372900969899, 0.09622995418076773, 0.18040133829088645, 0.050822319538420396, -0.01312226647919559, -0.022728432252424744 } };
    static const double coefficients8[1][10] = { { 0.10606601717798224, 0.2598076211353316, -0.15000000000000002, -0.0782460796435952, -0.09091372900969899, 0.0962299541807677, -0.18040133829088645, 0.05082231953842034, 0.013122266479195583, -0.022728432252424723 } };
    static const double coefficients9[1][10] = { { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 } };
    for (std::size_t k = 0; k < num_points * 10; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 1] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 3] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 4] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 5] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 6] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 7] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 8] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 9] += coefficients9[0][r] * basisvalues3[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 10 * num_derivatives, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
            { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
            { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
            { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][10] = { { 0.047140452079103154, -0.028867513459481253, -0.01666666666666666, 0.07824607964359515, 0.06060915267313264, 0.034992710611188284, -0.06013377943029551, -0.050822319538420375, -0.039366799437586794, -0.022728432252424755 } };
    static const double coefficients1[1][10] = { { 0.04714045207910318, 0.02886751345948132, -0.016666666666666653, 0.07824607964359517, -0.06060915267313264, 0.0349927106111883, 0.06013377943029547, -0.050822319538420355, 0.039366799437586815, -0.02272843225242476 } };
    static const double coefficients2[1][10] = { { 0.04714045207910328, 0.0, 0.03333333333333337, 0.0, 0.0, 0.10497813183356475, 0.0, 0.0, 0.0, 0.09091372900969896 } };
    static const double coefficients3[1][10] = { { 0.10606601717798203, 0.2598076211353315, -0.14999999999999994, 0.11736911946539273, 0.06060915267313259, -0.07873359887517362, 0.0, 0.10164463907684071, -0.13122266479195596, 0.09091372900969896 } };
    static const double coefficients4[1][10] = { { 0.10606601717798211, 0.0, 0.3, 0.0, 0.15152288168283168, 0.026244532958391187, 0.0, 0.0, 0.13122266479195596, -0.13637059351454844 } };
    static const double coefficients5[1][10] = { { 0.10606601717798221, -0.25980762113533146, -0.15000000000000002, 0.11736911946539275, -0.06060915267313259, -0.07873359887517363, 0.0, 0.10164463907684076, 0.13122266479195593, 0.09091372900969899 } };
    static const double coefficients6[1][10] = { { 0.10606601717798203, 0.0, 0.30000000000000004, 0.0, -0.15152288168283165, 0.02624453295839125, 0.0, 0.0, -0.13122266479195596, -0.1363705935145485 } };
    static const double coefficients7[1][10] = { { 0.1060660171779821, -0.25980762113533157, -0.15000000000000002, -0.07824607964359516, 0.09091372900969899, 0.09622995418076773, 0.18040133829088645, 0.050822319538420396, -0.01312226647919559, -0.022728432252424744 } };
    static const double coefficients8[1][10] = { { 0.10606601717798224, 0.2598076211353316, -0.15000000000000002, -0.0782460796435952, -0.09091372900969899, 0.0962299541807677, -0.18040133829088645, 0.05082231953842034, 0.013122266479195583, -0.022728432252424723 } };
    static const double coefficients9[1][10] = { { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 } };
    const std::size_t reference_offset[10] = {};
    const std::size_t num_components[10] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 10; ++i)
        {
            double derivatives[8] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[10 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    std::fill_n(values, num_points * 10 * num_derivatives, 0.0);
    const std::size_t reference_offsets[10] = {};
    const std::size_t physical_offsets[10] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[8][8];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 10; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[10 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[10 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[10];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[10];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 10; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    // Declare transformation matrix
    double transform[8][8] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.047140452079103154, -0.028867513459481253, -0.01666666666666666, 0.07824607964359515, 0.06060915267313264, 0.034992710611188284, -0.06013377943029551, -0.050822319538420375, -0.039366799437586794, -0.022728432252424755 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.04714045207910318, 0.02886751345948132, -0.016666666666666653, 0.07824607964359517, -0.06060915267313264, 0.0349927106111883, 0.06013377943029547, -0.050822319538420355, 0.039366799437586815, -0.02272843225242476 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.04714045207910328, 0.0, 0.03333333333333337, 0.0, 0.0, 0.10497813183356475, 0.0, 0.0, 0.0, 0.09091372900969896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798203, 0.2598076211353315, -0.14999999999999994, 0.11736911946539273, 0.06060915267313259, -0.07873359887517362, 0.0, 0.10164463907684071, -0.13122266479195596, 0.09091372900969896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798211, 0.0, 0.3, 0.0, 0.15152288168283168, 0.026244532958391187, 0.0, 0.0, 0.13122266479195596, -0.13637059351454844 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798221, -0.25980762113533146, -0.15000000000000002, 0.11736911946539275, -0.06060915267313259, -0.07873359887517363, 0.0, 0.10164463907684076, 0.13122266479195593, 0.09091372900969899 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798203, 0.0, 0.30000000000000004, 0.0, -0.15152288168283165, 0.02624453295839125, 0.0, 0.0, -0.13122266479195596, -0.1363705935145485 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.1060660171779821, -0.25980762113533157, -0.15000000000000002, -0.07824607964359516, 0.09091372900969899, 0.09622995418076773, 0.18040133829088645, 0.050822319538420396, -0.01312226647919559, -0.022728432252424744 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798224, 0.2598076211353316, -0.15000000000000002, -0.0782460796435952, -0.09091372900969899, 0.0962299541807677, -0.18040133829088645, 0.05082231953842034, 0.013122266479195583, -0.022728432252424723 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 10, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[8] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 10; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
            y[1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
    y[1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 6] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[2 * 6 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[2 * 7] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[2 * 8] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
    dof_coordinates[2 * 8 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[2 * 9] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[20] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.6666666666666667, 0.3333333333333333, 0.33333333333333337, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.6666666666666666, 0.3333333333333333, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 20, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_2();
  }

};


class adaptivenavierstokes_finite_element_3: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 3), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 20;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][10] = { { 0.047140452079103154, -0.028867513459481253, -0.01666666666666666, 0.07824607964359515, 0.06060915267313264, 0.034992710611188284, -0.06013377943029551, -0.050822319538420375, -0.039366799437586794, -0.022728432252424755 } };
    static const double coefficients1[1][10] = { { 0.04714045207910318, 0.02886751345948132, -0.016666666666666653, 0.07824607964359517, -0.06060915267313264, 0.0349927106111883, 0.06013377943029547, -0.050822319538420355, 0.039366799437586815, -0.02272843225242476 } };
    static const double coefficients2[1][10] = { { 0.04714045207910328, 0.0, 0.03333333333333337, 0.0, 0.0, 0.10497813183356475, 0.0, 0.0, 0.0, 0.09091372900969896 } };
    static const double coefficients3[1][10] = { { 0.10606601717798203, 0.2598076211353315, -0.14999999999999994, 0.11736911946539273, 0.06060915267313259, -0.07873359887517362, 0.0, 0.10164463907684071, -0.13122266479195596, 0.09091372900969896 } };
    static const double coefficients4[1][10] = { { 0.10606601717798211, 0.0, 0.3, 0.0, 0.15152288168283168, 0.026244532958391187, 0.0, 0.0, 0.13122266479195596, -0.13637059351454844 } };
    static const double coefficients5[1][10] = { { 0.10606601717798221, -0.25980762113533146, -0.15000000000000002, 0.11736911946539275, -0.06060915267313259, -0.07873359887517363, 0.0, 0.10164463907684076, 0.13122266479195593, 0.09091372900969899 } };
    static const double coefficients6[1][10] = { { 0.10606601717798203, 0.0, 0.30000000000000004, 0.0, -0.15152288168283165, 0.02624453295839125, 0.0, 0.0, -0.13122266479195596, -0.1363705935145485 } };
    static const double coefficients7[1][10] = { { 0.1060660171779821, -0.25980762113533157, -0.15000000000000002, -0.07824607964359516, 0.09091372900969899, 0.09622995418076773, 0.18040133829088645, 0.050822319538420396, -0.01312226647919559, -0.022728432252424744 } };
    static const double coefficients8[1][10] = { { 0.10606601717798224, 0.2598076211353316, -0.15000000000000002, -0.0782460796435952, -0.09091372900969899, 0.0962299541807677, -0.18040133829088645, 0.05082231953842034, 0.013122266479195583, -0.022728432252424723 } };
    static const double coefficients9[1][10] = { { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 } };
    for (std::size_t k = 0; k < num_points * 20 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 3] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 4] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 5] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 6] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 7] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 8] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 9] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 10 + 1] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 11 + 1] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 12 + 1] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 13 + 1] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 14 + 1] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 15 + 1] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 16 + 1] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 17 + 1] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 18 + 1] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[20 * 2 * ip + 2 * 19 + 1] += coefficients9[0][r] * basisvalues3[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 20 * num_derivatives * 2, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
            { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
            { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
            { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][10] = { { 0.047140452079103154, -0.028867513459481253, -0.01666666666666666, 0.07824607964359515, 0.06060915267313264, 0.034992710611188284, -0.06013377943029551, -0.050822319538420375, -0.039366799437586794, -0.022728432252424755 } };
    static const double coefficients1[1][10] = { { 0.04714045207910318, 0.02886751345948132, -0.016666666666666653, 0.07824607964359517, -0.06060915267313264, 0.0349927106111883, 0.06013377943029547, -0.050822319538420355, 0.039366799437586815, -0.02272843225242476 } };
    static const double coefficients2[1][10] = { { 0.04714045207910328, 0.0, 0.03333333333333337, 0.0, 0.0, 0.10497813183356475, 0.0, 0.0, 0.0, 0.09091372900969896 } };
    static const double coefficients3[1][10] = { { 0.10606601717798203, 0.2598076211353315, -0.14999999999999994, 0.11736911946539273, 0.06060915267313259, -0.07873359887517362, 0.0, 0.10164463907684071, -0.13122266479195596, 0.09091372900969896 } };
    static const double coefficients4[1][10] = { { 0.10606601717798211, 0.0, 0.3, 0.0, 0.15152288168283168, 0.026244532958391187, 0.0, 0.0, 0.13122266479195596, -0.13637059351454844 } };
    static const double coefficients5[1][10] = { { 0.10606601717798221, -0.25980762113533146, -0.15000000000000002, 0.11736911946539275, -0.06060915267313259, -0.07873359887517363, 0.0, 0.10164463907684076, 0.13122266479195593, 0.09091372900969899 } };
    static const double coefficients6[1][10] = { { 0.10606601717798203, 0.0, 0.30000000000000004, 0.0, -0.15152288168283165, 0.02624453295839125, 0.0, 0.0, -0.13122266479195596, -0.1363705935145485 } };
    static const double coefficients7[1][10] = { { 0.1060660171779821, -0.25980762113533157, -0.15000000000000002, -0.07824607964359516, 0.09091372900969899, 0.09622995418076773, 0.18040133829088645, 0.050822319538420396, -0.01312226647919559, -0.022728432252424744 } };
    static const double coefficients8[1][10] = { { 0.10606601717798224, 0.2598076211353316, -0.15000000000000002, -0.0782460796435952, -0.09091372900969899, 0.0962299541807677, -0.18040133829088645, 0.05082231953842034, 0.013122266479195583, -0.022728432252424723 } };
    static const double coefficients9[1][10] = { { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 } };
    const std::size_t reference_offset[20] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    const std::size_t num_components[20] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 20; ++i)
        {
            double derivatives[8] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[20 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    std::fill_n(values, num_points * 20 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[20] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    const std::size_t physical_offsets[20] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[8][8];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 20; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[20 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[20 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[40];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[40];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 20; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    // Declare transformation matrix
    double transform[8][8] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.047140452079103154, -0.028867513459481253, -0.01666666666666666, 0.07824607964359515, 0.06060915267313264, 0.034992710611188284, -0.06013377943029551, -0.050822319538420375, -0.039366799437586794, -0.022728432252424755 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.04714045207910318, 0.02886751345948132, -0.016666666666666653, 0.07824607964359517, -0.06060915267313264, 0.0349927106111883, 0.06013377943029547, -0.050822319538420355, 0.039366799437586815, -0.02272843225242476 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.04714045207910328, 0.0, 0.03333333333333337, 0.0, 0.0, 0.10497813183356475, 0.0, 0.0, 0.0, 0.09091372900969896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798203, 0.2598076211353315, -0.14999999999999994, 0.11736911946539273, 0.06060915267313259, -0.07873359887517362, 0.0, 0.10164463907684071, -0.13122266479195596, 0.09091372900969896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798211, 0.0, 0.3, 0.0, 0.15152288168283168, 0.026244532958391187, 0.0, 0.0, 0.13122266479195596, -0.13637059351454844 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798221, -0.25980762113533146, -0.15000000000000002, 0.11736911946539275, -0.06060915267313259, -0.07873359887517363, 0.0, 0.10164463907684076, 0.13122266479195593, 0.09091372900969899 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798203, 0.0, 0.30000000000000004, 0.0, -0.15152288168283165, 0.02624453295839125, 0.0, 0.0, -0.13122266479195596, -0.1363705935145485 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.1060660171779821, -0.25980762113533157, -0.15000000000000002, -0.07824607964359516, 0.09091372900969899, 0.09622995418076773, 0.18040133829088645, 0.050822319538420396, -0.01312226647919559, -0.022728432252424744 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798224, 0.2598076211353316, -0.15000000000000002, -0.0782460796435952, -0.09091372900969899, 0.0962299541807677, -0.18040133829088645, 0.05082231953842034, 0.013122266479195583, -0.022728432252424723 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.047140452079103154, -0.028867513459481253, -0.01666666666666666, 0.07824607964359515, 0.06060915267313264, 0.034992710611188284, -0.06013377943029551, -0.050822319538420375, -0.039366799437586794, -0.022728432252424755 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.04714045207910318, 0.02886751345948132, -0.016666666666666653, 0.07824607964359517, -0.06060915267313264, 0.0349927106111883, 0.06013377943029547, -0.050822319538420355, 0.039366799437586815, -0.02272843225242476 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.04714045207910328, 0.0, 0.03333333333333337, 0.0, 0.0, 0.10497813183356475, 0.0, 0.0, 0.0, 0.09091372900969896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798203, 0.2598076211353315, -0.14999999999999994, 0.11736911946539273, 0.06060915267313259, -0.07873359887517362, 0.0, 0.10164463907684071, -0.13122266479195596, 0.09091372900969896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798211, 0.0, 0.3, 0.0, 0.15152288168283168, 0.026244532958391187, 0.0, 0.0, 0.13122266479195596, -0.13637059351454844 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798221, -0.25980762113533146, -0.15000000000000002, 0.11736911946539275, -0.06060915267313259, -0.07873359887517363, 0.0, 0.10164463907684076, 0.13122266479195593, 0.09091372900969899 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798203, 0.0, 0.30000000000000004, 0.0, -0.15152288168283165, 0.02624453295839125, 0.0, 0.0, -0.13122266479195596, -0.1363705935145485 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.1060660171779821, -0.25980762113533157, -0.15000000000000002, -0.07824607964359516, 0.09091372900969899, 0.09622995418076773, 0.18040133829088645, 0.050822319538420396, -0.01312226647919559, -0.022728432252424744 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798224, 0.2598076211353316, -0.15000000000000002, -0.0782460796435952, -0.09091372900969899, 0.0962299541807677, -0.18040133829088645, 0.05082231953842034, 0.013122266479195583, -0.022728432252424723 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 20, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[16] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 20; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
            y[1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 13:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 14:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
            y[1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 15:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 16:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 17:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 18:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 19:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
    y[1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[12] = vals[1];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[13] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
    y[1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[16] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[17] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[18] = vals[1];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[19] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[10];
    vertex_values[3] = dof_values[11];
    vertex_values[5] = dof_values[12];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 6] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[2 * 6 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[2 * 7] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[2 * 8] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
    dof_coordinates[2 * 8 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[2 * 9] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = coordinate_dofs[0];
    dof_coordinates[2 * 10 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 11] = coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[4];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 13] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 13 + 1] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 14] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[2 * 15] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 15 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 16] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[2 * 16 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[2 * 17] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
    dof_coordinates[2 * 17 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[2 * 18] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
    dof_coordinates[2 * 18 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[2 * 19] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 19 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[40] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.6666666666666667, 0.3333333333333333, 0.33333333333333337, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.6666666666666666, 0.3333333333333333, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.6666666666666667, 0.3333333333333333, 0.33333333333333337, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.6666666666666666, 0.3333333333333333, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 40, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_2();
    case 1:
        return new adaptivenavierstokes_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_3();
  }

};


class adaptivenavierstokes_finite_element_4: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    for (std::size_t k = 0; k < num_points * 6; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    const std::size_t reference_offset[6] = {};
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives, 0.0);
    const std::size_t reference_offsets[6] = {};
    const std::size_t physical_offsets[6] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[6];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[6];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_4();
  }

};


class adaptivenavierstokes_finite_element_5: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_5() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 3), dim=2), FiniteElement('Lagrange', triangle, 2))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 26;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][10] = { { 0.047140452079103154, -0.028867513459481253, -0.01666666666666666, 0.07824607964359515, 0.06060915267313264, 0.034992710611188284, -0.06013377943029551, -0.050822319538420375, -0.039366799437586794, -0.022728432252424755 } };
    static const double coefficients1[1][10] = { { 0.04714045207910318, 0.02886751345948132, -0.016666666666666653, 0.07824607964359517, -0.06060915267313264, 0.0349927106111883, 0.06013377943029547, -0.050822319538420355, 0.039366799437586815, -0.02272843225242476 } };
    static const double coefficients2[1][10] = { { 0.04714045207910328, 0.0, 0.03333333333333337, 0.0, 0.0, 0.10497813183356475, 0.0, 0.0, 0.0, 0.09091372900969896 } };
    static const double coefficients3[1][10] = { { 0.10606601717798203, 0.2598076211353315, -0.14999999999999994, 0.11736911946539273, 0.06060915267313259, -0.07873359887517362, 0.0, 0.10164463907684071, -0.13122266479195596, 0.09091372900969896 } };
    static const double coefficients4[1][10] = { { 0.10606601717798211, 0.0, 0.3, 0.0, 0.15152288168283168, 0.026244532958391187, 0.0, 0.0, 0.13122266479195596, -0.13637059351454844 } };
    static const double coefficients5[1][10] = { { 0.10606601717798221, -0.25980762113533146, -0.15000000000000002, 0.11736911946539275, -0.06060915267313259, -0.07873359887517363, 0.0, 0.10164463907684076, 0.13122266479195593, 0.09091372900969899 } };
    static const double coefficients6[1][10] = { { 0.10606601717798203, 0.0, 0.30000000000000004, 0.0, -0.15152288168283165, 0.02624453295839125, 0.0, 0.0, -0.13122266479195596, -0.1363705935145485 } };
    static const double coefficients7[1][10] = { { 0.1060660171779821, -0.25980762113533157, -0.15000000000000002, -0.07824607964359516, 0.09091372900969899, 0.09622995418076773, 0.18040133829088645, 0.050822319538420396, -0.01312226647919559, -0.022728432252424744 } };
    static const double coefficients8[1][10] = { { 0.10606601717798224, 0.2598076211353316, -0.15000000000000002, -0.0782460796435952, -0.09091372900969899, 0.0962299541807677, -0.18040133829088645, 0.05082231953842034, 0.013122266479195583, -0.022728432252424723 } };
    static const double coefficients9[1][10] = { { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 } };
    static const double coefficients20[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients21[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients22[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients23[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients24[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients25[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    for (std::size_t k = 0; k < num_points * 26 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 4] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 5] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 6] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 7] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 8] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 9] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 10 + 1] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 11 + 1] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 12 + 1] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 13 + 1] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 14 + 1] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 15 + 1] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 16 + 1] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 17 + 1] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 18 + 1] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[26 * 3 * ip + 3 * 19 + 1] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[26 * 3 * ip + 3 * 20 + 2] += coefficients20[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[26 * 3 * ip + 3 * 21 + 2] += coefficients21[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[26 * 3 * ip + 3 * 22 + 2] += coefficients22[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[26 * 3 * ip + 3 * 23 + 2] += coefficients23[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[26 * 3 * ip + 3 * 24 + 2] += coefficients24[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[26 * 3 * ip + 3 * 25 + 2] += coefficients25[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 26 * num_derivatives * 3, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
            { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
            { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
            { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double dmats20[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][10] = { { 0.047140452079103154, -0.028867513459481253, -0.01666666666666666, 0.07824607964359515, 0.06060915267313264, 0.034992710611188284, -0.06013377943029551, -0.050822319538420375, -0.039366799437586794, -0.022728432252424755 } };
    static const double coefficients1[1][10] = { { 0.04714045207910318, 0.02886751345948132, -0.016666666666666653, 0.07824607964359517, -0.06060915267313264, 0.0349927106111883, 0.06013377943029547, -0.050822319538420355, 0.039366799437586815, -0.02272843225242476 } };
    static const double coefficients2[1][10] = { { 0.04714045207910328, 0.0, 0.03333333333333337, 0.0, 0.0, 0.10497813183356475, 0.0, 0.0, 0.0, 0.09091372900969896 } };
    static const double coefficients3[1][10] = { { 0.10606601717798203, 0.2598076211353315, -0.14999999999999994, 0.11736911946539273, 0.06060915267313259, -0.07873359887517362, 0.0, 0.10164463907684071, -0.13122266479195596, 0.09091372900969896 } };
    static const double coefficients4[1][10] = { { 0.10606601717798211, 0.0, 0.3, 0.0, 0.15152288168283168, 0.026244532958391187, 0.0, 0.0, 0.13122266479195596, -0.13637059351454844 } };
    static const double coefficients5[1][10] = { { 0.10606601717798221, -0.25980762113533146, -0.15000000000000002, 0.11736911946539275, -0.06060915267313259, -0.07873359887517363, 0.0, 0.10164463907684076, 0.13122266479195593, 0.09091372900969899 } };
    static const double coefficients6[1][10] = { { 0.10606601717798203, 0.0, 0.30000000000000004, 0.0, -0.15152288168283165, 0.02624453295839125, 0.0, 0.0, -0.13122266479195596, -0.1363705935145485 } };
    static const double coefficients7[1][10] = { { 0.1060660171779821, -0.25980762113533157, -0.15000000000000002, -0.07824607964359516, 0.09091372900969899, 0.09622995418076773, 0.18040133829088645, 0.050822319538420396, -0.01312226647919559, -0.022728432252424744 } };
    static const double coefficients8[1][10] = { { 0.10606601717798224, 0.2598076211353316, -0.15000000000000002, -0.0782460796435952, -0.09091372900969899, 0.0962299541807677, -0.18040133829088645, 0.05082231953842034, 0.013122266479195583, -0.022728432252424723 } };
    static const double coefficients9[1][10] = { { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 } };
    static const double coefficients20[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients21[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients22[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients23[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients24[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients25[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    const std::size_t reference_offset[26] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2 };
    const std::size_t num_components[26] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 26; ++i)
        {
            double derivatives[8] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats20[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats20[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients20[0][s] * aux[s];
                }
                break;
            case 21:
                // Compute reference derivatives for dof 21.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats20[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats20[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients21[0][s] * aux[s];
                }
                break;
            case 22:
                // Compute reference derivatives for dof 22.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats20[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats20[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients22[0][s] * aux[s];
                }
                break;
            case 23:
                // Compute reference derivatives for dof 23.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats20[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats20[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients23[0][s] * aux[s];
                }
                break;
            case 24:
                // Compute reference derivatives for dof 24.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats20[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats20[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients24[0][s] * aux[s];
                }
                break;
            case 25:
                // Compute reference derivatives for dof 25.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats20[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats20[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients25[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[26 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    std::fill_n(values, num_points * 26 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[26] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2 };
    const std::size_t physical_offsets[26] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[8][8];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 26; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[26 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[26 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[78];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[78];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 26; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    // Declare transformation matrix
    double transform[8][8] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.047140452079103154, -0.028867513459481253, -0.01666666666666666, 0.07824607964359515, 0.06060915267313264, 0.034992710611188284, -0.06013377943029551, -0.050822319538420375, -0.039366799437586794, -0.022728432252424755 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.04714045207910318, 0.02886751345948132, -0.016666666666666653, 0.07824607964359517, -0.06060915267313264, 0.0349927106111883, 0.06013377943029547, -0.050822319538420355, 0.039366799437586815, -0.02272843225242476 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.04714045207910328, 0.0, 0.03333333333333337, 0.0, 0.0, 0.10497813183356475, 0.0, 0.0, 0.0, 0.09091372900969896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798203, 0.2598076211353315, -0.14999999999999994, 0.11736911946539273, 0.06060915267313259, -0.07873359887517362, 0.0, 0.10164463907684071, -0.13122266479195596, 0.09091372900969896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798211, 0.0, 0.3, 0.0, 0.15152288168283168, 0.026244532958391187, 0.0, 0.0, 0.13122266479195596, -0.13637059351454844 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798221, -0.25980762113533146, -0.15000000000000002, 0.11736911946539275, -0.06060915267313259, -0.07873359887517363, 0.0, 0.10164463907684076, 0.13122266479195593, 0.09091372900969899 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798203, 0.0, 0.30000000000000004, 0.0, -0.15152288168283165, 0.02624453295839125, 0.0, 0.0, -0.13122266479195596, -0.1363705935145485 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.1060660171779821, -0.25980762113533157, -0.15000000000000002, -0.07824607964359516, 0.09091372900969899, 0.09622995418076773, 0.18040133829088645, 0.050822319538420396, -0.01312226647919559, -0.022728432252424744 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798224, 0.2598076211353316, -0.15000000000000002, -0.0782460796435952, -0.09091372900969899, 0.0962299541807677, -0.18040133829088645, 0.05082231953842034, 0.013122266479195583, -0.022728432252424723 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.047140452079103154, -0.028867513459481253, -0.01666666666666666, 0.07824607964359515, 0.06060915267313264, 0.034992710611188284, -0.06013377943029551, -0.050822319538420375, -0.039366799437586794, -0.022728432252424755 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.04714045207910318, 0.02886751345948132, -0.016666666666666653, 0.07824607964359517, -0.06060915267313264, 0.0349927106111883, 0.06013377943029547, -0.050822319538420355, 0.039366799437586815, -0.02272843225242476 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.04714045207910328, 0.0, 0.03333333333333337, 0.0, 0.0, 0.10497813183356475, 0.0, 0.0, 0.0, 0.09091372900969896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798203, 0.2598076211353315, -0.14999999999999994, 0.11736911946539273, 0.06060915267313259, -0.07873359887517362, 0.0, 0.10164463907684071, -0.13122266479195596, 0.09091372900969896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798211, 0.0, 0.3, 0.0, 0.15152288168283168, 0.026244532958391187, 0.0, 0.0, 0.13122266479195596, -0.13637059351454844 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798221, -0.25980762113533146, -0.15000000000000002, 0.11736911946539275, -0.06060915267313259, -0.07873359887517363, 0.0, 0.10164463907684076, 0.13122266479195593, 0.09091372900969899 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798203, 0.0, 0.30000000000000004, 0.0, -0.15152288168283165, 0.02624453295839125, 0.0, 0.0, -0.13122266479195596, -0.1363705935145485 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.1060660171779821, -0.25980762113533157, -0.15000000000000002, -0.07824607964359516, 0.09091372900969899, 0.09622995418076773, 0.18040133829088645, 0.050822319538420396, -0.01312226647919559, -0.022728432252424744 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.10606601717798224, 0.2598076211353316, -0.15000000000000002, -0.0782460796435952, -0.09091372900969899, 0.0962299541807677, -0.18040133829088645, 0.05082231953842034, 0.013122266479195583, -0.022728432252424723 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 20:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 21:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 22:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 23:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 24:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 25:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 26, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[24] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 26; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
            y[1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 13:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 14:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
            y[1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 15:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 16:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 17:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 18:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 19:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 20:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 21:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 22:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 23:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 24:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 25:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
    y[1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[12] = vals[1];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[13] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
    y[1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[16] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[17] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[18] = vals[1];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[19] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[20] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[21] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[22] = vals[2];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[23] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[24] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[25] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[10];
    vertex_values[4] = dof_values[11];
    vertex_values[7] = dof_values[12];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[20];
    vertex_values[5] = dof_values[21];
    vertex_values[8] = dof_values[22];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 6] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[2 * 6 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[2 * 7] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[2 * 8] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
    dof_coordinates[2 * 8 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[2 * 9] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = coordinate_dofs[0];
    dof_coordinates[2 * 10 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 11] = coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[4];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 13] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 13 + 1] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 14] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[2 * 15] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 15 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 16] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[2 * 16 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[2 * 17] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2];
    dof_coordinates[2 * 17 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[2 * 18] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[2];
    dof_coordinates[2 * 18 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[2 * 19] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[2 * 19 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[2 * 20] = coordinate_dofs[0];
    dof_coordinates[2 * 20 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 21] = coordinate_dofs[2];
    dof_coordinates[2 * 21 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 22] = coordinate_dofs[4];
    dof_coordinates[2 * 22 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 23] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 23 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 24] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 24 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 25] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 25 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[52] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.6666666666666667, 0.3333333333333333, 0.33333333333333337, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.6666666666666666, 0.3333333333333333, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.6666666666666667, 0.3333333333333333, 0.33333333333333337, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.6666666666666666, 0.3333333333333333, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 52, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_3();
    case 1:
        return new adaptivenavierstokes_finite_element_4();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_5();
  }

};


class adaptivenavierstokes_finite_element_6: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_6() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    for (std::size_t k = 0; k < num_points * 12 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 2, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[24];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[24];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[8] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[24] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 24, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_4();
    case 1:
        return new adaptivenavierstokes_finite_element_4();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_6();
  }

};


class adaptivenavierstokes_finite_element_7: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_7() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_7() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 15;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    static const double coefficients12[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 15 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[15 * 3 * ip + 3 * 12 + 2] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[15 * 3 * ip + 3 * 13 + 2] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[15 * 3 * ip + 3 * 14 + 2] += coefficients14[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 15 * num_derivatives * 3, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double dmats12[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    static const double coefficients12[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[15] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2 };
    const std::size_t num_components[15] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 15; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[15 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 15 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[15] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2 };
    const std::size_t physical_offsets[15] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 15; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[15 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[15 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[45];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[45];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 15, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[12] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 14:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[4] = dof_values[7];
    vertex_values[7] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[5] = dof_values[13];
    vertex_values[8] = dof_values[14];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[0];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 13] = coordinate_dofs[2];
    dof_coordinates[2 * 13 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 14] = coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[30] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 30, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_6();
    case 1:
        return new adaptivenavierstokes_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_7();
  }

};


class adaptivenavierstokes_finite_element_8: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_8() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_8() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', triangle, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    for (std::size_t k = 0; k < num_points * 6; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[6 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    const std::size_t reference_offset[6] = {};
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives, 0.0);
    const std::size_t reference_offsets[6] = {};
    const std::size_t physical_offsets[6] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[6];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[6];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_8();
  }

};


class adaptivenavierstokes_finite_element_9: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_9() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_9() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Discontinuous Lagrange', triangle, 2), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    for (std::size_t k = 0; k < num_points * 12 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[12 * 2 * ip + 2 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 2, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[24];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[24];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[8] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[3] = dof_values[7];
    vertex_values[5] = dof_values[8];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[24] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0 };
    std::copy_n(dof_X, 24, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_8();
    case 1:
        return new adaptivenavierstokes_finite_element_8();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_9();
  }

};


class adaptivenavierstokes_finite_element_10: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_10() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_10() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_10();
  }

};


class adaptivenavierstokes_finite_element_11: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_11() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_11() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Discontinuous Lagrange', triangle, 2), dim=2), FiniteElement('Discontinuous Lagrange', triangle, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 15;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    static const double coefficients12[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 15 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 6 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 7 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 8 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 9 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 10 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 6; ++r)
            reference_values[15 * 3 * ip + 3 * 11 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[15 * 3 * ip + 3 * 12 + 2] += coefficients12[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[15 * 3 * ip + 3 * 13 + 2] += coefficients13[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[15 * 3 * ip + 3 * 14 + 2] += coefficients14[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 15 * num_derivatives * 3, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][6][6] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
            { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
            { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double dmats12[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][6] = { { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 } };
    static const double coefficients1[1][6] = { { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 } };
    static const double coefficients2[1][6] = { { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 } };
    static const double coefficients3[1][6] = { { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients4[1][6] = { { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 } };
    static const double coefficients5[1][6] = { { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 } };
    static const double coefficients12[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients13[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients14[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[15] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2 };
    const std::size_t num_components[15] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[6] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = (1.0 - Y[1]) / 2.0;
        const double tmp3_2 = tmp2_2 * tmp2_2;
        basisvalues2[3] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp3_2 * basisvalues2[0];
        basisvalues2[2] = (0.5 + 1.5 * Y[1]) * basisvalues2[0];
        basisvalues2[4] = (1.5 + 2.5 * Y[1]) * basisvalues2[1];
        basisvalues2[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues2[2] - 0.5555555555555556 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.5);
        basisvalues2[2] *= std::sqrt(1.0);
        basisvalues2[5] *= std::sqrt(1.5);
        basisvalues2[1] *= std::sqrt(3.0);
        basisvalues2[4] *= std::sqrt(4.5);
        basisvalues2[3] *= std::sqrt(7.5);
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 15; ++i)
        {
            double derivatives[4] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[6] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[6][6] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 36, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[6][6];
                        std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 36, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 6; ++s)
                        for (std::size_t t = 0; t < 6; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 6; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats12[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats12[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[15 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    std::fill_n(values, num_points * 15 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[15] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2 };
    const std::size_t physical_offsets[15] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[4][4];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 15; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[15 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[15 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[45];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[45];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][4][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 0, 0 },
            { 1, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 1, 0 },
            { 1, 1 } } };
    // Declare transformation matrix
    double transform[4][4] =
        { { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, -0.1732050807568877, -0.09999999999999999, 0.12171612389003691, 0.09428090415820636, 0.05443310539518173 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.1732050807568877, -0.10000000000000003, 0.12171612389003691, -0.09428090415820636, 0.054433105395181765 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.0, 0.0, 0.2, 0.0, 0.0, 0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.23094010767585033, 0.1333333333333333, 0.0, 0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910315, -0.23094010767585033, 0.1333333333333333, 0.0, -0.18856180831641267, -0.16329931618554522 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[6] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = (1.0 - Y[1]) / 2.0;
            const double tmp3_2 = tmp2_2 * tmp2_2;
            basisvalues[3] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp3_2 * basisvalues[0];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[3] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[6] = { 0.4714045207910316, 0.0, -0.26666666666666666, -0.24343224778007383, 0.0, 0.05443310539518174 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566349, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505149, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999994, 0.0, 7.071067811865468, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[6][6] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831814, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716183, 4.7434164902525735, -0.912870929175279, 0.0, 0.0, 0.0 },
                  { 1.9999999999999103, 6.123724356957937, 3.5355339059327333, 0.0, 0.0, 0.0 },
                  { -2.3094010767584905, 0.0, 8.164965809277266, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[6][6] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 36, 0.0);
                for (std::size_t t = 0; t < 6; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 36, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 36, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 6; ++t)
                            for (std::size_t u = 0; u < 6; ++u)
                                for (std::size_t tu = 0; tu < 6; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 6; ++s)
                    for (std::size_t t = 0; t < 6; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[4] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 15, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[12] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 14:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[12] = vals[2];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[2];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[6];
    vertex_values[4] = dof_values[7];
    vertex_values[7] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[12];
    vertex_values[5] = dof_values[13];
    vertex_values[8] = dof_values[14];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 5 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 6] = coordinate_dofs[0];
    dof_coordinates[2 * 6 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 7] = coordinate_dofs[2];
    dof_coordinates[2 * 7 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 8] = coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = coordinate_dofs[0];
    dof_coordinates[2 * 12 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 13] = coordinate_dofs[2];
    dof_coordinates[2 * 13 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 14] = coordinate_dofs[4];
    dof_coordinates[2 * 14 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[30] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.5, 0.5, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 30, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_9();
    case 1:
        return new adaptivenavierstokes_finite_element_10();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_11();
  }

};


class adaptivenavierstokes_finite_element_12: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_12() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_12() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_12();
  }

};


class adaptivenavierstokes_finite_element_13: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_13() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_13() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', triangle, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_13();
  }

};


class adaptivenavierstokes_finite_element_14: public ufc::finite_element
{
public:

  adaptivenavierstokes_finite_element_14() : ufc::finite_element()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_finite_element_14() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Bubble', triangle, 3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Bubble";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][10] = { { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[ip] += coefficients0[0][r] * basisvalues3[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
            { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
            { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
            { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][10] = { { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 } };
    const std::size_t reference_offset[1] = {};
    const std::size_t num_components[1] = { 1 };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 1; ++i)
        {
            double derivatives[8] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    std::fill_n(values, num_points * num_derivatives, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[8][8];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    // Declare transformation matrix
    double transform[8][8] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.6363961030678927, 0.0, 0.0, -0.23473823893078544, 0.0, -0.2624453295839119, 0.0, -0.20328927815368145, 0.0, 0.09091372900969895 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[8] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = 0;
    vertex_values[1] = 0;
    vertex_values[2] = 0;
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[2] = { 0.3333333333333333, 0.3333333333333333 };
    std::copy_n(dof_X, 2, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new adaptivenavierstokes_finite_element_14();
  }

};


class adaptivenavierstokes_dofmap_0: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_0();
  }

};


class adaptivenavierstokes_dofmap_1: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_0();
    case 1:
        return new adaptivenavierstokes_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
  }

};


class adaptivenavierstokes_dofmap_2: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + 2 * num_global_entities[1] + num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 10;
  }

  std::size_t num_element_dofs() const final override
  {
    return 10;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 4, 10 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 2 * entity_indices[1][0];
    dofs[4] = offset + 2 * entity_indices[1][0] + 1;
    dofs[5] = offset + 2 * entity_indices[1][1];
    dofs[6] = offset + 2 * entity_indices[1][1] + 1;
    dofs[7] = offset + 2 * entity_indices[1][2];
    dofs[8] = offset + 2 * entity_indices[1][2] + 1;
    offset += 2 * num_global_entities[1];
    dofs[9] = offset + entity_indices[2][0];
    offset += num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 7;
        dofs[3] = 8;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 4;
            break;
        case 1:
            dofs[0] = 5;
            dofs[1] = 6;
            break;
        case 2:
            dofs[0] = 7;
            dofs[1] = 8;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 9;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 7;
            dofs[3] = 8;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_2();
  }

};


class adaptivenavierstokes_dofmap_3: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 3), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0] + 4 * num_global_entities[1] + 2 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 20;
  }

  std::size_t num_element_dofs() const final override
  {
    return 20;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 8;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 2 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 8, 20 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 2 * entity_indices[1][0];
    dofs[4] = offset + 2 * entity_indices[1][0] + 1;
    dofs[5] = offset + 2 * entity_indices[1][1];
    dofs[6] = offset + 2 * entity_indices[1][1] + 1;
    dofs[7] = offset + 2 * entity_indices[1][2];
    dofs[8] = offset + 2 * entity_indices[1][2] + 1;
    offset += 2 * num_global_entities[1];
    dofs[9] = offset + entity_indices[2][0];
    offset += num_global_entities[2];
    dofs[10] = offset + entity_indices[0][0];
    dofs[11] = offset + entity_indices[0][1];
    dofs[12] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[13] = offset + 2 * entity_indices[1][0];
    dofs[14] = offset + 2 * entity_indices[1][0] + 1;
    dofs[15] = offset + 2 * entity_indices[1][1];
    dofs[16] = offset + 2 * entity_indices[1][1] + 1;
    dofs[17] = offset + 2 * entity_indices[1][2];
    dofs[18] = offset + 2 * entity_indices[1][2] + 1;
    offset += 2 * num_global_entities[1];
    dofs[19] = offset + entity_indices[2][0];
    offset += num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 11;
        dofs[5] = 12;
        dofs[6] = 13;
        dofs[7] = 14;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 10;
        dofs[5] = 12;
        dofs[6] = 15;
        dofs[7] = 16;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 7;
        dofs[3] = 8;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 17;
        dofs[7] = 18;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 10;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 11;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 12;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 13;
            dofs[3] = 14;
            break;
        case 1:
            dofs[0] = 5;
            dofs[1] = 6;
            dofs[2] = 15;
            dofs[3] = 16;
            break;
        case 2:
            dofs[0] = 7;
            dofs[1] = 8;
            dofs[2] = 17;
            dofs[3] = 18;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 9;
            dofs[1] = 19;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 10;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 11;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 12;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 11;
            dofs[5] = 12;
            dofs[6] = 13;
            dofs[7] = 14;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 10;
            dofs[5] = 12;
            dofs[6] = 15;
            dofs[7] = 16;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 7;
            dofs[3] = 8;
            dofs[4] = 10;
            dofs[5] = 11;
            dofs[6] = 17;
            dofs[7] = 18;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_2();
    case 1:
        return new adaptivenavierstokes_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_3();
  }

};


class adaptivenavierstokes_dofmap_4: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 1, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 3, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            break;
        case 1:
            dofs[0] = 4;
            break;
        case 2:
            dofs[0] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_4();
  }

};


class adaptivenavierstokes_dofmap_5: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_5() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 3), dim=2), FiniteElement('Lagrange', triangle, 2))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0] + 5 * num_global_entities[1] + 2 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 26;
  }

  std::size_t num_element_dofs() const final override
  {
    return 26;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 11;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 3, 5, 2 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 3, 11, 26 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 2 * entity_indices[1][0];
    dofs[4] = offset + 2 * entity_indices[1][0] + 1;
    dofs[5] = offset + 2 * entity_indices[1][1];
    dofs[6] = offset + 2 * entity_indices[1][1] + 1;
    dofs[7] = offset + 2 * entity_indices[1][2];
    dofs[8] = offset + 2 * entity_indices[1][2] + 1;
    offset += 2 * num_global_entities[1];
    dofs[9] = offset + entity_indices[2][0];
    offset += num_global_entities[2];
    dofs[10] = offset + entity_indices[0][0];
    dofs[11] = offset + entity_indices[0][1];
    dofs[12] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[13] = offset + 2 * entity_indices[1][0];
    dofs[14] = offset + 2 * entity_indices[1][0] + 1;
    dofs[15] = offset + 2 * entity_indices[1][1];
    dofs[16] = offset + 2 * entity_indices[1][1] + 1;
    dofs[17] = offset + 2 * entity_indices[1][2];
    dofs[18] = offset + 2 * entity_indices[1][2] + 1;
    offset += 2 * num_global_entities[1];
    dofs[19] = offset + entity_indices[2][0];
    offset += num_global_entities[2];
    dofs[20] = offset + entity_indices[0][0];
    dofs[21] = offset + entity_indices[0][1];
    dofs[22] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[23] = offset + entity_indices[1][0];
    dofs[24] = offset + entity_indices[1][1];
    dofs[25] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 11;
        dofs[5] = 12;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 21;
        dofs[9] = 22;
        dofs[10] = 23;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 10;
        dofs[5] = 12;
        dofs[6] = 15;
        dofs[7] = 16;
        dofs[8] = 20;
        dofs[9] = 22;
        dofs[10] = 24;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 7;
        dofs[3] = 8;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 17;
        dofs[7] = 18;
        dofs[8] = 20;
        dofs[9] = 21;
        dofs[10] = 25;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 10;
            dofs[2] = 20;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 11;
            dofs[2] = 21;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 12;
            dofs[2] = 22;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 13;
            dofs[3] = 14;
            dofs[4] = 23;
            break;
        case 1:
            dofs[0] = 5;
            dofs[1] = 6;
            dofs[2] = 15;
            dofs[3] = 16;
            dofs[4] = 24;
            break;
        case 2:
            dofs[0] = 7;
            dofs[1] = 8;
            dofs[2] = 17;
            dofs[3] = 18;
            dofs[4] = 25;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 9;
            dofs[1] = 19;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 10;
            dofs[2] = 20;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 11;
            dofs[2] = 21;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 12;
            dofs[2] = 22;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 11;
            dofs[5] = 12;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 21;
            dofs[9] = 22;
            dofs[10] = 23;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 10;
            dofs[5] = 12;
            dofs[6] = 15;
            dofs[7] = 16;
            dofs[8] = 20;
            dofs[9] = 22;
            dofs[10] = 24;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 7;
            dofs[3] = 8;
            dofs[4] = 10;
            dofs[5] = 11;
            dofs[6] = 17;
            dofs[7] = 18;
            dofs[8] = 20;
            dofs[9] = 21;
            dofs[10] = 25;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_3();
    case 1:
        return new adaptivenavierstokes_dofmap_4();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_5();
  }

};


class adaptivenavierstokes_dofmap_6: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_6() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 6;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 6, 12 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_4();
    case 1:
        return new adaptivenavierstokes_dofmap_4();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_6();
  }

};


class adaptivenavierstokes_dofmap_7: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_7() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_7() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', triangle, 2), dim=2), FiniteElement('Lagrange', triangle, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, true, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0] + 2 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 15;
  }

  std::size_t num_element_dofs() const final override
  {
    return 15;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 8;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 3, 2, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 3, 8, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[1][0];
    dofs[4] = offset + entity_indices[1][1];
    dofs[5] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + entity_indices[0][0];
    dofs[7] = offset + entity_indices[0][1];
    dofs[8] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + entity_indices[1][0];
    dofs[10] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[12] = offset + entity_indices[0][0];
    dofs[13] = offset + entity_indices[0][1];
    dofs[14] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 13;
        dofs[7] = 14;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 11;
        dofs[6] = 12;
        dofs[7] = 13;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 9;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 10;
            break;
        case 2:
            dofs[0] = 5;
            dofs[1] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 6;
            dofs[2] = 12;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 7;
            dofs[2] = 13;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 8;
            dofs[2] = 14;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 13;
            dofs[7] = 14;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            dofs[6] = 12;
            dofs[7] = 14;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 11;
            dofs[6] = 12;
            dofs[7] = 13;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_6();
    case 1:
        return new adaptivenavierstokes_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_7();
  }

};


class adaptivenavierstokes_dofmap_8: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_8() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_8() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', triangle, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 6 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 6 * entity_indices[2][0];
    dofs[1] = 6 * entity_indices[2][0] + 1;
    dofs[2] = 6 * entity_indices[2][0] + 2;
    dofs[3] = 6 * entity_indices[2][0] + 3;
    dofs[4] = 6 * entity_indices[2][0] + 4;
    dofs[5] = 6 * entity_indices[2][0] + 5;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_8();
  }

};


class adaptivenavierstokes_dofmap_9: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_9() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_9() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Discontinuous Lagrange', triangle, 2), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 12 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 12 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 12 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + 6 * entity_indices[2][0];
    dofs[1] = offset + 6 * entity_indices[2][0] + 1;
    dofs[2] = offset + 6 * entity_indices[2][0] + 2;
    dofs[3] = offset + 6 * entity_indices[2][0] + 3;
    dofs[4] = offset + 6 * entity_indices[2][0] + 4;
    dofs[5] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
    dofs[6] = offset + 6 * entity_indices[2][0];
    dofs[7] = offset + 6 * entity_indices[2][0] + 1;
    dofs[8] = offset + 6 * entity_indices[2][0] + 2;
    dofs[9] = offset + 6 * entity_indices[2][0] + 3;
    dofs[10] = offset + 6 * entity_indices[2][0] + 4;
    dofs[11] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_8();
    case 1:
        return new adaptivenavierstokes_dofmap_8();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_9();
  }

};


class adaptivenavierstokes_dofmap_10: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_10() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_10() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 3 * entity_indices[2][0];
    dofs[1] = 3 * entity_indices[2][0] + 1;
    dofs[2] = 3 * entity_indices[2][0] + 2;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_10();
  }

};


class adaptivenavierstokes_dofmap_11: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_11() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_11() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Discontinuous Lagrange', triangle, 2), dim=2), FiniteElement('Discontinuous Lagrange', triangle, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 15 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 15;
  }

  std::size_t num_element_dofs() const final override
  {
    return 15;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + 6 * entity_indices[2][0];
    dofs[1] = offset + 6 * entity_indices[2][0] + 1;
    dofs[2] = offset + 6 * entity_indices[2][0] + 2;
    dofs[3] = offset + 6 * entity_indices[2][0] + 3;
    dofs[4] = offset + 6 * entity_indices[2][0] + 4;
    dofs[5] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
    dofs[6] = offset + 6 * entity_indices[2][0];
    dofs[7] = offset + 6 * entity_indices[2][0] + 1;
    dofs[8] = offset + 6 * entity_indices[2][0] + 2;
    dofs[9] = offset + 6 * entity_indices[2][0] + 3;
    dofs[10] = offset + 6 * entity_indices[2][0] + 4;
    dofs[11] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
    dofs[12] = offset + 3 * entity_indices[2][0];
    dofs[13] = offset + 3 * entity_indices[2][0] + 1;
    dofs[14] = offset + 3 * entity_indices[2][0] + 2;
    offset += 3 * num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_9();
    case 1:
        return new adaptivenavierstokes_dofmap_10();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_11();
  }

};


class adaptivenavierstokes_dofmap_12: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_12() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_12() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = {};
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_12();
  }

};


class adaptivenavierstokes_dofmap_13: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_13() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_13() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', triangle, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[2][0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_13();
  }

};


class adaptivenavierstokes_dofmap_14: public ufc::dofmap
{
public:

  adaptivenavierstokes_dofmap_14() : ufc::dofmap()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_dofmap_14() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Bubble', triangle, 3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, false, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 0, 1 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[2][0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new adaptivenavierstokes_dofmap_14();
  }

};


class adaptivenavierstokes_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  adaptivenavierstokes_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    adaptivenavierstokes_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    adaptivenavierstokes_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.3333333333333333, 0.3333333333333333, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class adaptivenavierstokes_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  adaptivenavierstokes_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~adaptivenavierstokes_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 5
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           5
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights7[7] = { 0.1125, 0.06296959027241358, 0.06296959027241358, 0.06296959027241358, 0.06619707639425308, 0.06619707639425308, 0.06619707639425308 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE24_C0_D01_Q7[1][7][5] =
        { { { -0.3333333333333385, 0.333333333333335, 1.333333333333321, 0.0, -1.333333333333334 },
            { 0.5948539707061686, -0.594853970706174, 3.189707941412335, 0.0, -3.189707941412351 },
            { 0.5948539707061685, 2.189707941412351, 0.4051460292938092, -2.784561912118513, -0.4051460292938247 },
            { -2.189707941412354, -0.594853970706174, 0.4051460292938148, 2.784561912118532, -0.4051460292938246 },
            { -0.8805682564204662, 0.8805682564204623, 0.2388634871590675, 0.0, -0.2388634871590795 },
            { -0.8805682564204653, -0.7611365128409207, 1.880568256420449, 1.641704769261392, -1.880568256420462 },
            { 0.7611365128409149, 0.8805682564204621, 1.880568256420445, -1.64170476926137, -1.880568256420461 } } };
    alignas(32) static const double FE24_C0_D10_Q7[1][7][5] =
        { { { -0.3333333333333329, 0.3333333333333326, 1.333333333333332, -1.333333333333332, 0.0 },
            { 0.5948539707061764, 2.189707941412349, 0.4051460292938244, -0.4051460292938244, -2.784561912118526 },
            { 0.5948539707061734, -0.5948539707061756, 3.189707941412344, -3.189707941412344, 0.0 },
            { -2.18970794141235, -0.5948539707061773, 0.405146029293824, -0.405146029293824, 2.784561912118527 },
            { -0.8805682564204611, -0.761136512840922, 1.880568256420458, -1.880568256420458, 1.641704769261383 },
            { -0.8805682564204599, 0.8805682564204588, 0.2388634871590777, -0.2388634871590777, 0.0 },
            { 0.7611365128409217, 0.8805682564204604, 1.880568256420458, -1.880568256420458, -1.641704769261382 } } };
    alignas(32) static const double FE24_C0_Q7[1][7][6] =
        { { { -0.1111111111111111, -0.1111111111111113, -0.1111111111111111, 0.4444444444444444, 0.4444444444444444, 0.4444444444444445 },
            { -0.08076859419188716, 0.4743526085855382, -0.08076859419188721, 0.3230743767675489, 0.04103582626313827, 0.323074376767549 },
            { -0.08076859419188719, -0.08076859419188731, 0.4743526085855383, 0.3230743767675486, 0.323074376767549, 0.04103582626313836 },
            { 0.4743526085855386, -0.08076859419188717, -0.08076859419188719, 0.04103582626313827, 0.3230743767675488, 0.3230743767675486 },
            { -0.0280749432230787, -0.05258390110254544, -0.02807494322307881, 0.1122997728923151, 0.8841342417640725, 0.1122997728923151 },
            { -0.02807494322307866, -0.02807494322307886, -0.05258390110254534, 0.1122997728923151, 0.1122997728923151, 0.8841342417640726 },
            { -0.05258390110254531, -0.02807494322307901, -0.02807494322307885, 0.8841342417640724, 0.1122997728923153, 0.1122997728923153 } } };
    alignas(32) static const double FE26_C2_D01_Q7[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[1][5][5] =
        { { { 0.5, 0.1666666666666676, 0.0, 0.0, -0.666666666666668 },
            { 0.1666666666666676, 0.5, 0.0, 0.0, -0.6666666666666679 },
            { 0.0, 0.0, 1.333333333333329, -1.333333333333329, 0.0 },
            { 0.0, 0.0, -1.333333333333329, 1.333333333333329, 0.0 },
            { -0.666666666666668, -0.6666666666666679, 0.0, 0.0, 1.333333333333336 } } };
    alignas(32) static const double PI1[1][5][5] =
        { { { 0.5, 0.1666666666666664, 0.0, -0.6666666666666674, 0.0 },
            { 0.1666666666666663, -0.1666666666666666, 0.6666666666666639, 0.0, -0.6666666666666667 },
            { 0.0, 0.666666666666667, 0.6666666666666562, -0.666666666666662, -0.6666666666666656 },
            { 0.0, -0.666666666666667, -0.6666666666666562, 0.666666666666662, 0.6666666666666656 },
            { -0.6666666666666671, 0.0, -0.6666666666666659, 0.6666666666666676, 0.6666666666666676 } } };
    alignas(32) static const double PI2[1][5][3] =
        { { { -0.1666666666666667, 0.0, 0.0 },
            { 0.0, 0.1666666666666665, 0.0 },
            { 0.1666666666666665, 0.1666666666666664, 0.3333333333333329 },
            { -0.1666666666666665, -0.1666666666666664, -0.3333333333333329 },
            { 0.1666666666666669, -0.1666666666666668, 0.0 } } };
    alignas(32) static const double PI3[1][5][5] =
        { { { 0.5, 0.1666666666666655, 0.0, -0.6666666666666673, 0.0 },
            { 0.1666666666666655, 0.5, 0.0, -0.6666666666666659, 0.0 },
            { 0.0, 0.0, 1.333333333333315, 0.0, -1.333333333333325 },
            { -0.6666666666666673, -0.6666666666666659, 0.0, 1.333333333333332, 0.0 },
            { 0.0, 0.0, -1.333333333333325, 0.0, 1.333333333333335 } } };
    alignas(32) static const double PI4[1][5][3] =
        { { { -0.1666666666666676, 0.0, 0.0 },
            { 0.0, 0.0, 0.1666666666666669 },
            { 0.1666666666666647, 0.333333333333331, 0.1666666666666643 },
            { 0.1666666666666675, 0.0, -0.1666666666666657 },
            { -0.1666666666666668, -0.3333333333333335, -0.1666666666666667 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE26_C2_D01_Q7[0][0][0] + coordinate_dofs[2] * FE26_C2_D01_Q7[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE26_C2_D01_Q7[0][0][0] + coordinate_dofs[5] * FE26_C2_D01_Q7[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE26_C2_D01_Q7[0][0][0] + coordinate_dofs[4] * FE26_C2_D01_Q7[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE26_C2_D01_Q7[0][0][0] + coordinate_dofs[3] * FE26_C2_D01_Q7[0][0][1];
    alignas(32) double sp[31];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = sp[3] * sp[4];
    sp[8] = sp[3] * sp[3];
    sp[9] = sp[4] * sp[4];
    sp[10] = sp[5] * sp[6];
    sp[11] = sp[6] * sp[6];
    sp[12] = sp[5] * sp[5];
    sp[13] = sp[7] + sp[10];
    sp[14] = sp[8] + sp[11];
    sp[15] = sp[12] + sp[9];
    sp[16] = sp[13] * w[1][0];
    sp[17] = sp[14] * w[1][0];
    sp[18] = sp[15] * w[1][0];
    sp[19] = std::abs(sp[2]);
    sp[20] = sp[16] * sp[19];
    sp[21] = sp[17] * sp[19];
    sp[22] = sp[6] * sp[19];
    sp[23] = sp[18] * sp[19];
    sp[24] = sp[5] * sp[19];
    sp[25] = sp[3] * sp[19];
    sp[26] = sp[4] * sp[19];
    sp[27] = -1 * sp[3] * sp[19];
    sp[28] = -1 * sp[4] * sp[19];
    sp[29] = -1 * sp[5] * sp[19];
    sp[30] = -1 * sp[6] * sp[19];
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][6] = {};
    alignas(32) double BF2[5][6] = {};
    alignas(32) double BF3[5][6] = {};
    alignas(32) double BF4[6][6] = {};
    alignas(32) double BF5[6][6] = {};
    for (int iq = 0; iq < 7; ++iq)
    {
        // Quadrature loop body setup (num_points=7)
        // Unstructured varying computations for num_points=7
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c1 += w[0][ic + 6] * FE24_C0_Q7[0][iq][ic];
        const double w0_d1_c0 = w[0][0] * FE24_C0_D01_Q7[0][iq][0] + w[0][2] * FE24_C0_D01_Q7[0][iq][1] + w[0][3] * FE24_C0_D01_Q7[0][iq][2] + w[0][4] * FE24_C0_D01_Q7[0][iq][3] + w[0][5] * FE24_C0_D01_Q7[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE24_C0_D10_Q7[0][iq][0] + w[0][1] * FE24_C0_D10_Q7[0][iq][1] + w[0][3] * FE24_C0_D10_Q7[0][iq][2] + w[0][4] * FE24_C0_D10_Q7[0][iq][3] + w[0][5] * FE24_C0_D10_Q7[0][iq][4];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c0 += w[0][ic] * FE24_C0_Q7[0][iq][ic];
        const double w0_d1_c1 = w[0][6] * FE24_C0_D01_Q7[0][iq][0] + w[0][8] * FE24_C0_D01_Q7[0][iq][1] + w[0][9] * FE24_C0_D01_Q7[0][iq][2] + w[0][10] * FE24_C0_D01_Q7[0][iq][3] + w[0][11] * FE24_C0_D01_Q7[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE24_C0_D10_Q7[0][iq][0] + w[0][7] * FE24_C0_D10_Q7[0][iq][1] + w[0][9] * FE24_C0_D10_Q7[0][iq][2] + w[0][10] * FE24_C0_D10_Q7[0][iq][3] + w[0][11] * FE24_C0_D10_Q7[0][iq][4];
        alignas(32) double sv7[24];
        sv7[0] = w0_c1 * sp[3];
        sv7[1] = w0_c1 * sp[4];
        sv7[2] = w0_d1_c0 * sp[3];
        sv7[3] = w0_d0_c0 * sp[4];
        sv7[4] = sv7[2] + sv7[3];
        sv7[5] = w0_c0 * sp[6];
        sv7[6] = w0_c0 * sp[5];
        sv7[7] = w0_d0_c0 * sp[5];
        sv7[8] = w0_d1_c0 * sp[6];
        sv7[9] = sv7[7] + sv7[8];
        sv7[10] = sv7[0] + sv7[5];
        sv7[11] = sv7[6] + sv7[1];
        sv7[12] = w0_d1_c1 * sp[3];
        sv7[13] = w0_d0_c1 * sp[4];
        sv7[14] = sv7[12] + sv7[13];
        sv7[15] = w0_d0_c1 * sp[5];
        sv7[16] = w0_d1_c1 * sp[6];
        sv7[17] = sv7[15] + sv7[16];
        sv7[18] = sv7[10] * sp[19];
        sv7[19] = sv7[11] * sp[19];
        sv7[20] = sv7[4] * sp[19];
        sv7[21] = sv7[9] * sp[19];
        sv7[22] = sv7[14] * sp[19];
        sv7[23] = sv7[17] * sp[19];
        const double fw0 = sv7[21] * weights7[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE24_C0_Q7[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE24_C0_Q7[0][iq][j];
        const double fw1 = sv7[23] * weights7[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE24_C0_Q7[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF1[i][j] += TF1[i] * FE24_C0_Q7[0][iq][j];
        const double fw2 = sv7[19] * weights7[iq];
        alignas(32) double TF2[5];
        for (int i = 0; i < 5; ++i)
            TF2[i] = fw2 * FE24_C0_D10_Q7[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF2[i][j] += TF2[i] * FE24_C0_Q7[0][iq][j];
        const double fw3 = sv7[18] * weights7[iq];
        alignas(32) double TF3[5];
        for (int i = 0; i < 5; ++i)
            TF3[i] = fw3 * FE24_C0_D01_Q7[0][iq][i];
        for (int i = 0; i < 5; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE24_C0_Q7[0][iq][j];
        const double fw4 = sv7[20] * weights7[iq];
        alignas(32) double TF4[6];
        for (int i = 0; i < 6; ++i)
            TF4[i] = fw4 * FE24_C0_Q7[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF4[i][j] += TF4[i] * FE24_C0_Q7[0][iq][j];
        const double fw5 = sv7[22] * weights7[iq];
        alignas(32) double TF5[6];
        for (int i = 0; i < 6; ++i)
            TF5[i] = fw5 * FE24_C0_Q7[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF5[i][j] += TF5[i] * FE24_C0_Q7[0][iq][j];
    }
    A[0] = sp[23] * PI0[0][0][0] + sp[20] * PI1[0][0][0] + sp[20] * PI1[0][0][0] + sp[21] * PI3[0][0][0];
    A[1] = sp[23] * PI0[0][0][1] + sp[20] * PI1[0][1][0];
    A[2] = sp[20] * PI1[0][0][1] + sp[21] * PI3[0][0][1];
    A[3] = sp[23] * PI0[0][0][2] + sp[20] * PI1[0][0][2] + sp[20] * PI1[0][2][0] + sp[21] * PI3[0][0][2];
    A[4] = sp[23] * PI0[0][0][3] + sp[20] * PI1[0][0][3] + sp[20] * PI1[0][3][0] + sp[21] * PI3[0][0][3];
    A[5] = sp[23] * PI0[0][0][4] + sp[20] * PI1[0][0][4] + sp[20] * PI1[0][4][0] + sp[21] * PI3[0][0][4];
    std::fill(A + 6, A + 12, 0.0);
    A[12] = sp[24] * PI2[0][0][0] + sp[22] * PI4[0][0][0];
    A[13] = sp[24] * PI2[0][0][1] + sp[22] * PI4[0][0][1];
    A[14] = sp[24] * PI2[0][0][2] + sp[22] * PI4[0][0][2];
    A[15] = sp[23] * PI0[0][1][0] + sp[20] * PI1[0][1][0];
    A[16] = sp[23] * PI0[0][1][1];
    A[17] = sp[20] * PI1[0][1][1];
    A[18] = sp[23] * PI0[0][1][2] + sp[20] * PI1[0][1][2];
    A[19] = sp[23] * PI0[0][1][3] + sp[20] * PI1[0][1][3];
    A[20] = sp[23] * PI0[0][1][4] + sp[20] * PI1[0][1][4];
    std::fill(A + 21, A + 27, 0.0);
    A[27] = sp[24] * PI2[0][1][0];
    A[28] = sp[24] * PI2[0][1][1];
    A[29] = sp[24] * PI2[0][1][2];
    A[30] = sp[20] * PI1[0][0][1] + sp[21] * PI3[0][1][0];
    A[31] = sp[20] * PI1[0][1][1];
    A[32] = sp[21] * PI3[0][1][1];
    A[33] = sp[20] * PI1[0][2][1] + sp[21] * PI3[0][1][2];
    A[34] = sp[20] * PI1[0][3][1] + sp[21] * PI3[0][1][3];
    A[35] = sp[20] * PI1[0][4][1] + sp[21] * PI3[0][1][4];
    std::fill(A + 36, A + 42, 0.0);
    A[42] = sp[22] * PI4[0][1][0];
    A[43] = sp[22] * PI4[0][1][1];
    A[44] = sp[22] * PI4[0][1][2];
    A[45] = sp[23] * PI0[0][2][0] + sp[20] * PI1[0][2][0] + sp[20] * PI1[0][0][2] + sp[21] * PI3[0][2][0];
    A[46] = sp[23] * PI0[0][2][1] + sp[20] * PI1[0][1][2];
    A[47] = sp[20] * PI1[0][2][1] + sp[21] * PI3[0][2][1];
    A[48] = sp[23] * PI0[0][2][2] + sp[20] * PI1[0][2][2] + sp[20] * PI1[0][2][2] + sp[21] * PI3[0][2][2];
    A[49] = sp[23] * PI0[0][2][3] + sp[20] * PI1[0][2][3] + sp[20] * PI1[0][3][2] + sp[21] * PI3[0][2][3];
    A[50] = sp[23] * PI0[0][2][4] + sp[20] * PI1[0][2][4] + sp[20] * PI1[0][4][2] + sp[21] * PI3[0][2][4];
    std::fill(A + 51, A + 57, 0.0);
    A[57] = sp[24] * PI2[0][2][0] + sp[22] * PI4[0][2][0];
    A[58] = sp[24] * PI2[0][2][1] + sp[22] * PI4[0][2][1];
    A[59] = sp[24] * PI2[0][2][2] + sp[22] * PI4[0][2][2];
    A[60] = sp[23] * PI0[0][3][0] + sp[20] * PI1[0][3][0] + sp[20] * PI1[0][0][3] + sp[21] * PI3[0][3][0];
    A[61] = sp[23] * PI0[0][3][1] + sp[20] * PI1[0][1][3];
    A[62] = sp[20] * PI1[0][3][1] + sp[21] * PI3[0][3][1];
    A[63] = sp[23] * PI0[0][3][2] + sp[20] * PI1[0][3][2] + sp[20] * PI1[0][2][3] + sp[21] * PI3[0][3][2];
    A[64] = sp[23] * PI0[0][3][3] + sp[20] * PI1[0][3][3] + sp[20] * PI1[0][3][3] + sp[21] * PI3[0][3][3];
    A[65] = sp[23] * PI0[0][3][4] + sp[20] * PI1[0][3][4] + sp[20] * PI1[0][4][3] + sp[21] * PI3[0][3][4];
    std::fill(A + 66, A + 72, 0.0);
    A[72] = sp[24] * PI2[0][3][0] + sp[22] * PI4[0][3][0];
    A[73] = sp[24] * PI2[0][3][1] + sp[22] * PI4[0][3][1];
    A[74] = sp[24] * PI2[0][3][2] + sp[22] * PI4[0][3][2];
    A[75] = sp[23] * PI0[0][4][0] + sp[20] * PI1[0][4][0] + sp[20] * PI1[0][0][4] + sp[21] * PI3[0][4][0];
    A[76] = sp[23] * PI0[0][4][1] + sp[20] * PI1[0][1][4];
    A[77] = sp[20] * PI1[0][4][1] + sp[21] * PI3[0][4][1];
    A[78] = sp[23] * PI0[0][4][2] + sp[20] * PI1[0][4][2] + sp[20] * PI1[0][2][4] + sp[21] * PI3[0][4][2];
    A[79] = sp[23] * PI0[0][4][3] + sp[20] * PI1[0][4][3] + sp[20] * PI1[0][3][4] + sp[21] * PI3[0][4][3];
    A[80] = sp[23] * PI0[0][4][4] + sp[20] * PI1[0][4][4] + sp[20] * PI1[0][4][4] + sp[21] * PI3[0][4][4];
    std::fill(A + 81, A + 87, 0.0);
    A[87] = sp[24] * PI2[0][4][0] + sp[22] * PI4[0][4][0];
    A[88] = sp[24] * PI2[0][4][1] + sp[22] * PI4[0][4][1];
    A[89] = sp[24] * PI2[0][4][2] + sp[22] * PI4[0][4][2];
    std::fill(A + 90, A + 96, 0.0);
    A[96] = sp[23] * PI0[0][0][0] + sp[20] * PI1[0][0][0] + sp[20] * PI1[0][0][0] + sp[21] * PI3[0][0][0];
    A[97] = sp[23] * PI0[0][0][1] + sp[20] * PI1[0][1][0];
    A[98] = sp[20] * PI1[0][0][1] + sp[21] * PI3[0][0][1];
    A[99] = sp[23] * PI0[0][0][2] + sp[20] * PI1[0][0][2] + sp[20] * PI1[0][2][0] + sp[21] * PI3[0][0][2];
    A[100] = sp[23] * PI0[0][0][3] + sp[20] * PI1[0][0][3] + sp[20] * PI1[0][3][0] + sp[21] * PI3[0][0][3];
    A[101] = sp[23] * PI0[0][0][4] + sp[20] * PI1[0][0][4] + sp[20] * PI1[0][4][0] + sp[21] * PI3[0][0][4];
    A[102] = sp[26] * PI2[0][0][0] + sp[25] * PI4[0][0][0];
    A[103] = sp[26] * PI2[0][0][1] + sp[25] * PI4[0][0][1];
    A[104] = sp[26] * PI2[0][0][2] + sp[25] * PI4[0][0][2];
    std::fill(A + 105, A + 111, 0.0);
    A[111] = sp[23] * PI0[0][1][0] + sp[20] * PI1[0][1][0];
    A[112] = sp[23] * PI0[0][1][1];
    A[113] = sp[20] * PI1[0][1][1];
    A[114] = sp[23] * PI0[0][1][2] + sp[20] * PI1[0][1][2];
    A[115] = sp[23] * PI0[0][1][3] + sp[20] * PI1[0][1][3];
    A[116] = sp[23] * PI0[0][1][4] + sp[20] * PI1[0][1][4];
    A[117] = sp[26] * PI2[0][1][0];
    A[118] = sp[26] * PI2[0][1][1];
    A[119] = sp[26] * PI2[0][1][2];
    std::fill(A + 120, A + 126, 0.0);
    A[126] = sp[20] * PI1[0][0][1] + sp[21] * PI3[0][1][0];
    A[127] = sp[20] * PI1[0][1][1];
    A[128] = sp[21] * PI3[0][1][1];
    A[129] = sp[20] * PI1[0][2][1] + sp[21] * PI3[0][1][2];
    A[130] = sp[20] * PI1[0][3][1] + sp[21] * PI3[0][1][3];
    A[131] = sp[20] * PI1[0][4][1] + sp[21] * PI3[0][1][4];
    A[132] = sp[25] * PI4[0][1][0];
    A[133] = sp[25] * PI4[0][1][1];
    A[134] = sp[25] * PI4[0][1][2];
    std::fill(A + 135, A + 141, 0.0);
    A[141] = sp[23] * PI0[0][2][0] + sp[20] * PI1[0][2][0] + sp[20] * PI1[0][0][2] + sp[21] * PI3[0][2][0];
    A[142] = sp[23] * PI0[0][2][1] + sp[20] * PI1[0][1][2];
    A[143] = sp[20] * PI1[0][2][1] + sp[21] * PI3[0][2][1];
    A[144] = sp[23] * PI0[0][2][2] + sp[20] * PI1[0][2][2] + sp[20] * PI1[0][2][2] + sp[21] * PI3[0][2][2];
    A[145] = sp[23] * PI0[0][2][3] + sp[20] * PI1[0][2][3] + sp[20] * PI1[0][3][2] + sp[21] * PI3[0][2][3];
    A[146] = sp[23] * PI0[0][2][4] + sp[20] * PI1[0][2][4] + sp[20] * PI1[0][4][2] + sp[21] * PI3[0][2][4];
    A[147] = sp[26] * PI2[0][2][0] + sp[25] * PI4[0][2][0];
    A[148] = sp[26] * PI2[0][2][1] + sp[25] * PI4[0][2][1];
    A[149] = sp[26] * PI2[0][2][2] + sp[25] * PI4[0][2][2];
    std::fill(A + 150, A + 156, 0.0);
    A[156] = sp[23] * PI0[0][3][0] + sp[20] * PI1[0][3][0] + sp[20] * PI1[0][0][3] + sp[21] * PI3[0][3][0];
    A[157] = sp[23] * PI0[0][3][1] + sp[20] * PI1[0][1][3];
    A[158] = sp[20] * PI1[0][3][1] + sp[21] * PI3[0][3][1];
    A[159] = sp[23] * PI0[0][3][2] + sp[20] * PI1[0][3][2] + sp[20] * PI1[0][2][3] + sp[21] * PI3[0][3][2];
    A[160] = sp[23] * PI0[0][3][3] + sp[20] * PI1[0][3][3] + sp[20] * PI1[0][3][3] + sp[21] * PI3[0][3][3];
    A[161] = sp[23] * PI0[0][3][4] + sp[20] * PI1[0][3][4] + sp[20] * PI1[0][4][3] + sp[21] * PI3[0][3][4];
    A[162] = sp[26] * PI2[0][3][0] + sp[25] * PI4[0][3][0];
    A[163] = sp[26] * PI2[0][3][1] + sp[25] * PI4[0][3][1];
    A[164] = sp[26] * PI2[0][3][2] + sp[25] * PI4[0][3][2];
    std::fill(A + 165, A + 171, 0.0);
    A[171] = sp[23] * PI0[0][4][0] + sp[20] * PI1[0][4][0] + sp[20] * PI1[0][0][4] + sp[21] * PI3[0][4][0];
    A[172] = sp[23] * PI0[0][4][1] + sp[20] * PI1[0][1][4];
    A[173] = sp[20] * PI1[0][4][1] + sp[21] * PI3[0][4][1];
    A[174] = sp[23] * PI0[0][4][2] + sp[20] * PI1[0][4][2] + sp[20] * PI1[0][2][4] + sp[21] * PI3[0][4][2];
    A[175] = sp[23] * PI0[0][4][3] + sp[20] * PI1[0][4][3] + sp[20] * PI1[0][3][4] + sp[21] * PI3[0][4][3];
    A[176] = sp[23] * PI0[0][4][4] + sp[20] * PI1[0][4][4] + sp[20] * PI1[0][4][4] + sp[21] * PI3[0][4][4];
    A[177] = sp[26] * PI2[0][4][0] + sp[25] * PI4[0][4][0];
    A[178] = sp[26] * PI2[0][4][1] + sp[25] * PI4[0][4][1];
    A[179] = sp[26] * PI2[0][4][2] + sp[25] * PI4[0][4][2];
    A[180] = sp[29] * PI2[0][0][0] + sp[30] * PI4[0][0][0];
    A[181] = sp[29] * PI2[0][1][0];
    A[182] = sp[30] * PI4[0][1][0];
    A[183] = sp[29] * PI2[0][2][0] + sp[30] * PI4[0][2][0];
    A[184] = sp[29] * PI2[0][3][0] + sp[30] * PI4[0][3][0];
    A[185] = sp[29] * PI2[0][4][0] + sp[30] * PI4[0][4][0];
    A[186] = sp[28] * PI2[0][0][0] + sp[27] * PI4[0][0][0];
    A[187] = sp[28] * PI2[0][1][0];
    A[188] = sp[27] * PI4[0][1][0];
    A[189] = sp[28] * PI2[0][2][0] + sp[27] * PI4[0][2][0];
    A[190] = sp[28] * PI2[0][3][0] + sp[27] * PI4[0][3][0];
    A[191] = sp[28] * PI2[0][4][0] + sp[27] * PI4[0][4][0];
    std::fill(A + 192, A + 195, 0.0);
    A[195] = sp[29] * PI2[0][0][1] + sp[30] * PI4[0][0][1];
    A[196] = sp[29] * PI2[0][1][1];
    A[197] = sp[30] * PI4[0][1][1];
    A[198] = sp[29] * PI2[0][2][1] + sp[30] * PI4[0][2][1];
    A[199] = sp[29] * PI2[0][3][1] + sp[30] * PI4[0][3][1];
    A[200] = sp[29] * PI2[0][4][1] + sp[30] * PI4[0][4][1];
    A[201] = sp[28] * PI2[0][0][1] + sp[27] * PI4[0][0][1];
    A[202] = sp[28] * PI2[0][1][1];
    A[203] = sp[27] * PI4[0][1][1];
    A[204] = sp[28] * PI2[0][2][1] + sp[27] * PI4[0][2][1];
    A[205] = sp[28] * PI2[0][3][1] + sp[27] * PI4[0][3][1];
    A[206] = sp[28] * PI2[0][4][1] + sp[27] * PI4[0][4][1];
    std::fill(A + 207, A + 210, 0.0);
    A[210] = sp[29] * PI2[0][0][2] + sp[30] * PI4[0][0][2];
    A[211] = sp[29] * PI2[0][1][2];
    A[212] = sp[30] * PI4[0][1][2];
    A[213] = sp[29] * PI2[0][2][2] + sp[30] * PI4[0][2][2];
    A[214] = sp[29] * PI2[0][3][2] + sp[30] * PI4[0][3][2];
    A[215] = sp[29] * PI2[0][4][2] + sp[30] * PI4[0][4][2];
    A[216] = sp[28] * PI2[0][0][2] + sp[27] * PI4[0][0][2];
    A[217] = sp[28] * PI2[0][1][2];
    A[218] = sp[27] * PI4[0][1][2];
    A[219] = sp[28] * PI2[0][2][2] + sp[27] * PI4[0][2][2];
    A[220] = sp[28] * PI2[0][3][2] + sp[27] * PI4[0][3][2];
    A[221] = sp[28] * PI2[0][4][2] + sp[27] * PI4[0][4][2];
    std::fill(A + 222, A + 225, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * i + (j + 6)] += BF1[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM0[i] + j] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM1[i] + j] += BF3[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * (i + 6) + j] += BF4[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * (i + 6) + (j + 6)] += BF5[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM2[i] + (j + 6)] += BF2[i][j];
    for (int i = 0; i < 5; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * DM3[i] + (j + 6)] += BF3[i][j];
  }

};


class adaptivenavierstokes_exterior_facet_integral_1_0: public ufc::exterior_facet_integral
{
public:

  adaptivenavierstokes_exterior_facet_integral_1_0() : ufc::exterior_facet_integral()
  {

  }

  ~adaptivenavierstokes_exterior_facet_integral_1_0() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_F_Q2[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[3][6] =
        { { 0.0, 0.1666666666666665, 0.1666666666666667, 0.6666666666666667, 0.0, 0.0 },
          { 0.1666666666666666, 0.0, 0.1666666666666667, 0.0, 0.6666666666666666, 0.0 },
          { 0.1666666666666667, 0.1666666666666666, 0.0, 0.0, 0.0, 0.6666666666666666 } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q2[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q2[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q2[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q2[0][0][1];
    alignas(32) double sp[10];
    sp[0] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[1] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[2] = sp[0] + sp[1];
    sp[3] = sp[2] * sp[2];
    sp[4] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[5] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[6] = sp[4] + sp[5];
    sp[7] = sp[6] * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = std::sqrt(sp[8]);
    A[0] = sp[9] * PI0[facet][0];
    A[1] = sp[9] * PI0[facet][1];
    A[2] = sp[9] * PI0[facet][2];
    A[3] = sp[9] * PI0[facet][3];
    A[4] = sp[9] * PI0[facet][4];
    A[5] = sp[9] * PI0[facet][5];
    std::fill(A + 6, A + 15, 0.0);
  }

};


class adaptivenavierstokes_cell_integral_2_otherwise: public ufc::cell_integral
{
public:

  adaptivenavierstokes_cell_integral_2_otherwise() : ufc::cell_integral()
  {

  }

  ~adaptivenavierstokes_cell_integral_2_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights12[12] = { 0.0254224531851035, 0.0254224531851035, 0.0254224531851035, 0.0583931378631895, 0.0583931378631895, 0.0583931378631895, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE11_C0_D01_Q12[1][12][9] =
        { { { -0.4859318901948577, 0.4859318901948596, 6.375926430355904, -2.443727560779426, -0.05373302061834417, 0.05373302061836552, 2.443727560779382, -6.375926430355864, 0.0 },
            { -0.4859318901948539, 3.443727560779402, -0.2301675445934109, 1.20457074358533, 2.213560016186017, -5.17135568677056, 0.1764345239750154, 0.2301675445933979, -1.381005267560347 },
            { -3.443727560779414, 0.4859318901948607, -0.2301675445933737, -0.1764345239750403, 5.171355686770585, -2.213560016186019, -1.204570743585311, 0.2301675445933918, 1.381005267560323 },
            { 0.4046383087464545, -0.4046383087464515, 1.137866058475982, 1.118553234985808, -0.8389423977917265, 0.8389423977917395, -1.118553234985848, -1.137866058475965, 0.0 },
            { 0.4046383087464552, -0.1185532349858289, -0.2828479554773639, 2.253182175178526, -1.401401190463191, 1.115316116702577, -0.5560944423143853, 0.282847955477369, -1.697087732864162 },
            { 0.1185532349858192, -0.404638308746451, -0.2828479554773566, 0.5560944423143577, -1.115316116702545, 1.401401190463188, -2.253182175178544, 0.2828479554773658, 1.697087732864163 },
            { -0.559823901757267, -0.4928703671579099, 2.605067077688829, 2.469321742622999, 0.7502328507603978, 0.3024614181548, 1.950933405908045, -2.605067077688802, -4.420255148531088 },
            { 0.4928703671579081, 0.559823901757271, 2.605067077688833, -1.950933405908084, -0.3024614181547757, -0.7502328507603856, -2.469321742623027, -2.605067077688808, 4.420255148531069 },
            { -0.5598239017572675, 0.7408058316425231, -0.09628433750588582, 3.936996959017272, 1.749910031967003, -1.930891961852245, 0.9512562247014404, 0.09628433750589269, -4.888253183718736 },
            { -0.7408058316425333, 0.5598239017572713, -0.09628433750586883, -0.9512562247014683, 1.930891961852276, -1.749910031967001, -3.936996959017277, 0.09628433750588375, 4.888253183718717 },
            { 0.4928703671579114, 0.740805831642524, -0.201023373941074, 0.67417511583656, -2.565606080128892, 1.331929881328466, -0.206177080648918, 0.2010233739410718, -0.4679980351876555 },
            { -0.7408058316425314, -0.4928703671579089, -0.2010233739410617, 0.2061770806488998, -1.331929881328445, 2.565606080128896, -0.6741751158365626, 0.2010233739410698, 0.4679980351876422 } } };
    alignas(32) static const double FE11_C0_D10_Q12[1][12][9] =
        { { { -0.4859318901948549, 3.443727560779412, 1.204570743585318, -0.2301675445933882, 0.1764345239750198, 0.2301675445933878, 2.213560016186026, -5.171355686770584, -1.381005267560336 },
            { -0.4859318901948543, 0.4859318901948559, -2.44372756077941, 6.375926430355896, 2.443727560779421, -6.375926430355896, -0.05373302061837206, 0.0537330206183714, 0.0 },
            { -3.44372756077941, 0.4859318901948532, -0.1764345239750211, -0.2301675445933871, -1.204570743585311, 0.2301675445933872, 5.171355686770584, -2.213560016186028, 1.381005267560333 },
            { 0.4046383087464577, -0.1185532349858284, 2.253182175178534, -0.2828479554773607, -0.5560944423143758, 0.2828479554773609, -1.401401190463192, 1.115316116702563, -1.697087732864158 },
            { 0.4046383087464577, -0.4046383087464551, 1.11855323498582, 1.137866058475977, -1.118553234985833, -1.137866058475977, -0.8389423977917372, 0.8389423977917354, 0.0 },
            { 0.1185532349858235, -0.4046383087464543, 0.5560944423143693, -0.2828479554773607, -2.253182175178539, 0.2828479554773611, -1.115316116702549, 1.40140119046318, 1.69708773286417 },
            { -0.5598239017572654, 0.7408058316425253, 3.936996959017277, -0.09628433750588089, 0.9512562247014521, 0.09628433750588045, 1.749910031967001, -1.930891961852261, -4.888253183718729 },
            { 0.4928703671579124, 0.7408058316425288, 0.674175115836559, -0.201023373941064, -0.2061770806489118, 0.2010233739410641, -2.565606080128886, 1.331929881328446, -0.4679980351876468 },
            { -0.5598239017572672, -0.4928703671579132, 2.469321742623011, 2.605067077688823, 1.95093340590807, -2.605067077688823, 0.7502328507603857, 0.3024614181547948, -4.420255148531081 },
            { -0.7408058316425288, -0.4928703671579118, 0.20617708064891, -0.2010233739410639, -0.6741751158365595, 0.2010233739410642, -1.331929881328443, 2.565606080128885, 0.4679980351876493 },
            { 0.492870367157914, 0.5598239017572656, -1.95093340590807, 2.605067077688824, -2.46932174262301, -2.605067077688823, -0.3024614181547962, -0.7502328507603828, 4.420255148531079 },
            { -0.7408058316425268, 0.5598239017572658, -0.9512562247014543, -0.09628433750588053, -3.936996959017276, 0.09628433750588108, 1.930891961852266, -1.749910031967004, 4.888253183718731 } } };
    alignas(32) static const double FE11_C0_Q12[1][12][10] =
        { { { 0.04630799539086661, 0.4402689933985611, 0.04630799539086661, 0.4022509149614734, -0.2011254574807368, -0.01452104355632553, -0.01452104355632583, -0.2011254574807369, 0.4022509149614739, 0.09390618797088357 },
            { 0.04630799539086661, 0.04630799539086666, 0.4402689933985613, -0.2011254574807368, 0.4022509149614734, -0.2011254574807368, 0.4022509149614736, -0.01452104355632572, -0.01452104355632565, 0.09390618797088329 },
            { 0.440268993398561, 0.04630799539086662, 0.04630799539086667, -0.01452104355632578, -0.01452104355632584, 0.4022509149614736, -0.2011254574807369, 0.4022509149614739, -0.2011254574807369, 0.0939061879708836 },
            { 0.03935168581745836, -0.06267372205239982, 0.03935168581745879, 0.2836549261579286, -0.1418274630789651, -0.07051024619919703, -0.0705102461991982, -0.1418274630789641, 0.28365492615793, 0.8413359166579487 },
            { 0.03935168581745833, 0.03935168581745872, -0.0626737220523997, -0.1418274630789651, 0.2836549261579287, -0.141827463078964, 0.2836549261579298, -0.0705102461991973, -0.07051024619919795, 0.8413359166579486 },
            { -0.06267372205239997, 0.03935168581745868, 0.03935168581745885, -0.07051024619919777, -0.07051024619919785, 0.2836549261579309, -0.1418274630789655, 0.2836549261579308, -0.1418274630789653, 0.841335916657947 },
            { 0.04111072846643508, -0.02619322659935551, 0.01143582606537984, 0.8084889526681455, -0.0612852214487411, -0.0623880968176901, -0.005117035916025292, -0.127951879895303, 0.1384464196928618, 0.2834535337842932 },
            { 0.01143582606537992, -0.02619322659935537, 0.04111072846643508, 0.1384464196928613, -0.1279518798953029, -0.00511703591602506, -0.06238809681769038, -0.06128522144874117, 0.8084889526681459, 0.2834535337842929 },
            { 0.04111072846643509, 0.01143582606537994, -0.02619322659935546, -0.06128522144874136, 0.8084889526681459, -0.1279518798953029, 0.1384464196928617, -0.06238809681769037, -0.005117035916025124, 0.2834535337842929 },
            { -0.02619322659935549, 0.01143582606537983, 0.0411107284664351, -0.00511703591602527, -0.06238809681769038, 0.1384464196928616, -0.1279518798953029, 0.8084889526681459, -0.06128522144874113, 0.2834535337842929 },
            { 0.01143582606537985, 0.04111072846643507, -0.02619322659935533, -0.1279518798953029, 0.1384464196928616, -0.06128522144874132, 0.8084889526681459, -0.005117035916025174, -0.06238809681769036, 0.2834535337842928 },
            { -0.02619322659935557, 0.04111072846643511, 0.01143582606538002, -0.06238809681769043, -0.005117035916025222, 0.8084889526681455, -0.06128522144874135, 0.1384464196928618, -0.1279518798953031, 0.2834535337842932 } } };
    alignas(32) static const double FE13_C0_D01_Q12[1][12][5] =
        { { { 0.7476439420339863, -0.7476439420339916, 3.49528788406797, 0.0, -3.495287884067987 },
            { 0.7476439420339863, 2.495287884067986, 0.2523560579659909, -3.242931826101966, -0.252356057966007 },
            { -2.495287884067989, -0.7476439420339913, 0.2523560579659974, 3.242931826101984, -0.2523560579660065 },
            { 0.002853019316351035, -0.002853019316358766, 2.005706038632704, 0.0, -2.005706038632718 },
            { 0.002853019316350776, 1.005706038632718, 0.9971469806836268, -1.008559057949063, -0.9971469806836405 },
            { -1.005706038632725, -0.002853019316358839, 0.9971469806836288, 1.008559057949089, -0.9971469806836407 },
            { 0.7874198006207305, 0.2414098041351415, 2.546009996485582, -1.028829604755864, -2.546009996485597 },
            { -0.2414098041351447, -0.7874198006207355, 2.546009996485584, 1.028829604755887, -2.546009996485599 },
            { 0.7874198006207306, 1.546009996485598, 1.241409804135124, -2.333429797106322, -1.24140980413514 },
            { -1.546009996485601, -0.7874198006207359, 1.241409804135129, 2.333429797106342, -1.241409804135141 },
            { -0.2414098041351456, 1.546009996485598, 0.2125801993792506, -1.304600192350447, -0.2125801993792643 },
            { -1.546009996485601, 0.2414098041351414, 0.2125801993792534, 1.304600192350464, -0.212580199379264 } } };
    alignas(32) static const double FE13_C0_D10_Q12[1][12][5] =
        { { { 0.747643942033995, 2.495287884067984, 0.252356057966007, -0.252356057966007, -3.242931826101979 },
            { 0.7476439420339908, -0.747643942033993, 3.495287884067978, -3.495287884067978, 0.0 },
            { -2.495287884067984, -0.7476439420339949, 0.2523560579660064, -0.2523560579660064, 3.242931826101979 },
            { 0.002853019316357362, 1.005706038632716, 0.9971469806836386, -0.9971469806836386, -1.008559057949073 },
            { 0.002853019316356286, -0.002853019316360505, 2.005706038632714, -2.005706038632714, 0.0 },
            { -1.00570603863272, -0.002853019316361372, 0.9971469806836386, -0.9971469806836386, 1.008559057949081 },
            { 0.787419800620738, 1.546009996485597, 1.241409804135138, -1.241409804135138, -2.333429797106334 },
            { -0.2414098041351384, 1.546009996485595, 0.2125801993792628, -0.2125801993792628, -1.304600192350457 },
            { 0.7874198006207365, 0.2414098041351397, 2.546009996485593, -2.546009996485593, -1.028829604755876 },
            { -1.546009996485596, 0.2414098041351379, 0.2125801993792624, -0.2125801993792624, 1.304600192350458 },
            { -0.2414098041351408, -0.7874198006207368, 2.546009996485593, -2.546009996485593, 1.028829604755878 },
            { -1.546009996485597, -0.7874198006207377, 1.241409804135139, -1.241409804135139, 2.333429797106334 } } };
    alignas(32) static const double FE13_C0_Q12[1][12][6] =
        { { { -0.05512856699248408, 0.6533077030470593, -0.05512856699248416, 0.2205142679699366, 0.01592089499803574, 0.2205142679699365 },
            { -0.05512856699248404, -0.05512856699248419, 0.6533077030470595, 0.2205142679699363, 0.2205142679699363, 0.01592089499803582 },
            { 0.6533077030470594, -0.05512856699248419, -0.05512856699248411, 0.01592089499803579, 0.2205142679699365, 0.2205142679699365 },
            { -0.1249989825350975, 0.001430579517788662, -0.1249989825350976, 0.4999959301403892, 0.2485755252716258, 0.4999959301403912 },
            { -0.1249989825350975, -0.1249989825350977, 0.001430579517788793, 0.4999959301403892, 0.4999959301403912, 0.2485755252716258 },
            { 0.00143057951778983, -0.1249989825350977, -0.1249989825350976, 0.2485755252716249, 0.4999959301403902, 0.4999959301403902 },
            { -0.04749625719880001, 0.1737683636541739, -0.1177151633084292, 0.790160442765823, 0.06597478591860527, 0.1353078281686268 },
            { -0.1177151633084291, 0.173768363654174, -0.04749625719880004, 0.1353078281686268, 0.0659747859186052, 0.7901604427658232 },
            { -0.04749625719879997, -0.1177151633084293, 0.1737683636541741, 0.790160442765823, 0.1353078281686267, 0.06597478591860527 },
            { 0.1737683636541741, -0.1177151633084292, -0.04749625719880001, 0.06597478591860526, 0.1353078281686267, 0.7901604427658232 },
            { -0.1177151633084291, -0.04749625719880016, 0.1737683636541741, 0.1353078281686268, 0.790160442765823, 0.06597478591860527 },
            { 0.1737683636541741, -0.0474962571988002, -0.1177151633084292, 0.06597478591860532, 0.790160442765823, 0.1353078281686268 } } };
    alignas(32) static const double FE22_C2_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE22_C2_Q12[1][12][3] =
        { { { 0.06308901449150196, 0.873821971016996, 0.06308901449150202 },
            { 0.06308901449150202, 0.06308901449150207, 0.8738219710169959 },
            { 0.873821971016996, 0.06308901449150202, 0.06308901449150202 },
            { 0.249286745170911, 0.501426509658179, 0.24928674517091 },
            { 0.249286745170911, 0.24928674517091, 0.501426509658179 },
            { 0.50142650965818, 0.24928674517091, 0.24928674517091 },
            { 0.05314504984481595, 0.636502499121399, 0.310352451033785 },
            { 0.3103524510337849, 0.6365024991213991, 0.05314504984481597 },
            { 0.05314504984481599, 0.3103524510337851, 0.636502499121399 },
            { 0.636502499121399, 0.310352451033785, 0.05314504984481597 },
            { 0.310352451033785, 0.05314504984481604, 0.636502499121399 },
            { 0.636502499121399, 0.053145049844816, 0.310352451033785 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[2] * FE22_C2_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[5] * FE22_C2_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[4] * FE22_C2_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE22_C2_D01_Q12[0][0][0] + coordinate_dofs[3] * FE22_C2_D01_Q12[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0 = {};
    for (int iq = 0; iq < 12; ++iq)
    {
        // Quadrature loop body setup (num_points=12)
        // Unstructured varying computations for num_points=12
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c2 += w[0][ic + 12] * FE22_C2_Q12[0][iq][ic];
        const double w3_d1_c1 = w[3][10] * FE11_C0_D01_Q12[0][iq][0] + w[3][12] * FE11_C0_D01_Q12[0][iq][1] + w[3][13] * FE11_C0_D01_Q12[0][iq][2] + w[3][14] * FE11_C0_D01_Q12[0][iq][3] + w[3][15] * FE11_C0_D01_Q12[0][iq][4] + w[3][16] * FE11_C0_D01_Q12[0][iq][5] + w[3][17] * FE11_C0_D01_Q12[0][iq][6] + w[3][18] * FE11_C0_D01_Q12[0][iq][7] + w[3][19] * FE11_C0_D01_Q12[0][iq][8];
        const double w3_d0_c1 = w[3][10] * FE11_C0_D10_Q12[0][iq][0] + w[3][11] * FE11_C0_D10_Q12[0][iq][1] + w[3][13] * FE11_C0_D10_Q12[0][iq][2] + w[3][14] * FE11_C0_D10_Q12[0][iq][3] + w[3][15] * FE11_C0_D10_Q12[0][iq][4] + w[3][16] * FE11_C0_D10_Q12[0][iq][5] + w[3][17] * FE11_C0_D10_Q12[0][iq][6] + w[3][18] * FE11_C0_D10_Q12[0][iq][7] + w[3][19] * FE11_C0_D10_Q12[0][iq][8];
        const double w3_d0_c0 = w[3][0] * FE11_C0_D10_Q12[0][iq][0] + w[3][1] * FE11_C0_D10_Q12[0][iq][1] + w[3][3] * FE11_C0_D10_Q12[0][iq][2] + w[3][4] * FE11_C0_D10_Q12[0][iq][3] + w[3][5] * FE11_C0_D10_Q12[0][iq][4] + w[3][6] * FE11_C0_D10_Q12[0][iq][5] + w[3][7] * FE11_C0_D10_Q12[0][iq][6] + w[3][8] * FE11_C0_D10_Q12[0][iq][7] + w[3][9] * FE11_C0_D10_Q12[0][iq][8];
        const double w3_d1_c0 = w[3][0] * FE11_C0_D01_Q12[0][iq][0] + w[3][2] * FE11_C0_D01_Q12[0][iq][1] + w[3][3] * FE11_C0_D01_Q12[0][iq][2] + w[3][4] * FE11_C0_D01_Q12[0][iq][3] + w[3][5] * FE11_C0_D01_Q12[0][iq][4] + w[3][6] * FE11_C0_D01_Q12[0][iq][5] + w[3][7] * FE11_C0_D01_Q12[0][iq][6] + w[3][8] * FE11_C0_D01_Q12[0][iq][7] + w[3][9] * FE11_C0_D01_Q12[0][iq][8];
        const double w0_d1_c0 = w[0][0] * FE13_C0_D01_Q12[0][iq][0] + w[0][2] * FE13_C0_D01_Q12[0][iq][1] + w[0][3] * FE13_C0_D01_Q12[0][iq][2] + w[0][4] * FE13_C0_D01_Q12[0][iq][3] + w[0][5] * FE13_C0_D01_Q12[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE13_C0_D10_Q12[0][iq][0] + w[0][1] * FE13_C0_D10_Q12[0][iq][1] + w[0][3] * FE13_C0_D10_Q12[0][iq][2] + w[0][4] * FE13_C0_D10_Q12[0][iq][3] + w[0][5] * FE13_C0_D10_Q12[0][iq][4];
        const double w0_d1_c1 = w[0][6] * FE13_C0_D01_Q12[0][iq][0] + w[0][8] * FE13_C0_D01_Q12[0][iq][1] + w[0][9] * FE13_C0_D01_Q12[0][iq][2] + w[0][10] * FE13_C0_D01_Q12[0][iq][3] + w[0][11] * FE13_C0_D01_Q12[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE13_C0_D10_Q12[0][iq][0] + w[0][7] * FE13_C0_D10_Q12[0][iq][1] + w[0][9] * FE13_C0_D10_Q12[0][iq][2] + w[0][10] * FE13_C0_D10_Q12[0][iq][3] + w[0][11] * FE13_C0_D10_Q12[0][iq][4];
        double w3_c2 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c2 += w[3][ic + 20] * FE13_C0_Q12[0][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w3_c0 += w[3][ic] * FE11_C0_Q12[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c1 += w[0][ic + 6] * FE13_C0_Q12[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c0 += w[0][ic] * FE13_C0_Q12[0][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w3_c1 += w[3][ic + 10] * FE11_C0_Q12[0][iq][ic];
        alignas(32) double sv12[49];
        sv12[0] = w3_d1_c1 * sp[3];
        sv12[1] = w3_d0_c1 * sp[4];
        sv12[2] = sv12[0] + sv12[1];
        sv12[3] = w3_d0_c0 * sp[5];
        sv12[4] = w3_d1_c0 * sp[6];
        sv12[5] = sv12[3] + sv12[4];
        sv12[6] = sv12[2] + sv12[5];
        sv12[7] = w0_c2 * sv12[6];
        sv12[8] = w0_d1_c0 * sp[3];
        sv12[9] = w0_d0_c0 * sp[4];
        sv12[10] = sv12[8] + sv12[9];
        sv12[11] = w3_d1_c0 * sp[3];
        sv12[12] = w3_d0_c0 * sp[4];
        sv12[13] = sv12[11] + sv12[12];
        sv12[14] = sv12[10] * sv12[13];
        sv12[15] = w0_d1_c1 * sp[3];
        sv12[16] = w0_d0_c1 * sp[4];
        sv12[17] = sv12[15] + sv12[16];
        sv12[18] = sv12[17] * sv12[2];
        sv12[19] = sv12[14] + sv12[18];
        sv12[20] = w0_d0_c0 * sp[5];
        sv12[21] = w0_d1_c0 * sp[6];
        sv12[22] = sv12[20] + sv12[21];
        sv12[23] = sv12[22] * sv12[5];
        sv12[24] = w0_d0_c1 * sp[5];
        sv12[25] = w0_d1_c1 * sp[6];
        sv12[26] = sv12[24] + sv12[25];
        sv12[27] = w3_d0_c1 * sp[5];
        sv12[28] = w3_d1_c1 * sp[6];
        sv12[29] = sv12[27] + sv12[28];
        sv12[30] = sv12[26] * sv12[29];
        sv12[31] = sv12[23] + sv12[30];
        sv12[32] = sv12[19] + sv12[31];
        sv12[33] = sv12[32] * w[2][0];
        sv12[34] = -1 * sv12[7] + sv12[33];
        sv12[35] = sv12[17] + sv12[22];
        sv12[36] = w3_c2 * sv12[35];
        sv12[37] = sv12[34] + sv12[36];
        sv12[38] = w0_c1 * sv12[10];
        sv12[39] = w0_c0 * sv12[22];
        sv12[40] = sv12[38] + sv12[39];
        sv12[41] = w3_c0 * sv12[40];
        sv12[42] = w0_c1 * sv12[17];
        sv12[43] = w0_c0 * sv12[26];
        sv12[44] = sv12[42] + sv12[43];
        sv12[45] = w3_c1 * sv12[44];
        sv12[46] = sv12[41] + sv12[45];
        sv12[47] = sv12[37] + sv12[46];
        sv12[48] = -1 * sv12[47] * sp[7];
        const double fw0 = sv12[48] * weights12[iq];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
  }

};


class adaptivenavierstokes_exterior_facet_integral_2_otherwise: public ufc::exterior_facet_integral
{
public:

  adaptivenavierstokes_exterior_facet_integral_2_otherwise() : ufc::exterior_facet_integral()
  {

  }

  ~adaptivenavierstokes_exterior_facet_integral_2_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, false, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 4
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 4
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           4
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights3[3] = { 0.2777777777777777, 0.4444444444444444, 0.2777777777777777 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_F_Q3[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_F_Q3[3][3][3] =
        { { { 0.0, 0.8872983346207417, 0.1127016653792583 },
            { 0.0, 0.5, 0.5 },
            { 0.0, 0.1127016653792584, 0.8872983346207417 } },
          { { 0.8872983346207417, 0.0, 0.1127016653792583 },
            { 0.5, 0.0, 0.5 },
            { 0.1127016653792583, 0.0, 0.8872983346207417 } },
          { { 0.8872983346207417, 0.1127016653792583, 0.0 },
            { 0.5, 0.5, 0.0 },
            { 0.1127016653792582, 0.8872983346207417, 0.0 } } };
    alignas(32) static const double FE6_C0_F_Q3[3][3][9] =
        { { { 0.0, 0.4880140840414081, 0.06198591595859207, 0.7478527517380011, -0.2978527517380011, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.0624999999999999, -0.06249999999999998, 0.5624999999999998, 0.5625000000000001, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.06198591595859219, 0.4880140840414081, -0.2978527517380012, 0.747852751738001, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.488014084041408, 0.0, 0.06198591595859218, 0.0, 0.0, 0.7478527517380013, -0.2978527517380013, 0.0, 0.0 },
            { -0.06250000000000003, 0.0, -0.06249999999999974, 0.0, 0.0, 0.5624999999999999, 0.5624999999999999, 0.0, 0.0 },
            { 0.06198591595859208, 0.0, 0.4880140840414081, 0.0, 0.0, -0.2978527517380012, 0.747852751738001, 0.0, 0.0 } },
          { { 0.4880140840414079, 0.06198591595859203, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7478527517380013, -0.2978527517380012 },
            { -0.06249999999999994, -0.06249999999999991, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5625, 0.5625000000000001 },
            { 0.06198591595859212, 0.4880140840414081, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2978527517380012, 0.7478527517380013 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q3[0][0][1];
    alignas(32) double sp[29];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[20] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] * sp[21];
    sp[23] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[24] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] * sp[25];
    sp[27] = sp[22] + sp[26];
    sp[28] = std::sqrt(sp[27]);
    alignas(32) double BF0 = {};
    for (int iq = 0; iq < 3; ++iq)
    {
        // Quadrature loop body setup (num_points=3)
        // Unstructured varying computations for num_points=3
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 9; ++ic)
            w3_c1 += w[3][ic + 10] * FE6_C0_F_Q3[facet][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 9; ++ic)
            w3_c0 += w[3][ic] * FE6_C0_F_Q3[facet][iq][ic];
        double w1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1 += w[1][ic] * FE3_C0_F_Q3[facet][iq][ic];
        alignas(32) double sv3[5];
        sv3[0] = w3_c1 * sp[17];
        sv3[1] = w3_c0 * sp[18];
        sv3[2] = sv3[0] + sv3[1];
        sv3[3] = sv3[2] * w1;
        sv3[4] = -1 * sv3[3] * sp[28];
        const double fw0 = sv3[4] * weights3[iq];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
  }

};


class adaptivenavierstokes_cell_integral_3_otherwise: public ufc::cell_integral
{
public:

  adaptivenavierstokes_cell_integral_3_otherwise() : ufc::cell_integral()
  {

  }

  ~adaptivenavierstokes_cell_integral_3_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 7
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 7
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           7
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights16[16] = { 0.02356836819338231, 0.03538806789808593, 0.02258404928236992, 0.00542322591052525, 0.04418508852236171, 0.06634421610704974, 0.0423397245217463, 0.01016725956447878, 0.04418508852236171, 0.06634421610704974, 0.0423397245217463, 0.01016725956447878, 0.02356836819338231, 0.03538806789808593, 0.02258404928236992, 0.00542322591052525 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE10_C0_Q16[1][16][6] =
        { { { 0.6623338215556972, -0.0568951398028819, -0.05058241768674707, 0.01495376038439032, 0.2004194672181391, 0.2297705083314023 },
            { 0.2327680980977065, -0.04516801026556796, -0.123558905237647, 0.05560128729990842, 0.7452025504516331, 0.1351549796539668 },
            { -0.08718888411365168, -0.02724026699599276, 0.09756515313616181, 0.06749126293279077, 0.904559295532719, 0.04481343950797246 },
            { -0.09622691173432334, -0.009515458235366349, 0.6197860463314424, 0.03339034173593174, 0.4475178369136223, 0.00504814498869299 },
            { 0.1664374969590003, -0.1175177950974947, -0.05058241768674707, 0.07107520646099134, 0.1442980211415381, 0.7862894882227121 },
            { -0.01501168948198795, -0.1247422941482149, -0.123558905237647, 0.2642728566430071, 0.5365309811085343, 0.4625090511163082 },
            { -0.1233191060525151, -0.09965108377227649, 0.09756515313616178, 0.3207858975905817, 0.6512646608749281, 0.1533544782231196 },
            { -0.07610171508866521, -0.04186758739665786, 0.6197860463314424, 0.1587042571018932, 0.3222039215476609, 0.01727507750432638 },
            { -0.1175177950974946, 0.1664374969590002, -0.0505824176867471, 0.1442980211415381, 0.07107520646099129, 0.7862894882227121 },
            { -0.1247422941482148, -0.01501168948198821, -0.123558905237647, 0.5365309811085343, 0.2642728566430072, 0.4625090511163084 },
            { -0.09965108377227629, -0.1233191060525153, 0.09756515313616175, 0.6512646608749282, 0.3207858975905817, 0.1533544782231196 },
            { -0.04186758739665768, -0.07610171508866539, 0.6197860463314424, 0.3222039215476611, 0.158704257101893, 0.01727507750432638 },
            { -0.05689513980288179, 0.662333821555697, -0.0505824176867471, 0.2004194672181392, 0.01495376038439026, 0.2297705083314023 },
            { -0.04516801026556778, 0.2327680980977061, -0.123558905237647, 0.745202550451633, 0.05560128729990842, 0.135154979653967 },
            { -0.02724026699599255, -0.08718888411365189, 0.09756515313616172, 0.9045592955327191, 0.06749126293279072, 0.04481343950797245 },
            { -0.009515458235366066, -0.09622691173432354, 0.6197860463314424, 0.4475178369136228, 0.03339034173593124, 0.005048144988692935 } } };
    alignas(32) static const double FE12_C0_Q16[1][16][3] =
        { { { 0.877428809330468, 0.06546699455501447, 0.05710419611451763 },
            { 0.6729468631505064, 0.05021012321136976, 0.2768430136381238 },
            { 0.3874974834066941, 0.02891208422438899, 0.5835904323689167 },
            { 0.1300560792168344, 0.009703785126946193, 0.8602401356562195 },
            { 0.6317312516411253, 0.3111645522443571, 0.05710419611451763 },
            { 0.4845083266304333, 0.2386486597314429, 0.2768430136381237 },
            { 0.2789904634965087, 0.1374191041345744, 0.5835904323689167 },
            { 0.09363778443732845, 0.04612207990645211, 0.8602401356562195 },
            { 0.311164552244357, 0.6317312516411253, 0.05710419611451763 },
            { 0.2386486597314429, 0.4845083266304333, 0.2768430136381238 },
            { 0.1374191041345743, 0.2789904634965088, 0.5835904323689167 },
            { 0.046122079906452, 0.09363778443732856, 0.8602401356562195 },
            { 0.06546699455501441, 0.877428809330468, 0.05710419611451763 },
            { 0.05021012321136978, 0.6729468631505063, 0.2768430136381237 },
            { 0.02891208422438894, 0.3874974834066942, 0.5835904323689167 },
            { 0.009703785126946026, 0.1300560792168345, 0.8602401356562195 } } };
    alignas(32) static const double FE14_C0_Q16[1][16][1] =
        { { { 0.08856580614134964 },
            { 0.2525628051603236 },
            { 0.1765306881341727 },
            { 0.02931266427672716 },
            { 0.303077896683211 },
            { 0.8642861969351477 },
            { 0.6040993922005949 },
            { 0.1003098263566056 },
            { 0.3030778966832111 },
            { 0.8642861969351479 },
            { 0.6040993922005951 },
            { 0.1003098263566055 },
            { 0.08856580614134964 },
            { 0.2525628051603239 },
            { 0.1765306881341728 },
            { 0.02931266427672694 } } };
    alignas(32) static const double FE3_C0_D01_Q16[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q16[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q16[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q16[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q16[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q16[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q16[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q16[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q16[0][0][1];
    alignas(32) double sp[4];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = std::abs(sp[2]);
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[3][3] = {};
    for (int iq = 0; iq < 16; ++iq)
    {
        // Quadrature loop body setup (num_points=16)
        // Unstructured varying computations for num_points=16
        double w0 = 0.0;
        for (int ic = 0; ic < 1; ++ic)
            w0 += w[0][ic] * FE14_C0_Q16[0][iq][ic];
        alignas(32) double sv16[1];
        sv16[0] = sp[3] * w0;
        const double fw0 = sv16[0] * weights16[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE10_C0_Q16[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE10_C0_Q16[0][iq][j];
        alignas(32) double TF1[3];
        for (int i = 0; i < 3; ++i)
            TF1[i] = fw0 * FE12_C0_Q16[0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF1[i][j] += TF1[i] * FE12_C0_Q16[0][iq][j];
    }
    std::fill(A, A + 225, 0.0);
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * (i + 6) + (j + 6)] += BF0[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[15 * (i + 12) + (j + 12)] += BF1[i][j];
  }

};


class adaptivenavierstokes_cell_integral_4_otherwise: public ufc::cell_integral
{
public:

  adaptivenavierstokes_cell_integral_4_otherwise() : ufc::cell_integral()
  {

  }

  ~adaptivenavierstokes_cell_integral_4_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 8
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 8
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           8
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights25[25] = { 0.01146508035159253, 0.01980408313204737, 0.0173415064313657, 0.008755499182163834, 0.001865552166877836, 0.02316122192949835, 0.04000728738616045, 0.03503250450337171, 0.01768745211048347, 0.003768701695327616, 0.02752898566446977, 0.04755189705795404, 0.04163896521519497, 0.02102296748732208, 0.004479406797281353, 0.02316122192949835, 0.04000728738616045, 0.03503250450337171, 0.01768745211048347, 0.003768701695327616, 0.01146508035159253, 0.01980408313204737, 0.0173415064313657, 0.008755499182163834, 0.001865552166877837 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE11_C0_D01_Q25[1][25][5] =
        { { { -2.660590197514915, -0.8407605717941248, 0.1801703742792037, 3.501350769309044, -0.1801703742792129 },
            { -2.057461319125128, -0.2079463285055662, 0.1504850093804347, 2.265407647630698, -0.1504850093804445 },
            { -1.142642179232577, 0.7518992409895465, 0.1054585797778727, 0.3907429382430355, -0.1054585797778843 },
            { -0.160999729003176, 1.781857093414547, 0.05714317758227172, -1.620857364411365, -0.05714317758228572 },
            { 0.6243488106648745, 2.605859656804697, 0.01848915386016863, -3.230208467469564, -0.01848915386018458 },
            { -1.954446133584613, -0.8407605717941249, 0.886314438209506, 2.795206705378742, -0.8863144382095164 },
            { -1.467663487436014, -0.207946328505566, 0.740282841069547, 1.675609815941585, -0.7402828410695582 },
            { -0.7293170118814443, 0.7518992409895466, 0.5187837471290048, -0.02258222910809694, -0.5187837471290172 },
            { 0.06296226144766541, 1.781857093414547, 0.2811051680331129, -1.844819354862206, -0.2811051680331271 },
            { 0.6968135890597449, 2.605859656804697, 0.0909539322550386, -3.302673245864435, -0.09095393225505501 },
            { -0.9203802858970668, -0.8407605717941248, 1.920380285897051, 1.761140857691197, -1.920380285897064 },
            { -0.6039731642527882, -0.207946328505566, 1.603973164252772, 0.8119194927583601, -1.603973164252785 },
            { -0.1240503795052329, 0.7518992409895466, 1.124050379505215, -0.6278488614843076, -1.124050379505229 },
            { 0.3909285467072665, 1.781857093414547, 0.6090714532927129, -2.172785640121806, -0.6090714532927279 },
            { 0.8029298284023416, 2.605859656804697, 0.1970701715976356, -3.408789485207031, -0.1970701715976516 },
            { 0.113685561790478, -0.8407605717941246, 2.954446133584595, 0.7270750100036538, -2.954446133584611 },
            { 0.2597171589304371, -0.207946328505566, 2.467663487435996, -0.05177083042486406, -2.467663487436011 },
            { 0.4812162528709783, 0.7518992409895464, 1.729317011881425, -1.233115493860518, -1.72931701188144 },
            { 0.7188948319668672, 1.781857093414547, 0.9370377385523126, -2.500751925381407, -0.9370377385523282 },
            { 0.9090460677449381, 2.605859656804697, 0.3031864109402315, -3.514905724549627, -0.303186410940248 },
            { 0.8198296257207797, -0.8407605717941249, 3.660590197514896, 0.02093094607335319, -3.660590197514914 },
            { 0.8495149906195494, -0.2079463285055661, 3.057461319125108, -0.6415686621139758, -3.057461319125125 },
            { 0.8945414202221106, 0.7518992409895464, 2.142642179232556, -1.64644066121165, -2.142642179232572 },
            { 0.9428568224177086, 1.781857093414547, 1.160999729003154, -2.724713915832248, -1.160999729003169 },
            { 0.9815108461398084, 2.605859656804697, 0.3756511893351019, -3.587370502944498, -0.3756511893351184 } } };
    alignas(32) static const double FE11_C0_D10_Q25[1][25][5] =
        { { { -2.660590197514911, -0.8198296257207881, 0.1592394282058731, -0.1592394282058731, 3.480419823235699 },
            { -2.057461319125123, -0.8495149906195575, 0.7920536714944316, -0.7920536714944316, 2.90697630974468 },
            { -1.142642179232572, -0.8945414202221176, 1.751899240989543, -1.751899240989543, 2.03718359945469 },
            { -0.1609997290031713, -0.9428568224177154, 2.781857093414541, -2.781857093414541, 1.103856551420887 },
            { 0.6243488106648785, -0.9815108461398157, 3.605859656804689, -3.605859656804689, 0.3571620354749371 },
            { -1.954446133584608, -0.1136855617904858, 0.1592394282058734, -0.1592394282058734, 2.068131695375094 },
            { -1.467663487436009, -0.2597171589304441, 0.7920536714944317, -0.7920536714944317, 1.727380646366454 },
            { -0.7293170118814392, -0.4812162528709845, 1.751899240989543, -1.751899240989543, 1.210533264752424 },
            { 0.06296226144767035, -0.718894831966874, 2.781857093414541, -2.781857093414541, 0.6559325705192036 },
            { 0.696813589059749, -0.9090460677449451, 3.605859656804689, -3.605859656804689, 0.2122324786851961 },
            { -0.9203802858970616, 0.9203802858970611, 0.1592394282058737, -0.1592394282058737, 0.0 },
            { -0.6039731642527827, 0.6039731642527827, 0.7920536714944317, -0.7920536714944317, 0.0 },
            { -0.1240503795052273, 0.1240503795052273, 1.751899240989543, -1.751899240989543, 0.0 },
            { 0.3909285467072718, -0.3909285467072727, 2.781857093414541, -2.781857093414541, 0.0 },
            { 0.8029298284023458, -0.8029298284023483, 3.605859656804689, -3.605859656804689, 0.0 },
            { 0.1136855617904851, 1.954446133584608, 0.1592394282058738, -0.1592394282058738, -2.068131695375093 },
            { 0.2597171589304441, 1.467663487436009, 0.7920536714944317, -0.7920536714944317, -1.727380646366454 },
            { 0.4812162528709846, 0.7293170118814389, 1.751899240989543, -1.751899240989543, -1.210533264752423 },
            { 0.7188948319668729, -0.06296226144767168, 2.781857093414541, -2.781857093414541, -0.6559325705192013 },
            { 0.9090460677449427, -0.6968135890597515, 3.605859656804688, -3.605859656804688, -0.2122324786851912 },
            { 0.8198296257207883, 2.660590197514911, 0.1592394282058738, -0.1592394282058738, -3.480419823235699 },
            { 0.8495149906195577, 2.057461319125123, 0.7920536714944316, -0.7920536714944316, -2.90697630974468 },
            { 0.8945414202221178, 1.142642179232572, 1.751899240989542, -1.751899240989542, -2.03718359945469 },
            { 0.9428568224177144, 0.1609997290031697, 2.781857093414541, -2.781857093414541, -1.103856551420884 },
            { 0.9815108461398131, -0.624348810664881, 3.605859656804688, -3.605859656804688, -0.3571620354749321 } } };
    alignas(32) static const double FE11_C0_Q25[1][25][6] =
        { { { 0.7598425248890535, -0.04098492309881475, -0.03664020761455203, 0.007172556844965205, 0.1457275724870763, 0.1648824764922716 },
            { 0.4041433849620109, -0.03479053508908229, -0.1195947905576318, 0.02979805104616393, 0.6054183658163163, 0.1150255238222229 },
            { 0.03820389372017003, -0.02497445593837496, -0.05433094142491831, 0.04618820146717748, 0.9384233018774314, 0.05649000029851418 },
            { -0.1217598859076132, -0.01387762655254642, 0.271876837668966, 0.03974103847438201, 0.8074338328949581, 0.01658580342185335 },
            { -0.07627357032766872, -0.004579557363738284, 0.7238130688702848, 0.01666732349822449, 0.3386363671635526, 0.0017363681593447 },
            { 0.3524824611354782, -0.1233844491300478, -0.036640207614552, 0.03528405108777369, 0.1176160782442677, 0.6546420662770801 },
            { 0.1442545140441037, -0.1165683746696376, -0.1195947905576318, 0.1465859355533682, 0.4886304813091119, 0.4566922343206855 },
            { -0.05851208702254112, -0.09605386474660131, -0.05433094142491831, 0.2272142132082589, 0.7573972901363499, 0.2242853898494517 },
            { -0.1245044692041744, -0.06039877757141526, 0.2718768376689659, 0.1954986014221104, 0.6516762699472298, 0.0658515377372834 },
            { -0.06430635276270864, -0.02170440583968198, 0.7238130688702848, 0.08199177873656345, 0.2733119119252136, 0.006893999070328263 },
            { -0.0191125161665052, -0.01911251616650523, -0.03664020761455203, 0.07645006466602072, 0.07645006466602072, 0.9219651106155208 },
            { -0.07940205210781001, -0.07940205210781014, -0.1195947905576319, 0.31760820843124, 0.31760820843124, 0.6431824779107718 },
            { -0.1230764379180761, -0.1230764379180763, -0.05433094142491832, 0.4923057516723044, 0.4923057516723044, 0.3158723139164616 },
            { -0.1058968589211675, -0.1058968589211677, 0.2718768376689659, 0.4235874356846701, 0.4235874356846701, 0.09274200880402889 },
            { -0.04441296133272214, -0.04441296133272228, 0.7238130688702848, 0.1776518453308887, 0.1776518453308885, 0.009709163133382083 },
            { -0.1233844491300478, 0.3524824611354778, -0.03664020761455203, 0.1176160782442678, 0.03528405108777366, 0.6546420662770803 },
            { -0.1165683746696374, 0.1442545140441034, -0.1195947905576319, 0.4886304813091119, 0.1465859355533682, 0.4566922343206856 },
            { -0.09605386474660114, -0.05851208702254134, -0.05433094142491835, 0.7573972901363499, 0.2272142132082589, 0.2242853898494517 },
            { -0.06039877757141515, -0.1245044692041746, 0.2718768376689659, 0.6516762699472297, 0.1954986014221105, 0.06585153773728342 },
            { -0.02170440583968179, -0.06430635276270875, 0.7238130688702848, 0.2733119119252136, 0.08199177873656334, 0.006893999070328263 },
            { -0.04098492309881464, 0.7598425248890535, -0.036640207614552, 0.1457275724870764, 0.007172556844965149, 0.1648824764922716 },
            { -0.03479053508908211, 0.4041433849620108, -0.1195947905576319, 0.6054183658163163, 0.02979805104616388, 0.1150255238222229 },
            { -0.02497445593837484, 0.03820389372016982, -0.05433094142491835, 0.9384233018774314, 0.04618820146717751, 0.05649000029851429 },
            { -0.01387762655254631, -0.1217598859076134, 0.2718768376689659, 0.8074338328949578, 0.03974103847438221, 0.01658580342185346 },
            { -0.004579557363738116, -0.07627357032766886, 0.7238130688702848, 0.3386363671635526, 0.01666732349822438, 0.0017363681593447 } } };
    alignas(32) static const double FE13_C2_D01_Q25[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE13_C2_Q25[1][25][3] =
        { { { 0.9151475493787276, 0.04504259356980372, 0.03980985705146874 },
            { 0.7643653297812806, 0.03762125234511123, 0.1980134178736082 },
            { 0.5356605448081428, 0.02636464494447097, 0.4379748102473862 },
            { 0.2902499322507926, 0.01428579439557142, 0.695464273353636 },
            { 0.09391279733378001, 0.004622288465046491, 0.9014649142011735 },
            { 0.7386115333961522, 0.2215786095523792, 0.03980985705146874 },
            { 0.6169158718590024, 0.1850707102673894, 0.1980134178736082 },
            { 0.4323292529703597, 0.1296959367822541, 0.4379748102473862 },
            { 0.2342594346380822, 0.07027629200828177, 0.695464273353636 },
            { 0.0757966027350624, 0.0227384830637641, 0.9014649142011735 },
            { 0.4800950714742656, 0.4800950714742657, 0.03980985705146874 },
            { 0.4009932910631958, 0.400993291063196, 0.1980134178736082 },
            { 0.2810125948763069, 0.281012594876307, 0.4379748102473862 },
            { 0.152267863323182, 0.152267863323182, 0.695464273353636 },
            { 0.04926754289941322, 0.04926754289941328, 0.9014649142011735 },
            { 0.2215786095523792, 0.738611533396152, 0.03980985705146874 },
            { 0.1850707102673894, 0.6169158718590023, 0.1980134178736082 },
            { 0.1296959367822541, 0.4323292529703597, 0.4379748102473862 },
            { 0.07027629200828177, 0.2342594346380822, 0.695464273353636 },
            { 0.02273848306376402, 0.07579660273506245, 0.9014649142011734 },
            { 0.04504259356980366, 0.9151475493787276, 0.03980985705146874 },
            { 0.03762125234511117, 0.7643653297812806, 0.1980134178736082 },
            { 0.02636464494447094, 0.5356605448081428, 0.4379748102473862 },
            { 0.01428579439557147, 0.2902499322507925, 0.695464273353636 },
            { 0.004622288465046418, 0.09391279733378005, 0.9014649142011734 } } };
    alignas(32) static const double FE27_C0_D01_Q25[1][25][1] =
        { { { 1.064541957619311 },
            { 0.5752854412383945 },
            { 0.0695371421115184 },
            { -0.1562978366045791 },
            { -0.1007839485374595 },
            { 4.180666602527816 },
            { 2.093217516679388 },
            { -0.0197695576719541 },
            { -0.8751176798725941 },
            { -0.5069100127471073 },
            { 5.707226560159122 },
            { 2.197626318986834 },
            { -1.190925704851947 },
            { -2.233206631444342 },
            { -1.13361310483319 },
            { 3.624925419221476 },
            { -0.2155831671718867 },
            { -3.598505326936575 },
            { -3.954316942417154 },
            { -1.798320911770498 },
            { 0.1292956020350555 },
            { -3.310151683460143 },
            { -5.953049785657706 },
            { -5.338224198943474 },
            { -2.274074993278426 } } };
    alignas(32) static const double FE27_C0_D10_Q25[1][25][1] =
        { { { 0.9352463555842503 },
            { 3.885437124698536 },
            { 6.022586927769226 },
            { 5.181926362338894 },
            { 2.173291044740955 },
            { 0.5557411833063381 },
            { 2.308800683851275 },
            { 3.578735769264621 },
            { 3.079199262544559 },
            { 1.291410899023379 },
            { 0.0 },
            { 0.0 },
            { 0.0 },
            { 0.0 },
            { 0.0 },
            { -0.5557411833063384 },
            { -2.308800683851276 },
            { -3.57873576926462 },
            { -3.07919926254456 },
            { -1.291410899023403 },
            { -0.9352463555842561 },
            { -3.885437124698537 },
            { -6.022586927769222 },
            { -5.181926362338894 },
            { -2.173291044740979 } } };
    alignas(32) static const double FE27_C0_Q25[1][25][1] =
        { { { 0.04430664778128422 },
            { 0.1537420305244986 },
            { 0.1670030808409118 },
            { 0.07786012764216707 },
            { 0.01056560607305085 },
            { 0.1759131477789887 },
            { 0.6104105340806725 },
            { 0.6630616196588787 },
            { 0.3091323949313356 },
            { 0.04194921339294594 },
            { 0.2477472700053069 },
            { 0.859671635180817 },
            { 0.933822788062264 },
            { 0.4353665878951907 },
            { 0.05907917189924641 },
            { 0.1759131477789889 },
            { 0.6104105340806726 },
            { 0.6630616196588789 },
            { 0.3091323949313358 },
            { 0.04194921339294594 },
            { 0.04430664778128424 },
            { 0.1537420305244986 },
            { 0.1670030808409122 },
            { 0.0778601276421679 },
            { 0.01056560607305084 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE13_C2_D01_Q25[0][0][0] + coordinate_dofs[2] * FE13_C2_D01_Q25[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE13_C2_D01_Q25[0][0][0] + coordinate_dofs[5] * FE13_C2_D01_Q25[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE13_C2_D01_Q25[0][0][0] + coordinate_dofs[4] * FE13_C2_D01_Q25[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE13_C2_D01_Q25[0][0][0] + coordinate_dofs[3] * FE13_C2_D01_Q25[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[3] = {};
    for (int iq = 0; iq < 25; ++iq)
    {
        // Quadrature loop body setup (num_points=25)
        // Unstructured varying computations for num_points=25
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c1 += w[0][ic + 6] * FE11_C0_Q25[0][iq][ic];
        const double w0_d1_c0 = w[0][0] * FE11_C0_D01_Q25[0][iq][0] + w[0][2] * FE11_C0_D01_Q25[0][iq][1] + w[0][3] * FE11_C0_D01_Q25[0][iq][2] + w[0][4] * FE11_C0_D01_Q25[0][iq][3] + w[0][5] * FE11_C0_D01_Q25[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE11_C0_D10_Q25[0][iq][0] + w[0][1] * FE11_C0_D10_Q25[0][iq][1] + w[0][3] * FE11_C0_D10_Q25[0][iq][2] + w[0][4] * FE11_C0_D10_Q25[0][iq][3] + w[0][5] * FE11_C0_D10_Q25[0][iq][4];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c0 += w[0][ic] * FE11_C0_Q25[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 1; ++ic)
            w3 += w[3][ic] * FE27_C0_Q25[0][iq][ic];
        const double w0_d1_c1 = w[0][6] * FE11_C0_D01_Q25[0][iq][0] + w[0][8] * FE11_C0_D01_Q25[0][iq][1] + w[0][9] * FE11_C0_D01_Q25[0][iq][2] + w[0][10] * FE11_C0_D01_Q25[0][iq][3] + w[0][11] * FE11_C0_D01_Q25[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE11_C0_D10_Q25[0][iq][0] + w[0][7] * FE11_C0_D10_Q25[0][iq][1] + w[0][9] * FE11_C0_D10_Q25[0][iq][2] + w[0][10] * FE11_C0_D10_Q25[0][iq][3] + w[0][11] * FE11_C0_D10_Q25[0][iq][4];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c2 += w[0][ic + 12] * FE13_C2_Q25[0][iq][ic];
        double w3_d1 = 0.0;
        for (int ic = 0; ic < 1; ++ic)
            w3_d1 += w[3][ic] * FE27_C0_D01_Q25[0][iq][ic];
        double w3_d0 = 0.0;
        for (int ic = 0; ic < 1; ++ic)
            w3_d0 += w[3][ic] * FE27_C0_D10_Q25[0][iq][ic];
        alignas(32) double sv25[77];
        sv25[0] = w0_d1_c0 * sp[3];
        sv25[1] = w0_d0_c0 * sp[4];
        sv25[2] = sv25[0] + sv25[1];
        sv25[3] = w0_c1 * sv25[2];
        sv25[4] = w0_d0_c0 * sp[5];
        sv25[5] = w0_d1_c0 * sp[6];
        sv25[6] = sv25[4] + sv25[5];
        sv25[7] = w0_c0 * sv25[6];
        sv25[8] = sv25[3] + sv25[7];
        sv25[9] = sv25[8] * w3;
        sv25[10] = w0_d1_c1 * sp[3];
        sv25[11] = w0_d0_c1 * sp[4];
        sv25[12] = sv25[10] + sv25[11];
        sv25[13] = w0_c1 * sv25[12];
        sv25[14] = w0_d0_c1 * sp[5];
        sv25[15] = w0_d1_c1 * sp[6];
        sv25[16] = sv25[14] + sv25[15];
        sv25[17] = w0_c0 * sv25[16];
        sv25[18] = sv25[13] + sv25[17];
        sv25[19] = sv25[18] * w3;
        sv25[20] = w3_d1 * sp[3];
        sv25[21] = w3_d0 * sp[4];
        sv25[22] = sv25[20] + sv25[21];
        sv25[23] = sp[3] * w3;
        sv25[24] = sp[4] * w3;
        sv25[25] = w3_d0 * sp[5];
        sv25[26] = w3_d1 * sp[6];
        sv25[27] = sv25[25] + sv25[26];
        sv25[28] = sp[5] * w3;
        sv25[29] = sp[6] * w3;
        sv25[30] = w0_c2 * sv25[27];
        sv25[31] = w0_c2 * sv25[22];
        sv25[32] = w0_c2 * sv25[23];
        sv25[33] = w0_c2 * sv25[24];
        sv25[34] = w0_c2 * sv25[28];
        sv25[35] = w0_c2 * sv25[29];
        sv25[36] = sv25[2] * sv25[22];
        sv25[37] = sv25[2] * sv25[24];
        sv25[38] = sv25[2] * sv25[23];
        sv25[39] = sv25[22] * sv25[12];
        sv25[40] = sv25[12] * sv25[23];
        sv25[41] = sv25[12] * sv25[24];
        sv25[42] = sv25[6] * sv25[27];
        sv25[43] = sv25[6] * sv25[28];
        sv25[44] = sv25[6] * sv25[29];
        sv25[45] = sv25[16] * sv25[27];
        sv25[46] = sv25[16] * sv25[29];
        sv25[47] = sv25[16] * sv25[28];
        sv25[48] = sv25[36] + sv25[42];
        sv25[49] = sv25[39] + sv25[45];
        sv25[50] = sv25[40] + sv25[46];
        sv25[51] = sv25[47] + sv25[41];
        sv25[52] = sv25[43] + sv25[37];
        sv25[53] = sv25[38] + sv25[44];
        sv25[54] = sv25[48] * w[2][0];
        sv25[55] = sv25[49] * w[2][0];
        sv25[56] = sv25[50] * w[2][0];
        sv25[57] = sv25[51] * w[2][0];
        sv25[58] = sv25[52] * w[2][0];
        sv25[59] = sv25[53] * w[2][0];
        sv25[60] = -1 * sv25[30] + sv25[54];
        sv25[61] = -1 * sv25[31] + sv25[55];
        sv25[62] = -1 * sv25[32] + sv25[56];
        sv25[63] = -1 * sv25[33] + sv25[57];
        sv25[64] = -1 * sv25[34] + sv25[58];
        sv25[65] = -1 * sv25[35] + sv25[59];
        sv25[66] = sv25[12] + sv25[6];
        sv25[67] = sv25[66] * w3;
        sv25[68] = sv25[60] + sv25[9];
        sv25[69] = sv25[61] + sv25[19];
        sv25[70] = -1 * sv25[68] * sp[7];
        sv25[71] = -1 * sv25[69] * sp[7];
        sv25[72] = -1 * sv25[62] * sp[7];
        sv25[73] = -1 * sv25[63] * sp[7];
        sv25[74] = -1 * sv25[64] * sp[7];
        sv25[75] = -1 * sv25[65] * sp[7];
        sv25[76] = -1 * sv25[67] * sp[7];
        const double fw0 = sv25[70] * weights25[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE11_C0_Q25[0][iq][i];
        const double fw1 = sv25[74] * weights25[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE11_C0_D10_Q25[0][iq][i];
        const double fw2 = sv25[75] * weights25[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE11_C0_D01_Q25[0][iq][i];
        const double fw3 = sv25[71] * weights25[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE11_C0_Q25[0][iq][i];
        const double fw4 = sv25[73] * weights25[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE11_C0_D10_Q25[0][iq][i];
        const double fw5 = sv25[72] * weights25[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE11_C0_D01_Q25[0][iq][i];
        const double fw6 = sv25[76] * weights25[iq];
        for (int i = 0; i < 3; ++i)
            BF6[i] += fw6 * FE13_C2_Q25[0][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 3; ++i)
        A[i + 12] += BF6[i];
  }

};


class adaptivenavierstokes_exterior_facet_integral_4_otherwise: public ufc::exterior_facet_integral
{
public:

  adaptivenavierstokes_exterior_facet_integral_4_otherwise() : ufc::exterior_facet_integral()
  {

  }

  ~adaptivenavierstokes_exterior_facet_integral_4_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, false, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    std::fill(A, A + 15, 0.0);
  }

};


class adaptivenavierstokes_exterior_facet_integral_5_otherwise: public ufc::exterior_facet_integral
{
public:

  adaptivenavierstokes_exterior_facet_integral_5_otherwise() : ufc::exterior_facet_integral()
  {

  }

  ~adaptivenavierstokes_exterior_facet_integral_5_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE10_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699308, -0.05979028222412171, 0.2584442528541908, 0.0, 0.0 },
            { 0.0, 0.2277840767909519, -0.1121969667939042, 0.884412890002952, 0.0, 0.0 },
            { 0.0, -0.1121969667939043, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412181, 0.8013460293699308, 0.2584442528541907, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029519, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699308, 0.0, 0.2584442528541907, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412176, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939042, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909521, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699306, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE12_C0_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297377, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.669990521792428, 0.3300094782075718, 0.0 },
            { 0.3300094782075718, 0.6699905217924281, 0.0 },
            { 0.06943184420297369, 0.9305681557970263, 0.0 } } };
    alignas(32) static const double FE3_C0_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q4[0][0][1];
    alignas(32) double sp[10];
    sp[0] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[1] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[2] = sp[0] + sp[1];
    sp[3] = sp[2] * sp[2];
    sp[4] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[5] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[6] = sp[4] + sp[5];
    sp[7] = sp[6] * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = std::sqrt(sp[8]);
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[3][3] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0 += w[0][ic] * FE10_C0_F_Q4[facet][iq][ic];
        alignas(32) double sv4[1];
        sv4[0] = sp[9] * w0;
        const double fw0 = sv4[0] * weights4[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE10_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE10_C0_F_Q4[facet][iq][j];
        alignas(32) double TF1[3];
        for (int i = 0; i < 3; ++i)
            TF1[i] = fw0 * FE12_C0_F_Q4[facet][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF1[i][j] += TF1[i] * FE12_C0_F_Q4[facet][iq][j];
    }
    std::fill(A, A + 225, 0.0);
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * (i + 6) + (j + 6)] += BF0[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[15 * (i + 12) + (j + 12)] += BF1[i][j];
  }

};


class adaptivenavierstokes_interior_facet_integral_5_otherwise: public ufc::interior_facet_integral
{
public:

  adaptivenavierstokes_interior_facet_integral_5_otherwise() : ufc::interior_facet_integral()
  {

  }

  ~adaptivenavierstokes_interior_facet_integral_5_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs_0,
                       const double * coordinate_dofs_1,
                       std::size_t facet_0,
                       std::size_t facet_1,
                       int cell_orientation_0,
                       int cell_orientation_1) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.1739274225687268, 0.3260725774312731, 0.3260725774312731, 0.1739274225687268 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE16_C0_F_Q4[3][4][6] =
        { { { 0.0, 0.8013460293699308, -0.05979028222412171, 0.2584442528541908, 0.0, 0.0 },
            { 0.0, 0.2277840767909519, -0.1121969667939042, 0.884412890002952, 0.0, 0.0 },
            { 0.0, -0.1121969667939043, 0.227784076790952, 0.8844128900029519, 0.0, 0.0 },
            { 0.0, -0.05979028222412181, 0.8013460293699308, 0.2584442528541907, 0.0, 0.0 } },
          { { 0.8013460293699309, 0.0, -0.05979028222412166, 0.0, 0.2584442528541908, 0.0 },
            { 0.2277840767909521, 0.0, -0.1121969667939041, 0.0, 0.8844128900029519, 0.0 },
            { -0.1121969667939041, 0.0, 0.2277840767909521, 0.0, 0.8844128900029519, 0.0 },
            { -0.05979028222412166, 0.0, 0.8013460293699308, 0.0, 0.2584442528541907, 0.0 } },
          { { 0.8013460293699309, -0.05979028222412176, 0.0, 0.0, 0.0, 0.2584442528541908 },
            { 0.2277840767909521, -0.1121969667939042, 0.0, 0.0, 0.0, 0.8844128900029519 },
            { -0.1121969667939041, 0.2277840767909521, 0.0, 0.0, 0.0, 0.884412890002952 },
            { -0.05979028222412169, 0.8013460293699306, 0.0, 0.0, 0.0, 0.2584442528541909 } } };
    alignas(32) static const double FE18_C0_F_Q4[3][4][3] =
        { { { 0.0, 0.9305681557970263, 0.06943184420297369 },
            { 0.0, 0.6699905217924281, 0.3300094782075718 },
            { 0.0, 0.3300094782075719, 0.6699905217924279 },
            { 0.0, 0.06943184420297382, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.0, 0.06943184420297369 },
            { 0.6699905217924281, 0.0, 0.3300094782075718 },
            { 0.3300094782075719, 0.0, 0.669990521792428 },
            { 0.06943184420297377, 0.0, 0.9305681557970262 } },
          { { 0.9305681557970263, 0.06943184420297367, 0.0 },
            { 0.669990521792428, 0.3300094782075718, 0.0 },
            { 0.3300094782075718, 0.6699905217924281, 0.0 },
            { 0.06943184420297369, 0.9305681557970263, 0.0 } } };
    alignas(32) static const double FE3_C0_D01_F_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_r0_c0 = coordinate_dofs_0[0] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs_0[2] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_r0_c1 = coordinate_dofs_0[0] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs_0[4] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_r0_c2 = coordinate_dofs_0[1] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs_0[3] * FE3_C0_D01_F_Q4[0][0][1];
    const double J_r0_c3 = coordinate_dofs_0[1] * FE3_C0_D01_F_Q4[0][0][0] + coordinate_dofs_0[5] * FE3_C0_D01_F_Q4[0][0][1];
    alignas(32) double sp[10];
    sp[0] = J_r0_c0 * triangle_reference_facet_jacobian[facet_0][0][0];
    sp[1] = J_r0_c1 * triangle_reference_facet_jacobian[facet_0][1][0];
    sp[2] = sp[0] + sp[1];
    sp[3] = sp[2] * sp[2];
    sp[4] = triangle_reference_facet_jacobian[facet_0][0][0] * J_r0_c2;
    sp[5] = triangle_reference_facet_jacobian[facet_0][1][0] * J_r0_c3;
    sp[6] = sp[4] + sp[5];
    sp[7] = sp[6] * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = std::sqrt(sp[8]);
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[3][3] = {};
    alignas(32) double BF2[6][6] = {};
    alignas(32) double BF3[3][3] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w0_r0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_r0 += w[0][ic] * FE16_C0_F_Q4[facet_0][iq][ic];
        double w0_r1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_r1 += w[0][ic + 6] * FE16_C0_F_Q4[facet_1][iq][ic];
        alignas(32) double sv4[2];
        sv4[0] = w0_r0 * sp[9];
        sv4[1] = w0_r1 * sp[9];
        const double fw0 = sv4[0] * weights4[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE16_C0_F_Q4[facet_0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE16_C0_F_Q4[facet_0][iq][j];
        alignas(32) double TF1[3];
        for (int i = 0; i < 3; ++i)
            TF1[i] = fw0 * FE18_C0_F_Q4[facet_0][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF1[i][j] += TF1[i] * FE18_C0_F_Q4[facet_0][iq][j];
        const double fw1 = sv4[1] * weights4[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw1 * FE16_C0_F_Q4[facet_1][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF2[i][j] += TF2[i] * FE16_C0_F_Q4[facet_1][iq][j];
        alignas(32) double TF3[3];
        for (int i = 0; i < 3; ++i)
            TF3[i] = fw1 * FE18_C0_F_Q4[facet_1][iq][i];
        for (int i = 0; i < 3; ++i)
            for (int j = 0; j < 3; ++j)
                BF3[i][j] += TF3[i] * FE18_C0_F_Q4[facet_1][iq][j];
    }
    std::fill(A, A + 900, 0.0);
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[30 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[30 * (i + 6) + (j + 6)] += BF0[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[30 * (i + 12) + (j + 12)] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[30 * (i + 15) + (j + 15)] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[30 * (i + 21) + (j + 21)] += BF2[i][j];
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            A[30 * (i + 27) + (j + 27)] += BF3[i][j];
  }

};


class adaptivenavierstokes_cell_integral_6_otherwise: public ufc::cell_integral
{
public:

  adaptivenavierstokes_cell_integral_6_otherwise() : ufc::cell_integral()
  {

  }

  ~adaptivenavierstokes_cell_integral_6_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 7
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 7
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           7
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights16[16] = { 0.02356836819338231, 0.03538806789808593, 0.02258404928236992, 0.00542322591052525, 0.04418508852236171, 0.06634421610704974, 0.0423397245217463, 0.01016725956447878, 0.04418508852236171, 0.06634421610704974, 0.0423397245217463, 0.01016725956447878, 0.02356836819338231, 0.03538806789808593, 0.02258404928236992, 0.00542322591052525 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE11_C0_D01_Q16[1][16][5] =
        { { { -2.509715237321876, -0.771583215541929, 0.2618679782200471, 3.281298452863809, -0.2618679782200563 },
            { -1.691787452602031, 0.1073720545524966, 0.2008404928454685, 1.584415398049539, -0.200840492845479 },
            { -0.5499899336267824, 1.33436172947567, 0.1156483368975433, -0.7843717958488816, -0.1156483368975563 },
            { 0.4797756831326569, 2.440960542624881, 0.038815140507768, -2.920736225757531, -0.03881514050778373 },
            { -1.526925006564506, -0.7715832155419291, 1.244658208977417, 2.29850822210644, -1.244658208977429 },
            { -0.9380333065217381, 0.1073720545524966, 0.9545946389257601, 0.8306612519692468, -0.9545946389257722 },
            { -0.1159618539860407, 1.334361729475669, 0.5496764165382841, -1.218399875489623, -0.5496764165382978 },
            { 0.6254488622506806, 2.440960542624881, 0.1844883196257915, -3.066409404875554, -0.1844883196258073 },
            { -0.2446582089774328, -0.7715832155419289, 2.526925006564489, 1.016241424519368, -2.526925006564504 },
            { 0.04540536107422312, 0.1073720545524967, 1.93803330652172, -0.1527774156267132, -1.938033306521735 },
            { 0.450323583461697, 1.334361729475669, 1.115961853986021, -1.78468531293736, -1.115961853986035 },
            { 0.8155116803741865, 2.440960542624881, 0.3745511377492966, -3.25647222299906, -0.3745511377493129 },
            { 0.7381320217799364, -0.7715832155419292, 3.509715237321858, 0.03345119376200056, -3.509715237321875 },
            { 0.7991595071545148, 0.1073720545524966, 2.691787452602011, -0.9065315617070039, -2.691787452602027 },
            { 0.8843516631024385, 1.334361729475669, 1.549989933626761, -2.2187133925781, -1.549989933626777 },
            { 0.9611848594922103, 2.440960542624881, 0.5202243168673205, -3.402145402117084, -0.5202243168673365 } } };
    alignas(32) static const double FE11_C0_D10_Q16[1][16][5] =
        { { { -2.509715237321872, -0.7381320217799451, 0.2284167844580687, -0.2284167844580687, 3.247847259101817 },
            { -1.691787452602026, -0.7991595071545228, 1.107372054552494, -1.107372054552494, 2.490946959756549 },
            { -0.5499899336267775, -0.8843516631024448, 2.334361729475664, -2.334361729475664, 1.434341596729222 },
            { 0.4797756831326612, -0.9611848594922168, 3.440960542624873, -3.440960542624873, 0.4814091763595555 },
            { -1.526925006564501, 0.2446582089774261, 0.228416784458069, -0.228416784458069, 1.282266797587075 },
            { -0.9380333065217331, -0.0454053610742297, 1.107372054552494, -1.107372054552494, 0.9834386675959628 },
            { -0.1159618539860356, -0.450323583461703, 2.334361729475664, -2.334361729475664, 0.5662854374477386 },
            { 0.625448862250685, -0.815511680374193, 3.440960542624873, -3.440960542624873, 0.1900628181235078 },
            { -0.2446582089774265, 1.526925006564501, 0.2284167844580694, -0.2284167844580694, -1.282266797587074 },
            { 0.04540536107422935, 0.9380333065217331, 1.107372054552494, -1.107372054552494, -0.9834386675959623 },
            { 0.4503235834617028, 0.1159618539860351, 2.334361729475664, -2.334361729475664, -0.566285437447738 },
            { 0.8155116803741912, -0.6254488622506872, 3.440960542624873, -3.440960542624873, -0.1900628181235041 },
            { 0.7381320217799451, 2.509715237321872, 0.2284167844580695, -0.2284167844580695, -3.247847259101817 },
            { 0.7991595071545228, 1.691787452602026, 1.107372054552494, -1.107372054552494, -2.490946959756549 },
            { 0.8843516631024448, 0.5499899336267768, 2.334361729475664, -2.334361729475664, -1.434341596729222 },
            { 0.9611848594922152, -0.4797756831326632, 3.440960542624873, -3.440960542624873, -0.4814091763595521 } } };
    alignas(32) static const double FE11_C0_Q16[1][16][6] =
        { { { 0.6623338215556972, -0.0568951398028819, -0.05058241768674707, 0.01495376038439032, 0.2004194672181391, 0.2297705083314023 },
            { 0.2327680980977065, -0.04516801026556796, -0.123558905237647, 0.05560128729990842, 0.7452025504516331, 0.1351549796539668 },
            { -0.08718888411365168, -0.02724026699599276, 0.09756515313616181, 0.06749126293279077, 0.904559295532719, 0.04481343950797246 },
            { -0.09622691173432334, -0.009515458235366349, 0.6197860463314424, 0.03339034173593174, 0.4475178369136223, 0.00504814498869299 },
            { 0.1664374969590003, -0.1175177950974947, -0.05058241768674707, 0.07107520646099134, 0.1442980211415381, 0.7862894882227121 },
            { -0.01501168948198795, -0.1247422941482149, -0.123558905237647, 0.2642728566430071, 0.5365309811085343, 0.4625090511163082 },
            { -0.1233191060525151, -0.09965108377227649, 0.09756515313616178, 0.3207858975905817, 0.6512646608749281, 0.1533544782231196 },
            { -0.07610171508866521, -0.04186758739665786, 0.6197860463314424, 0.1587042571018932, 0.3222039215476609, 0.01727507750432638 },
            { -0.1175177950974946, 0.1664374969590002, -0.0505824176867471, 0.1442980211415381, 0.07107520646099129, 0.7862894882227121 },
            { -0.1247422941482148, -0.01501168948198821, -0.123558905237647, 0.5365309811085343, 0.2642728566430072, 0.4625090511163084 },
            { -0.09965108377227629, -0.1233191060525153, 0.09756515313616175, 0.6512646608749282, 0.3207858975905817, 0.1533544782231196 },
            { -0.04186758739665768, -0.07610171508866539, 0.6197860463314424, 0.3222039215476611, 0.158704257101893, 0.01727507750432638 },
            { -0.05689513980288179, 0.662333821555697, -0.0505824176867471, 0.2004194672181392, 0.01495376038439026, 0.2297705083314023 },
            { -0.04516801026556778, 0.2327680980977061, -0.123558905237647, 0.745202550451633, 0.05560128729990842, 0.135154979653967 },
            { -0.02724026699599255, -0.08718888411365189, 0.09756515313616172, 0.9045592955327191, 0.06749126293279072, 0.04481343950797245 },
            { -0.009515458235366066, -0.09622691173432354, 0.6197860463314424, 0.4475178369136228, 0.03339034173593124, 0.005048144988692935 } } };
    alignas(32) static const double FE13_C2_D01_Q16[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE13_C2_Q16[1][16][3] =
        { { { 0.877428809330468, 0.06546699455501447, 0.05710419611451763 },
            { 0.6729468631505064, 0.05021012321136976, 0.2768430136381238 },
            { 0.3874974834066941, 0.02891208422438899, 0.5835904323689167 },
            { 0.1300560792168344, 0.009703785126946193, 0.8602401356562195 },
            { 0.6317312516411253, 0.3111645522443571, 0.05710419611451763 },
            { 0.4845083266304333, 0.2386486597314429, 0.2768430136381237 },
            { 0.2789904634965087, 0.1374191041345744, 0.5835904323689167 },
            { 0.09363778443732845, 0.04612207990645211, 0.8602401356562195 },
            { 0.311164552244357, 0.6317312516411253, 0.05710419611451763 },
            { 0.2386486597314429, 0.4845083266304333, 0.2768430136381238 },
            { 0.1374191041345743, 0.2789904634965088, 0.5835904323689167 },
            { 0.046122079906452, 0.09363778443732856, 0.8602401356562195 },
            { 0.06546699455501441, 0.877428809330468, 0.05710419611451763 },
            { 0.05021012321136978, 0.6729468631505063, 0.2768430136381237 },
            { 0.02891208422438894, 0.3874974834066942, 0.5835904323689167 },
            { 0.009703785126946026, 0.1300560792168345, 0.8602401356562195 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE13_C2_D01_Q16[0][0][0] + coordinate_dofs[2] * FE13_C2_D01_Q16[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE13_C2_D01_Q16[0][0][0] + coordinate_dofs[5] * FE13_C2_D01_Q16[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE13_C2_D01_Q16[0][0][0] + coordinate_dofs[4] * FE13_C2_D01_Q16[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE13_C2_D01_Q16[0][0][0] + coordinate_dofs[3] * FE13_C2_D01_Q16[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[3] = {};
    for (int iq = 0; iq < 16; ++iq)
    {
        // Quadrature loop body setup (num_points=16)
        // Unstructured varying computations for num_points=16
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c1 += w[0][ic + 6] * FE11_C0_Q16[0][iq][ic];
        const double w0_d1_c0 = w[0][0] * FE11_C0_D01_Q16[0][iq][0] + w[0][2] * FE11_C0_D01_Q16[0][iq][1] + w[0][3] * FE11_C0_D01_Q16[0][iq][2] + w[0][4] * FE11_C0_D01_Q16[0][iq][3] + w[0][5] * FE11_C0_D01_Q16[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE11_C0_D10_Q16[0][iq][0] + w[0][1] * FE11_C0_D10_Q16[0][iq][1] + w[0][3] * FE11_C0_D10_Q16[0][iq][2] + w[0][4] * FE11_C0_D10_Q16[0][iq][3] + w[0][5] * FE11_C0_D10_Q16[0][iq][4];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c0 += w[0][ic] * FE11_C0_Q16[0][iq][ic];
        double w4 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w4 += w[4][ic] * FE11_C0_Q16[0][iq][ic];
        const double w0_d1_c1 = w[0][6] * FE11_C0_D01_Q16[0][iq][0] + w[0][8] * FE11_C0_D01_Q16[0][iq][1] + w[0][9] * FE11_C0_D01_Q16[0][iq][2] + w[0][10] * FE11_C0_D01_Q16[0][iq][3] + w[0][11] * FE11_C0_D01_Q16[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE11_C0_D10_Q16[0][iq][0] + w[0][7] * FE11_C0_D10_Q16[0][iq][1] + w[0][9] * FE11_C0_D10_Q16[0][iq][2] + w[0][10] * FE11_C0_D10_Q16[0][iq][3] + w[0][11] * FE11_C0_D10_Q16[0][iq][4];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c2 += w[0][ic + 12] * FE13_C2_Q16[0][iq][ic];
        const double w4_d1 = w[4][0] * FE11_C0_D01_Q16[0][iq][0] + w[4][2] * FE11_C0_D01_Q16[0][iq][1] + w[4][3] * FE11_C0_D01_Q16[0][iq][2] + w[4][4] * FE11_C0_D01_Q16[0][iq][3] + w[4][5] * FE11_C0_D01_Q16[0][iq][4];
        const double w4_d0 = w[4][0] * FE11_C0_D10_Q16[0][iq][0] + w[4][1] * FE11_C0_D10_Q16[0][iq][1] + w[4][3] * FE11_C0_D10_Q16[0][iq][2] + w[4][4] * FE11_C0_D10_Q16[0][iq][3] + w[4][5] * FE11_C0_D10_Q16[0][iq][4];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE11_C0_Q16[0][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE11_C0_Q16[0][iq][ic];
        double w3_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c2 += w[3][ic + 12] * FE13_C2_Q16[0][iq][ic];
        alignas(32) double sv16[83];
        sv16[0] = w0_d1_c0 * sp[3];
        sv16[1] = w0_d0_c0 * sp[4];
        sv16[2] = sv16[0] + sv16[1];
        sv16[3] = w0_c1 * sv16[2];
        sv16[4] = w0_d0_c0 * sp[5];
        sv16[5] = w0_d1_c0 * sp[6];
        sv16[6] = sv16[4] + sv16[5];
        sv16[7] = w0_c0 * sv16[6];
        sv16[8] = sv16[3] + sv16[7];
        sv16[9] = sv16[8] * w4;
        sv16[10] = w0_d1_c1 * sp[3];
        sv16[11] = w0_d0_c1 * sp[4];
        sv16[12] = sv16[10] + sv16[11];
        sv16[13] = w0_c1 * sv16[12];
        sv16[14] = w0_d0_c1 * sp[5];
        sv16[15] = w0_d1_c1 * sp[6];
        sv16[16] = sv16[14] + sv16[15];
        sv16[17] = w0_c0 * sv16[16];
        sv16[18] = sv16[13] + sv16[17];
        sv16[19] = sv16[18] * w4;
        sv16[20] = w4_d1 * sp[3];
        sv16[21] = w4_d0 * sp[4];
        sv16[22] = sv16[20] + sv16[21];
        sv16[23] = sp[3] * w4;
        sv16[24] = sp[4] * w4;
        sv16[25] = w4_d0 * sp[5];
        sv16[26] = w4_d1 * sp[6];
        sv16[27] = sv16[25] + sv16[26];
        sv16[28] = sp[5] * w4;
        sv16[29] = sp[6] * w4;
        sv16[30] = w0_c2 * sv16[27];
        sv16[31] = w0_c2 * sv16[22];
        sv16[32] = w0_c2 * sv16[23];
        sv16[33] = w0_c2 * sv16[24];
        sv16[34] = w0_c2 * sv16[28];
        sv16[35] = w0_c2 * sv16[29];
        sv16[36] = sv16[2] * sv16[22];
        sv16[37] = sv16[2] * sv16[24];
        sv16[38] = sv16[2] * sv16[23];
        sv16[39] = sv16[22] * sv16[12];
        sv16[40] = sv16[12] * sv16[23];
        sv16[41] = sv16[12] * sv16[24];
        sv16[42] = sv16[6] * sv16[27];
        sv16[43] = sv16[6] * sv16[28];
        sv16[44] = sv16[6] * sv16[29];
        sv16[45] = sv16[16] * sv16[27];
        sv16[46] = sv16[16] * sv16[29];
        sv16[47] = sv16[16] * sv16[28];
        sv16[48] = sv16[36] + sv16[42];
        sv16[49] = sv16[39] + sv16[45];
        sv16[50] = sv16[40] + sv16[46];
        sv16[51] = sv16[47] + sv16[41];
        sv16[52] = sv16[43] + sv16[37];
        sv16[53] = sv16[38] + sv16[44];
        sv16[54] = sv16[48] * w[2][0];
        sv16[55] = sv16[49] * w[2][0];
        sv16[56] = sv16[50] * w[2][0];
        sv16[57] = sv16[51] * w[2][0];
        sv16[58] = sv16[52] * w[2][0];
        sv16[59] = sv16[53] * w[2][0];
        sv16[60] = -1 * sv16[30] + sv16[54];
        sv16[61] = -1 * sv16[31] + sv16[55];
        sv16[62] = -1 * sv16[32] + sv16[56];
        sv16[63] = -1 * sv16[33] + sv16[57];
        sv16[64] = -1 * sv16[34] + sv16[58];
        sv16[65] = -1 * sv16[35] + sv16[59];
        sv16[66] = sv16[12] + sv16[6];
        sv16[67] = sv16[66] * w4;
        sv16[68] = sv16[60] + sv16[9];
        sv16[69] = sv16[61] + sv16[19];
        sv16[70] = w3_c0 * w4;
        sv16[71] = w3_c1 * w4;
        sv16[72] = w3_c2 * w4;
        sv16[73] = -1 * sv16[68] + -1 * sv16[70];
        sv16[74] = -1 * sv16[69] + -1 * sv16[71];
        sv16[75] = -1 * sv16[72] + -1 * sv16[67];
        sv16[76] = sv16[73] * sp[7];
        sv16[77] = sv16[74] * sp[7];
        sv16[78] = -1 * sv16[62] * sp[7];
        sv16[79] = -1 * sv16[63] * sp[7];
        sv16[80] = -1 * sv16[64] * sp[7];
        sv16[81] = -1 * sv16[65] * sp[7];
        sv16[82] = sv16[75] * sp[7];
        const double fw0 = sv16[76] * weights16[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE11_C0_Q16[0][iq][i];
        const double fw1 = sv16[80] * weights16[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE11_C0_D10_Q16[0][iq][i];
        const double fw2 = sv16[81] * weights16[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE11_C0_D01_Q16[0][iq][i];
        const double fw3 = sv16[77] * weights16[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE11_C0_Q16[0][iq][i];
        const double fw4 = sv16[79] * weights16[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE11_C0_D10_Q16[0][iq][i];
        const double fw5 = sv16[78] * weights16[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE11_C0_D01_Q16[0][iq][i];
        const double fw6 = sv16[82] * weights16[iq];
        for (int i = 0; i < 3; ++i)
            BF6[i] += fw6 * FE13_C2_Q16[0][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 3; ++i)
        A[i + 12] += BF6[i];
  }

};


class adaptivenavierstokes_exterior_facet_integral_6_otherwise: public ufc::exterior_facet_integral
{
public:

  adaptivenavierstokes_exterior_facet_integral_6_otherwise() : ufc::exterior_facet_integral()
  {

  }

  ~adaptivenavierstokes_exterior_facet_integral_6_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, false, false, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 5
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           5
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights3[3] = { 0.2777777777777777, 0.4444444444444444, 0.2777777777777777 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_F_Q3[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_F_Q3[3][3][3] =
        { { { 0.0, 0.8872983346207417, 0.1127016653792583 },
            { 0.0, 0.5, 0.5 },
            { 0.0, 0.1127016653792584, 0.8872983346207417 } },
          { { 0.8872983346207417, 0.0, 0.1127016653792583 },
            { 0.5, 0.0, 0.5 },
            { 0.1127016653792583, 0.0, 0.8872983346207417 } },
          { { 0.8872983346207417, 0.1127016653792583, 0.0 },
            { 0.5, 0.5, 0.0 },
            { 0.1127016653792582, 0.8872983346207417, 0.0 } } };
    alignas(32) static const double FE6_C0_F_Q3[3][3][6] =
        { { { 0.0, 0.6872983346207416, -0.08729833462074171, 0.4, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
            { 0.0, -0.0872983346207418, 0.6872983346207417, 0.3999999999999997, 0.0, 0.0 } },
          { { 0.6872983346207417, 0.0, -0.08729833462074166, 0.0, 0.3999999999999999, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
            { -0.08729833462074164, 0.0, 0.6872983346207417, 0.0, 0.3999999999999997, 0.0 } },
          { { 0.6872983346207417, -0.0872983346207417, 0.0, 0.0, 0.0, 0.3999999999999999 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 },
            { -0.0872983346207416, 0.6872983346207416, 0.0, 0.0, 0.0, 0.3999999999999999 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q3[0][0][1];
    alignas(32) double sp[29];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[20] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] * sp[21];
    sp[23] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[24] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] * sp[25];
    sp[27] = sp[22] + sp[26];
    sp[28] = std::sqrt(sp[27]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[6] = {};
    for (int iq = 0; iq < 3; ++iq)
    {
        // Quadrature loop body setup (num_points=3)
        // Unstructured varying computations for num_points=3
        double w4 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w4 += w[4][ic] * FE6_C0_F_Q3[facet][iq][ic];
        double w1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1 += w[1][ic] * FE3_C0_F_Q3[facet][iq][ic];
        alignas(32) double sv3[6];
        sv3[0] = sp[17] * w4;
        sv3[1] = sp[18] * w4;
        sv3[2] = sv3[0] * w1;
        sv3[3] = sv3[1] * w1;
        sv3[4] = -1 * sv3[2] * sp[28];
        sv3[5] = -1 * sv3[3] * sp[28];
        const double fw0 = sv3[5] * weights3[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE6_C0_F_Q3[facet][iq][i];
        const double fw1 = sv3[4] * weights3[iq];
        for (int i = 0; i < 6; ++i)
            BF1[i] += fw1 * FE6_C0_F_Q3[facet][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF1[i];
  }

};


class adaptivenavierstokes_cell_integral_7_otherwise: public ufc::cell_integral
{
public:

  adaptivenavierstokes_cell_integral_7_otherwise() : ufc::cell_integral()
  {

  }

  ~adaptivenavierstokes_cell_integral_7_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, false, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 5
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           5
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights7[7] = { 0.1125, 0.06296959027241358, 0.06296959027241358, 0.06296959027241358, 0.06619707639425308, 0.06619707639425308, 0.06619707639425308 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE10_C0_Q7[1][7][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 },
            { 0.0597971252344169, 0.2177634761542958, 0.05979712523441689, 0.5060365899346942, -0.2530182949673472, -0.03213753717505697, -0.03213753717505741, -0.2530182949673473, 0.506036589934695, 0.2208807577922903 },
            { 0.05979712523441694, 0.05979712523441694, 0.2177634761542958, -0.2530182949673472, 0.5060365899346942, -0.2530182949673474, 0.506036589934695, -0.0321375371750573, -0.03213753717505724, 0.2208807577922902 },
            { 0.217763476154296, 0.05979712523441685, 0.05979712523441695, -0.03213753717505721, -0.03213753717505731, 0.5060365899346945, -0.2530182949673473, 0.5060365899346945, -0.2530182949673471, 0.2208807577922901 },
            { -0.05688167333937318, 0.04462719439963982, -0.05688167333937292, -0.1037042284186595, 0.05185211420932966, 0.4082308316356989, 0.4082308316356985, 0.05185211420932977, -0.1037042284186596, 0.3563787174263686 },
            { -0.05688167333937311, -0.05688167333937307, 0.04462719439963984, 0.05185211420932961, -0.1037042284186596, 0.05185211420932988, -0.1037042284186597, 0.4082308316356989, 0.4082308316356987, 0.3563787174263686 },
            { 0.0446271943996399, -0.05688167333937307, -0.0568816733393731, 0.4082308316356983, 0.4082308316356986, -0.1037042284186595, 0.05185211420932975, -0.1037042284186597, 0.05185211420932988, 0.3563787174263693 } } };
    alignas(32) static const double FE10_C2_Q7[1][7][6] =
        { { { -0.1111111111111111, -0.1111111111111113, -0.1111111111111111, 0.4444444444444444, 0.4444444444444444, 0.4444444444444445 },
            { -0.08076859419188716, 0.4743526085855382, -0.08076859419188721, 0.3230743767675489, 0.04103582626313827, 0.323074376767549 },
            { -0.08076859419188719, -0.08076859419188731, 0.4743526085855383, 0.3230743767675486, 0.323074376767549, 0.04103582626313836 },
            { 0.4743526085855386, -0.08076859419188717, -0.08076859419188719, 0.04103582626313827, 0.3230743767675488, 0.3230743767675486 },
            { -0.0280749432230787, -0.05258390110254544, -0.02807494322307881, 0.1122997728923151, 0.8841342417640725, 0.1122997728923151 },
            { -0.02807494322307866, -0.02807494322307886, -0.05258390110254534, 0.1122997728923151, 0.1122997728923151, 0.8841342417640726 },
            { -0.05258390110254531, -0.02807494322307901, -0.02807494322307885, 0.8841342417640724, 0.1122997728923153, 0.1122997728923153 } } };
    alignas(32) static const double FE14_C2_Q7[1][7][3] =
        { { { 0.3333333333333334, 0.3333333333333333, 0.3333333333333333 },
            { 0.1012865073234564, 0.7974269853530872, 0.1012865073234563 },
            { 0.1012865073234565, 0.1012865073234564, 0.7974269853530871 },
            { 0.7974269853530873, 0.1012865073234563, 0.1012865073234563 },
            { 0.4701420641051152, 0.05971587178976979, 0.4701420641051151 },
            { 0.4701420641051152, 0.4701420641051151, 0.05971587178976974 },
            { 0.05971587178976988, 0.4701420641051151, 0.4701420641051151 } } };
    alignas(32) static const double FE3_C0_D01_Q7[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q7[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q7[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q7[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q7[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q7[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q7[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q7[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q7[0][0][1];
    alignas(32) double sp[4];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = std::abs(sp[2]);
    alignas(32) double BF0[1] = {};
    for (int iq = 0; iq < 7; ++iq)
    {
        // Quadrature loop body setup (num_points=7)
        // Unstructured varying computations for num_points=7
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c0 += w[1][ic] * FE10_C2_Q7[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c0 += w[0][ic] * FE10_C0_Q7[0][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE10_C2_Q7[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w1_c1 += w[1][ic + 6] * FE10_C2_Q7[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c1 += w[0][ic + 10] * FE10_C0_Q7[0][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE10_C2_Q7[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1_c2 += w[1][ic + 12] * FE14_C2_Q7[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c2 += w[0][ic + 20] * FE10_C2_Q7[0][iq][ic];
        double w3_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c2 += w[3][ic + 12] * FE14_C2_Q7[0][iq][ic];
        alignas(32) double sv7[9];
        sv7[0] = w0_c0 + -1 * w3_c0;
        sv7[1] = w1_c0 * sv7[0];
        sv7[2] = w0_c1 + -1 * w3_c1;
        sv7[3] = w1_c1 * sv7[2];
        sv7[4] = sv7[1] + sv7[3];
        sv7[5] = w0_c2 + -1 * w3_c2;
        sv7[6] = w1_c2 * sv7[5];
        sv7[7] = sv7[4] + sv7[6];
        sv7[8] = sv7[7] * sp[3];
        const double fw0 = sv7[8] * weights7[iq];
        for (int i = 0; i < 1; ++i)
            BF0[i] += fw0;
    }
    A[0] = 0.0;
    for (int i = 0; i < 1; ++i)
        A[i] += BF0[i];
  }

};


class adaptivenavierstokes_exterior_facet_integral_7_otherwise: public ufc::exterior_facet_integral
{
public:

  adaptivenavierstokes_exterior_facet_integral_7_otherwise() : ufc::exterior_facet_integral()
  {

  }

  ~adaptivenavierstokes_exterior_facet_integral_7_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 5
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           5
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights3[3] = { 0.2777777777777777, 0.4444444444444444, 0.2777777777777777 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE10_C0_F_Q3[3][3][9] =
        { { { 0.0, 0.4880140840414081, 0.06198591595859207, 0.7478527517380011, -0.2978527517380011, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.0624999999999999, -0.06249999999999998, 0.5624999999999998, 0.5625000000000001, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.06198591595859219, 0.4880140840414081, -0.2978527517380012, 0.747852751738001, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.488014084041408, 0.0, 0.06198591595859218, 0.0, 0.0, 0.7478527517380013, -0.2978527517380013, 0.0, 0.0 },
            { -0.06250000000000003, 0.0, -0.06249999999999974, 0.0, 0.0, 0.5624999999999999, 0.5624999999999999, 0.0, 0.0 },
            { 0.06198591595859208, 0.0, 0.4880140840414081, 0.0, 0.0, -0.2978527517380012, 0.747852751738001, 0.0, 0.0 } },
          { { 0.4880140840414079, 0.06198591595859203, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7478527517380013, -0.2978527517380012 },
            { -0.06249999999999994, -0.06249999999999991, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5625, 0.5625000000000001 },
            { 0.06198591595859212, 0.4880140840414081, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2978527517380012, 0.7478527517380013 } } };
    alignas(32) static const double FE10_C2_F_Q3[3][3][6] =
        { { { 0.0, 0.6872983346207416, -0.08729833462074171, 0.4, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
            { 0.0, -0.0872983346207418, 0.6872983346207417, 0.3999999999999997, 0.0, 0.0 } },
          { { 0.6872983346207417, 0.0, -0.08729833462074166, 0.0, 0.3999999999999999, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
            { -0.08729833462074164, 0.0, 0.6872983346207417, 0.0, 0.3999999999999997, 0.0 } },
          { { 0.6872983346207417, -0.0872983346207417, 0.0, 0.0, 0.0, 0.3999999999999999 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 },
            { -0.0872983346207416, 0.6872983346207416, 0.0, 0.0, 0.0, 0.3999999999999999 } } };
    alignas(32) static const double FE14_C2_F_Q3[3][3][3] =
        { { { 0.0, 0.8872983346207417, 0.1127016653792583 },
            { 0.0, 0.5, 0.5 },
            { 0.0, 0.1127016653792584, 0.8872983346207417 } },
          { { 0.8872983346207417, 0.0, 0.1127016653792583 },
            { 0.5, 0.0, 0.5 },
            { 0.1127016653792583, 0.0, 0.8872983346207417 } },
          { { 0.8872983346207417, 0.1127016653792583, 0.0 },
            { 0.5, 0.5, 0.0 },
            { 0.1127016653792582, 0.8872983346207417, 0.0 } } };
    alignas(32) static const double FE3_C0_D01_F_Q3[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q3[0][0][1];
    alignas(32) double sp[10];
    sp[0] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[1] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[2] = sp[0] + sp[1];
    sp[3] = sp[2] * sp[2];
    sp[4] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[5] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[6] = sp[4] + sp[5];
    sp[7] = sp[6] * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = std::sqrt(sp[8]);
    alignas(32) double BF0[1] = {};
    for (int iq = 0; iq < 3; ++iq)
    {
        // Quadrature loop body setup (num_points=3)
        // Unstructured varying computations for num_points=3
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c0 += w[2][ic] * FE10_C2_F_Q3[facet][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 9; ++ic)
            w0_c0 += w[0][ic] * FE10_C0_F_Q3[facet][iq][ic];
        double w3_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c0 += w[3][ic] * FE10_C2_F_Q3[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_c1 += w[2][ic + 6] * FE10_C2_F_Q3[facet][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 9; ++ic)
            w0_c1 += w[0][ic + 10] * FE10_C0_F_Q3[facet][iq][ic];
        double w3_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_c1 += w[3][ic + 6] * FE10_C2_F_Q3[facet][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_c2 += w[2][ic + 12] * FE14_C2_F_Q3[facet][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c2 += w[0][ic + 20] * FE10_C2_F_Q3[facet][iq][ic];
        double w3_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_c2 += w[3][ic + 12] * FE14_C2_F_Q3[facet][iq][ic];
        alignas(32) double sv3[9];
        sv3[0] = w0_c0 + -1 * w3_c0;
        sv3[1] = w2_c0 * sv3[0];
        sv3[2] = w0_c1 + -1 * w3_c1;
        sv3[3] = w2_c1 * sv3[2];
        sv3[4] = sv3[1] + sv3[3];
        sv3[5] = w0_c2 + -1 * w3_c2;
        sv3[6] = w2_c2 * sv3[5];
        sv3[7] = sv3[4] + sv3[6];
        sv3[8] = sv3[7] * sp[9];
        const double fw0 = sv3[8] * weights3[iq];
        for (int i = 0; i < 1; ++i)
            BF0[i] += fw0;
    }
    A[0] = 0.0;
    for (int i = 0; i < 1; ++i)
        A[i] += BF0[i];
  }

};


class adaptivenavierstokes_interior_facet_integral_7_otherwise: public ufc::interior_facet_integral
{
public:

  adaptivenavierstokes_interior_facet_integral_7_otherwise() : ufc::interior_facet_integral()
  {

  }

  ~adaptivenavierstokes_interior_facet_integral_7_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs_0,
                       const double * coordinate_dofs_1,
                       std::size_t facet_0,
                       std::size_t facet_1,
                       int cell_orientation_0,
                       int cell_orientation_1) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 5
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           5
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights3[3] = { 0.2777777777777777, 0.4444444444444444, 0.2777777777777777 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE10_C0_F_Q3[3][3][9] =
        { { { 0.0, 0.4880140840414081, 0.06198591595859207, 0.7478527517380011, -0.2978527517380011, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, -0.0624999999999999, -0.06249999999999998, 0.5624999999999998, 0.5625000000000001, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.06198591595859219, 0.4880140840414081, -0.2978527517380012, 0.747852751738001, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.488014084041408, 0.0, 0.06198591595859218, 0.0, 0.0, 0.7478527517380013, -0.2978527517380013, 0.0, 0.0 },
            { -0.06250000000000003, 0.0, -0.06249999999999974, 0.0, 0.0, 0.5624999999999999, 0.5624999999999999, 0.0, 0.0 },
            { 0.06198591595859208, 0.0, 0.4880140840414081, 0.0, 0.0, -0.2978527517380012, 0.747852751738001, 0.0, 0.0 } },
          { { 0.4880140840414079, 0.06198591595859203, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7478527517380013, -0.2978527517380012 },
            { -0.06249999999999994, -0.06249999999999991, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5625, 0.5625000000000001 },
            { 0.06198591595859212, 0.4880140840414081, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2978527517380012, 0.7478527517380013 } } };
    alignas(32) static const double FE12_C0_F_Q3[3][3][6] =
        { { { 0.0, 0.6872983346207416, -0.08729833462074171, 0.4, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
            { 0.0, -0.0872983346207418, 0.6872983346207417, 0.3999999999999997, 0.0, 0.0 } },
          { { 0.6872983346207417, 0.0, -0.08729833462074166, 0.0, 0.3999999999999999, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
            { -0.08729833462074164, 0.0, 0.6872983346207417, 0.0, 0.3999999999999997, 0.0 } },
          { { 0.6872983346207417, -0.0872983346207417, 0.0, 0.0, 0.0, 0.3999999999999999 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 },
            { -0.0872983346207416, 0.6872983346207416, 0.0, 0.0, 0.0, 0.3999999999999999 } } };
    alignas(32) static const double FE20_C2_F_Q3[3][3][3] =
        { { { 0.0, 0.8872983346207417, 0.1127016653792583 },
            { 0.0, 0.5, 0.5 },
            { 0.0, 0.1127016653792584, 0.8872983346207417 } },
          { { 0.8872983346207417, 0.0, 0.1127016653792583 },
            { 0.5, 0.0, 0.5 },
            { 0.1127016653792583, 0.0, 0.8872983346207417 } },
          { { 0.8872983346207417, 0.1127016653792583, 0.0 },
            { 0.5, 0.5, 0.0 },
            { 0.1127016653792582, 0.8872983346207417, 0.0 } } };
    alignas(32) static const double FE3_C0_D01_F_Q3[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_r0_c0 = coordinate_dofs_0[0] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs_0[2] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_r0_c1 = coordinate_dofs_0[0] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs_0[4] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_r0_c2 = coordinate_dofs_0[1] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs_0[3] * FE3_C0_D01_F_Q3[0][0][1];
    const double J_r0_c3 = coordinate_dofs_0[1] * FE3_C0_D01_F_Q3[0][0][0] + coordinate_dofs_0[5] * FE3_C0_D01_F_Q3[0][0][1];
    alignas(32) double sp[10];
    sp[0] = J_r0_c0 * triangle_reference_facet_jacobian[facet_0][0][0];
    sp[1] = J_r0_c1 * triangle_reference_facet_jacobian[facet_0][1][0];
    sp[2] = sp[0] + sp[1];
    sp[3] = sp[2] * sp[2];
    sp[4] = triangle_reference_facet_jacobian[facet_0][0][0] * J_r0_c2;
    sp[5] = triangle_reference_facet_jacobian[facet_0][1][0] * J_r0_c3;
    sp[6] = sp[4] + sp[5];
    sp[7] = sp[6] * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = std::sqrt(sp[8]);
    alignas(32) double BF0[1] = {};
    for (int iq = 0; iq < 3; ++iq)
    {
        // Quadrature loop body setup (num_points=3)
        // Unstructured varying computations for num_points=3
        double w2_r0_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_r0_c0 += w[2][ic] * FE12_C0_F_Q3[facet_0][iq][ic];
        double w0_r0_c0 = 0.0;
        for (int ic = 0; ic < 9; ++ic)
            w0_r0_c0 += w[0][ic] * FE10_C0_F_Q3[facet_0][iq][ic];
        double w3_r0_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_r0_c0 += w[3][ic] * FE12_C0_F_Q3[facet_0][iq][ic];
        double w2_r0_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_r0_c1 += w[2][ic + 6] * FE12_C0_F_Q3[facet_0][iq][ic];
        double w0_r0_c1 = 0.0;
        for (int ic = 0; ic < 9; ++ic)
            w0_r0_c1 += w[0][ic + 10] * FE10_C0_F_Q3[facet_0][iq][ic];
        double w3_r0_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_r0_c1 += w[3][ic + 6] * FE12_C0_F_Q3[facet_0][iq][ic];
        double w2_r0_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_r0_c2 += w[2][ic + 12] * FE20_C2_F_Q3[facet_0][iq][ic];
        double w0_r0_c2 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_r0_c2 += w[0][ic + 20] * FE12_C0_F_Q3[facet_0][iq][ic];
        double w3_r0_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_r0_c2 += w[3][ic + 12] * FE20_C2_F_Q3[facet_0][iq][ic];
        double w2_r1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_r1_c0 += w[2][ic + 15] * FE12_C0_F_Q3[facet_1][iq][ic];
        double w0_r1_c0 = 0.0;
        for (int ic = 0; ic < 9; ++ic)
            w0_r1_c0 += w[0][ic + 26] * FE10_C0_F_Q3[facet_1][iq][ic];
        double w3_r1_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_r1_c0 += w[3][ic + 15] * FE12_C0_F_Q3[facet_1][iq][ic];
        double w2_r1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w2_r1_c1 += w[2][ic + 21] * FE12_C0_F_Q3[facet_1][iq][ic];
        double w0_r1_c1 = 0.0;
        for (int ic = 0; ic < 9; ++ic)
            w0_r1_c1 += w[0][ic + 36] * FE10_C0_F_Q3[facet_1][iq][ic];
        double w3_r1_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w3_r1_c1 += w[3][ic + 21] * FE12_C0_F_Q3[facet_1][iq][ic];
        double w2_r1_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w2_r1_c2 += w[2][ic + 27] * FE20_C2_F_Q3[facet_1][iq][ic];
        double w0_r1_c2 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_r1_c2 += w[0][ic + 46] * FE12_C0_F_Q3[facet_1][iq][ic];
        double w3_r1_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w3_r1_c2 += w[3][ic + 27] * FE20_C2_F_Q3[facet_1][iq][ic];
        alignas(32) double sv3[18];
        sv3[0] = w0_r0_c0 + -1 * w3_r0_c0;
        sv3[1] = w2_r0_c0 * sv3[0];
        sv3[2] = w0_r0_c1 + -1 * w3_r0_c1;
        sv3[3] = w2_r0_c1 * sv3[2];
        sv3[4] = sv3[1] + sv3[3];
        sv3[5] = w0_r0_c2 + -1 * w3_r0_c2;
        sv3[6] = w2_r0_c2 * sv3[5];
        sv3[7] = sv3[4] + sv3[6];
        sv3[8] = w0_r1_c0 + -1 * w3_r1_c0;
        sv3[9] = w2_r1_c0 * sv3[8];
        sv3[10] = w0_r1_c1 + -1 * w3_r1_c1;
        sv3[11] = w2_r1_c1 * sv3[10];
        sv3[12] = sv3[9] + sv3[11];
        sv3[13] = w0_r1_c2 + -1 * w3_r1_c2;
        sv3[14] = w2_r1_c2 * sv3[13];
        sv3[15] = sv3[12] + sv3[14];
        sv3[16] = sv3[7] + sv3[15];
        sv3[17] = 0.5 * sv3[16] * sp[9];
        const double fw0 = sv3[17] * weights3[iq];
        for (int i = 0; i < 1; ++i)
            BF0[i] += fw0;
    }
    std::fill(A, A + 2, 0.0);
    for (int i = 0; i < 1; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 1; ++i)
        A[i + 1] += BF0[i];
  }

};


class adaptivenavierstokes_cell_integral_8_otherwise: public ufc::cell_integral
{
public:

  adaptivenavierstokes_cell_integral_8_otherwise() : ufc::cell_integral()
  {

  }

  ~adaptivenavierstokes_cell_integral_8_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 5
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           5
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights7[7] = { 0.1125, 0.06296959027241358, 0.06296959027241358, 0.06296959027241358, 0.06619707639425308, 0.06619707639425308, 0.06619707639425308 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE24_C0_D01_Q7[1][7][5] =
        { { { -0.3333333333333385, 0.333333333333335, 1.333333333333321, 0.0, -1.333333333333334 },
            { 0.5948539707061686, -0.594853970706174, 3.189707941412335, 0.0, -3.189707941412351 },
            { 0.5948539707061685, 2.189707941412351, 0.4051460292938092, -2.784561912118513, -0.4051460292938247 },
            { -2.189707941412354, -0.594853970706174, 0.4051460292938148, 2.784561912118532, -0.4051460292938246 },
            { -0.8805682564204662, 0.8805682564204623, 0.2388634871590675, 0.0, -0.2388634871590795 },
            { -0.8805682564204653, -0.7611365128409207, 1.880568256420449, 1.641704769261392, -1.880568256420462 },
            { 0.7611365128409149, 0.8805682564204621, 1.880568256420445, -1.64170476926137, -1.880568256420461 } } };
    alignas(32) static const double FE24_C0_D10_Q7[1][7][5] =
        { { { -0.3333333333333329, 0.3333333333333326, 1.333333333333332, -1.333333333333332, 0.0 },
            { 0.5948539707061764, 2.189707941412349, 0.4051460292938244, -0.4051460292938244, -2.784561912118526 },
            { 0.5948539707061734, -0.5948539707061756, 3.189707941412344, -3.189707941412344, 0.0 },
            { -2.18970794141235, -0.5948539707061773, 0.405146029293824, -0.405146029293824, 2.784561912118527 },
            { -0.8805682564204611, -0.761136512840922, 1.880568256420458, -1.880568256420458, 1.641704769261383 },
            { -0.8805682564204599, 0.8805682564204588, 0.2388634871590777, -0.2388634871590777, 0.0 },
            { 0.7611365128409217, 0.8805682564204604, 1.880568256420458, -1.880568256420458, -1.641704769261382 } } };
    alignas(32) static const double FE24_C0_Q7[1][7][6] =
        { { { -0.1111111111111111, -0.1111111111111113, -0.1111111111111111, 0.4444444444444444, 0.4444444444444444, 0.4444444444444445 },
            { -0.08076859419188716, 0.4743526085855382, -0.08076859419188721, 0.3230743767675489, 0.04103582626313827, 0.323074376767549 },
            { -0.08076859419188719, -0.08076859419188731, 0.4743526085855383, 0.3230743767675486, 0.323074376767549, 0.04103582626313836 },
            { 0.4743526085855386, -0.08076859419188717, -0.08076859419188719, 0.04103582626313827, 0.3230743767675488, 0.3230743767675486 },
            { -0.0280749432230787, -0.05258390110254544, -0.02807494322307881, 0.1122997728923151, 0.8841342417640725, 0.1122997728923151 },
            { -0.02807494322307866, -0.02807494322307886, -0.05258390110254534, 0.1122997728923151, 0.1122997728923151, 0.8841342417640726 },
            { -0.05258390110254531, -0.02807494322307901, -0.02807494322307885, 0.8841342417640724, 0.1122997728923153, 0.1122997728923153 } } };
    alignas(32) static const double FE26_C2_D01_Q7[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[1][5][5] =
        { { { 0.5, 0.1666666666666676, 0.0, 0.0, -0.666666666666668 },
            { 0.1666666666666676, 0.5, 0.0, 0.0, -0.6666666666666679 },
            { 0.0, 0.0, 1.333333333333329, -1.333333333333329, 0.0 },
            { 0.0, 0.0, -1.333333333333329, 1.333333333333329, 0.0 },
            { -0.666666666666668, -0.6666666666666679, 0.0, 0.0, 1.333333333333336 } } };
    alignas(32) static const double PI1[1][5][5] =
        { { { 0.5, 0.1666666666666664, 0.0, -0.6666666666666674, 0.0 },
            { 0.1666666666666663, -0.1666666666666666, 0.6666666666666639, 0.0, -0.6666666666666667 },
            { 0.0, 0.666666666666667, 0.6666666666666562, -0.666666666666662, -0.6666666666666656 },
            { 0.0, -0.666666666666667, -0.6666666666666562, 0.666666666666662, 0.6666666666666656 },
            { -0.6666666666666671, 0.0, -0.6666666666666659, 0.6666666666666676, 0.6666666666666676 } } };
    alignas(32) static const double PI2[1][5][3] =
        { { { -0.1666666666666667, 0.0, 0.0 },
            { 0.0, 0.1666666666666665, 0.0 },
            { 0.1666666666666665, 0.1666666666666664, 0.3333333333333329 },
            { -0.1666666666666665, -0.1666666666666664, -0.3333333333333329 },
            { 0.1666666666666669, -0.1666666666666668, 0.0 } } };
    alignas(32) static const double PI3[1][5][5] =
        { { { 0.5, 0.1666666666666655, 0.0, -0.6666666666666673, 0.0 },
            { 0.1666666666666655, 0.5, 0.0, -0.6666666666666659, 0.0 },
            { 0.0, 0.0, 1.333333333333315, 0.0, -1.333333333333325 },
            { -0.6666666666666673, -0.6666666666666659, 0.0, 1.333333333333332, 0.0 },
            { 0.0, 0.0, -1.333333333333325, 0.0, 1.333333333333335 } } };
    alignas(32) static const double PI4[1][5][3] =
        { { { -0.1666666666666676, 0.0, 0.0 },
            { 0.0, 0.0, 0.1666666666666669 },
            { 0.1666666666666647, 0.333333333333331, 0.1666666666666643 },
            { 0.1666666666666675, 0.0, -0.1666666666666657 },
            { -0.1666666666666668, -0.3333333333333335, -0.1666666666666667 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE26_C2_D01_Q7[0][0][0] + coordinate_dofs[2] * FE26_C2_D01_Q7[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE26_C2_D01_Q7[0][0][0] + coordinate_dofs[5] * FE26_C2_D01_Q7[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE26_C2_D01_Q7[0][0][0] + coordinate_dofs[4] * FE26_C2_D01_Q7[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE26_C2_D01_Q7[0][0][0] + coordinate_dofs[3] * FE26_C2_D01_Q7[0][0][1];
    alignas(32) double sp[31];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = sp[3] * sp[4];
    sp[8] = sp[4] * sp[4];
    sp[9] = sp[3] * sp[3];
    sp[10] = sp[5] * sp[6];
    sp[11] = sp[5] * sp[5];
    sp[12] = sp[6] * sp[6];
    sp[13] = sp[7] + sp[10];
    sp[14] = sp[9] + sp[12];
    sp[15] = sp[11] + sp[8];
    sp[16] = sp[13] * w[1][0];
    sp[17] = sp[14] * w[1][0];
    sp[18] = sp[15] * w[1][0];
    sp[19] = std::abs(sp[2]);
    sp[20] = sp[16] * sp[19];
    sp[21] = sp[17] * sp[19];
    sp[22] = sp[6] * sp[19];
    sp[23] = sp[18] * sp[19];
    sp[24] = sp[5] * sp[19];
    sp[25] = sp[3] * sp[19];
    sp[26] = sp[4] * sp[19];
    sp[27] = -1 * sp[3] * sp[19];
    sp[28] = -1 * sp[4] * sp[19];
    sp[29] = -1 * sp[5] * sp[19];
    sp[30] = -1 * sp[6] * sp[19];
    alignas(32) double BF0[6][6] = {};
    alignas(32) double BF1[6][5] = {};
    alignas(32) double BF2[6][5] = {};
    alignas(32) double BF3[6][6] = {};
    alignas(32) double BF4[6][6] = {};
    alignas(32) double BF5[6][6] = {};
    for (int iq = 0; iq < 7; ++iq)
    {
        // Quadrature loop body setup (num_points=7)
        // Unstructured varying computations for num_points=7
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c1 += w[0][ic + 6] * FE24_C0_Q7[0][iq][ic];
        const double w0_d1_c0 = w[0][0] * FE24_C0_D01_Q7[0][iq][0] + w[0][2] * FE24_C0_D01_Q7[0][iq][1] + w[0][3] * FE24_C0_D01_Q7[0][iq][2] + w[0][4] * FE24_C0_D01_Q7[0][iq][3] + w[0][5] * FE24_C0_D01_Q7[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE24_C0_D10_Q7[0][iq][0] + w[0][1] * FE24_C0_D10_Q7[0][iq][1] + w[0][3] * FE24_C0_D10_Q7[0][iq][2] + w[0][4] * FE24_C0_D10_Q7[0][iq][3] + w[0][5] * FE24_C0_D10_Q7[0][iq][4];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c0 += w[0][ic] * FE24_C0_Q7[0][iq][ic];
        const double w0_d1_c1 = w[0][6] * FE24_C0_D01_Q7[0][iq][0] + w[0][8] * FE24_C0_D01_Q7[0][iq][1] + w[0][9] * FE24_C0_D01_Q7[0][iq][2] + w[0][10] * FE24_C0_D01_Q7[0][iq][3] + w[0][11] * FE24_C0_D01_Q7[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE24_C0_D10_Q7[0][iq][0] + w[0][7] * FE24_C0_D10_Q7[0][iq][1] + w[0][9] * FE24_C0_D10_Q7[0][iq][2] + w[0][10] * FE24_C0_D10_Q7[0][iq][3] + w[0][11] * FE24_C0_D10_Q7[0][iq][4];
        alignas(32) double sv7[24];
        sv7[0] = w0_c1 * sp[3];
        sv7[1] = w0_c1 * sp[4];
        sv7[2] = w0_d1_c0 * sp[3];
        sv7[3] = w0_d0_c0 * sp[4];
        sv7[4] = sv7[2] + sv7[3];
        sv7[5] = w0_c0 * sp[6];
        sv7[6] = w0_c0 * sp[5];
        sv7[7] = w0_d0_c0 * sp[5];
        sv7[8] = w0_d1_c0 * sp[6];
        sv7[9] = sv7[7] + sv7[8];
        sv7[10] = sv7[0] + sv7[5];
        sv7[11] = sv7[6] + sv7[1];
        sv7[12] = w0_d1_c1 * sp[3];
        sv7[13] = w0_d0_c1 * sp[4];
        sv7[14] = sv7[12] + sv7[13];
        sv7[15] = w0_d0_c1 * sp[5];
        sv7[16] = w0_d1_c1 * sp[6];
        sv7[17] = sv7[15] + sv7[16];
        sv7[18] = sv7[10] * sp[19];
        sv7[19] = sv7[11] * sp[19];
        sv7[20] = sv7[4] * sp[19];
        sv7[21] = sv7[9] * sp[19];
        sv7[22] = sv7[14] * sp[19];
        sv7[23] = sv7[17] * sp[19];
        const double fw0 = sv7[21] * weights7[iq];
        alignas(32) double TF0[6];
        for (int i = 0; i < 6; ++i)
            TF0[i] = fw0 * FE24_C0_Q7[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF0[i][j] += TF0[i] * FE24_C0_Q7[0][iq][j];
        const double fw1 = sv7[19] * weights7[iq];
        alignas(32) double TF1[6];
        for (int i = 0; i < 6; ++i)
            TF1[i] = fw1 * FE24_C0_Q7[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF1[i][j] += TF1[i] * FE24_C0_D10_Q7[0][iq][j];
        const double fw2 = sv7[18] * weights7[iq];
        alignas(32) double TF2[6];
        for (int i = 0; i < 6; ++i)
            TF2[i] = fw2 * FE24_C0_Q7[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 5; ++j)
                BF2[i][j] += TF2[i] * FE24_C0_D01_Q7[0][iq][j];
        const double fw3 = sv7[20] * weights7[iq];
        alignas(32) double TF3[6];
        for (int i = 0; i < 6; ++i)
            TF3[i] = fw3 * FE24_C0_Q7[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF3[i][j] += TF3[i] * FE24_C0_Q7[0][iq][j];
        const double fw4 = sv7[23] * weights7[iq];
        alignas(32) double TF4[6];
        for (int i = 0; i < 6; ++i)
            TF4[i] = fw4 * FE24_C0_Q7[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF4[i][j] += TF4[i] * FE24_C0_Q7[0][iq][j];
        const double fw5 = sv7[22] * weights7[iq];
        alignas(32) double TF5[6];
        for (int i = 0; i < 6; ++i)
            TF5[i] = fw5 * FE24_C0_Q7[0][iq][i];
        for (int i = 0; i < 6; ++i)
            for (int j = 0; j < 6; ++j)
                BF5[i][j] += TF5[i] * FE24_C0_Q7[0][iq][j];
    }
    A[0] = sp[23] * PI0[0][0][0] + sp[20] * PI1[0][0][0] + sp[20] * PI1[0][0][0] + sp[21] * PI3[0][0][0];
    A[1] = sp[23] * PI0[0][0][1] + sp[20] * PI1[0][1][0];
    A[2] = sp[20] * PI1[0][0][1] + sp[21] * PI3[0][0][1];
    A[3] = sp[23] * PI0[0][0][2] + sp[20] * PI1[0][0][2] + sp[20] * PI1[0][2][0] + sp[21] * PI3[0][0][2];
    A[4] = sp[23] * PI0[0][0][3] + sp[20] * PI1[0][0][3] + sp[20] * PI1[0][3][0] + sp[21] * PI3[0][0][3];
    A[5] = sp[23] * PI0[0][0][4] + sp[20] * PI1[0][0][4] + sp[20] * PI1[0][4][0] + sp[21] * PI3[0][0][4];
    std::fill(A + 6, A + 12, 0.0);
    A[12] = sp[29] * PI2[0][0][0] + sp[30] * PI4[0][0][0];
    A[13] = sp[29] * PI2[0][0][1] + sp[30] * PI4[0][0][1];
    A[14] = sp[29] * PI2[0][0][2] + sp[30] * PI4[0][0][2];
    A[15] = sp[23] * PI0[0][1][0] + sp[20] * PI1[0][1][0];
    A[16] = sp[23] * PI0[0][1][1];
    A[17] = sp[20] * PI1[0][1][1];
    A[18] = sp[23] * PI0[0][1][2] + sp[20] * PI1[0][1][2];
    A[19] = sp[23] * PI0[0][1][3] + sp[20] * PI1[0][1][3];
    A[20] = sp[23] * PI0[0][1][4] + sp[20] * PI1[0][1][4];
    std::fill(A + 21, A + 27, 0.0);
    A[27] = sp[29] * PI2[0][1][0];
    A[28] = sp[29] * PI2[0][1][1];
    A[29] = sp[29] * PI2[0][1][2];
    A[30] = sp[20] * PI1[0][0][1] + sp[21] * PI3[0][1][0];
    A[31] = sp[20] * PI1[0][1][1];
    A[32] = sp[21] * PI3[0][1][1];
    A[33] = sp[20] * PI1[0][2][1] + sp[21] * PI3[0][1][2];
    A[34] = sp[20] * PI1[0][3][1] + sp[21] * PI3[0][1][3];
    A[35] = sp[20] * PI1[0][4][1] + sp[21] * PI3[0][1][4];
    std::fill(A + 36, A + 42, 0.0);
    A[42] = sp[30] * PI4[0][1][0];
    A[43] = sp[30] * PI4[0][1][1];
    A[44] = sp[30] * PI4[0][1][2];
    A[45] = sp[23] * PI0[0][2][0] + sp[20] * PI1[0][2][0] + sp[20] * PI1[0][0][2] + sp[21] * PI3[0][2][0];
    A[46] = sp[23] * PI0[0][2][1] + sp[20] * PI1[0][1][2];
    A[47] = sp[20] * PI1[0][2][1] + sp[21] * PI3[0][2][1];
    A[48] = sp[23] * PI0[0][2][2] + sp[20] * PI1[0][2][2] + sp[20] * PI1[0][2][2] + sp[21] * PI3[0][2][2];
    A[49] = sp[23] * PI0[0][2][3] + sp[20] * PI1[0][2][3] + sp[20] * PI1[0][3][2] + sp[21] * PI3[0][2][3];
    A[50] = sp[23] * PI0[0][2][4] + sp[20] * PI1[0][2][4] + sp[20] * PI1[0][4][2] + sp[21] * PI3[0][2][4];
    std::fill(A + 51, A + 57, 0.0);
    A[57] = sp[29] * PI2[0][2][0] + sp[30] * PI4[0][2][0];
    A[58] = sp[29] * PI2[0][2][1] + sp[30] * PI4[0][2][1];
    A[59] = sp[29] * PI2[0][2][2] + sp[30] * PI4[0][2][2];
    A[60] = sp[23] * PI0[0][3][0] + sp[20] * PI1[0][3][0] + sp[20] * PI1[0][0][3] + sp[21] * PI3[0][3][0];
    A[61] = sp[23] * PI0[0][3][1] + sp[20] * PI1[0][1][3];
    A[62] = sp[20] * PI1[0][3][1] + sp[21] * PI3[0][3][1];
    A[63] = sp[23] * PI0[0][3][2] + sp[20] * PI1[0][3][2] + sp[20] * PI1[0][2][3] + sp[21] * PI3[0][3][2];
    A[64] = sp[23] * PI0[0][3][3] + sp[20] * PI1[0][3][3] + sp[20] * PI1[0][3][3] + sp[21] * PI3[0][3][3];
    A[65] = sp[23] * PI0[0][3][4] + sp[20] * PI1[0][3][4] + sp[20] * PI1[0][4][3] + sp[21] * PI3[0][3][4];
    std::fill(A + 66, A + 72, 0.0);
    A[72] = sp[29] * PI2[0][3][0] + sp[30] * PI4[0][3][0];
    A[73] = sp[29] * PI2[0][3][1] + sp[30] * PI4[0][3][1];
    A[74] = sp[29] * PI2[0][3][2] + sp[30] * PI4[0][3][2];
    A[75] = sp[23] * PI0[0][4][0] + sp[20] * PI1[0][4][0] + sp[20] * PI1[0][0][4] + sp[21] * PI3[0][4][0];
    A[76] = sp[23] * PI0[0][4][1] + sp[20] * PI1[0][1][4];
    A[77] = sp[20] * PI1[0][4][1] + sp[21] * PI3[0][4][1];
    A[78] = sp[23] * PI0[0][4][2] + sp[20] * PI1[0][4][2] + sp[20] * PI1[0][2][4] + sp[21] * PI3[0][4][2];
    A[79] = sp[23] * PI0[0][4][3] + sp[20] * PI1[0][4][3] + sp[20] * PI1[0][3][4] + sp[21] * PI3[0][4][3];
    A[80] = sp[23] * PI0[0][4][4] + sp[20] * PI1[0][4][4] + sp[20] * PI1[0][4][4] + sp[21] * PI3[0][4][4];
    std::fill(A + 81, A + 87, 0.0);
    A[87] = sp[29] * PI2[0][4][0] + sp[30] * PI4[0][4][0];
    A[88] = sp[29] * PI2[0][4][1] + sp[30] * PI4[0][4][1];
    A[89] = sp[29] * PI2[0][4][2] + sp[30] * PI4[0][4][2];
    std::fill(A + 90, A + 96, 0.0);
    A[96] = sp[23] * PI0[0][0][0] + sp[20] * PI1[0][0][0] + sp[20] * PI1[0][0][0] + sp[21] * PI3[0][0][0];
    A[97] = sp[23] * PI0[0][0][1] + sp[20] * PI1[0][1][0];
    A[98] = sp[20] * PI1[0][0][1] + sp[21] * PI3[0][0][1];
    A[99] = sp[23] * PI0[0][0][2] + sp[20] * PI1[0][0][2] + sp[20] * PI1[0][2][0] + sp[21] * PI3[0][0][2];
    A[100] = sp[23] * PI0[0][0][3] + sp[20] * PI1[0][0][3] + sp[20] * PI1[0][3][0] + sp[21] * PI3[0][0][3];
    A[101] = sp[23] * PI0[0][0][4] + sp[20] * PI1[0][0][4] + sp[20] * PI1[0][4][0] + sp[21] * PI3[0][0][4];
    A[102] = sp[28] * PI2[0][0][0] + sp[27] * PI4[0][0][0];
    A[103] = sp[28] * PI2[0][0][1] + sp[27] * PI4[0][0][1];
    A[104] = sp[28] * PI2[0][0][2] + sp[27] * PI4[0][0][2];
    std::fill(A + 105, A + 111, 0.0);
    A[111] = sp[23] * PI0[0][1][0] + sp[20] * PI1[0][1][0];
    A[112] = sp[23] * PI0[0][1][1];
    A[113] = sp[20] * PI1[0][1][1];
    A[114] = sp[23] * PI0[0][1][2] + sp[20] * PI1[0][1][2];
    A[115] = sp[23] * PI0[0][1][3] + sp[20] * PI1[0][1][3];
    A[116] = sp[23] * PI0[0][1][4] + sp[20] * PI1[0][1][4];
    A[117] = sp[28] * PI2[0][1][0];
    A[118] = sp[28] * PI2[0][1][1];
    A[119] = sp[28] * PI2[0][1][2];
    std::fill(A + 120, A + 126, 0.0);
    A[126] = sp[20] * PI1[0][0][1] + sp[21] * PI3[0][1][0];
    A[127] = sp[20] * PI1[0][1][1];
    A[128] = sp[21] * PI3[0][1][1];
    A[129] = sp[20] * PI1[0][2][1] + sp[21] * PI3[0][1][2];
    A[130] = sp[20] * PI1[0][3][1] + sp[21] * PI3[0][1][3];
    A[131] = sp[20] * PI1[0][4][1] + sp[21] * PI3[0][1][4];
    A[132] = sp[27] * PI4[0][1][0];
    A[133] = sp[27] * PI4[0][1][1];
    A[134] = sp[27] * PI4[0][1][2];
    std::fill(A + 135, A + 141, 0.0);
    A[141] = sp[23] * PI0[0][2][0] + sp[20] * PI1[0][2][0] + sp[20] * PI1[0][0][2] + sp[21] * PI3[0][2][0];
    A[142] = sp[23] * PI0[0][2][1] + sp[20] * PI1[0][1][2];
    A[143] = sp[20] * PI1[0][2][1] + sp[21] * PI3[0][2][1];
    A[144] = sp[23] * PI0[0][2][2] + sp[20] * PI1[0][2][2] + sp[20] * PI1[0][2][2] + sp[21] * PI3[0][2][2];
    A[145] = sp[23] * PI0[0][2][3] + sp[20] * PI1[0][2][3] + sp[20] * PI1[0][3][2] + sp[21] * PI3[0][2][3];
    A[146] = sp[23] * PI0[0][2][4] + sp[20] * PI1[0][2][4] + sp[20] * PI1[0][4][2] + sp[21] * PI3[0][2][4];
    A[147] = sp[28] * PI2[0][2][0] + sp[27] * PI4[0][2][0];
    A[148] = sp[28] * PI2[0][2][1] + sp[27] * PI4[0][2][1];
    A[149] = sp[28] * PI2[0][2][2] + sp[27] * PI4[0][2][2];
    std::fill(A + 150, A + 156, 0.0);
    A[156] = sp[23] * PI0[0][3][0] + sp[20] * PI1[0][3][0] + sp[20] * PI1[0][0][3] + sp[21] * PI3[0][3][0];
    A[157] = sp[23] * PI0[0][3][1] + sp[20] * PI1[0][1][3];
    A[158] = sp[20] * PI1[0][3][1] + sp[21] * PI3[0][3][1];
    A[159] = sp[23] * PI0[0][3][2] + sp[20] * PI1[0][3][2] + sp[20] * PI1[0][2][3] + sp[21] * PI3[0][3][2];
    A[160] = sp[23] * PI0[0][3][3] + sp[20] * PI1[0][3][3] + sp[20] * PI1[0][3][3] + sp[21] * PI3[0][3][3];
    A[161] = sp[23] * PI0[0][3][4] + sp[20] * PI1[0][3][4] + sp[20] * PI1[0][4][3] + sp[21] * PI3[0][3][4];
    A[162] = sp[28] * PI2[0][3][0] + sp[27] * PI4[0][3][0];
    A[163] = sp[28] * PI2[0][3][1] + sp[27] * PI4[0][3][1];
    A[164] = sp[28] * PI2[0][3][2] + sp[27] * PI4[0][3][2];
    std::fill(A + 165, A + 171, 0.0);
    A[171] = sp[23] * PI0[0][4][0] + sp[20] * PI1[0][4][0] + sp[20] * PI1[0][0][4] + sp[21] * PI3[0][4][0];
    A[172] = sp[23] * PI0[0][4][1] + sp[20] * PI1[0][1][4];
    A[173] = sp[20] * PI1[0][4][1] + sp[21] * PI3[0][4][1];
    A[174] = sp[23] * PI0[0][4][2] + sp[20] * PI1[0][4][2] + sp[20] * PI1[0][2][4] + sp[21] * PI3[0][4][2];
    A[175] = sp[23] * PI0[0][4][3] + sp[20] * PI1[0][4][3] + sp[20] * PI1[0][3][4] + sp[21] * PI3[0][4][3];
    A[176] = sp[23] * PI0[0][4][4] + sp[20] * PI1[0][4][4] + sp[20] * PI1[0][4][4] + sp[21] * PI3[0][4][4];
    A[177] = sp[28] * PI2[0][4][0] + sp[27] * PI4[0][4][0];
    A[178] = sp[28] * PI2[0][4][1] + sp[27] * PI4[0][4][1];
    A[179] = sp[28] * PI2[0][4][2] + sp[27] * PI4[0][4][2];
    A[180] = sp[24] * PI2[0][0][0] + sp[22] * PI4[0][0][0];
    A[181] = sp[24] * PI2[0][1][0];
    A[182] = sp[22] * PI4[0][1][0];
    A[183] = sp[24] * PI2[0][2][0] + sp[22] * PI4[0][2][0];
    A[184] = sp[24] * PI2[0][3][0] + sp[22] * PI4[0][3][0];
    A[185] = sp[24] * PI2[0][4][0] + sp[22] * PI4[0][4][0];
    A[186] = sp[26] * PI2[0][0][0] + sp[25] * PI4[0][0][0];
    A[187] = sp[26] * PI2[0][1][0];
    A[188] = sp[25] * PI4[0][1][0];
    A[189] = sp[26] * PI2[0][2][0] + sp[25] * PI4[0][2][0];
    A[190] = sp[26] * PI2[0][3][0] + sp[25] * PI4[0][3][0];
    A[191] = sp[26] * PI2[0][4][0] + sp[25] * PI4[0][4][0];
    std::fill(A + 192, A + 195, 0.0);
    A[195] = sp[24] * PI2[0][0][1] + sp[22] * PI4[0][0][1];
    A[196] = sp[24] * PI2[0][1][1];
    A[197] = sp[22] * PI4[0][1][1];
    A[198] = sp[24] * PI2[0][2][1] + sp[22] * PI4[0][2][1];
    A[199] = sp[24] * PI2[0][3][1] + sp[22] * PI4[0][3][1];
    A[200] = sp[24] * PI2[0][4][1] + sp[22] * PI4[0][4][1];
    A[201] = sp[26] * PI2[0][0][1] + sp[25] * PI4[0][0][1];
    A[202] = sp[26] * PI2[0][1][1];
    A[203] = sp[25] * PI4[0][1][1];
    A[204] = sp[26] * PI2[0][2][1] + sp[25] * PI4[0][2][1];
    A[205] = sp[26] * PI2[0][3][1] + sp[25] * PI4[0][3][1];
    A[206] = sp[26] * PI2[0][4][1] + sp[25] * PI4[0][4][1];
    std::fill(A + 207, A + 210, 0.0);
    A[210] = sp[24] * PI2[0][0][2] + sp[22] * PI4[0][0][2];
    A[211] = sp[24] * PI2[0][1][2];
    A[212] = sp[22] * PI4[0][1][2];
    A[213] = sp[24] * PI2[0][2][2] + sp[22] * PI4[0][2][2];
    A[214] = sp[24] * PI2[0][3][2] + sp[22] * PI4[0][3][2];
    A[215] = sp[24] * PI2[0][4][2] + sp[22] * PI4[0][4][2];
    A[216] = sp[26] * PI2[0][0][2] + sp[25] * PI4[0][0][2];
    A[217] = sp[26] * PI2[0][1][2];
    A[218] = sp[25] * PI4[0][1][2];
    A[219] = sp[26] * PI2[0][2][2] + sp[25] * PI4[0][2][2];
    A[220] = sp[26] * PI2[0][3][2] + sp[25] * PI4[0][3][2];
    A[221] = sp[26] * PI2[0][4][2] + sp[25] * PI4[0][4][2];
    std::fill(A + 222, A + 225, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * i + j] += BF0[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM0[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * i + DM1[j]] += BF2[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * i + (j + 6)] += BF3[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * (i + 6) + j] += BF4[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 6; ++j)
            A[15 * (i + 6) + (j + 6)] += BF5[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * (i + 6) + DM2[j]] += BF1[i][j];
    for (int i = 0; i < 6; ++i)
        for (int j = 0; j < 5; ++j)
            A[15 * (i + 6) + DM3[j]] += BF2[i][j];
  }

};


class adaptivenavierstokes_cell_integral_9_otherwise: public ufc::cell_integral
{
public:

  adaptivenavierstokes_cell_integral_9_otherwise() : ufc::cell_integral()
  {

  }

  ~adaptivenavierstokes_cell_integral_9_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, false, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 5
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           5
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights7[7] = { 0.1125, 0.06296959027241358, 0.06296959027241358, 0.06296959027241358, 0.06619707639425308, 0.06619707639425308, 0.06619707639425308 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE18_C0_D01_Q7[1][7][5] =
        { { { -0.3333333333333385, 0.333333333333335, 1.333333333333321, 0.0, -1.333333333333334 },
            { 0.5948539707061686, -0.594853970706174, 3.189707941412335, 0.0, -3.189707941412351 },
            { 0.5948539707061685, 2.189707941412351, 0.4051460292938092, -2.784561912118513, -0.4051460292938247 },
            { -2.189707941412354, -0.594853970706174, 0.4051460292938148, 2.784561912118532, -0.4051460292938246 },
            { -0.8805682564204662, 0.8805682564204623, 0.2388634871590675, 0.0, -0.2388634871590795 },
            { -0.8805682564204653, -0.7611365128409207, 1.880568256420449, 1.641704769261392, -1.880568256420462 },
            { 0.7611365128409149, 0.8805682564204621, 1.880568256420445, -1.64170476926137, -1.880568256420461 } } };
    alignas(32) static const double FE18_C0_D10_Q7[1][7][5] =
        { { { -0.3333333333333329, 0.3333333333333326, 1.333333333333332, -1.333333333333332, 0.0 },
            { 0.5948539707061764, 2.189707941412349, 0.4051460292938244, -0.4051460292938244, -2.784561912118526 },
            { 0.5948539707061734, -0.5948539707061756, 3.189707941412344, -3.189707941412344, 0.0 },
            { -2.18970794141235, -0.5948539707061773, 0.405146029293824, -0.405146029293824, 2.784561912118527 },
            { -0.8805682564204611, -0.761136512840922, 1.880568256420458, -1.880568256420458, 1.641704769261383 },
            { -0.8805682564204599, 0.8805682564204588, 0.2388634871590777, -0.2388634871590777, 0.0 },
            { 0.7611365128409217, 0.8805682564204604, 1.880568256420458, -1.880568256420458, -1.641704769261382 } } };
    alignas(32) static const double FE18_C0_Q7[1][7][6] =
        { { { -0.1111111111111111, -0.1111111111111113, -0.1111111111111111, 0.4444444444444444, 0.4444444444444444, 0.4444444444444445 },
            { -0.08076859419188716, 0.4743526085855382, -0.08076859419188721, 0.3230743767675489, 0.04103582626313827, 0.323074376767549 },
            { -0.08076859419188719, -0.08076859419188731, 0.4743526085855383, 0.3230743767675486, 0.323074376767549, 0.04103582626313836 },
            { 0.4743526085855386, -0.08076859419188717, -0.08076859419188719, 0.04103582626313827, 0.3230743767675488, 0.3230743767675486 },
            { -0.0280749432230787, -0.05258390110254544, -0.02807494322307881, 0.1122997728923151, 0.8841342417640725, 0.1122997728923151 },
            { -0.02807494322307866, -0.02807494322307886, -0.05258390110254534, 0.1122997728923151, 0.1122997728923151, 0.8841342417640726 },
            { -0.05258390110254531, -0.02807494322307901, -0.02807494322307885, 0.8841342417640724, 0.1122997728923153, 0.1122997728923153 } } };
    alignas(32) static const double FE20_C2_D01_Q7[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE20_C2_Q7[1][7][3] =
        { { { 0.3333333333333334, 0.3333333333333333, 0.3333333333333333 },
            { 0.1012865073234564, 0.7974269853530872, 0.1012865073234563 },
            { 0.1012865073234565, 0.1012865073234564, 0.7974269853530871 },
            { 0.7974269853530873, 0.1012865073234563, 0.1012865073234563 },
            { 0.4701420641051152, 0.05971587178976979, 0.4701420641051151 },
            { 0.4701420641051152, 0.4701420641051151, 0.05971587178976974 },
            { 0.05971587178976988, 0.4701420641051151, 0.4701420641051151 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE20_C2_D01_Q7[0][0][0] + coordinate_dofs[2] * FE20_C2_D01_Q7[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE20_C2_D01_Q7[0][0][0] + coordinate_dofs[5] * FE20_C2_D01_Q7[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE20_C2_D01_Q7[0][0][0] + coordinate_dofs[4] * FE20_C2_D01_Q7[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE20_C2_D01_Q7[0][0][0] + coordinate_dofs[3] * FE20_C2_D01_Q7[0][0][1];
    alignas(32) double sp[8];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = std::abs(sp[2]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[5] = {};
    alignas(32) double BF2[5] = {};
    alignas(32) double BF3[6] = {};
    alignas(32) double BF4[5] = {};
    alignas(32) double BF5[5] = {};
    alignas(32) double BF6[3] = {};
    for (int iq = 0; iq < 7; ++iq)
    {
        // Quadrature loop body setup (num_points=7)
        // Unstructured varying computations for num_points=7
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w0_c2 += w[0][ic + 12] * FE20_C2_Q7[0][iq][ic];
        const double w0_d1_c0 = w[0][0] * FE18_C0_D01_Q7[0][iq][0] + w[0][2] * FE18_C0_D01_Q7[0][iq][1] + w[0][3] * FE18_C0_D01_Q7[0][iq][2] + w[0][4] * FE18_C0_D01_Q7[0][iq][3] + w[0][5] * FE18_C0_D01_Q7[0][iq][4];
        const double w0_d0_c0 = w[0][0] * FE18_C0_D10_Q7[0][iq][0] + w[0][1] * FE18_C0_D10_Q7[0][iq][1] + w[0][3] * FE18_C0_D10_Q7[0][iq][2] + w[0][4] * FE18_C0_D10_Q7[0][iq][3] + w[0][5] * FE18_C0_D10_Q7[0][iq][4];
        const double w0_d1_c1 = w[0][6] * FE18_C0_D01_Q7[0][iq][0] + w[0][8] * FE18_C0_D01_Q7[0][iq][1] + w[0][9] * FE18_C0_D01_Q7[0][iq][2] + w[0][10] * FE18_C0_D01_Q7[0][iq][3] + w[0][11] * FE18_C0_D01_Q7[0][iq][4];
        const double w0_d0_c1 = w[0][6] * FE18_C0_D10_Q7[0][iq][0] + w[0][7] * FE18_C0_D10_Q7[0][iq][1] + w[0][9] * FE18_C0_D10_Q7[0][iq][2] + w[0][10] * FE18_C0_D10_Q7[0][iq][3] + w[0][11] * FE18_C0_D10_Q7[0][iq][4];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c1 += w[0][ic + 6] * FE18_C0_Q7[0][iq][ic];
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c0 += w[0][ic] * FE18_C0_Q7[0][iq][ic];
        alignas(32) double sv7[50];
        sv7[0] = w0_c2 * sp[3];
        sv7[1] = w0_c2 * sp[4];
        sv7[2] = w0_c2 * sp[5];
        sv7[3] = w0_c2 * sp[6];
        sv7[4] = w0_d1_c0 * sp[3];
        sv7[5] = w0_d0_c0 * sp[4];
        sv7[6] = sv7[4] + sv7[5];
        sv7[7] = sv7[6] * sp[4];
        sv7[8] = sv7[6] * sp[3];
        sv7[9] = w0_d1_c1 * sp[3];
        sv7[10] = w0_d0_c1 * sp[4];
        sv7[11] = sv7[9] + sv7[10];
        sv7[12] = sv7[11] * sp[3];
        sv7[13] = sv7[11] * sp[4];
        sv7[14] = w0_d0_c0 * sp[5];
        sv7[15] = w0_d1_c0 * sp[6];
        sv7[16] = sv7[14] + sv7[15];
        sv7[17] = sv7[16] * sp[5];
        sv7[18] = sv7[16] * sp[6];
        sv7[19] = w0_d0_c1 * sp[5];
        sv7[20] = w0_d1_c1 * sp[6];
        sv7[21] = sv7[19] + sv7[20];
        sv7[22] = sv7[21] * sp[6];
        sv7[23] = sv7[21] * sp[5];
        sv7[24] = sv7[12] + sv7[22];
        sv7[25] = sv7[23] + sv7[13];
        sv7[26] = sv7[17] + sv7[7];
        sv7[27] = sv7[8] + sv7[18];
        sv7[28] = sv7[24] * w[2][0];
        sv7[29] = sv7[25] * w[2][0];
        sv7[30] = sv7[26] * w[2][0];
        sv7[31] = sv7[27] * w[2][0];
        sv7[32] = -1 * sv7[0] + sv7[28];
        sv7[33] = -1 * sv7[1] + sv7[29];
        sv7[34] = -1 * sv7[2] + sv7[30];
        sv7[35] = -1 * sv7[3] + sv7[31];
        sv7[36] = sv7[11] + sv7[16];
        sv7[37] = w0_c1 * sv7[6];
        sv7[38] = w0_c0 * sv7[16];
        sv7[39] = sv7[37] + sv7[38];
        sv7[40] = w0_c1 * sv7[11];
        sv7[41] = w0_c0 * sv7[21];
        sv7[42] = sv7[40] + sv7[41];
        sv7[43] = sv7[32] * sp[7];
        sv7[44] = sv7[33] * sp[7];
        sv7[45] = sv7[34] * sp[7];
        sv7[46] = sv7[35] * sp[7];
        sv7[47] = sv7[36] * sp[7];
        sv7[48] = sv7[39] * sp[7];
        sv7[49] = sv7[42] * sp[7];
        const double fw0 = sv7[48] * weights7[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE18_C0_Q7[0][iq][i];
        const double fw1 = sv7[45] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            BF1[i] += fw1 * FE18_C0_D10_Q7[0][iq][i];
        const double fw2 = sv7[46] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            BF2[i] += fw2 * FE18_C0_D01_Q7[0][iq][i];
        const double fw3 = sv7[49] * weights7[iq];
        for (int i = 0; i < 6; ++i)
            BF3[i] += fw3 * FE18_C0_Q7[0][iq][i];
        const double fw4 = sv7[44] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            BF4[i] += fw4 * FE18_C0_D10_Q7[0][iq][i];
        const double fw5 = sv7[43] * weights7[iq];
        for (int i = 0; i < 5; ++i)
            BF5[i] += fw5 * FE18_C0_D01_Q7[0][iq][i];
        const double fw6 = sv7[47] * weights7[iq];
        for (int i = 0; i < 3; ++i)
            BF6[i] += fw6 * FE20_C2_Q7[0][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    static const int DM0[5] = { 0, 1, 3, 4, 5 };
    static const int DM1[5] = { 0, 2, 3, 4, 5 };
    static const int DM2[5] = { 6, 7, 9, 10, 11 };
    static const int DM3[5] = { 6, 8, 9, 10, 11 };
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 5; ++i)
        A[DM0[i]] += BF1[i];
    for (int i = 0; i < 5; ++i)
        A[DM1[i]] += BF2[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF3[i];
    for (int i = 0; i < 5; ++i)
        A[DM2[i]] += BF4[i];
    for (int i = 0; i < 5; ++i)
        A[DM3[i]] += BF5[i];
    for (int i = 0; i < 3; ++i)
        A[i + 12] += BF6[i];
  }

};


class adaptivenavierstokes_exterior_facet_integral_9_otherwise: public ufc::exterior_facet_integral
{
public:

  adaptivenavierstokes_exterior_facet_integral_9_otherwise() : ufc::exterior_facet_integral()
  {

  }

  ~adaptivenavierstokes_exterior_facet_integral_9_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, true, false});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 3
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 3
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           3
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights2[2] = { 0.5, 0.5 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_F_Q2[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE3_C0_F_Q2[3][2][3] =
        { { { 0.0, 0.7886751345948129, 0.2113248654051871 },
            { 0.0, 0.2113248654051872, 0.7886751345948129 } },
          { { 0.7886751345948129, 0.0, 0.2113248654051871 },
            { 0.2113248654051871, 0.0, 0.7886751345948129 } },
          { { 0.7886751345948129, 0.2113248654051871, 0.0 },
            { 0.2113248654051871, 0.7886751345948129, 0.0 } } };
    alignas(32) static const double FE6_C0_F_Q2[3][2][6] =
        { { { 0.0, 0.4553418012614793, -0.1220084679281462, 0.6666666666666669, 0.0, 0.0 },
            { 0.0, -0.1220084679281464, 0.4553418012614796, 0.6666666666666666, 0.0, 0.0 } },
          { { 0.4553418012614795, 0.0, -0.1220084679281462, 0.0, 0.6666666666666667, 0.0 },
            { -0.1220084679281462, 0.0, 0.4553418012614796, 0.0, 0.6666666666666665, 0.0 } },
          { { 0.4553418012614796, -0.1220084679281462, 0.0, 0.0, 0.0, 0.6666666666666666 },
            { -0.1220084679281462, 0.4553418012614795, 0.0, 0.0, 0.0, 0.6666666666666666 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q2[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q2[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q2[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q2[0][0][1];
    alignas(32) double sp[29];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = triangle_reference_facet_normals[facet][1] * sp[3];
    sp[5] = -1 * J_c1 / sp[2];
    sp[6] = triangle_reference_facet_normals[facet][0] * sp[5];
    sp[7] = sp[4] + sp[6];
    sp[8] = sp[7] * sp[7];
    sp[9] = J_c3 / sp[2];
    sp[10] = triangle_reference_facet_normals[facet][0] * sp[9];
    sp[11] = -1 * J_c2 / sp[2];
    sp[12] = triangle_reference_facet_normals[facet][1] * sp[11];
    sp[13] = sp[10] + sp[12];
    sp[14] = sp[13] * sp[13];
    sp[15] = sp[8] + sp[14];
    sp[16] = std::sqrt(sp[15]);
    sp[17] = sp[7] / sp[16];
    sp[18] = sp[13] / sp[16];
    sp[19] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[20] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] * sp[21];
    sp[23] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[24] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] * sp[25];
    sp[27] = sp[22] + sp[26];
    sp[28] = std::sqrt(sp[27]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[6] = {};
    for (int iq = 0; iq < 2; ++iq)
    {
        // Quadrature loop body setup (num_points=2)
        // Unstructured varying computations for num_points=2
        double w1 = 0.0;
        for (int ic = 0; ic < 3; ++ic)
            w1 += w[1][ic] * FE3_C0_F_Q2[facet][iq][ic];
        alignas(32) double sv2[4];
        sv2[0] = sp[17] * w1;
        sv2[1] = sp[18] * w1;
        sv2[2] = sv2[0] * sp[28];
        sv2[3] = sv2[1] * sp[28];
        const double fw0 = sv2[3] * weights2[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE6_C0_F_Q2[facet][iq][i];
        const double fw1 = sv2[2] * weights2[iq];
        for (int i = 0; i < 6; ++i)
            BF1[i] += fw1 * FE6_C0_F_Q2[facet][iq][i];
    }
    std::fill(A, A + 15, 0.0);
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF1[i];
  }

};


class adaptivenavierstokes_exterior_facet_integral_10_0: public ufc::exterior_facet_integral
{
public:

  adaptivenavierstokes_exterior_facet_integral_10_0() : ufc::exterior_facet_integral()
  {

  }

  ~adaptivenavierstokes_exterior_facet_integral_10_0() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights2[2] = { 0.5, 0.5 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_F_Q2[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE5_C0_F_Q2[3][2][6] =
        { { { 0.0, 0.4553418012614793, -0.1220084679281462, 0.6666666666666669, 0.0, 0.0 },
            { 0.0, -0.1220084679281464, 0.4553418012614796, 0.6666666666666666, 0.0, 0.0 } },
          { { 0.4553418012614795, 0.0, -0.1220084679281462, 0.0, 0.6666666666666667, 0.0 },
            { -0.1220084679281462, 0.0, 0.4553418012614796, 0.0, 0.6666666666666665, 0.0 } },
          { { 0.4553418012614796, -0.1220084679281462, 0.0, 0.0, 0.0, 0.6666666666666666 },
            { -0.1220084679281462, 0.4553418012614795, 0.0, 0.0, 0.0, 0.6666666666666666 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_F_Q2[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_F_Q2[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_F_Q2[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_F_Q2[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_F_Q2[0][0][1];
    alignas(32) double sp[10];
    sp[0] = J_c0 * triangle_reference_facet_jacobian[facet][0][0];
    sp[1] = J_c1 * triangle_reference_facet_jacobian[facet][1][0];
    sp[2] = sp[0] + sp[1];
    sp[3] = sp[2] * sp[2];
    sp[4] = triangle_reference_facet_jacobian[facet][0][0] * J_c2;
    sp[5] = triangle_reference_facet_jacobian[facet][1][0] * J_c3;
    sp[6] = sp[4] + sp[5];
    sp[7] = sp[6] * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = std::sqrt(sp[8]);
    alignas(32) double BF0 = {};
    for (int iq = 0; iq < 2; ++iq)
    {
        // Quadrature loop body setup (num_points=2)
        // Unstructured varying computations for num_points=2
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 6; ++ic)
            w0_c0 += w[0][ic] * FE5_C0_F_Q2[facet][iq][ic];
        alignas(32) double sv2[1];
        sv2[0] = w0_c0 * sp[9];
        const double fw0 = sv2[0] * weights2[iq];
        BF0 += fw0;
    }
    A[0] = 0.0;
    A[0] += BF0;
  }

};


class adaptivenavierstokes_form_0: public ufc::form
{
public:

  adaptivenavierstokes_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "44e062b421928ed1256c22f0ced2eb44b42b6eb309f4035e5c130e64350ece936eb22757484493d46e3d1512224508774f9fa5745ad214b7bbe4ef34956e8f80";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 2;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 2)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_7();
    case 1:
        return new adaptivenavierstokes_finite_element_7();
    case 2:
        return new adaptivenavierstokes_finite_element_7();
    case 3:
        return new adaptivenavierstokes_finite_element_12();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_7();
    case 1:
        return new adaptivenavierstokes_dofmap_7();
    case 2:
        return new adaptivenavierstokes_dofmap_7();
    case 3:
        return new adaptivenavierstokes_dofmap_12();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new adaptivenavierstokes_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class adaptivenavierstokes_form_1: public ufc::form
{
public:

  adaptivenavierstokes_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "3f0b7803c0190227f28c8191bbd3f2b31477034339c8bc102bc9c4b5fc1dbf0ff7005c5334204a684fbe72e6735fa82936b8f6f9f342d9bca2cc00b0ff82eb94";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_7();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_7();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 1;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return false;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 0:
        return new adaptivenavierstokes_exterior_facet_integral_1_0();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class adaptivenavierstokes_form_2: public ufc::form
{
public:

  adaptivenavierstokes_form_2() : ufc::form()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_form_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "1f6c8a081535e872873356770262980504f4927e68a8a6ef31d9e7db578a7dc3d538c444c86cffa955eff7d3c711cbf7586024e305dfbd023235405722eafe2d";
  }

  std::size_t rank() const final override
  {
    return 0;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_7();
    case 1:
        return new adaptivenavierstokes_finite_element_0();
    case 2:
        return new adaptivenavierstokes_finite_element_12();
    case 3:
        return new adaptivenavierstokes_finite_element_5();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_7();
    case 1:
        return new adaptivenavierstokes_dofmap_0();
    case 2:
        return new adaptivenavierstokes_dofmap_12();
    case 3:
        return new adaptivenavierstokes_dofmap_5();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new adaptivenavierstokes_cell_integral_2_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new adaptivenavierstokes_exterior_facet_integral_2_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class adaptivenavierstokes_form_3: public ufc::form
{
public:

  adaptivenavierstokes_form_3() : ufc::form()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_form_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "840c2c2678df98de3def941791fe1c28dc0d46a420a9c451649240c0981b46a87aab0b61e77f3539335cf92297034dbd9f3febd38e9087909eca36008907f4bb";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 1;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_11();
    case 1:
        return new adaptivenavierstokes_finite_element_11();
    case 2:
        return new adaptivenavierstokes_finite_element_14();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_11();
    case 1:
        return new adaptivenavierstokes_dofmap_11();
    case 2:
        return new adaptivenavierstokes_dofmap_14();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new adaptivenavierstokes_cell_integral_3_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class adaptivenavierstokes_form_4: public ufc::form
{
public:

  adaptivenavierstokes_form_4() : ufc::form()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_form_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "e9d331e64f9f86622db6e86fa06e2f145c280c3818b7c1bfcf646050c90a883b5baab26c75698d6a05f9879677c154fa772372f32f9d8e783aa7d7c95ee9570f";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_11();
    case 1:
        return new adaptivenavierstokes_finite_element_7();
    case 2:
        return new adaptivenavierstokes_finite_element_0();
    case 3:
        return new adaptivenavierstokes_finite_element_12();
    case 4:
        return new adaptivenavierstokes_finite_element_14();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_11();
    case 1:
        return new adaptivenavierstokes_dofmap_7();
    case 2:
        return new adaptivenavierstokes_dofmap_0();
    case 3:
        return new adaptivenavierstokes_dofmap_12();
    case 4:
        return new adaptivenavierstokes_dofmap_14();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new adaptivenavierstokes_cell_integral_4_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new adaptivenavierstokes_exterior_facet_integral_4_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class adaptivenavierstokes_form_5: public ufc::form
{
public:

  adaptivenavierstokes_form_5() : ufc::form()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_form_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "2d8d5260804743963385b2ef11d3312f6b388c728e6d69620ef23f446ec97396ab029743e6e4963e66dccb081e8b8064cce07e33cc65600b4183a9982d4ce736";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 1;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_11();
    case 1:
        return new adaptivenavierstokes_finite_element_11();
    case 2:
        return new adaptivenavierstokes_finite_element_8();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_11();
    case 1:
        return new adaptivenavierstokes_dofmap_11();
    case 2:
        return new adaptivenavierstokes_dofmap_8();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return false;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return true;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new adaptivenavierstokes_exterior_facet_integral_5_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return new adaptivenavierstokes_interior_facet_integral_5_otherwise();
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class adaptivenavierstokes_form_6: public ufc::form
{
public:

  adaptivenavierstokes_form_6() : ufc::form()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_form_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "d8b71e7c519ed7891ea40c804be22f003c1dc7bc4468f30e3840af7a96ecbe34357c32e97a26f76473b5f88019d58aaa554fbc6bd208d35db2d90659b203a975";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_11();
    case 1:
        return new adaptivenavierstokes_finite_element_7();
    case 2:
        return new adaptivenavierstokes_finite_element_0();
    case 3:
        return new adaptivenavierstokes_finite_element_12();
    case 4:
        return new adaptivenavierstokes_finite_element_11();
    case 5:
        return new adaptivenavierstokes_finite_element_8();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_11();
    case 1:
        return new adaptivenavierstokes_dofmap_7();
    case 2:
        return new adaptivenavierstokes_dofmap_0();
    case 3:
        return new adaptivenavierstokes_dofmap_12();
    case 4:
        return new adaptivenavierstokes_dofmap_11();
    case 5:
        return new adaptivenavierstokes_dofmap_8();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new adaptivenavierstokes_cell_integral_6_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new adaptivenavierstokes_exterior_facet_integral_6_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class adaptivenavierstokes_form_7: public ufc::form
{
public:

  adaptivenavierstokes_form_7() : ufc::form()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_form_7() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "a3dbddba9b53a5da5e4d55260808938fa0f77bdfbb65764b4965b3c4b90224c1ee0712ea57edd4df237c4b5ea7221abd14acacfdad8079d4e51b687a2196fed7";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_13();
    case 1:
        return new adaptivenavierstokes_finite_element_5();
    case 2:
        return new adaptivenavierstokes_finite_element_11();
    case 3:
        return new adaptivenavierstokes_finite_element_11();
    case 4:
        return new adaptivenavierstokes_finite_element_7();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_13();
    case 1:
        return new adaptivenavierstokes_dofmap_5();
    case 2:
        return new adaptivenavierstokes_dofmap_11();
    case 3:
        return new adaptivenavierstokes_dofmap_11();
    case 4:
        return new adaptivenavierstokes_dofmap_7();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return true;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new adaptivenavierstokes_cell_integral_7_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new adaptivenavierstokes_exterior_facet_integral_7_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return new adaptivenavierstokes_interior_facet_integral_7_otherwise();
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class adaptivenavierstokes_form_8: public ufc::form
{
public:

  adaptivenavierstokes_form_8() : ufc::form()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_form_8() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "07bb277b6235e97d608aa1c43ca760d90cbc4149546fefdcbcd1094a87ae1320d2ff4d9a0fb58b43dc53f6473132123d3b31c850bcef6c76f10ffe53023bf8f8";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 2;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 2)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 2};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_7();
    case 1:
        return new adaptivenavierstokes_finite_element_7();
    case 2:
        return new adaptivenavierstokes_finite_element_7();
    case 3:
        return new adaptivenavierstokes_finite_element_12();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_7();
    case 1:
        return new adaptivenavierstokes_dofmap_7();
    case 2:
        return new adaptivenavierstokes_dofmap_7();
    case 3:
        return new adaptivenavierstokes_dofmap_12();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new adaptivenavierstokes_cell_integral_8_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class adaptivenavierstokes_form_9: public ufc::form
{
public:

  adaptivenavierstokes_form_9() : ufc::form()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_form_9() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "541678efcaed225971ff2ba0e49b6c171b31d5de26dc6e95e92522e9766d151f434645b30841b46db8ffef6690163bb96cb9b35d3b3682fac229a2b020a65434";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 3;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_7();
    case 1:
        return new adaptivenavierstokes_finite_element_7();
    case 2:
        return new adaptivenavierstokes_finite_element_0();
    case 3:
        return new adaptivenavierstokes_finite_element_12();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_7();
    case 1:
        return new adaptivenavierstokes_dofmap_7();
    case 2:
        return new adaptivenavierstokes_dofmap_0();
    case 3:
        return new adaptivenavierstokes_dofmap_12();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new adaptivenavierstokes_cell_integral_9_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new adaptivenavierstokes_exterior_facet_integral_9_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class adaptivenavierstokes_form_10: public ufc::form
{
public:

  adaptivenavierstokes_form_10() : ufc::form()
  {
    // Do nothing
  }

  ~adaptivenavierstokes_form_10() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "de7cee8508a50e71eab33a26d3fb67ed2ec63d827dc96050ae8e56f2f7559242f8e1e8c203665b32b83acd43732eed0131da98d244c6d3b55a16584764422795";
  }

  std::size_t rank() const final override
  {
    return 0;
  }

  std::size_t num_coefficients() const final override
  {
    return 1;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new adaptivenavierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new adaptivenavierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new adaptivenavierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_finite_element_7();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new adaptivenavierstokes_dofmap_7();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 1;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return false;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    switch (subdomain_id)
    {
    case 0:
        return new adaptivenavierstokes_exterior_facet_integral_10_0();
    default:
        return nullptr;
    }
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace AdaptiveNavierStokes
{

class CoefficientSpace___cell_bubble: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace___cell_bubble(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_14>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_14>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace___cell_bubble(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_14>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_14>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace___cell_cone: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace___cell_cone(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_8>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_8>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace___cell_cone(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_8>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_8>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace___cell_residual: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace___cell_residual(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace___cell_residual(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace___discrete_dual_solution: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace___discrete_dual_solution(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace___discrete_dual_solution(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace___facet_residual: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace___facet_residual(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace___facet_residual(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace___improved_dual: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace___improved_dual(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace___improved_dual(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_nu: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_nu(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_12>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_12>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_nu(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_12>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_12>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_p0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_p0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_p0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_w: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_w(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_w(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_0_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_0_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_0_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_0_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_0_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_0_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_w Form_0_FunctionSpace_2;

typedef CoefficientSpace_nu Form_0_FunctionSpace_3;

class Form_0: public dolfin::Form
{
public:

  // Constructor
  Form_0(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 2), w(*this, 0), nu(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_0>();
  }

  // Constructor
  Form_0(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> w, std::shared_ptr<const dolfin::GenericFunction> nu):
    dolfin::Form(2, 2), w(*this, 0), nu(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->w = w;
    this->nu = nu;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_0>();
  }

  // Destructor
  ~Form_0()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w")
      return 0;
    else if (name == "nu")
      return 1;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w";
    case 1:
      return "nu";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_0_FunctionSpace_0 TestSpace;
  typedef Form_0_FunctionSpace_1 TrialSpace;
  typedef Form_0_FunctionSpace_2 CoefficientSpace_w;
  typedef Form_0_FunctionSpace_3 CoefficientSpace_nu;

  // Coefficients
  dolfin::CoefficientAssigner w;
  dolfin::CoefficientAssigner nu;
};


class Form_1_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_1_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_1_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_1: public dolfin::Form
{
public:

  // Constructor
  Form_1(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 0)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_1>();
  }

  // Destructor
  ~Form_1()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_1_FunctionSpace_0 TestSpace;

  // Coefficients
};


typedef CoefficientSpace_w Form_2_FunctionSpace_0;

typedef CoefficientSpace_p0 Form_2_FunctionSpace_1;

typedef CoefficientSpace_nu Form_2_FunctionSpace_2;

typedef CoefficientSpace___improved_dual Form_2_FunctionSpace_3;

class Form_2: public dolfin::Form
{
public:

  // Constructor
  Form_2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::Form(0, 4), w(*this, 0), p0(*this, 1), nu(*this, 2), __improved_dual(*this, 3)
  {
    _mesh = mesh;
    _ufc_form = std::make_shared<const adaptivenavierstokes_form_2>();
  }

  // Constructor
  Form_2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::GenericFunction> w, std::shared_ptr<const dolfin::GenericFunction> p0, std::shared_ptr<const dolfin::GenericFunction> nu, std::shared_ptr<const dolfin::GenericFunction> __improved_dual):
    dolfin::Form(0, 4), w(*this, 0), p0(*this, 1), nu(*this, 2), __improved_dual(*this, 3)
  {
    _mesh = mesh;
    this->w = w;
    this->p0 = p0;
    this->nu = nu;
    this->__improved_dual = __improved_dual;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_2>();
  }

  // Destructor
  ~Form_2()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w")
      return 0;
    else if (name == "p0")
      return 1;
    else if (name == "nu")
      return 2;
    else if (name == "__improved_dual")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w";
    case 1:
      return "p0";
    case 2:
      return "nu";
    case 3:
      return "__improved_dual";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_2_FunctionSpace_0 CoefficientSpace_w;
  typedef Form_2_FunctionSpace_1 CoefficientSpace_p0;
  typedef Form_2_FunctionSpace_2 CoefficientSpace_nu;
  typedef Form_2_FunctionSpace_3 CoefficientSpace___improved_dual;

  // Coefficients
  dolfin::CoefficientAssigner w;
  dolfin::CoefficientAssigner p0;
  dolfin::CoefficientAssigner nu;
  dolfin::CoefficientAssigner __improved_dual;
};


class Form_3_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_3_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_3_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_3_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_3_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_3_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

typedef CoefficientSpace___cell_bubble Form_3_FunctionSpace_2;

class Form_3: public dolfin::Form
{
public:

  // Constructor
  Form_3(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 1), __cell_bubble(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_3>();
  }

  // Constructor
  Form_3(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> __cell_bubble):
    dolfin::Form(2, 1), __cell_bubble(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->__cell_bubble = __cell_bubble;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_3>();
  }

  // Destructor
  ~Form_3()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "__cell_bubble")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "__cell_bubble";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_3_FunctionSpace_0 TestSpace;
  typedef Form_3_FunctionSpace_1 TrialSpace;
  typedef Form_3_FunctionSpace_2 CoefficientSpace___cell_bubble;

  // Coefficients
  dolfin::CoefficientAssigner __cell_bubble;
};


class Form_4_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_4_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_4_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_w Form_4_FunctionSpace_1;

typedef CoefficientSpace_p0 Form_4_FunctionSpace_2;

typedef CoefficientSpace_nu Form_4_FunctionSpace_3;

typedef CoefficientSpace___cell_bubble Form_4_FunctionSpace_4;

class Form_4: public dolfin::Form
{
public:

  // Constructor
  Form_4(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 4), w(*this, 0), p0(*this, 1), nu(*this, 2), __cell_bubble(*this, 3)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_4>();
  }

  // Constructor
  Form_4(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> w, std::shared_ptr<const dolfin::GenericFunction> p0, std::shared_ptr<const dolfin::GenericFunction> nu, std::shared_ptr<const dolfin::GenericFunction> __cell_bubble):
    dolfin::Form(1, 4), w(*this, 0), p0(*this, 1), nu(*this, 2), __cell_bubble(*this, 3)
  {
    _function_spaces[0] = V0;

    this->w = w;
    this->p0 = p0;
    this->nu = nu;
    this->__cell_bubble = __cell_bubble;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_4>();
  }

  // Destructor
  ~Form_4()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w")
      return 0;
    else if (name == "p0")
      return 1;
    else if (name == "nu")
      return 2;
    else if (name == "__cell_bubble")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w";
    case 1:
      return "p0";
    case 2:
      return "nu";
    case 3:
      return "__cell_bubble";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_4_FunctionSpace_0 TestSpace;
  typedef Form_4_FunctionSpace_1 CoefficientSpace_w;
  typedef Form_4_FunctionSpace_2 CoefficientSpace_p0;
  typedef Form_4_FunctionSpace_3 CoefficientSpace_nu;
  typedef Form_4_FunctionSpace_4 CoefficientSpace___cell_bubble;

  // Coefficients
  dolfin::CoefficientAssigner w;
  dolfin::CoefficientAssigner p0;
  dolfin::CoefficientAssigner nu;
  dolfin::CoefficientAssigner __cell_bubble;
};


class Form_5_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_5_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_5_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_5_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_5_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_5_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

typedef CoefficientSpace___cell_cone Form_5_FunctionSpace_2;

class Form_5: public dolfin::Form
{
public:

  // Constructor
  Form_5(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 1), __cell_cone(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_5>();
  }

  // Constructor
  Form_5(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> __cell_cone):
    dolfin::Form(2, 1), __cell_cone(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->__cell_cone = __cell_cone;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_5>();
  }

  // Destructor
  ~Form_5()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "__cell_cone")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "__cell_cone";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_5_FunctionSpace_0 TestSpace;
  typedef Form_5_FunctionSpace_1 TrialSpace;
  typedef Form_5_FunctionSpace_2 CoefficientSpace___cell_cone;

  // Coefficients
  dolfin::CoefficientAssigner __cell_cone;
};


class Form_6_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_6_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_6_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_11>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_11>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_w Form_6_FunctionSpace_1;

typedef CoefficientSpace_p0 Form_6_FunctionSpace_2;

typedef CoefficientSpace_nu Form_6_FunctionSpace_3;

typedef CoefficientSpace___cell_residual Form_6_FunctionSpace_4;

typedef CoefficientSpace___cell_cone Form_6_FunctionSpace_5;

class Form_6: public dolfin::Form
{
public:

  // Constructor
  Form_6(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 5), w(*this, 0), p0(*this, 1), nu(*this, 2), __cell_residual(*this, 3), __cell_cone(*this, 4)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_6>();
  }

  // Constructor
  Form_6(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> w, std::shared_ptr<const dolfin::GenericFunction> p0, std::shared_ptr<const dolfin::GenericFunction> nu, std::shared_ptr<const dolfin::GenericFunction> __cell_residual, std::shared_ptr<const dolfin::GenericFunction> __cell_cone):
    dolfin::Form(1, 5), w(*this, 0), p0(*this, 1), nu(*this, 2), __cell_residual(*this, 3), __cell_cone(*this, 4)
  {
    _function_spaces[0] = V0;

    this->w = w;
    this->p0 = p0;
    this->nu = nu;
    this->__cell_residual = __cell_residual;
    this->__cell_cone = __cell_cone;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_6>();
  }

  // Destructor
  ~Form_6()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w")
      return 0;
    else if (name == "p0")
      return 1;
    else if (name == "nu")
      return 2;
    else if (name == "__cell_residual")
      return 3;
    else if (name == "__cell_cone")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w";
    case 1:
      return "p0";
    case 2:
      return "nu";
    case 3:
      return "__cell_residual";
    case 4:
      return "__cell_cone";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_6_FunctionSpace_0 TestSpace;
  typedef Form_6_FunctionSpace_1 CoefficientSpace_w;
  typedef Form_6_FunctionSpace_2 CoefficientSpace_p0;
  typedef Form_6_FunctionSpace_3 CoefficientSpace_nu;
  typedef Form_6_FunctionSpace_4 CoefficientSpace___cell_residual;
  typedef Form_6_FunctionSpace_5 CoefficientSpace___cell_cone;

  // Coefficients
  dolfin::CoefficientAssigner w;
  dolfin::CoefficientAssigner p0;
  dolfin::CoefficientAssigner nu;
  dolfin::CoefficientAssigner __cell_residual;
  dolfin::CoefficientAssigner __cell_cone;
};


class Form_7_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_7_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_13>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_13>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_7_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_13>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_13>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

typedef CoefficientSpace___improved_dual Form_7_FunctionSpace_1;

typedef CoefficientSpace___cell_residual Form_7_FunctionSpace_2;

typedef CoefficientSpace___facet_residual Form_7_FunctionSpace_3;

typedef CoefficientSpace___discrete_dual_solution Form_7_FunctionSpace_4;

class Form_7: public dolfin::Form
{
public:

  // Constructor
  Form_7(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 4), __improved_dual(*this, 0), __cell_residual(*this, 1), __facet_residual(*this, 2), __discrete_dual_solution(*this, 3)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_7>();
  }

  // Constructor
  Form_7(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> __improved_dual, std::shared_ptr<const dolfin::GenericFunction> __cell_residual, std::shared_ptr<const dolfin::GenericFunction> __facet_residual, std::shared_ptr<const dolfin::GenericFunction> __discrete_dual_solution):
    dolfin::Form(1, 4), __improved_dual(*this, 0), __cell_residual(*this, 1), __facet_residual(*this, 2), __discrete_dual_solution(*this, 3)
  {
    _function_spaces[0] = V0;

    this->__improved_dual = __improved_dual;
    this->__cell_residual = __cell_residual;
    this->__facet_residual = __facet_residual;
    this->__discrete_dual_solution = __discrete_dual_solution;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_7>();
  }

  // Destructor
  ~Form_7()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "__improved_dual")
      return 0;
    else if (name == "__cell_residual")
      return 1;
    else if (name == "__facet_residual")
      return 2;
    else if (name == "__discrete_dual_solution")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "__improved_dual";
    case 1:
      return "__cell_residual";
    case 2:
      return "__facet_residual";
    case 3:
      return "__discrete_dual_solution";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_7_FunctionSpace_0 TestSpace;
  typedef Form_7_FunctionSpace_1 CoefficientSpace___improved_dual;
  typedef Form_7_FunctionSpace_2 CoefficientSpace___cell_residual;
  typedef Form_7_FunctionSpace_3 CoefficientSpace___facet_residual;
  typedef Form_7_FunctionSpace_4 CoefficientSpace___discrete_dual_solution;

  // Coefficients
  dolfin::CoefficientAssigner __improved_dual;
  dolfin::CoefficientAssigner __cell_residual;
  dolfin::CoefficientAssigner __facet_residual;
  dolfin::CoefficientAssigner __discrete_dual_solution;
};


class Form_lhs_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_lhs_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_lhs_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_lhs_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_lhs_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_lhs_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_w Form_lhs_FunctionSpace_2;

typedef CoefficientSpace_nu Form_lhs_FunctionSpace_3;

class Form_lhs: public dolfin::Form
{
public:

  // Constructor
  Form_lhs(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 2), w(*this, 0), nu(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_8>();
  }

  // Constructor
  Form_lhs(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> w, std::shared_ptr<const dolfin::GenericFunction> nu):
    dolfin::Form(2, 2), w(*this, 0), nu(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->w = w;
    this->nu = nu;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_8>();
  }

  // Destructor
  ~Form_lhs()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w")
      return 0;
    else if (name == "nu")
      return 1;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w";
    case 1:
      return "nu";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_lhs_FunctionSpace_0 TestSpace;
  typedef Form_lhs_FunctionSpace_1 TrialSpace;
  typedef Form_lhs_FunctionSpace_2 CoefficientSpace_w;
  typedef Form_lhs_FunctionSpace_3 CoefficientSpace_nu;

  // Coefficients
  dolfin::CoefficientAssigner w;
  dolfin::CoefficientAssigner nu;
};


class Form_rhs_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_rhs_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_rhs_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<adaptivenavierstokes_finite_element_7>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<adaptivenavierstokes_dofmap_7>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_w Form_rhs_FunctionSpace_1;

typedef CoefficientSpace_p0 Form_rhs_FunctionSpace_2;

typedef CoefficientSpace_nu Form_rhs_FunctionSpace_3;

class Form_rhs: public dolfin::Form
{
public:

  // Constructor
  Form_rhs(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 3), w(*this, 0), p0(*this, 1), nu(*this, 2)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_9>();
  }

  // Constructor
  Form_rhs(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> w, std::shared_ptr<const dolfin::GenericFunction> p0, std::shared_ptr<const dolfin::GenericFunction> nu):
    dolfin::Form(1, 3), w(*this, 0), p0(*this, 1), nu(*this, 2)
  {
    _function_spaces[0] = V0;

    this->w = w;
    this->p0 = p0;
    this->nu = nu;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_9>();
  }

  // Destructor
  ~Form_rhs()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w")
      return 0;
    else if (name == "p0")
      return 1;
    else if (name == "nu")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w";
    case 1:
      return "p0";
    case 2:
      return "nu";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_rhs_FunctionSpace_0 TestSpace;
  typedef Form_rhs_FunctionSpace_1 CoefficientSpace_w;
  typedef Form_rhs_FunctionSpace_2 CoefficientSpace_p0;
  typedef Form_rhs_FunctionSpace_3 CoefficientSpace_nu;

  // Coefficients
  dolfin::CoefficientAssigner w;
  dolfin::CoefficientAssigner p0;
  dolfin::CoefficientAssigner nu;
};


typedef CoefficientSpace_w Form_goal_FunctionSpace_0;

class Form_goal: public dolfin::GoalFunctional
{
public:

  // Constructor
  Form_goal(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::GoalFunctional(0, 1), w(*this, 0)
  {
    _mesh = mesh;
    _ufc_form = std::make_shared<const adaptivenavierstokes_form_10>();
  }

  // Constructor
  Form_goal(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::GenericFunction> w):
    dolfin::GoalFunctional(0, 1), w(*this, 0)
  {
    _mesh = mesh;
    this->w = w;

    _ufc_form = std::make_shared<const adaptivenavierstokes_form_10>();
  }

  // Destructor
  ~Form_goal()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "w")
      return 0;

    dolfin::dolfin_error("generated code for class GoalFunctional",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "w";
    }

    dolfin::dolfin_error("generated code for class GoalFunctional",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_goal_FunctionSpace_0 CoefficientSpace_w;

  // Coefficients
  dolfin::CoefficientAssigner w;

  /// Initialize all error control forms, attach coefficients and
  /// (re-)set error control
  virtual void update_ec(const dolfin::Form& a, const dolfin::Form& L)
  {
    // This stuff is created here and shipped elsewhere
    std::shared_ptr<dolfin::Form> a_star;           // Dual lhs
    std::shared_ptr<dolfin::Form> L_star;           // Dual rhs
    std::shared_ptr<dolfin::FunctionSpace> V_Ez_h;  // Extrapolation space
    std::shared_ptr<dolfin::Function> Ez_h;         // Extrapolated dual
    std::shared_ptr<dolfin::Form> residual;         // Residual (as functional)
    std::shared_ptr<dolfin::FunctionSpace> V_R_T;   // Trial space for cell residual
    std::shared_ptr<dolfin::Form> a_R_T;            // Cell residual lhs
    std::shared_ptr<dolfin::Form> L_R_T;            // Cell residual rhs
    std::shared_ptr<dolfin::FunctionSpace> V_b_T;   // Function space for cell bubble
    std::shared_ptr<dolfin::Function> b_T;          // Cell bubble
    std::shared_ptr<dolfin::FunctionSpace> V_R_dT;  // Trial space for facet residual
    std::shared_ptr<dolfin::Form> a_R_dT;           // Facet residual lhs
    std::shared_ptr<dolfin::Form> L_R_dT;           // Facet residual rhs
    std::shared_ptr<dolfin::FunctionSpace> V_b_e;   // Function space for cell cone
    std::shared_ptr<dolfin::Function> b_e;          // Cell cone
    std::shared_ptr<dolfin::FunctionSpace> V_eta_T; // Function space for indicators
    std::shared_ptr<dolfin::Form> eta_T;            // Indicator form

    // Some handy views
    assert(a.function_space(0));
    const auto Vhat = a.function_space(0); // Primal test

    assert(a.function_space(0));
    const auto V = a.function_space(1);    // Primal trial

    assert(V->mesh());
    const auto mesh = V->mesh();

    std::string name;

    // Initialize dual forms
    a_star.reset(new Form_0(V, Vhat));
    L_star.reset(new Form_1(V));

    
    // Attach coefficients from a to a_star
    for (std::size_t i = 0; i < a.num_coefficients(); i++)
    {
      name = a.coefficient_name(i);
      // Don't attach discrete primal solution here (not computed).
      if (name == "__discrete_primal_solution")
        continue;

      // Test whether a_star has coefficient named 'name'
      try {
        a_star->coefficient_number(name);
      } catch (...) {
        std::cout << "Attaching coefficient named: " << name << " to a_star";
        std::cout << " failed! But this might be expected." << std::endl;
        continue;
      }
      a_star->set_coefficient(name, a.coefficient(i));
    }
    
    // Attach subdomains from a to a_star
    a_star->dx = a.cell_domains();
    a_star->ds = a.exterior_facet_domains();
    a_star->dS = a.interior_facet_domains();

    
    // Attach coefficients from (*this) to L_star
    for (std::size_t i = 0; i < (*this).num_coefficients(); i++)
    {
      name = (*this).coefficient_name(i);
      // Don't attach discrete primal solution here (not computed).
      if (name == "__discrete_primal_solution")
        continue;

      // Test whether L_star has coefficient named 'name'
      try {
        L_star->coefficient_number(name);
      } catch (...) {
        std::cout << "Attaching coefficient named: " << name << " to L_star";
        std::cout << " failed! But this might be expected." << std::endl;
        continue;
      }
      L_star->set_coefficient(name, (*this).coefficient(i));
    }
    
    // Attach subdomains from (*this) to L_star
    L_star->dx = (*this).cell_domains();
    L_star->ds = (*this).exterior_facet_domains();
    L_star->dS = (*this).interior_facet_domains();


    // Initialize residual
    residual.reset(new Form_2(mesh));
    
    // Attach coefficients from a to residual
    for (std::size_t i = 0; i < a.num_coefficients(); i++)
    {
      name = a.coefficient_name(i);
      // Don't attach discrete primal solution here (not computed).
      if (name == "__discrete_primal_solution")
        continue;

      // Test whether residual has coefficient named 'name'
      try {
        residual->coefficient_number(name);
      } catch (...) {
        std::cout << "Attaching coefficient named: " << name << " to residual";
        std::cout << " failed! But this might be expected." << std::endl;
        continue;
      }
      residual->set_coefficient(name, a.coefficient(i));
    }
    

    // Attach coefficients from L to residual
    for (std::size_t i = 0; i < L.num_coefficients(); i++)
    {
      name = L.coefficient_name(i);
      // Don't attach discrete primal solution here (not computed).
      if (name == "__discrete_primal_solution")
        continue;

      // Test whether residual has coefficient named 'name'
      try {
        residual->coefficient_number(name);
      } catch (...) {
        std::cout << "Attaching coefficient named: " << name << " to residual";
        std::cout << " failed! But this might be expected." << std::endl;
        continue;
      }
      residual->set_coefficient(name, L.coefficient(i));
    }
    
    // Attach subdomains from L to residual
    residual->dx = L.cell_domains();
    residual->ds = L.exterior_facet_domains();
    residual->dS = L.interior_facet_domains();


    // Initialize extrapolation space and (fake) extrapolation
    V_Ez_h.reset(new CoefficientSpace___improved_dual(mesh));
    Ez_h.reset(new dolfin::Function(V_Ez_h));
    residual->set_coefficient("__improved_dual", Ez_h);

    // Create bilinear and linear form for computing cell residual R_T
    V_R_T.reset(new Form_4::TestSpace(mesh));
    a_R_T.reset(new Form_3(V_R_T, V_R_T));
    L_R_T.reset(new Form_4(V_R_T));

    // Initialize bubble and attach to a_R_T and L_R_T
    V_b_T.reset(new CoefficientSpace___cell_bubble(mesh));
    b_T.reset(new dolfin::Function(V_b_T));
    *b_T->vector() = 1.0;
    
    // Attach coefficients from a to L_R_T
    for (std::size_t i = 0; i < a.num_coefficients(); i++)
    {
      name = a.coefficient_name(i);
      // Don't attach discrete primal solution here (not computed).
      if (name == "__discrete_primal_solution")
        continue;

      // Test whether L_R_T has coefficient named 'name'
      try {
        L_R_T->coefficient_number(name);
      } catch (...) {
        std::cout << "Attaching coefficient named: " << name << " to L_R_T";
        std::cout << " failed! But this might be expected." << std::endl;
        continue;
      }
      L_R_T->set_coefficient(name, a.coefficient(i));
    }
    

    // Attach coefficients from L to L_R_T
    for (std::size_t i = 0; i < L.num_coefficients(); i++)
    {
      name = L.coefficient_name(i);
      // Don't attach discrete primal solution here (not computed).
      if (name == "__discrete_primal_solution")
        continue;

      // Test whether L_R_T has coefficient named 'name'
      try {
        L_R_T->coefficient_number(name);
      } catch (...) {
        std::cout << "Attaching coefficient named: " << name << " to L_R_T";
        std::cout << " failed! But this might be expected." << std::endl;
        continue;
      }
      L_R_T->set_coefficient(name, L.coefficient(i));
    }
    
    // Attach subdomains from L to L_R_T
    L_R_T->dx = L.cell_domains();
    L_R_T->ds = L.exterior_facet_domains();
    L_R_T->dS = L.interior_facet_domains();


    // Attach bubble function to _a_R_T and _L_R_T
    a_R_T->set_coefficient("__cell_bubble", b_T);
    L_R_T->set_coefficient("__cell_bubble", b_T);

    // Create bilinear and linear form for computing facet residual R_dT
    V_R_dT.reset(new Form_6::TestSpace(mesh));
    a_R_dT.reset(new Form_5(V_R_dT, V_R_dT));
    L_R_dT.reset(new Form_6(V_R_dT));
    
    // Attach coefficients from a to L_R_dT
    for (std::size_t i = 0; i < a.num_coefficients(); i++)
    {
      name = a.coefficient_name(i);
      // Don't attach discrete primal solution here (not computed).
      if (name == "__discrete_primal_solution")
        continue;

      // Test whether L_R_dT has coefficient named 'name'
      try {
        L_R_dT->coefficient_number(name);
      } catch (...) {
        std::cout << "Attaching coefficient named: " << name << " to L_R_dT";
        std::cout << " failed! But this might be expected." << std::endl;
        continue;
      }
      L_R_dT->set_coefficient(name, a.coefficient(i));
    }
    

    // Attach coefficients from L to L_R_dT
    for (std::size_t i = 0; i < L.num_coefficients(); i++)
    {
      name = L.coefficient_name(i);
      // Don't attach discrete primal solution here (not computed).
      if (name == "__discrete_primal_solution")
        continue;

      // Test whether L_R_dT has coefficient named 'name'
      try {
        L_R_dT->coefficient_number(name);
      } catch (...) {
        std::cout << "Attaching coefficient named: " << name << " to L_R_dT";
        std::cout << " failed! But this might be expected." << std::endl;
        continue;
      }
      L_R_dT->set_coefficient(name, L.coefficient(i));
    }
    
    // Attach subdomains from L to L_R_dT
    L_R_dT->dx = L.cell_domains();
    L_R_dT->ds = L.exterior_facet_domains();
    L_R_dT->dS = L.interior_facet_domains();


    // Initialize (fake) cone and attach to a_R_dT and L_R_dT
    V_b_e.reset(new CoefficientSpace___cell_cone(mesh));
    b_e.reset(new dolfin::Function(V_b_e));
    a_R_dT->set_coefficient("__cell_cone", b_e);
    L_R_dT->set_coefficient("__cell_cone", b_e);

    // Create error indicator form
    V_eta_T.reset(new Form_7::TestSpace(mesh));
    eta_T.reset(new Form_7(V_eta_T));

    // Update error control
    _ec.reset(new dolfin::ErrorControl(a_star, L_star, residual,
                                       a_R_T, L_R_T, a_R_dT, L_R_dT, eta_T,
                                       false));
  }

};


// Class typedefs
typedef Form_lhs BilinearForm;
typedef Form_rhs LinearForm;
typedef Form_goal GoalFunctional;

}

#endif
