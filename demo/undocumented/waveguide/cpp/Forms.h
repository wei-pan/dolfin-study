// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __FORMS_H
#define __FORMS_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class forms_finite_element_0: public ufc::finite_element
{
public:

  forms_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~forms_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', triangle, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new forms_finite_element_0();
  }

};


class forms_finite_element_1: public ufc::finite_element
{
public:

  forms_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~forms_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 6;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_finite_element_0();
    case 1:
        return new forms_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new forms_finite_element_1();
  }

};


class forms_finite_element_2: public ufc::finite_element
{
public:

  forms_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~forms_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Nedelec 1st kind H(curl)', triangle, 3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t space_dimension() const final override
  {
    return 15;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 2;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 2;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Nedelec 1st kind H(curl)";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[2][10] =
        { { 0.0, 0.0, 0.0, -0.16953317256112274, 0.08417937871268427, -0.11664236870396068, 0.0, -0.14682003422210332, 0.07290148043997557, -0.10101525445522076 },
          { 0.0, 0.0, 0.0, 0.3216783274236693, -0.1346870059402947, 0.09720197391996743, 0.26057971086461396, -0.12987926104263, 0.0976879837895672, -0.06313453403451307 } };
    static const double coefficients1[2][10] =
        { { 0.0, 0.0, 0.0, 0.07824607964359498, -0.1683587574253684, 0.34992710611188194, 0.0, 0.06776309271789377, -0.14580296087995107, 0.30304576336566263 },
          { 0.0, 0.0, 0.0, -0.16518616813647946, 0.23570226039551606, -0.27216552697590857, -0.1202675588605913, 0.14682003422210393, -0.2245365597551247, 0.17677669529663703 } };
    static const double coefficients2[2][10] =
        { { 0.0, 0.0, 0.0, -0.03912303982179769, -0.08417937871268409, -0.3499271061118824, 0.0, -0.0338815463589471, -0.07290148043997538, -0.3030457633656628 },
          { 0.0, 0.0, 0.0, 0.06085806194501899, 0.0, 0.21384434262392824, 0.060133779430295624, 0.03952847075210436, 0.11226827987756247, -0.1388959748759293 } };
    static const double coefficients3[2][10] =
        { { 0.0, 0.0, 0.0, 0.1695331725611228, 0.08417937871268406, 0.11664236870396086, 0.0, 0.14682003422210324, 0.07290148043997546, 0.10101525445522101 },
          { 0.0, 0.0, 0.0, 0.49121149998479186, 0.218866384652979, 0.21384434262392824, -0.2605797108646136, 0.01694077317947337, -0.024786503349591708, 0.03788072042070795 } };
    static const double coefficients4[2][10] =
        { { 0.0, 0.0, 0.0, -0.07824607964359534, -0.16835875742536802, -0.34992710611188227, 0.0, -0.06776309271789394, -0.14580296087995084, -0.3030457633656629 },
          { 0.0, 0.0, 0.0, -0.24343224778007344, -0.4040610178208842, -0.6220926330877912, 0.12026755886059098, 0.07905694150420918, 0.07873359887517378, -0.1262690680690267 } };
    static const double coefficients5[2][10] =
        { { 0.0, 0.0, 0.0, 0.03912303982179763, -0.08417937871268413, 0.34992710611188227, 0.0, 0.03388154635894691, -0.07290148043997553, 0.30304576336566275 },
          { 0.0, 0.0, 0.0, 0.09998110176681552, -0.08417937871268387, 0.5637714487358109, -0.06013377943029569, 0.07341001711105216, -0.18516976031753798, 0.16414978848973452 } };
    static const double coefficients6[2][10] =
        { { 0.0, 0.0, 0.0, 0.3825363893686871, 0.303045763365663, 0.3110463165438958, 0.0, -0.09035079029052526, -0.1458029608799509, -0.20203050891044202 },
          { 0.0, 0.0, 0.0, 0.16953317256112266, 0.0841793787126839, 0.11664236870396139, 0.16035674514745438, 0.06776309271789387, 0.03207665139358942, -0.07576144084141608 } };
    static const double coefficients7[2][10] =
        { { 0.0, 0.0, 0.0, -0.7650727787373749, 0.0, -0.15552315827194807, 0.0, 0.18070158058105024, 0.0, 0.10101525445522096 },
          { 0.0, 0.0, 0.0, -0.3825363893686873, 0.06734350297014759, -0.07776157913597413, -0.3207134902949091, 0.09035079029052523, -0.06415330278717865, 0.05050762722761055 } };
    static const double coefficients8[2][10] =
        { { 0.0, 0.0, 0.0, 0.38253638936868767, -0.30304576336566386, 0.3110463165438962, 0.0, -0.09035079029052494, 0.14580296087995107, -0.20203050891044186 },
          { 0.0, 0.0, 0.0, 0.21300321680756526, -0.2188663846529793, 0.19440394783993498, 0.1603567451474548, -0.1581138830084194, 0.17787961227354043, -0.1262690680690264 } };
    static const double coefficients9[2][10] =
        { { 4.000000000000002, 0.0, 0.0, -0.36885555678165927, -0.4761904761904759, -1.6495721976846462, 0.0, -0.31943828249997036, -0.41239304942116045, 0.57142857142857 },
          { 0.0, 0.0, 0.0, 0.6147592613027627, 0.4761904761904772, -0.5498573992282151, 0.56694670951384, 0.1597191412499863, -0.4536323543632772, 0.3571428571428575 } };
    static const double coefficients10[2][10] =
        { { 0.0, 3.9999999999999973, 0.0, -0.6776309271789389, 1.807956714911396, 0.0, 0.0, -0.5868455973269648, -1.2626906806902614, 0.0 },
          { 0.0, 0.0, 0.0, 1.0540925533894563, 1.166423687039609, -0.33671751485073437, 1.0415476122441178, 0.6846531968814591, -0.5808377131175201, 0.2187044413199256 } };
    static const double coefficients11[2][10] =
        { { 0.0, 0.0, 3.9999999999999987, 0.13041013273932364, -0.8417937871268424, 0.9331389496316884, 0.0, 0.11293848786315497, -0.7290148043997555, -2.0203050891044185 },
          { 0.0, 0.0, 0.0, -0.3477603539715315, 0.3367175148507351, 1.3608276348795447, -0.20044593143431813, 0.621161683247358, 0.5977921396078, -0.8838834764831867 } };
    static const double coefficients12[2][10] =
        { { 0.0, 0.0, 0.0, 0.0, 0.9523809523809516, 0.0, 0.0, 0.0, 0.8247860988423222, 0.0 },
          { 3.9999999999999996, 0.0, 0.0, -1.5983740793871857, 0.47619047619047616, -0.5498573992282162, 0.0, -0.6388765649999412, 0.4123930494211613, -0.1428571428571425 } };
    static const double coefficients13[2][10] =
        { { 0.0, 0.0, 0.0, 1.3552618543578763, 0.0, 0.0, 0.0, 1.1736911946539266, 0.0, 0.0 },
          { 0.0, 3.9999999999999964, 0.0, 0.6776309271789386, -0.5248906591678242, 0.0, -2.083095224488239, 0.5868455973269622, -0.1010152544552207, 0.0 } };
    static const double coefficients14[2][10] =
        { { 0.0, 0.0, 0.0, 0.0, 1.6835875742536848, 0.0, 0.0, 0.0, 1.45802960879951, 0.0 },
          { 0.0, 0.0, 4.0, 0.8259308406823949, 0.841793787126843, -1.788516320127402, 0.0, -1.1293848786315654, 0.7290148043997545, -0.2525381361380517 } };
    for (std::size_t k = 0; k < num_points * 15 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + c] += coefficients0[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 + c] += coefficients1[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 2 + c] += coefficients2[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 3 + c] += coefficients3[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 4 + c] += coefficients4[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 5 + c] += coefficients5[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 6 + c] += coefficients6[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 7 + c] += coefficients7[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 8 + c] += coefficients8[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 9 + c] += coefficients9[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 10 + c] += coefficients10[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 11 + c] += coefficients11[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 12 + c] += coefficients12[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 13 + c] += coefficients13[c][r] * basisvalues3[r];
        for (std::size_t c = 0; c < 2; ++c)
            for (std::size_t r = 0; r < 10; ++r)
                reference_values[15 * 2 * ip + 2 * 14 + c] += coefficients14[c][r] * basisvalues3[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 15 * num_derivatives * 2, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
            { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
            { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
            { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[2][10] =
        { { 0.0, 0.0, 0.0, -0.16953317256112274, 0.08417937871268427, -0.11664236870396068, 0.0, -0.14682003422210332, 0.07290148043997557, -0.10101525445522076 },
          { 0.0, 0.0, 0.0, 0.3216783274236693, -0.1346870059402947, 0.09720197391996743, 0.26057971086461396, -0.12987926104263, 0.0976879837895672, -0.06313453403451307 } };
    static const double coefficients1[2][10] =
        { { 0.0, 0.0, 0.0, 0.07824607964359498, -0.1683587574253684, 0.34992710611188194, 0.0, 0.06776309271789377, -0.14580296087995107, 0.30304576336566263 },
          { 0.0, 0.0, 0.0, -0.16518616813647946, 0.23570226039551606, -0.27216552697590857, -0.1202675588605913, 0.14682003422210393, -0.2245365597551247, 0.17677669529663703 } };
    static const double coefficients2[2][10] =
        { { 0.0, 0.0, 0.0, -0.03912303982179769, -0.08417937871268409, -0.3499271061118824, 0.0, -0.0338815463589471, -0.07290148043997538, -0.3030457633656628 },
          { 0.0, 0.0, 0.0, 0.06085806194501899, 0.0, 0.21384434262392824, 0.060133779430295624, 0.03952847075210436, 0.11226827987756247, -0.1388959748759293 } };
    static const double coefficients3[2][10] =
        { { 0.0, 0.0, 0.0, 0.1695331725611228, 0.08417937871268406, 0.11664236870396086, 0.0, 0.14682003422210324, 0.07290148043997546, 0.10101525445522101 },
          { 0.0, 0.0, 0.0, 0.49121149998479186, 0.218866384652979, 0.21384434262392824, -0.2605797108646136, 0.01694077317947337, -0.024786503349591708, 0.03788072042070795 } };
    static const double coefficients4[2][10] =
        { { 0.0, 0.0, 0.0, -0.07824607964359534, -0.16835875742536802, -0.34992710611188227, 0.0, -0.06776309271789394, -0.14580296087995084, -0.3030457633656629 },
          { 0.0, 0.0, 0.0, -0.24343224778007344, -0.4040610178208842, -0.6220926330877912, 0.12026755886059098, 0.07905694150420918, 0.07873359887517378, -0.1262690680690267 } };
    static const double coefficients5[2][10] =
        { { 0.0, 0.0, 0.0, 0.03912303982179763, -0.08417937871268413, 0.34992710611188227, 0.0, 0.03388154635894691, -0.07290148043997553, 0.30304576336566275 },
          { 0.0, 0.0, 0.0, 0.09998110176681552, -0.08417937871268387, 0.5637714487358109, -0.06013377943029569, 0.07341001711105216, -0.18516976031753798, 0.16414978848973452 } };
    static const double coefficients6[2][10] =
        { { 0.0, 0.0, 0.0, 0.3825363893686871, 0.303045763365663, 0.3110463165438958, 0.0, -0.09035079029052526, -0.1458029608799509, -0.20203050891044202 },
          { 0.0, 0.0, 0.0, 0.16953317256112266, 0.0841793787126839, 0.11664236870396139, 0.16035674514745438, 0.06776309271789387, 0.03207665139358942, -0.07576144084141608 } };
    static const double coefficients7[2][10] =
        { { 0.0, 0.0, 0.0, -0.7650727787373749, 0.0, -0.15552315827194807, 0.0, 0.18070158058105024, 0.0, 0.10101525445522096 },
          { 0.0, 0.0, 0.0, -0.3825363893686873, 0.06734350297014759, -0.07776157913597413, -0.3207134902949091, 0.09035079029052523, -0.06415330278717865, 0.05050762722761055 } };
    static const double coefficients8[2][10] =
        { { 0.0, 0.0, 0.0, 0.38253638936868767, -0.30304576336566386, 0.3110463165438962, 0.0, -0.09035079029052494, 0.14580296087995107, -0.20203050891044186 },
          { 0.0, 0.0, 0.0, 0.21300321680756526, -0.2188663846529793, 0.19440394783993498, 0.1603567451474548, -0.1581138830084194, 0.17787961227354043, -0.1262690680690264 } };
    static const double coefficients9[2][10] =
        { { 4.000000000000002, 0.0, 0.0, -0.36885555678165927, -0.4761904761904759, -1.6495721976846462, 0.0, -0.31943828249997036, -0.41239304942116045, 0.57142857142857 },
          { 0.0, 0.0, 0.0, 0.6147592613027627, 0.4761904761904772, -0.5498573992282151, 0.56694670951384, 0.1597191412499863, -0.4536323543632772, 0.3571428571428575 } };
    static const double coefficients10[2][10] =
        { { 0.0, 3.9999999999999973, 0.0, -0.6776309271789389, 1.807956714911396, 0.0, 0.0, -0.5868455973269648, -1.2626906806902614, 0.0 },
          { 0.0, 0.0, 0.0, 1.0540925533894563, 1.166423687039609, -0.33671751485073437, 1.0415476122441178, 0.6846531968814591, -0.5808377131175201, 0.2187044413199256 } };
    static const double coefficients11[2][10] =
        { { 0.0, 0.0, 3.9999999999999987, 0.13041013273932364, -0.8417937871268424, 0.9331389496316884, 0.0, 0.11293848786315497, -0.7290148043997555, -2.0203050891044185 },
          { 0.0, 0.0, 0.0, -0.3477603539715315, 0.3367175148507351, 1.3608276348795447, -0.20044593143431813, 0.621161683247358, 0.5977921396078, -0.8838834764831867 } };
    static const double coefficients12[2][10] =
        { { 0.0, 0.0, 0.0, 0.0, 0.9523809523809516, 0.0, 0.0, 0.0, 0.8247860988423222, 0.0 },
          { 3.9999999999999996, 0.0, 0.0, -1.5983740793871857, 0.47619047619047616, -0.5498573992282162, 0.0, -0.6388765649999412, 0.4123930494211613, -0.1428571428571425 } };
    static const double coefficients13[2][10] =
        { { 0.0, 0.0, 0.0, 1.3552618543578763, 0.0, 0.0, 0.0, 1.1736911946539266, 0.0, 0.0 },
          { 0.0, 3.9999999999999964, 0.0, 0.6776309271789386, -0.5248906591678242, 0.0, -2.083095224488239, 0.5868455973269622, -0.1010152544552207, 0.0 } };
    static const double coefficients14[2][10] =
        { { 0.0, 0.0, 0.0, 0.0, 1.6835875742536848, 0.0, 0.0, 0.0, 1.45802960879951, 0.0 },
          { 0.0, 0.0, 4.0, 0.8259308406823949, 0.841793787126843, -1.788516320127402, 0.0, -1.1293848786315654, 0.7290148043997545, -0.2525381361380517 } };
    const std::size_t reference_offset[15] = {};
    const std::size_t num_components[15] = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[10] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = (1.0 - Y[1]) / 2.0;
        const double tmp3_3 = tmp2_3 * tmp2_3;
        basisvalues3[3] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp3_3 * basisvalues3[0];
        basisvalues3[6] = 1.6666666666666667 * tmp1_3 * basisvalues3[3] - 0.6666666666666666 * tmp3_3 * basisvalues3[1];
        basisvalues3[2] = (0.5 + 1.5 * Y[1]) * basisvalues3[0];
        basisvalues3[4] = (1.5 + 2.5 * Y[1]) * basisvalues3[1];
        basisvalues3[7] = (2.5 + 3.5 * Y[1]) * basisvalues3[3];
        basisvalues3[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues3[2] - 0.5555555555555556 * basisvalues3[0];
        basisvalues3[9] = (0.05 + 1.75 * Y[1]) * basisvalues3[5] - 0.7 * basisvalues3[2];
        basisvalues3[8] = (0.54 + 2.1 * Y[1]) * basisvalues3[4] - 0.56 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.5);
        basisvalues3[2] *= std::sqrt(1.0);
        basisvalues3[5] *= std::sqrt(1.5);
        basisvalues3[9] *= std::sqrt(2.0);
        basisvalues3[1] *= std::sqrt(3.0);
        basisvalues3[4] *= std::sqrt(4.5);
        basisvalues3[8] *= std::sqrt(6.0);
        basisvalues3[3] *= std::sqrt(7.5);
        basisvalues3[7] *= std::sqrt(10.0);
        basisvalues3[6] *= std::sqrt(14.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 15; ++i)
        {
            double derivatives[16] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients0[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients0[1][s] * aux[s];
                    }
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients1[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients1[1][s] * aux[s];
                    }
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients2[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients2[1][s] * aux[s];
                    }
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients3[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients3[1][s] * aux[s];
                    }
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients4[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients4[1][s] * aux[s];
                    }
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients5[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients5[1][s] * aux[s];
                    }
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients6[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients6[1][s] * aux[s];
                    }
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients7[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients7[1][s] * aux[s];
                    }
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients8[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients8[1][s] * aux[s];
                    }
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients9[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients9[1][s] * aux[s];
                    }
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients10[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients10[1][s] * aux[s];
                    }
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients11[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients11[1][s] * aux[s];
                    }
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients12[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients12[1][s] * aux[s];
                    }
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients13[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients13[1][s] * aux[s];
                    }
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    derivatives[num_derivatives + r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                    {
                        derivatives[r] += coefficients14[0][s] * aux[s];
                        derivatives[num_derivatives + r] += coefficients14[1][s] * aux[s];
                    }
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[15 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    std::fill_n(values, num_points * 15 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[15] = {};
    const std::size_t physical_offsets[15] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[8][8];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 15; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 2; ++i)
                {
                    // Using covariant Piola transform to map values back to the physical element.
                    const double mapped_value = K[2 * 2 * ip + i] * reference_values[15 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]] + K[2 * 2 * ip + 2 + i] * reference_values[15 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + (reference_offsets[d] + 1)];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[15 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[30];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[30];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][8][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 1, 0 },
            { 1, 1, 1 } } };
    // Declare transformation matrix
    double transform[8][8] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, -0.16953317256112274, 0.08417937871268427, -0.11664236870396068, 0.0, -0.14682003422210332, 0.07290148043997557, -0.10101525445522076 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.3216783274236693, -0.1346870059402947, 0.09720197391996743, 0.26057971086461396, -0.12987926104263, 0.0976879837895672, -0.06313453403451307 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 1:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.07824607964359498, -0.1683587574253684, 0.34992710611188194, 0.0, 0.06776309271789377, -0.14580296087995107, 0.30304576336566263 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, -0.16518616813647946, 0.23570226039551606, -0.27216552697590857, -0.1202675588605913, 0.14682003422210393, -0.2245365597551247, 0.17677669529663703 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 2:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, -0.03912303982179769, -0.08417937871268409, -0.3499271061118824, 0.0, -0.0338815463589471, -0.07290148043997538, -0.3030457633656628 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.06085806194501899, 0.0, 0.21384434262392824, 0.060133779430295624, 0.03952847075210436, 0.11226827987756247, -0.1388959748759293 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 3:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.1695331725611228, 0.08417937871268406, 0.11664236870396086, 0.0, 0.14682003422210324, 0.07290148043997546, 0.10101525445522101 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.49121149998479186, 0.218866384652979, 0.21384434262392824, -0.2605797108646136, 0.01694077317947337, -0.024786503349591708, 0.03788072042070795 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 4:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, -0.07824607964359534, -0.16835875742536802, -0.34992710611188227, 0.0, -0.06776309271789394, -0.14580296087995084, -0.3030457633656629 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, -0.24343224778007344, -0.4040610178208842, -0.6220926330877912, 0.12026755886059098, 0.07905694150420918, 0.07873359887517378, -0.1262690680690267 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 5:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.03912303982179763, -0.08417937871268413, 0.34992710611188227, 0.0, 0.03388154635894691, -0.07290148043997553, 0.30304576336566275 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.09998110176681552, -0.08417937871268387, 0.5637714487358109, -0.06013377943029569, 0.07341001711105216, -0.18516976031753798, 0.16414978848973452 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 6:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.3825363893686871, 0.303045763365663, 0.3110463165438958, 0.0, -0.09035079029052526, -0.1458029608799509, -0.20203050891044202 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.16953317256112266, 0.0841793787126839, 0.11664236870396139, 0.16035674514745438, 0.06776309271789387, 0.03207665139358942, -0.07576144084141608 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 7:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, -0.7650727787373749, 0.0, -0.15552315827194807, 0.0, 0.18070158058105024, 0.0, 0.10101525445522096 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, -0.3825363893686873, 0.06734350297014759, -0.07776157913597413, -0.3207134902949091, 0.09035079029052523, -0.06415330278717865, 0.05050762722761055 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 8:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.38253638936868767, -0.30304576336566386, 0.3110463165438962, 0.0, -0.09035079029052494, 0.14580296087995107, -0.20203050891044186 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.21300321680756526, -0.2188663846529793, 0.19440394783993498, 0.1603567451474548, -0.1581138830084194, 0.17787961227354043, -0.1262690680690264 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 9:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 4.000000000000002, 0.0, 0.0, -0.36885555678165927, -0.4761904761904759, -1.6495721976846462, 0.0, -0.31943828249997036, -0.41239304942116045, 0.57142857142857 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 0.6147592613027627, 0.4761904761904772, -0.5498573992282151, 0.56694670951384, 0.1597191412499863, -0.4536323543632772, 0.3571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 10:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 3.9999999999999973, 0.0, -0.6776309271789389, 1.807956714911396, 0.0, 0.0, -0.5868455973269648, -1.2626906806902614, 0.0 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, 1.0540925533894563, 1.166423687039609, -0.33671751485073437, 1.0415476122441178, 0.6846531968814591, -0.5808377131175201, 0.2187044413199256 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 11:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 3.9999999999999987, 0.13041013273932364, -0.8417937871268424, 0.9331389496316884, 0.0, 0.11293848786315497, -0.7290148043997555, -2.0203050891044185 };
            static const double coefficients1[10] = { 0.0, 0.0, 0.0, -0.3477603539715315, 0.3367175148507351, 1.3608276348795447, -0.20044593143431813, 0.621161683247358, 0.5977921396078, -0.8838834764831867 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 12:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.0, 0.9523809523809516, 0.0, 0.0, 0.0, 0.8247860988423222, 0.0 };
            static const double coefficients1[10] = { 3.9999999999999996, 0.0, 0.0, -1.5983740793871857, 0.47619047619047616, -0.5498573992282162, 0.0, -0.6388765649999412, 0.4123930494211613, -0.1428571428571425 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 13:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 1.3552618543578763, 0.0, 0.0, 0.0, 1.1736911946539266, 0.0, 0.0 };
            static const double coefficients1[10] = { 0.0, 3.9999999999999964, 0.0, 0.6776309271789386, -0.5248906591678242, 0.0, -2.083095224488239, 0.5868455973269622, -0.1010152544552207, 0.0 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    case 14:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = (1.0 - Y[1]) / 2.0;
            const double tmp3_3 = tmp2_3 * tmp2_3;
            basisvalues[3] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp3_3 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_3 * basisvalues[3] - 0.6666666666666666 * tmp3_3 * basisvalues[1];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[6] *= std::sqrt(14.0);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.0, 0.0, 0.0, 0.0, 1.6835875742536848, 0.0, 0.0, 0.0, 1.45802960879951, 0.0 };
            static const double coefficients1[10] = { 0.0, 0.0, 4.0, 0.8259308406823949, 0.841793787126843, -1.788516320127402, 0.0, -1.1293848786315654, 0.7290148043997545, -0.2525381361380517 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566352, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.486832980505143, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.999999999999996, 0.0, 7.071067811865469, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129197, 0.0, -2.993325909419164, 13.662601021279464, 0.0, 0.6110100926607825, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.38178046004136, 0.0, 0.0, 12.521980673998845, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.464101615137759, 0.0, 7.838367176906178, 0.0, 0.0, 8.400000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119287, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.581988897471623, 4.743416490252574, -0.9128709291752787, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.999999999999916, 6.123724356957937, 3.5355339059327355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758493, 0.0, 8.164965809277268, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.6457513110645663, 5.184592558726248, -1.496662954709563, 6.831300510639718, -1.0583005244258312, 0.3055050463303893, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998347, 2.1908902300206883, 2.529822128134685, 8.082903768654775, 6.26099033699942, -1.8073922282301274, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688787, -5.091168824543125, 3.9191835884530986, 0.0, 9.699484522385703, 4.200000000000006, 0.0, 0.0, 0.0, 0.0 },
                  { 5.0000000000000275, 0.0, -2.8284271247462685, 0.0, 0.0, 12.12435565298213, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[16] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                {
                    for (std::size_t t = 0; t < 10; ++t)
                    {
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
                        derivatives[num_derivatives + r] += coefficients1[s] * dmats[s][t] * basisvalues[t];
                    }
                }
                const double tmp_ref[2] = { derivatives[r], derivatives[num_derivatives + r] };
                // Using covariant Piola transform to map values back to the physical element
                derivatives[r] = K[0] * tmp_ref[0] + K[2] * tmp_ref[1];
                derivatives[num_derivatives + r] = K[1] * tmp_ref[0] + K[2 + 1] * tmp_ref[1];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                for (std::size_t s = 0; s < num_derivatives; ++s)
                {
                    values[r] += transform[r][s] * derivatives[s];
                    values[num_derivatives + r] += transform[r][s] * derivatives[num_derivatives + s];
                }
            }
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 15, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[16] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 15; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    double result;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    switch (i)
    {
    case 0:
        {
            y[0] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
            y[1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
        }
        break;
    case 1:
        {
            y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
        }
        break;
    case 2:
        {
            y[0] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
        }
        break;
    case 3:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0] * J[1] + vals[1] * J[2 + 1];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0] * J[1] + vals[1] * J[2 + 1];
        }
        break;
    case 5:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0] * J[1] + vals[1] * J[2 + 1];
        }
        break;
    case 6:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0] * J[0] + vals[1] * J[2];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0] * J[0] + vals[1] * J[2];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0] * J[0] + vals[1] * J[2];
        }
        break;
    case 9:
        {
            result = 0.0;
            double X_9[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_9[36][1] = {};
            double W_9[36][1] =
                { { 0.004380007035333952 },
                  { 0.00821012828325171 },
                  { 0.008528136573677752 },
                  { 0.0059761382734593235 },
                  { 0.002662467899383865 },
                  { 0.0005292995210569465 },
                  { 0.009223072580491742 },
                  { 0.017288239137681006 },
                  { 0.017957875857470856 },
                  { 0.012584079569399019 },
                  { 0.005606414437499757 },
                  { 0.001114557090923834 },
                  { 0.011962482987098903 },
                  { 0.022423142044750127 },
                  { 0.023291672330955 },
                  { 0.016321766574367406 },
                  { 0.0072716154775874856 },
                  { 0.001445599622248223 },
                  { 0.011962482987098896 },
                  { 0.022423142044750117 },
                  { 0.023291672330954985 },
                  { 0.016321766574367395 },
                  { 0.007271615477587481 },
                  { 0.0014455996222482222 },
                  { 0.009223072580491742 },
                  { 0.01728823913768101 },
                  { 0.017957875857470856 },
                  { 0.012584079569399019 },
                  { 0.005606414437499757 },
                  { 0.001114557090923834 },
                  { 0.004380007035333964 },
                  { 0.008210128283251733 },
                  { 0.008528136573677774 },
                  { 0.005976138273459339 },
                  { 0.0026624678993838725 },
                  { 0.000529299521056948 } };
            double copy_9[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_9[r][0] - X_9[r][1];
                const double w1 = X_9[r][0];
                const double w2 = X_9[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_9[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_9[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_9[D_9[r][s]] * W_9[r][s];
            }
            return result;
        }
        break;
    case 10:
        {
            result = 0.0;
            double X_10[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_10[36][1] = {};
            double W_10[36][1] =
                { { -0.009710973194534896 },
                  { -0.015975694174423887 },
                  { -0.012914808498775162 },
                  { -0.006024109540551331 },
                  { -0.0014033523604530267 },
                  { -8.831972792250468e-5 },
                  { -0.01449999797697064 },
                  { -0.023854203751711895 },
                  { -0.019283823912786737 },
                  { -0.00899493535830189 },
                  { -0.00209542400951097 },
                  { -0.00013187513244538945 },
                  { -0.006787033586233021 },
                  { -0.011165469284399073 },
                  { -0.009026205436370045 },
                  { -0.0042102715103650165 },
                  { -0.0009808079389071213 },
                  { -6.172697089456968e-5 },
                  { 0.006787033586233017 },
                  { 0.011165469284399062 },
                  { 0.00902620543637004 },
                  { 0.004210271510365018 },
                  { 0.0009808079389071207 },
                  { 6.172697089456923e-5 },
                  { 0.014499997976970646 },
                  { 0.023854203751711905 },
                  { 0.01928382391278674 },
                  { 0.008994935358301898 },
                  { 0.00209542400951097 },
                  { 0.00013187513244538915 },
                  { 0.00971097319453492 },
                  { 0.015975694174423925 },
                  { 0.012914808498775193 },
                  { 0.006024109540551347 },
                  { 0.0014033523604530306 },
                  { 8.831972792250464e-5 } };
            double copy_10[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_10[r][0] - X_10[r][1];
                const double w1 = X_10[r][0];
                const double w2 = X_10[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_10[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_10[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_10[D_10[r][s]] * W_10[r][s];
            }
            return result;
        }
        break;
    case 11:
        {
            result = 0.0;
            double X_11[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_11[36][1] = {};
            double W_11[36][1] =
                { { -0.00564948416560004 },
                  { -0.006452908537728117 },
                  { 0.0001321127369674421 },
                  { 0.005713361221947881 },
                  { 0.00492388644483935 },
                  { 0.0013330322995734722 },
                  { -0.011896237170700168 },
                  { -0.013588024703755641 },
                  { 0.000278192558146252 },
                  { 0.012030744426549674 },
                  { 0.010368330847986927 },
                  { 0.002806994041772937 },
                  { -0.015429623211032667 },
                  { -0.017623900595856532 },
                  { 0.0003608205091003015 },
                  { 0.015604081423921987 },
                  { 0.013447902560801864 },
                  { 0.0036407193130650224 },
                  { -0.015429623211032657 },
                  { -0.017623900595856525 },
                  { 0.00036082050910030123 },
                  { 0.015604081423921978 },
                  { 0.013447902560801856 },
                  { 0.0036407193130650202 },
                  { -0.011896237170700168 },
                  { -0.013588024703755645 },
                  { 0.000278192558146252 },
                  { 0.012030744426549674 },
                  { 0.010368330847986927 },
                  { 0.002806994041772937 },
                  { -0.005649484165600055 },
                  { -0.006452908537728134 },
                  { 0.00013211273696744246 },
                  { 0.005713361221947897 },
                  { 0.004923886444839364 },
                  { 0.0013330322995734759 } };
            double copy_11[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_11[r][0] - X_11[r][1];
                const double w1 = X_11[r][0];
                const double w2 = X_11[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_11[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_11[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_11[D_11[r][s]] * W_11[r][s];
            }
            return result;
        }
        break;
    case 12:
        {
            result = 0.0;
            double X_12[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_12[36][1] =
                { { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 } };
            double W_12[36][1] =
                { { 0.004380007035333952 },
                  { 0.00821012828325171 },
                  { 0.008528136573677752 },
                  { 0.0059761382734593235 },
                  { 0.002662467899383865 },
                  { 0.0005292995210569465 },
                  { 0.009223072580491742 },
                  { 0.017288239137681006 },
                  { 0.017957875857470856 },
                  { 0.012584079569399019 },
                  { 0.005606414437499757 },
                  { 0.001114557090923834 },
                  { 0.011962482987098903 },
                  { 0.022423142044750127 },
                  { 0.023291672330955 },
                  { 0.016321766574367406 },
                  { 0.0072716154775874856 },
                  { 0.001445599622248223 },
                  { 0.011962482987098896 },
                  { 0.022423142044750117 },
                  { 0.023291672330954985 },
                  { 0.016321766574367395 },
                  { 0.007271615477587481 },
                  { 0.0014455996222482222 },
                  { 0.009223072580491742 },
                  { 0.01728823913768101 },
                  { 0.017957875857470856 },
                  { 0.012584079569399019 },
                  { 0.005606414437499757 },
                  { 0.001114557090923834 },
                  { 0.004380007035333964 },
                  { 0.008210128283251733 },
                  { 0.008528136573677774 },
                  { 0.005976138273459339 },
                  { 0.0026624678993838725 },
                  { 0.000529299521056948 } };
            double copy_12[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_12[r][0] - X_12[r][1];
                const double w1 = X_12[r][0];
                const double w2 = X_12[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_12[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_12[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_12[D_12[r][s]] * W_12[r][s];
            }
            return result;
        }
        break;
    case 13:
        {
            result = 0.0;
            double X_13[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_13[36][1] =
                { { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 } };
            double W_13[36][1] =
                { { -0.009710973194534896 },
                  { -0.015975694174423887 },
                  { -0.012914808498775162 },
                  { -0.006024109540551331 },
                  { -0.0014033523604530267 },
                  { -8.831972792250468e-5 },
                  { -0.01449999797697064 },
                  { -0.023854203751711895 },
                  { -0.019283823912786737 },
                  { -0.00899493535830189 },
                  { -0.00209542400951097 },
                  { -0.00013187513244538945 },
                  { -0.006787033586233021 },
                  { -0.011165469284399073 },
                  { -0.009026205436370045 },
                  { -0.0042102715103650165 },
                  { -0.0009808079389071213 },
                  { -6.172697089456968e-5 },
                  { 0.006787033586233017 },
                  { 0.011165469284399062 },
                  { 0.00902620543637004 },
                  { 0.004210271510365018 },
                  { 0.0009808079389071207 },
                  { 6.172697089456923e-5 },
                  { 0.014499997976970646 },
                  { 0.023854203751711905 },
                  { 0.01928382391278674 },
                  { 0.008994935358301898 },
                  { 0.00209542400951097 },
                  { 0.00013187513244538915 },
                  { 0.00971097319453492 },
                  { 0.015975694174423925 },
                  { 0.012914808498775193 },
                  { 0.006024109540551347 },
                  { 0.0014033523604530306 },
                  { 8.831972792250464e-5 } };
            double copy_13[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_13[r][0] - X_13[r][1];
                const double w1 = X_13[r][0];
                const double w2 = X_13[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_13[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_13[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_13[D_13[r][s]] * W_13[r][s];
            }
            return result;
        }
        break;
    case 14:
        {
            result = 0.0;
            double X_14[36][2] =
                { { 0.0327753666144599, 0.029316427159784886 },
                  { 0.028765333012559124, 0.1480785996684843 },
                  { 0.022386872978030603, 0.3369846902811543 },
                  { 0.014901563366671144, 0.5586715187715502 },
                  { 0.00779187470128645, 0.7692338620300545 },
                  { 0.0024666971526702275, 0.926945671319741 },
                  { 0.1644292415948274, 0.029316427159784886 },
                  { 0.14431148695041662, 0.1480785996684843 },
                  { 0.11231168178095369, 0.3369846902811543 },
                  { 0.07475897346264909, 0.5586715187715502 },
                  { 0.039090700732824224, 0.7692338620300545 },
                  { 0.01237506041744002, 0.926945671319741 },
                  { 0.36952992437237664, 0.029316427159784886 },
                  { 0.324318304588776, 0.1480785996684843 },
                  { 0.252403568076518, 0.3369846902811543 },
                  { 0.16800951912119183, 0.5586715187715502 },
                  { 0.0878504549759972, 0.7692338620300545 },
                  { 0.027811082115360597, 0.926945671319741 },
                  { 0.6011536484678385, 0.029316427159784886 },
                  { 0.5276030957427397, 0.1480785996684843 },
                  { 0.4106117416423277, 0.3369846902811543 },
                  { 0.27331896210725803, 0.5586715187715502 },
                  { 0.1429156829939483, 0.7692338620300545 },
                  { 0.04524324656489831, 0.926945671319741 },
                  { 0.8062543312453878, 0.029316427159784886 },
                  { 0.7076099133810991, 0.1480785996684843 },
                  { 0.5507036279378921, 0.3369846902811543 },
                  { 0.36656950776580083, 0.5586715187715502 },
                  { 0.19167543723712127, 0.7692338620300545 },
                  { 0.060679268262818886, 0.926945671319741 },
                  { 0.9379082062257551, 0.029316427159784886 },
                  { 0.8231560673189564, 0.1480785996684843 },
                  { 0.640628436740815, 0.3369846902811543 },
                  { 0.42642691786177866, 0.5586715187715502 },
                  { 0.22297426326865905, 0.7692338620300545 },
                  { 0.07058763152758862, 0.926945671319741 } };
            int D_14[36][1] =
                { { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 },
                  { 1 } };
            double W_14[36][1] =
                { { -0.00564948416560004 },
                  { -0.006452908537728117 },
                  { 0.0001321127369674421 },
                  { 0.005713361221947881 },
                  { 0.00492388644483935 },
                  { 0.0013330322995734722 },
                  { -0.011896237170700168 },
                  { -0.013588024703755641 },
                  { 0.000278192558146252 },
                  { 0.012030744426549674 },
                  { 0.010368330847986927 },
                  { 0.002806994041772937 },
                  { -0.015429623211032667 },
                  { -0.017623900595856532 },
                  { 0.0003608205091003015 },
                  { 0.015604081423921987 },
                  { 0.013447902560801864 },
                  { 0.0036407193130650224 },
                  { -0.015429623211032657 },
                  { -0.017623900595856525 },
                  { 0.00036082050910030123 },
                  { 0.015604081423921978 },
                  { 0.013447902560801856 },
                  { 0.0036407193130650202 },
                  { -0.011896237170700168 },
                  { -0.013588024703755645 },
                  { 0.000278192558146252 },
                  { 0.012030744426549674 },
                  { 0.010368330847986927 },
                  { 0.002806994041772937 },
                  { -0.005649484165600055 },
                  { -0.006452908537728134 },
                  { 0.00013211273696744246 },
                  { 0.005713361221947897 },
                  { 0.004923886444839364 },
                  { 0.0013330322995734759 } };
            double copy_14[2];
            // Loop over points
            for (std::size_t r = 0; r < 36; ++r)
            {
                // Evaluate basis functions for affine mapping
                const double w0 = 1 - X_14[r][0] - X_14[r][1];
                const double w1 = X_14[r][0];
                const double w2 = X_14[r][1];
                // Compute affine mapping y = F(X)
                y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
                y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
                // Evaluate function at physical point
                f.evaluate(vals, y, c);
                // Map function to reference element
                copy_14[0] = vals[0] * J[0] + vals[1] * J[2];
                copy_14[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
                // Loop over directions
                for (std::size_t s = 0; s < 1; ++s)
                    result += copy_14[D_14[r][s]] * W_14[r][s];
            }
            return result;
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    double result;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    y[0] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[4];
    y[1] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[0] = -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
    y[0] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
    y[0] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = -(vals[0] * J[0] + vals[1] * J[2]) + (vals[0] * J[1] + vals[1] * J[2 + 1]);
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[4];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0] * J[1] + vals[1] * J[2 + 1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[4];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0] * J[1] + vals[1] * J[2 + 1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[4];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0] * J[1] + vals[1] * J[2 + 1];
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[2];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[6] = vals[0] * J[0] + vals[1] * J[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[2];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[7] = vals[0] * J[0] + vals[1] * J[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[2];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[8] = vals[0] * J[0] + vals[1] * J[2];
    result = 0.0;
    double X_9[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_9[36][1] = {};
    double W_9[36][1] =
        { { 0.004380007035333952 },
          { 0.00821012828325171 },
          { 0.008528136573677752 },
          { 0.0059761382734593235 },
          { 0.002662467899383865 },
          { 0.0005292995210569465 },
          { 0.009223072580491742 },
          { 0.017288239137681006 },
          { 0.017957875857470856 },
          { 0.012584079569399019 },
          { 0.005606414437499757 },
          { 0.001114557090923834 },
          { 0.011962482987098903 },
          { 0.022423142044750127 },
          { 0.023291672330955 },
          { 0.016321766574367406 },
          { 0.0072716154775874856 },
          { 0.001445599622248223 },
          { 0.011962482987098896 },
          { 0.022423142044750117 },
          { 0.023291672330954985 },
          { 0.016321766574367395 },
          { 0.007271615477587481 },
          { 0.0014455996222482222 },
          { 0.009223072580491742 },
          { 0.01728823913768101 },
          { 0.017957875857470856 },
          { 0.012584079569399019 },
          { 0.005606414437499757 },
          { 0.001114557090923834 },
          { 0.004380007035333964 },
          { 0.008210128283251733 },
          { 0.008528136573677774 },
          { 0.005976138273459339 },
          { 0.0026624678993838725 },
          { 0.000529299521056948 } };
    double copy_9[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_9[r][0] - X_9[r][1];
        const double w1 = X_9[r][0];
        const double w2 = X_9[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_9[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_9[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_9[D_9[r][s]] * W_9[r][s];
    }
    values[9] = result;
    result = 0.0;
    double X_10[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_10[36][1] = {};
    double W_10[36][1] =
        { { -0.009710973194534896 },
          { -0.015975694174423887 },
          { -0.012914808498775162 },
          { -0.006024109540551331 },
          { -0.0014033523604530267 },
          { -8.831972792250468e-5 },
          { -0.01449999797697064 },
          { -0.023854203751711895 },
          { -0.019283823912786737 },
          { -0.00899493535830189 },
          { -0.00209542400951097 },
          { -0.00013187513244538945 },
          { -0.006787033586233021 },
          { -0.011165469284399073 },
          { -0.009026205436370045 },
          { -0.0042102715103650165 },
          { -0.0009808079389071213 },
          { -6.172697089456968e-5 },
          { 0.006787033586233017 },
          { 0.011165469284399062 },
          { 0.00902620543637004 },
          { 0.004210271510365018 },
          { 0.0009808079389071207 },
          { 6.172697089456923e-5 },
          { 0.014499997976970646 },
          { 0.023854203751711905 },
          { 0.01928382391278674 },
          { 0.008994935358301898 },
          { 0.00209542400951097 },
          { 0.00013187513244538915 },
          { 0.00971097319453492 },
          { 0.015975694174423925 },
          { 0.012914808498775193 },
          { 0.006024109540551347 },
          { 0.0014033523604530306 },
          { 8.831972792250464e-5 } };
    double copy_10[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_10[r][0] - X_10[r][1];
        const double w1 = X_10[r][0];
        const double w2 = X_10[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_10[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_10[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_10[D_10[r][s]] * W_10[r][s];
    }
    values[10] = result;
    result = 0.0;
    double X_11[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_11[36][1] = {};
    double W_11[36][1] =
        { { -0.00564948416560004 },
          { -0.006452908537728117 },
          { 0.0001321127369674421 },
          { 0.005713361221947881 },
          { 0.00492388644483935 },
          { 0.0013330322995734722 },
          { -0.011896237170700168 },
          { -0.013588024703755641 },
          { 0.000278192558146252 },
          { 0.012030744426549674 },
          { 0.010368330847986927 },
          { 0.002806994041772937 },
          { -0.015429623211032667 },
          { -0.017623900595856532 },
          { 0.0003608205091003015 },
          { 0.015604081423921987 },
          { 0.013447902560801864 },
          { 0.0036407193130650224 },
          { -0.015429623211032657 },
          { -0.017623900595856525 },
          { 0.00036082050910030123 },
          { 0.015604081423921978 },
          { 0.013447902560801856 },
          { 0.0036407193130650202 },
          { -0.011896237170700168 },
          { -0.013588024703755645 },
          { 0.000278192558146252 },
          { 0.012030744426549674 },
          { 0.010368330847986927 },
          { 0.002806994041772937 },
          { -0.005649484165600055 },
          { -0.006452908537728134 },
          { 0.00013211273696744246 },
          { 0.005713361221947897 },
          { 0.004923886444839364 },
          { 0.0013330322995734759 } };
    double copy_11[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_11[r][0] - X_11[r][1];
        const double w1 = X_11[r][0];
        const double w2 = X_11[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_11[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_11[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_11[D_11[r][s]] * W_11[r][s];
    }
    values[11] = result;
    result = 0.0;
    double X_12[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_12[36][1] =
        { { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 } };
    double W_12[36][1] =
        { { 0.004380007035333952 },
          { 0.00821012828325171 },
          { 0.008528136573677752 },
          { 0.0059761382734593235 },
          { 0.002662467899383865 },
          { 0.0005292995210569465 },
          { 0.009223072580491742 },
          { 0.017288239137681006 },
          { 0.017957875857470856 },
          { 0.012584079569399019 },
          { 0.005606414437499757 },
          { 0.001114557090923834 },
          { 0.011962482987098903 },
          { 0.022423142044750127 },
          { 0.023291672330955 },
          { 0.016321766574367406 },
          { 0.0072716154775874856 },
          { 0.001445599622248223 },
          { 0.011962482987098896 },
          { 0.022423142044750117 },
          { 0.023291672330954985 },
          { 0.016321766574367395 },
          { 0.007271615477587481 },
          { 0.0014455996222482222 },
          { 0.009223072580491742 },
          { 0.01728823913768101 },
          { 0.017957875857470856 },
          { 0.012584079569399019 },
          { 0.005606414437499757 },
          { 0.001114557090923834 },
          { 0.004380007035333964 },
          { 0.008210128283251733 },
          { 0.008528136573677774 },
          { 0.005976138273459339 },
          { 0.0026624678993838725 },
          { 0.000529299521056948 } };
    double copy_12[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_12[r][0] - X_12[r][1];
        const double w1 = X_12[r][0];
        const double w2 = X_12[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_12[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_12[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_12[D_12[r][s]] * W_12[r][s];
    }
    values[12] = result;
    result = 0.0;
    double X_13[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_13[36][1] =
        { { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 } };
    double W_13[36][1] =
        { { -0.009710973194534896 },
          { -0.015975694174423887 },
          { -0.012914808498775162 },
          { -0.006024109540551331 },
          { -0.0014033523604530267 },
          { -8.831972792250468e-5 },
          { -0.01449999797697064 },
          { -0.023854203751711895 },
          { -0.019283823912786737 },
          { -0.00899493535830189 },
          { -0.00209542400951097 },
          { -0.00013187513244538945 },
          { -0.006787033586233021 },
          { -0.011165469284399073 },
          { -0.009026205436370045 },
          { -0.0042102715103650165 },
          { -0.0009808079389071213 },
          { -6.172697089456968e-5 },
          { 0.006787033586233017 },
          { 0.011165469284399062 },
          { 0.00902620543637004 },
          { 0.004210271510365018 },
          { 0.0009808079389071207 },
          { 6.172697089456923e-5 },
          { 0.014499997976970646 },
          { 0.023854203751711905 },
          { 0.01928382391278674 },
          { 0.008994935358301898 },
          { 0.00209542400951097 },
          { 0.00013187513244538915 },
          { 0.00971097319453492 },
          { 0.015975694174423925 },
          { 0.012914808498775193 },
          { 0.006024109540551347 },
          { 0.0014033523604530306 },
          { 8.831972792250464e-5 } };
    double copy_13[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_13[r][0] - X_13[r][1];
        const double w1 = X_13[r][0];
        const double w2 = X_13[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_13[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_13[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_13[D_13[r][s]] * W_13[r][s];
    }
    values[13] = result;
    result = 0.0;
    double X_14[36][2] =
        { { 0.0327753666144599, 0.029316427159784886 },
          { 0.028765333012559124, 0.1480785996684843 },
          { 0.022386872978030603, 0.3369846902811543 },
          { 0.014901563366671144, 0.5586715187715502 },
          { 0.00779187470128645, 0.7692338620300545 },
          { 0.0024666971526702275, 0.926945671319741 },
          { 0.1644292415948274, 0.029316427159784886 },
          { 0.14431148695041662, 0.1480785996684843 },
          { 0.11231168178095369, 0.3369846902811543 },
          { 0.07475897346264909, 0.5586715187715502 },
          { 0.039090700732824224, 0.7692338620300545 },
          { 0.01237506041744002, 0.926945671319741 },
          { 0.36952992437237664, 0.029316427159784886 },
          { 0.324318304588776, 0.1480785996684843 },
          { 0.252403568076518, 0.3369846902811543 },
          { 0.16800951912119183, 0.5586715187715502 },
          { 0.0878504549759972, 0.7692338620300545 },
          { 0.027811082115360597, 0.926945671319741 },
          { 0.6011536484678385, 0.029316427159784886 },
          { 0.5276030957427397, 0.1480785996684843 },
          { 0.4106117416423277, 0.3369846902811543 },
          { 0.27331896210725803, 0.5586715187715502 },
          { 0.1429156829939483, 0.7692338620300545 },
          { 0.04524324656489831, 0.926945671319741 },
          { 0.8062543312453878, 0.029316427159784886 },
          { 0.7076099133810991, 0.1480785996684843 },
          { 0.5507036279378921, 0.3369846902811543 },
          { 0.36656950776580083, 0.5586715187715502 },
          { 0.19167543723712127, 0.7692338620300545 },
          { 0.060679268262818886, 0.926945671319741 },
          { 0.9379082062257551, 0.029316427159784886 },
          { 0.8231560673189564, 0.1480785996684843 },
          { 0.640628436740815, 0.3369846902811543 },
          { 0.42642691786177866, 0.5586715187715502 },
          { 0.22297426326865905, 0.7692338620300545 },
          { 0.07058763152758862, 0.926945671319741 } };
    int D_14[36][1] =
        { { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 },
          { 1 } };
    double W_14[36][1] =
        { { -0.00564948416560004 },
          { -0.006452908537728117 },
          { 0.0001321127369674421 },
          { 0.005713361221947881 },
          { 0.00492388644483935 },
          { 0.0013330322995734722 },
          { -0.011896237170700168 },
          { -0.013588024703755641 },
          { 0.000278192558146252 },
          { 0.012030744426549674 },
          { 0.010368330847986927 },
          { 0.002806994041772937 },
          { -0.015429623211032667 },
          { -0.017623900595856532 },
          { 0.0003608205091003015 },
          { 0.015604081423921987 },
          { 0.013447902560801864 },
          { 0.0036407193130650224 },
          { -0.015429623211032657 },
          { -0.017623900595856525 },
          { 0.00036082050910030123 },
          { 0.015604081423921978 },
          { 0.013447902560801856 },
          { 0.0036407193130650202 },
          { -0.011896237170700168 },
          { -0.013588024703755645 },
          { 0.000278192558146252 },
          { 0.012030744426549674 },
          { 0.010368330847986927 },
          { 0.002806994041772937 },
          { -0.005649484165600055 },
          { -0.006452908537728134 },
          { 0.00013211273696744246 },
          { 0.005713361221947897 },
          { 0.004923886444839364 },
          { 0.0013330322995734759 } };
    double copy_14[2];
    // Loop over points
    for (std::size_t r = 0; r < 36; ++r)
    {
        // Evaluate basis functions for affine mapping
        const double w0 = 1 - X_14[r][0] - X_14[r][1];
        const double w1 = X_14[r][0];
        const double w2 = X_14[r][1];
        // Compute affine mapping y = F(X)
        y[0] = w0 * coordinate_dofs[0] + w1 * coordinate_dofs[2] + w2 * coordinate_dofs[4];
        y[1] = w0 * coordinate_dofs[1] + w1 * coordinate_dofs[3] + w2 * coordinate_dofs[5];
        // Evaluate function at physical point
        f.evaluate(vals, y, c);
        // Map function to reference element
        copy_14[0] = vals[0] * J[0] + vals[1] * J[2];
        copy_14[1] = vals[0] * J[1] + vals[1] * J[2 + 1];
        // Loop over directions
        for (std::size_t s = 0; s < 1; ++s)
            result += copy_14[D_14[r][s]] * W_14[r][s];
    }
    values[14] = result;
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Evaluate function and change variables
    vertex_values[0] = dof_values[3] * (K[2] * 3.0000000000000004) + dof_values[4] * (K[2] * -2.9999999999999982) + dof_values[5] * K[2] + dof_values[6] * (K[0] * 2.999999999999999) + dof_values[7] * (K[0] * -3.0000000000000004) + dof_values[8] * K[0];
    vertex_values[2] = dof_values[0] * (K[2] * 3.000000000000001) + dof_values[1] * (K[2] * -3.0000000000000053) + dof_values[2] * K[2] + dof_values[6] * (K[0] + K[2]) + dof_values[7] * (K[0] * -3.0 + K[2] * -3.0) + dof_values[8] * (K[0] * 3.0000000000000013 + K[2] * 3.0000000000000044);
    vertex_values[4] = dof_values[0] * -K[0] + dof_values[1] * (K[0] * 2.9999999999999947) + dof_values[2] * (K[0] * -2.9999999999999973) + dof_values[3] * (K[0] + K[2]) + dof_values[4] * (K[0] * -2.9999999999999964 + K[2] * -3.0000000000000004) + dof_values[5] * (K[0] * 2.9999999999999964 + K[2] * 3.0000000000000013);
    vertex_values[1] = dof_values[3] * (K[2 + 1] * 3.0000000000000004) + dof_values[4] * (K[2 + 1] * -2.9999999999999982) + dof_values[5] * K[2 + 1] + dof_values[6] * (K[1] * 2.999999999999999) + dof_values[7] * (K[1] * -3.0000000000000004) + dof_values[8] * K[1];
    vertex_values[3] = dof_values[0] * (K[2 + 1] * 3.000000000000001) + dof_values[1] * (K[2 + 1] * -3.0000000000000053) + dof_values[2] * K[2 + 1] + dof_values[6] * (K[1] + K[2 + 1]) + dof_values[7] * (K[1] * -3.0 + K[2 + 1] * -3.0) + dof_values[8] * (K[1] * 3.0000000000000013 + K[2 + 1] * 3.0000000000000044);
    vertex_values[5] = dof_values[0] * -K[1] + dof_values[1] * (K[1] * 2.9999999999999947) + dof_values[2] * (K[1] * -2.9999999999999973) + dof_values[3] * (K[1] + K[2 + 1]) + dof_values[4] * (K[1] * -2.9999999999999964 + K[2 + 1] * -3.0000000000000004) + dof_values[5] * (K[1] * 2.9999999999999964 + K[2 + 1] * 3.0000000000000013);
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    throw std::runtime_error("tabulate_dof_coordinates is not defined for this element");
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    throw std::runtime_error("tabulate_reference_dof_coordinates is not defined for this element");
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new forms_finite_element_2();
  }

};


class forms_dofmap_0: public ufc::dofmap
{
public:

  forms_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~forms_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 2;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new forms_dofmap_0();
  }

};


class forms_dofmap_1: public ufc::dofmap
{
public:

  forms_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~forms_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 2 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 6;
  }

  std::size_t num_element_dofs() const final override
  {
    return 6;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_dofmap_0();
    case 1:
        return new forms_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new forms_dofmap_1();
  }

};


class forms_dofmap_2: public ufc::dofmap
{
public:

  forms_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~forms_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Nedelec 1st kind H(curl)', triangle, 3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[3] = { false, true, true };
    if (d >= 3)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[1] + 6 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 15;
  }

  std::size_t num_element_dofs() const final override
  {
    return 15;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 3, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[3] = { 0, 3, 15 };
    if (d >= 3)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + 3 * entity_indices[1][0];
    dofs[1] = offset + 3 * entity_indices[1][0] + 1;
    dofs[2] = offset + 3 * entity_indices[1][0] + 2;
    dofs[3] = offset + 3 * entity_indices[1][1];
    dofs[4] = offset + 3 * entity_indices[1][1] + 1;
    dofs[5] = offset + 3 * entity_indices[1][1] + 2;
    dofs[6] = offset + 3 * entity_indices[1][2];
    dofs[7] = offset + 3 * entity_indices[1][2] + 1;
    dofs[8] = offset + 3 * entity_indices[1][2] + 2;
    offset += 3 * num_global_entities[1];
    dofs[9] = offset + 6 * entity_indices[2][0];
    dofs[10] = offset + 6 * entity_indices[2][0] + 1;
    dofs[11] = offset + 6 * entity_indices[2][0] + 2;
    dofs[12] = offset + 6 * entity_indices[2][0] + 3;
    dofs[13] = offset + 6 * entity_indices[2][0] + 4;
    dofs[14] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    case 1:
        dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        break;
    case 2:
        dofs[0] = 6;
        dofs[1] = 7;
        dofs[2] = 8;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        case 1:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            break;
        case 2:
            dofs[0] = 6;
            dofs[1] = 7;
            dofs[2] = 8;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        case 1:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            break;
        case 2:
            dofs[0] = 6;
            dofs[1] = 7;
            dofs[2] = 8;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new forms_dofmap_2();
  }

};


class forms_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  forms_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~forms_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new forms_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 2;
  }

  std::size_t topological_dimension() const final override
  {
    return 2;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::triangle;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new forms_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new forms_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    forms_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    forms_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[3] = { 0.3333333333333333, 0.3333333333333333, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
  }

};


class forms_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  forms_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~forms_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 4
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 4
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           4
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[1][15][15] =
        { { { 2.63333333333334, -2.016666666666667, -0.03333333333332794, -1.591666666666675, -0.06666666666665799, -1.008333333333334, -1.09166666666667, 2.600000000000009, -1.50833333333334, 1.649915822768641, 10.96965511460292, -6.833333333333313, 5.892556509887875, -16.88749537379663, 10.41666666666663 },
            { -2.016666666666667, 2.533333333333336, 0.8166666666666673, -0.0666666666666714, 1.633333333333335, 1.266666666666668, 0.1833333333333373, -1.200000000000004, 1.016666666666668, 3.771236166328265, -8.948929172439184, 11.16666666666669, -11.78511301977581, 7.794228634059978, -20.83333333333338 },
            { -0.03333333333332794, 0.8166666666666673, 0.6333333333333366, -1.008333333333342, 1.266666666666673, 0.4083333333333332, -0.5083333333333321, 0.600000000000003, -0.09166666666666969, 4.006938426723796, -0.5773502691895851, 4.833333333333353, -5.892556509887918, -3.897114317030006, -10.41666666666671 },
            { -1.591666666666675, -0.0666666666666714, -1.008333333333342, 2.63333333333335, -2.016666666666682, -0.03333333333333426, 1.508333333333332, -2.600000000000009, 1.091666666666674, -7.542472332656565, -5.917840259193727, -3.583333333333391, 5.892556509887957, 16.88749537379663, 10.41666666666678 },
            { -0.06666666666665799, 1.633333333333335, 1.266666666666673, -2.016666666666682, 2.533333333333343, 0.8166666666666664, -1.016666666666663, 1.200000000000005, -0.1833333333333395, 8.013876853447584, -1.154700538379175, 9.666666666666707, -11.78511301977583, -7.794228634059992, -20.83333333333342 },
            { -1.008333333333334, 1.266666666666668, 0.4083333333333332, -0.03333333333333426, 0.8166666666666664, 0.633333333333334, 0.09166666666666996, -0.6000000000000041, 0.5083333333333351, 1.885618083164129, -4.474464586219592, 5.583333333333341, -5.892556509887903, 3.897114317029997, -10.41666666666668 },
            { -1.09166666666667, 0.1833333333333373, -0.5083333333333321, 1.508333333333332, -1.016666666666663, 0.09166666666666996, 3.683333333333324, -5.866666666666663, 2.183333333333337, -4.006938426723766, 2.742413778650676, -1.083333333333323, 2.35702260395514, 10.39230484541327, 4.166666666666639 },
            { 2.600000000000009, -1.200000000000004, 0.600000000000003, -2.600000000000009, 1.200000000000005, -0.6000000000000041, -5.866666666666663, 11.73333333333334, -5.866666666666679, 5.656854249492405, 10.3923048454133, -1.999999999999992, 0.0, -20.7846096908266, 0.0 },
            { -1.50833333333334, 1.016666666666668, -0.09166666666666969, 1.091666666666674, -0.1833333333333395, 0.5083333333333351, 2.183333333333337, -5.866666666666679, 3.683333333333342, -1.649915822768631, -13.13471862406399, 3.083333333333325, -2.357022603955147, 10.39230484541332, -4.166666666666652 },
            { 1.649915822768641, 3.771236166328265, 4.006938426723796, -7.542472332656565, 8.013876853447584, 1.885618083164129, -4.006938426723766, 5.656854249492405, -1.649915822768631, 26.66666666666686, 4.082482904638816, 25.92724864350692, -33.33333333333353, -36.74234614174789, -58.92556509887932 },
            { 10.96965511460292, -8.948929172439184, -0.5773502691895851, -5.917840259193727, -1.154700538379175, -4.474464586219592, 2.742413778650676, 10.3923048454133, -13.13471862406399, 4.082482904638816, 189.9999999999995, -31.7542648054292, 28.57738033247019, -67.5000000000004, 50.51814855409187 },
            { -6.833333333333313, 11.16666666666669, 4.833333333333353, -3.583333333333391, 9.666666666666707, 5.583333333333341, -1.083333333333323, -1.999999999999992, 3.083333333333325, 25.92724864350692, -31.7542648054292, 53.33333333333351, -58.92556509887917, 12.9903810567665, -104.166666666667 },
            { 5.892556509887875, -11.78511301977581, -5.892556509887918, 5.892556509887957, -11.78511301977583, -5.892556509887903, 2.35702260395514, 0.0, -2.357022603955147, -33.33333333333353, 28.57738033247019, -58.92556509887917, 66.66666666666688, 0.0, 117.8511301977583 },
            { -16.88749537379663, 7.794228634059978, -3.897114317030006, 16.88749537379663, -7.794228634059992, 3.897114317029997, 10.39230484541327, -20.7846096908266, 10.39230484541332, -36.74234614174789, -67.5000000000004, 12.9903810567665, 0.0, 135.0000000000006, 0.0 },
            { 10.41666666666663, -20.83333333333338, -10.41666666666671, 10.41666666666678, -20.83333333333342, -10.41666666666668, 4.166666666666639, 0.0, -4.166666666666652, -58.92556509887932, 50.51814855409187, -104.166666666667, 117.8511301977583, 0.0, 208.3333333333341 } } };
    alignas(32) static const double PI1[1][15][15] =
        { { { 0.3583333333333402, 1.116666666666659, -0.8916666666666567, -0.6500000000000083, -0.5333333333333217, 1.183333333333326, -1.108333333333335, 1.216666666666666, 0.3083333333333465, 0.4714045207910327, 0.7216878364870006, 1.583333333333396, -1.649915822768626, -7.361215932167768, -2.916666666666695 },
            { 0.2833333333333312, -1.733333333333328, 2.783333333333333, -0.950000000000002, 3.066666666666666, -2.116666666666664, -0.03333333333333033, -0.4333333333333278, -0.3666666666666884, 6.128258770283458, -1.443375672973984, 1.833333333333278, -3.771236166328272, 1.732050807568877, -6.666666666666701 },
            { 0.4416666666666685, -0.7166666666666649, 1.691666666666671, -1.150000000000006, 2.133333333333339, -0.9833333333333336, -0.6916666666666655, 0.383333333333338, -0.1083333333333436, 5.185449728701386, -0.7216878364869833, 2.41666666666666, -4.006938426723792, -3.03108891324556, -7.083333333333377 },
            { -0.9416666666666738, 0.4666666666666716, -2.191666666666682, 2.275000000000014, -3.133333333333352, 0.8583333333333416, 1.816666666666664, -1.383333333333339, -0.01666666666665861, -8.720983634634143, 0.7216878364869815, -4.916666666666694, 7.542472332656548, 9.526279441628878, 13.33333333333341 },
            { 0.8833333333333364, -1.433333333333331, 3.383333333333341, -2.30000000000001, 4.266666666666675, -1.966666666666668, -1.38333333333333, 0.7666666666666754, -0.2166666666666864, 10.37089945740276, -1.443375672973973, 4.833333333333318, -8.013876853447575, -6.062177826491109, -14.16666666666674 },
            { 0.1416666666666649, -0.8666666666666637, 1.391666666666666, -0.4749999999999996, 1.533333333333332, -1.058333333333331, -0.01666666666666376, -0.2166666666666651, -0.1833333333333447, 3.064129385141726, -0.7216878364869878, 0.91666666666664, -1.885618083164133, 0.8660254037844447, -3.333333333333345 },
            { -0.7333333333333418, -0.1166666666666621, 0.2666666666666673, 0.7750000000000035, 0.03333333333333643, -0.3083333333333304, 5.508333333333308, -3.433333333333322, -0.2416666666666653, -6.835365551469939, 17.89785834487829, 12.16666666666664, 0.2357022603954984, 7.361215932167778, 0.4166666666666439 },
            { 1.466666666666682, -0.9333333333333387, 0.1333333333333409, -1.13333333333335, 0.2666666666666772, -0.4666666666666719, -7.933333333333302, 5.866666666666652, 2.066666666666678, 1.885618083164125, -30.02221399786042, -2.666666666666602, 1.885618083164109, -10.39230484541338, 3.333333333333286 },
            { -0.7333333333333401, 1.05, -0.4000000000000066, 0.3583333333333454, -0.3000000000000114, 0.7750000000000017, 2.424999999999992, -2.433333333333327, -1.825000000000014, 4.949747468305826, 12.12435565298213, -9.50000000000005, -2.121320343559613, 3.031088913245602, -3.749999999999939 },
            { 3.064129385141726, -3.771236166328254, 10.13519719700722, -7.778174593052068, 13.19932658214893, -5.421151989096878, -5.185449728701341, 3.299831645537251, -0.471404520791083, 33.33333333333356, -4.082482904638381, 16.49915822768609, -26.66666666666682, -24.49489742783198, -47.14045207910347 },
            { 0.1443375672973133, -3.175426480542767, 4.47446458621959, -0.8660254037844641, 4.618802153517054, -3.75277674973245, 0.7216878364868551, -1.443375672974016, -0.7216878364868988, 8.16496580927749, 57.49999999999891, 105.3664241271068, -4.082482904639235, 7.500000000000124, -7.216878364871384 },
            { 2.416666666666668, -8.166666666666648, 14.9166666666667, -7.000000000000034, 17.33333333333337, -10.33333333333333, -2.416666666666665, -0.1666666666666247, -1.583333333333445, 37.71236166328288, -7.216878364869902, 14.16666666666649, -25.92724864350693, -4.330127018922296, -45.83333333333368 },
            { -3.299831645537229, 8.956685895029587, -17.4419672692682, 9.192388155425157, -20.74179891480543, 11.54941075938028, 4.006938426723751, -0.9428090415821027, 1.649915822768727, -46.66666666666701, 8.164965809276783, -18.85618083164109, 33.33333333333351, 12.24744871391603, 58.92556509887932 },
            { -5.196152422706673, -2.598076211353311, -5.196152422706649, 11.69134295108997, -10.39230484541329, -1.299038105676649, 11.69134295108992, -10.39230484541329, -1.299038105676679, -36.74234614174774, 0.0, -25.98076211353332, 36.74234614174775, 67.50000000000034, 64.95190528383307 },
            { -5.833333333333345, 15.8333333333333, -30.8333333333334, 16.25000000000007, -36.66666666666675, 20.41666666666667, 7.083333333333313, -1.666666666666742, 2.916666666666879, -82.49579113843119, 14.4337567297398, -33.33333333333297, 58.92556509887931, 21.65063509461122, 104.1666666666673 } } };
    alignas(32) static const double PI2[1][15][15] =
        { { { -0.6083333333333373, -0.6166666666666689, -0.1916666666666691, -2.283333333333341, -0.09999999999999454, -2.11666666666667, -1.10833333333334, 1.216666666666671, 0.3083333333333338, -5.18544972870137, -10.53664241271072, 0.08333333333332282, 16.73486048808167, -7.361215932167738, 10.08333333333335 },
            { 0.2166666666666658, 0.7333333333333376, -0.6166666666666719, 0.3166666666666657, 1.199999999999995, 2.483333333333338, -0.03333333333333605, -0.4333333333333314, -0.3666666666666689, 3.299831645537227, 3.752776749732559, -5.166666666666696, -12.25651754056682, 1.732050807568864, -12.66666666666667 },
            { -0.1916666666666681, 0.2166666666666673, -0.6083333333333383, -1.116666666666674, 0.8999999999999989, 0.7166666666666663, -0.6916666666666724, 0.3833333333333361, -0.1083333333333334, -0.4714045207910407, -3.319764047840382, -4.083333333333364, 0.2357022603955519, -3.031088913245563, -4.08333333333332 },
            { 0.6916666666666723, 0.03333333333333122, 1.108333333333343, 3.24166666666668, -1.400000000000002, 0.1583333333333318, 1.816666666666679, -1.383333333333341, -0.01666666666666472, 4.00693842672379, 11.9800180856848, 6.583333333333387, -10.84230397819378, 9.526279441628859, 0.3333333333333268 },
            { -0.3833333333333369, 0.4333333333333361, -1.216666666666676, -2.233333333333345, 1.799999999999997, 1.433333333333334, -1.383333333333343, 0.7666666666666723, -0.2166666666666682, -0.9428090415820765, -6.639528095680752, -8.166666666666721, 0.4714045207910895, -6.062177826491114, -8.166666666666647 },
            { 0.1083333333333341, 0.3666666666666685, -0.3083333333333352, 0.1583333333333344, 0.5999999999999964, 1.241666666666669, -0.01666666666666673, -0.2166666666666674, -0.1833333333333339, 1.649915822768617, 1.876388374866288, -2.583333333333347, -6.128258770283417, 0.866025403784435, -6.333333333333334 },
            { 2.133333333333352, -0.6833333333333477, 0.4666666666666739, 4.308333333333313, -2.866666666666648, 0.5583333333333305, 1.50833333333334, -2.766666666666684, 1.091666666666682, 5.892556509887916, 10.96965511460292, -1.833333333333333, -11.07800623858925, 7.361215932167603, 8.416666666666645 },
            { -4.933333333333374, 2.53333333333336, -0.9333333333333516, -7.533333333333312, 3.733333333333312, -1.533333333333325, -2.600000000000022, 5.866666666666707, -3.266666666666696, -9.428090415820686, -16.16580753730963, 5.333333333333306, 24.51303508113368, -10.3923048454131, -12.66666666666666 },
            { 2.800000000000021, -1.850000000000013, 0.4666666666666769, 3.224999999999996, -0.8666666666666603, 0.9749999999999955, 1.091666666666681, -3.100000000000023, 2.175000000000015, 3.535533905932771, 5.196152422706707, -3.499999999999977, -13.43502884254444, 3.031088913245479, 4.25 },
            { -1.649915822768633, 0.9428090415820733, -4.006938426723806, -8.720983634634127, 5.656854249492379, 3.064129385141711, -5.185449728701394, 3.299831645537255, -0.4714045207910402, -6.66666666666675, -28.57738033247068, -25.92724864350694, 13.33333333333354, -24.4948974278319, -18.85618083164123 },
            { 0.7216878364870851, 1.443375672974006, -0.7216878364870423, -11.83568051838743, -5.196152422706556, -8.948929172439207, 0.7216878364869999, -1.443375672974101, -0.7216878364869788, 8.164965809277227, 12.49999999999976, -7.216878364870572, 69.40220937885687, 7.499999999999119, 44.74464586219607 },
            { 0.0833333333333309, 3.166666666666681, -4.083333333333373, -2.666666666666718, 6.999999999999993, 10.66666666666668, -2.416666666666698, -0.1666666666666548, -1.583333333333337, 9.428090415820625, 1.443375672973903, -30.83333333333358, -40.06938426723754, -4.330127018922423, -55.83333333333334 },
            { 0.4714045207910501, -3.299831645537247, 5.185449728701395, 5.421151989096899, -8.48528137423855, -11.07800623858927, 4.006938426723811, -0.9428090415820929, 1.649915822768626, -6.666666666666631, 8.164965809277476, 37.71236166328279, 33.33333333333319, 12.24744871391603, 58.92556509887896 },
            { 5.196152422706669, 2.598076211353333, 5.196152422706657, 22.08364779650324, -5.196152422706632, 9.093266739736659, 11.69134295108998, -10.39230484541331, -1.29903810567666, 36.74234614174788, 90.00000000000044, 25.98076211353325, -110.2270384252435, 67.50000000000009, -38.97114317030004 },
            { 0.8333333333333562, -5.833333333333368, 9.166666666666748, 9.58333333333341, -14.99999999999998, -19.58333333333337, 7.083333333333407, -1.66666666666671, 2.916666666666685, -11.78511301977573, 14.43375672974104, 66.66666666666714, 58.92556509887869, 21.65063509461129, 104.1666666666667 } } };
    alignas(32) static const double PI3[1][15][15] =
        { { { -0.6083333333333266, -0.6166666666666805, -0.1916666666666641, -0.6500000000000125, -0.5333333333333283, 1.183333333333328, -1.108333333333333, 1.216666666666661, 0.3083333333333463, -5.185449728701378, -10.53664241271072, 0.08333333333334192, 4.006938426723793, 3.897114317029942, -1.416666666666669 },
            { 0.2166666666666558, 0.7333333333333528, -0.6166666666666759, -0.9499999999999953, 3.066666666666666, -2.116666666666668, -0.03333333333333866, -0.4333333333333236, -0.3666666666666839, 3.299831645537252, 3.752776749732596, -5.166666666666712, -0.9428090415820574, -3.464101615137748, 0.3333333333333448 },
            { -0.1916666666666712, 0.2166666666666742, -0.6083333333333393, -1.150000000000004, 2.133333333333335, -0.9833333333333365, -0.6916666666666708, 0.3833333333333373, -0.1083333333333395, -0.4714045207910227, -3.31976404784035, -4.083333333333366, 1.649915822768629, -0.433012701892234, -0.5833333333333237 },
            { 0.6916666666666693, 0.03333333333332975, 1.10833333333334, 2.275000000000013, -3.13333333333334, 0.8583333333333449, 1.816666666666672, -1.383333333333335, -0.01666666666666475, 4.006938426723769, 11.98001808568475, 6.583333333333374, -5.185449728701388, -1.732050807568832, 1.83333333333332 },
            { -0.383333333333342, 0.4333333333333478, -1.216666666666677, -2.300000000000006, 4.266666666666667, -1.966666666666673, -1.38333333333334, 0.7666666666666737, -0.2166666666666786, -0.9428090415820449, -6.639528095680691, -8.166666666666721, 3.299831645537254, -0.8660254037844652, -1.166666666666645 },
            { 0.1083333333333285, 0.3666666666666769, -0.3083333333333376, -0.4749999999999964, 1.533333333333331, -1.058333333333334, -0.01666666666666811, -0.2166666666666631, -0.1833333333333422, 1.649915822768631, 1.876388374866309, -2.583333333333355, -0.4714045207910329, -1.732050807568876, 0.1666666666666767 },
            { 1.15, 0.9499999999999977, 0.6500000000000008, 2.59166666666666, -3.93333333333331, 1.341666666666664, 2.274999999999995, -2.299999999999994, -0.4750000000000006, 9.192388155425109, 19.91858428704206, 1.999999999999999, -7.778174593052051, -6.495190528383231, 2.74999999999996 },
            { -2.133333333333331, -3.066666666666676, 0.5333333333333331, -3.933333333333339, 5.866666666666648, -1.93333333333333, -3.133333333333328, 4.266666666666658, 1.533333333333345, -20.74179891480541, -36.95041722813606, 9.333333333333337, 13.19932658214894, 17.32050807568868, -4.666666666666682 },
            { 0.9833333333333304, 2.116666666666677, -1.183333333333335, 1.341666666666676, -1.933333333333332, 0.5916666666666638, 0.8583333333333321, -1.966666666666663, -1.058333333333344, 11.5494107593803, 17.03183294109399, -11.33333333333335, -5.421151989096881, -10.82531754730545, 1.916666666666711 },
            { -1.649915822768637, 0.9428090415820974, -4.006938426723803, -7.778174593052055, 13.1993265821489, -5.421151989096892, -5.185449728701377, 3.299831645537247, -0.4714045207910597, -6.666666666666652, -28.57738033247049, -25.92724864350692, 13.33333333333348, 0.0, -4.714045207910301 },
            { 0.7216878364870648, 1.443375672973971, -0.7216878364870309, -0.8660254037845441, 4.618802153517105, -3.75277674973244, 0.7216878364869705, -1.443375672974061, -0.7216878364869579, 8.164965809277025, 12.4999999999994, -7.216878364870464, -4.08248290463899, 52.50000000000033, 105.3664241271056 },
            { 0.08333333333328086, 3.166666666666761, -4.083333333333391, -7.000000000000014, 17.33333333333336, -10.33333333333336, -2.416666666666704, -0.1666666666666192, -1.583333333333413, 9.428090415820773, 1.443375672974141, -30.83333333333365, 2.357022603955251, -12.99038105676662, -0.8333333333332613 },
            { 0.4714045207910889, -3.299831645537317, 5.185449728701406, 9.192388155425126, -20.7417989148054, 11.54941075938031, 4.006938426723808, -0.9428090415821146, 1.649915822768693, -6.666666666666794, 8.164965809277199, 37.71236166328283, -6.66666666666679, 12.24744871391595, 2.357022603955084 },
            { 5.196152422706614, 2.598076211353368, 5.196152422706634, 11.69134295108999, -10.39230484541322, -1.299038105676635, 11.69134295108993, -10.39230484541325, -1.299038105676707, 36.74234614174782, 90.00000000000026, 25.98076211353317, -36.74234614174792, -22.49999999999974, 12.99038105676651 },
            { 0.8333333333334343, -5.833333333333509, 9.166666666666778, 16.25000000000002, -36.66666666666669, 20.41666666666672, 7.083333333333405, -1.666666666666757, 2.916666666666815, -11.78511301977604, 14.43375672974053, 66.66666666666725, -11.78511301977601, 21.6506350946111, 4.166666666666535 } } };
    alignas(32) static const double PI4[1][15][15] =
        { { { 0.8583333333333433, -0.8000000000000003, 1.274999999999999, -1.295833333333342, 1.674999999999999, -0.8374999999999986, -0.3624999999999932, 0.3083333333333416, 0.7625000000000076, 1.767766952966333, -1.732050807568896, 3.749999999999965, -2.474873734152917, -6.278684177437265, -4.375000000000009 },
            { -0.8000000000000003, 2.76666666666665, -3.466666666666652, 1.258333333333338, -3.683333333333322, 3.008333333333316, -0.8583333333333483, 0.2166666666666563, -1.275000000000006, 1.178511301977649, 2.020725942163705, -16.66666666666659, 2.592724864350691, -0.4330127018921557, 4.583333333333369 },
            { 1.274999999999999, -3.466666666666652, 6.191666666666664, -3.17083333333334, 7.258333333333332, -4.295833333333323, 1.095833333333339, -0.4416666666666507, 0.6374999999999826, 7.660323462854292, 4.041451884327438, 22.9166666666666, -10.72445284799601, -4.113620667976121, -18.95833333333342 },
            { -1.295833333333342, 1.258333333333338, -3.17083333333334, 2.775000000000011, -4.216666666666674, 1.691666666666672, 0.3208333333333291, -0.2250000000000114, -0.3874999999999931, -8.249579113843069, -2.237232293109835, -7.708333333333323, 8.367430244040825, 10.60881119635944, 14.7916666666667 },
            { 1.674999999999999, -3.683333333333322, 7.258333333333332, -4.216666666666674, 8.766666666666666, -4.71666666666666, 0.9416666666666732, -0.3833333333333154, 0.5249999999999769, 11.78511301977583, 5.917840259193751, 24.58333333333328, -14.37783788412651, -8.227241335952202, -25.41666666666675 },
            { -0.8374999999999986, 3.008333333333316, -4.295833333333323, 1.691666666666672, -4.71666666666666, 3.441666666666653, -1.054166666666676, 0.358333333333321, -1.012499999999998, -1.17851130197755, -0.07216878364870971, -18.95833333333326, 4.831896338108104, -0.2165063509460614, 8.541666666666726 },
            { -0.3624999999999932, -0.8583333333333483, 1.095833333333339, 0.3208333333333291, 0.9416666666666732, -1.054166666666676, 10.04166666666665, -5.083333333333311, 1.625000000000024, -18.97403196183912, 24.753892791505, 27.95833333333333, -0.2357022603954868, 6.062177826491046, -0.4166666666666101 },
            { 0.3083333333333416, 0.2166666666666563, -0.4416666666666507, -0.2250000000000114, -0.3833333333333154, 0.358333333333321, -5.083333333333311, 3.833333333333318, 0.4166666666666556, 2.592724864350729, -19.19689645055491, -8.416666666666625, 0.4714045207910083, -3.464101615137799, 0.8333333333332842 },
            { 0.7625000000000076, -1.275000000000006, 0.6374999999999826, -0.3874999999999931, 0.5249999999999769, -1.012499999999998, 1.625000000000024, 0.4166666666666556, 2.708333333333339, -13.08147545195122, -6.278684177437068, 13.37500000000004, 2.121320343559725, -2.598076211353348, 3.750000000000139 },
            { 1.767766952966333, 1.178511301977649, 7.660323462854292, -8.249579113843069, 11.78511301977583, -1.17851130197755, -18.97403196183912, 2.592724864350729, -13.08147545195122, 113.3333333333339, 14.28869016623513, -64.81812160876704, -36.66666666666701, -30.61862178478964, -64.81812160876746 },
            { -1.732050807568896, 2.020725942163705, 4.041451884327438, -2.237232293109835, 5.917840259193751, -0.07216878364870971, 24.753892791505, -19.19689645055491, -6.278684177437068, 14.28869016623513, 132.4999999999985, 57.73502691896243, -22.45365597551275, 3.750000000000028, -39.69283100678723 },
            { 3.749999999999965, -16.66666666666659, 22.9166666666666, -7.708333333333323, 24.58333333333328, -18.95833333333326, 27.95833333333333, -8.416666666666625, 13.37500000000004, -64.81812160876704, 57.73502691896243, 219.1666666666667, -22.39171473757406, 10.82531754730551, -39.58333333333348 },
            { -2.474873734152917, 2.592724864350691, -10.72445284799601, 8.367430244040825, -14.37783788412651, 4.831896338108104, -0.2357022603954868, 0.4714045207910083, 2.121320343559725, -36.66666666666701, -22.45365597551275, -22.39171473757406, 33.33333333333342, 24.49489742783174, 58.92556509887913 },
            { -6.278684177437265, -0.4330127018921557, -4.113620667976121, 10.60881119635944, -8.227241335952202, -0.2165063509460614, 6.062177826491046, -3.464101615137799, -2.598076211353348, -30.61862178478964, 3.750000000000028, 10.82531754730551, 24.49489742783174, 67.50000000000053, 43.30127018922189 },
            { -4.375000000000009, 4.583333333333369, -18.95833333333342, 14.7916666666667, -25.41666666666675, 8.541666666666726, -0.4166666666666101, 0.8333333333332842, 3.750000000000139, -64.81812160876746, -39.69283100678723, -39.58333333333348, 58.92556509887913, 43.30127018922189, 104.166666666667 } } };
    alignas(32) static const double PI5[1][15][15] =
        { { { -1.875000000000022, 1.0, -0.7916666666666742, -0.1124999999999982, 0.1416666666666647, 0.5125000000000004, -1.479166666666681, 2.375000000000026, -1.187500000000012, -3.889087296526066, -8.660254037844489, -1.249999999999995, 3.181980515339511, 4.979646071760508, -2.875000000000002 },
            { 1.666666666666684, -2.166666666666673, 1.0, -0.1083333333333418, -0.2833333333333236, -2.024999999999999, 0.7083333333333474, -1.583333333333356, 1.958333333333342, -1.649915822768561, -1.44337567297396, 3.333333333333335, 5.421151989096821, -5.629165124598769, 11.5833333333333 },
            { -0.7916666666666744, 1.66666666666667, -1.87500000000001, -1.154166666666676, 1.058333333333328, 2.8875, -1.520833333333346, 0.9583333333333455, -1.145833333333337, 2.003469213361857, -2.886751345948213, -12.08333333333338, -5.067598598503518, -1.515544456622865, -12.45833333333331 },
            { 1.52083333333335, -0.7083333333333417, 1.479166666666677, 1.008333333333343, -0.6833333333333331, -1.075, 2.270833333333347, -2.291666666666685, 0.7291666666666761, 4.478342947514837, 13.35122497501018, 7.291666666666691, -4.360491817317107, -0.6495190528383006, 3.29166666666667 },
            { -0.9583333333333419, 1.583333333333339, -2.375000000000012, -1.683333333333347, 1.36666666666666, 3.149999999999999, -2.29166666666668, 1.416666666666679, -1.041666666666671, 0.4714045207910056, -7.938566201357435, -15.41666666666672, -3.06412938514162, -3.031088913245632, -12.41666666666664 },
            { 1.145833333333345, -1.958333333333338, 1.187500000000008, 0.2583333333333324, -0.5166666666666595, -2.325, 0.7291666666666798, -1.041666666666684, 1.604166666666673, -2.592724864350636, -1.804219591217489, 6.041666666666688, 6.246109900481121, -2.814582562299332, 12.04166666666664 },
            { 1.154166666666659, 0.1083333333333304, 0.1125000000000046, 7.504166666666647, -5.258333333333309, 0.9624999999999979, 1.008333333333328, -1.68333333333332, 0.2583333333333326, 5.067598598503555, 9.165435523385254, -2.041666666666621, -12.96362432175334, 12.99038105676644, 13.58333333333327 },
            { -1.058333333333336, 0.2833333333333383, -0.1416666666666757, -5.258333333333322, 3.016666666666657, -1.008333333333324, -0.6833333333333396, 1.366666666666668, -0.5166666666666699, -3.064129385141703, -5.34048999000406, 1.583333333333276, 11.78511301977577, -17.32050807568869, -7.166666666666661 },
            { -2.887500000000015, 2.025000000000007, -0.5124999999999971, 0.9625000000000119, -1.008333333333353, 0.1708333333333179, -1.075, 3.150000000000014, -2.325000000000011, -3.181980515339487, -4.54663336986831, 3.375000000000064, 3.535533905932812, 4.330127018922308, -2.249999999999911 },
            { 5.067598598503613, -5.421151989096863, -3.181980515339495, -12.96362432175344, 11.78511301977582, 3.535533905932761, -4.360491817317058, -3.06412938514173, 6.246109900481184, -6.666666666666616, -34.70110468942839, -36.53385036130522, 3.333333333333371, -6.123724356958213, -22.39171473757413 },
            { 11.54700538379252, -7.216878364870349, 0.0, 18.25870226312177, -14.8667694316327, 0.2165063509461416, 2.525907427704574, -12.26869322027952, 9.021097956087923, 14.28869016623509, 12.49999999999973, -28.86751345948133, -22.45365597551248, 48.74999999999896, 72.89047148518972 },
            { -4.916666666666662, 10.66666666666664, -5.749999999999996, 4.458333333333273, -11.41666666666667, 4.874999999999939, -2.208333333333358, 3.583333333333345, -8.458333333333318, 20.03469213361875, 23.09401076758481, -30.83333333333333, 5.892556509888319, 2.165063509460595, 5.416666666667025 },
            { -2.003469213361905, 1.649915822768615, 3.889087296526028, 5.067598598503657, -3.064129385141718, -3.181980515339461, 4.478342947514806, 0.4714045207910564, -2.592724864350687, 3.333333333333281, 26.53613888015108, 34.17682775734995, -6.666666666666803, 24.49489742783182, 2.357022603955159 },
            { 11.90784930203617, -2.165063509461158, 5.412658773652788, 2.814582562299448, -1.299038105676666, 0.6495190528383261, 12.99038105676667, -17.32050807568893, 4.330127018922269, 42.86607049870592, 93.75000000000054, 10.82531754730546, -48.98979485566387, -22.50000000000009, -8.660254037844293 },
            { -3.541666666666693, 2.916666666666666, 6.875000000000034, 8.95833333333346, -5.416666666666695, -5.624999999999996, 7.916666666666685, 0.8333333333333646, -4.583333333333346, 5.892556509887829, 46.90970937165711, 60.41666666666696, -11.78511301977607, 43.30127018922203, 4.1666666666667 } } };
    alignas(32) static const double PI6[1][15][15] =
        { { { -0.6083333333333394, -0.6166666666666802, -0.1916666666666602, -0.4666666666666709, 0.9333333333333207, -0.4666666666666611, -1.108333333333337, 1.216666666666677, 0.3083333333333412, -5.185449728701421, -10.53664241271077, 0.08333333333340209, 4.006938426723831, 3.897114317029922, -1.416666666666791 },
            { 0.2166666666666778, 0.7333333333333433, -0.6166666666666775, 0.6833333333333301, -2.533333333333302, 1.849999999999973, -0.03333333333333244, -0.433333333333348, -0.3666666666666687, 3.299831645537292, 3.752776749732647, -5.166666666666774, -0.9428090415820898, -3.464101615137696, 0.3333333333335986 },
            { -0.1916666666666806, 0.2166666666666759, -0.6083333333333361, -2.133333333333337, 4.933333333333321, -2.799999999999994, -0.6916666666666723, 0.3833333333333478, -0.1083333333333448, -0.4714045207910459, -3.319764047840374, -4.083333333333321, 1.649915822768639, -0.4330127018922487, -0.5833333333334438 },
            { 0.691666666666674, 0.0333333333333361, 1.108333333333333, 1.508333333333342, -2.599999999999998, 1.091666666666676, 1.816666666666672, -1.383333333333342, -0.01666666666666655, 4.006938426723806, 11.98001808568479, 6.583333333333311, -5.185449728701412, -1.732050807568835, 1.833333333333358 },
            { -0.383333333333348, 0.4333333333333447, -1.21666666666667, -2.766666666666671, 5.866666666666654, -3.100000000000001, -1.383333333333338, 0.7666666666666806, -0.2166666666666801, -0.9428090415820711, -6.639528095680709, -8.166666666666657, 3.299831645537261, -0.8660254037844711, -1.166666666666734 },
            { 0.1083333333333453, 0.3666666666666687, -0.3083333333333387, 1.091666666666666, -3.266666666666645, 2.174999999999981, -0.01666666666666372, -0.2166666666666812, -0.1833333333333299, 1.649915822768658, 1.876388374866341, -2.5833333333334, -0.4714045207910527, -1.732050807568836, 0.166666666666877 },
            { 1.116666666666661, -0.3166666666666991, 2.283333333333357, 4.308333333333321, -7.53333333333332, 3.224999999999995, 3.241666666666664, -2.233333333333314, 0.1583333333333505, 5.421151989096727, 19.3412340178523, 14.33333333333353, -8.720983634634038, -8.227241335952145, -8.916666666666867 },
            { -0.899999999999997, -1.199999999999984, 0.09999999999998832, -2.86666666666667, 3.733333333333331, -0.8666666666666757, -1.399999999999995, 1.799999999999988, 0.5999999999999933, -8.485281374238504, -15.5884572681198, 2.999999999999913, 5.65685424949239, 3.464101615137664, -7.999999999999924 },
            { -0.7166666666666615, -2.483333333333345, 2.11666666666668, 0.5583333333333445, -1.533333333333366, 0.975000000000002, 0.1583333333333505, 1.433333333333323, 1.241666666666677, -11.07800623858926, -12.4130307875769, 17.66666666666677, 3.064129385141732, 4.763139720814387, -13.08333333333323 },
            { -0.2357022603955536, 12.25651754056691, -16.73486048808171, -11.07800623858927, 24.51303508113373, -13.43502884254441, -10.84230397819382, 0.4714045207910798, -6.128258770283482, 33.33333333333347, -4.08248290463878, -124.922198009624, 13.3333333333333, 0.0, 80.13876853447547 },
            { 5.051814855409192, 10.10362971081832, -5.051814855409175, 10.96965511460279, -16.16580753730936, 5.196152422706641, 5.051814855409135, -10.10362971081833, -5.051814855409165, 57.15476066494022, 87.49999999999891, -50.51814855409184, -28.57738033247034, -22.49999999999968, 62.06515393788345 },
            { 0.583333333333337, -7.833333333333401, 11.41666666666673, 2.16666666666664, -2.666666666666734, 0.5, 8.083333333333369, -1.166666666666665, 3.916666666666708, -18.85618083164146, 10.10362971081837, 84.16666666666714, -11.78511301977588, 12.99038105676661, -25.83333333333389 },
            { 0.4714045207910436, -3.299831645537283, 5.185449728701395, 5.892556509887921, -9.428090415820691, 3.535533905932817, 4.006938426723787, -0.9428090415820656, 1.649915822768656, -6.666666666666836, 8.16496580927711, 37.71236166328285, -6.666666666666719, 12.24744871391582, 2.35702260395461 },
            { 5.196152422706652, 2.598076211353396, 5.196152422706609, 3.897114317030023, -3.464101615137737, -0.4330127018921717, 11.69134295108995, -10.3923048454133, -1.299038105676713, 36.74234614174806, 90.00000000000058, 25.98076211353288, -36.74234614174814, -22.49999999999969, 12.99038105676676 },
            { 0.833333333333359, -5.833333333333435, 9.166666666666746, 10.41666666666672, -16.66666666666678, 6.250000000000143, 7.083333333333372, -1.66666666666668, 2.916666666666742, -11.78511301977605, 14.43375672974046, 66.6666666666672, -11.78511301977591, 21.65063509461082, 4.166666666665741 } } };
    alignas(32) static const double PI7[1][15][15] =
        { { { 6.191666666666719, -3.4666666666667, 1.275000000000016, -1.095833333333337, 0.4416666666666688, -0.6375000000000112, 3.170833333333356, -7.258333333333386, 4.295833333333371, 10.72445284799604, 18.47520861406814, -5.916666666666689, -7.660323462854297, -21.86714144555719, 7.958333333333416 },
            { -3.4666666666667, 2.766666666666692, -0.8000000000000111, 0.8583333333333351, -0.2166666666666662, 1.275000000000012, -1.258333333333348, 3.683333333333369, -3.00833333333336, -2.592724864350709, -3.752776749732625, 2.666666666666676, -1.178511301977581, 13.42339375865887, -10.08333333333342 },
            { 1.275000000000016, -0.8000000000000111, 0.8583333333333421, 0.3625000000000103, -0.308333333333338, -0.7625000000000056, 1.295833333333344, -1.675000000000017, 0.8375000000000113, 2.474873734152939, 6.928203230275564, 3.25000000000002, -1.767766952966398, -2.381569860407203, 3.375000000000044 },
            { -1.095833333333337, 0.8583333333333351, 0.3625000000000103, 10.04166666666665, -5.083333333333315, 1.624999999999998, 0.3208333333333433, 0.9416666666666682, -1.054166666666669, -0.2357022603955143, 2.670244995002073, 5.458333333333417, -18.97403196183905, 36.58957330989248, 7.458333333333262 },
            { 0.4416666666666688, -0.2166666666666662, -0.308333333333338, -5.083333333333315, 3.83333333333331, 0.4166666666666655, -0.225000000000002, -0.3833333333333352, 0.3583333333333341, 0.4714045207910345, -1.010362971081858, -3.416666666666699, 2.592724864350684, -16.88749537379649, -12.41666666666659 },
            { -0.6375000000000112, 1.275000000000012, -0.7625000000000056, 1.624999999999998, 0.4166666666666655, 2.708333333333341, -0.3875000000000037, 0.5250000000000118, -1.012500000000011, 2.121320343559641, 1.948557158514981, -4.125000000000006, -13.08147545195114, 8.443747686898286, -12.12500000000005 },
            { 3.170833333333356, -1.258333333333348, 1.295833333333344, 0.3208333333333433, -0.225000000000002, -0.3875000000000037, 2.775000000000013, -4.216666666666689, 1.691666666666681, 8.367430244040847, 18.11436469582458, 1.791666666666685, -8.249579113843106, -7.794228634059953, 1.916666666666698 },
            { -7.258333333333386, 3.683333333333369, -1.675000000000017, 0.9416666666666682, -0.3833333333333352, 0.5250000000000118, -4.216666666666689, 8.766666666666719, -4.716666666666705, -14.37783788412654, -26.12509968083067, 5.583333333333349, 11.78511301977583, 24.24871130596439, -7.166666666666755 },
            { 4.295833333333371, -3.00833333333336, 0.8375000000000113, -1.054166666666669, 0.3583333333333341, -1.012500000000011, 1.691666666666681, -4.716666666666705, 3.441666666666696, 4.831896338108116, 7.289047148519088, -4.45833333333335, -1.178511301977588, -16.45448267190442, 9.416666666666751 },
            { 10.72445284799604, -2.592724864350709, 2.474873734152939, -0.2357022603955143, 0.4714045207910345, 2.121320343559641, 8.367430244040847, -14.37783788412654, 4.831896338108116, 33.33333333333346, 63.27848502189897, -8.249579113843076, -36.6666666666668, -30.61862178478986, -8.249579113843028 },
            { 18.47520861406814, -3.752776749732625, 6.928203230275564, 2.670244995002073, -1.010362971081858, 1.948557158514981, 18.11436469582458, -26.12509968083067, 7.289047148519088, 63.27848502189897, 132.5000000000004, 5.773502691896342, -71.44345083117634, -41.25000000000002, -13.71206889325353 },
            { -5.916666666666689, 2.666666666666676, 3.25000000000002, 5.458333333333417, -3.416666666666699, -4.125000000000006, 1.791666666666685, 5.583333333333349, -4.45833333333335, -8.249579113843076, 5.773502691896342, 39.16666666666687, 5.892556509887758, 36.80607966083898, 5.416666666666733 },
            { -7.660323462854297, -1.178511301977581, -1.767766952966398, -18.97403196183905, 2.592724864350684, -13.08147545195114, -8.249579113843106, 11.78511301977583, -1.178511301977588, -36.6666666666668, -71.44345083117634, 5.892556509887758, 113.3333333333335, -48.98979485566355, 44.78342947514812 },
            { -21.86714144555719, 13.42339375865887, -2.381569860407203, 36.58957330989248, -16.88749537379649, 8.443747686898286, -7.794228634059953, 24.24871130596439, -16.45448267190442, -30.61862178478986, -41.25000000000002, 36.80607966083898, -48.98979485566355, 247.4999999999996, -8.660254037844791 },
            { 7.958333333333416, -10.08333333333342, 3.375000000000044, 7.458333333333262, -12.41666666666659, -12.12500000000005, 1.916666666666698, -7.166666666666755, 9.416666666666751, -8.249579113843028, -13.71206889325353, 5.416666666666733, 44.78342947514812, -8.660254037844791, 104.1666666666668 } } };
    alignas(32) static const double PI8[1][15][15] =
        { { { 1.691666666666669, 2.783333333333358, -0.8916666666666757, -0.2666666666666551, -0.133333333333338, 0.4000000000000135, 2.191666666666668, -3.383333333333338, -1.391666666666686, 17.44196726926827, 29.30052616137363, -10.91666666666675, -10.13519719700729, -15.15544456622761, 3.583333333333358 },
            { -0.7166666666666719, -1.733333333333344, 1.116666666666671, 0.11666666666666, 0.9333333333333433, -1.050000000000008, -0.4666666666666692, 1.433333333333341, 0.8666666666666741, -8.95668589502966, -12.41303078757703, 10.16666666666671, 3.771236166328301, 8.66025403784438, -1.333333333333376 },
            { 0.4416666666666721, 0.2833333333333355, 0.3583333333333351, 0.7333333333333433, -1.466666666666678, 0.7333333333333453, 0.9416666666666724, -0.8833333333333406, -0.1416666666666672, 3.299831645537251, 7.649891066762597, 1.583333333333329, -3.064129385141751, -2.165063509461085, 1.083333333333338 },
            { 0.6916666666666677, 0.0333333333333117, 1.108333333333349, 5.508333333333334, -7.933333333333318, 2.424999999999993, 1.816666666666668, -1.383333333333326, -0.01666666666665391, 4.006938426723697, 11.98001808568466, 6.583333333333453, -5.185449728701325, -1.732050807568839, 1.833333333333307 },
            { -0.3833333333333384, 0.4333333333333566, -1.216666666666678, -3.43333333333332, 5.866666666666639, -2.433333333333322, -1.383333333333332, 0.7666666666666646, -0.2166666666666834, -0.9428090415819965, -6.639528095680605, -8.166666666666739, 3.299831645537211, -0.8660254037844722, -1.166666666666622 },
            { 0.1083333333333221, 0.3666666666666772, -0.3083333333333367, -0.2416666666666638, 2.066666666666671, -1.825000000000006, -0.01666666666667133, -0.2166666666666547, -0.1833333333333448, 1.64991582276861, 1.876388374866277, -2.583333333333333, -0.4714045207910101, -1.73205080756886, 0.166666666666669 },
            { 1.150000000000002, 0.9500000000000095, 0.6499999999999982, 0.7750000000000132, -1.13333333333334, 0.3583333333333495, 2.275000000000002, -2.300000000000002, -0.4750000000000074, 9.19238815542516, 19.91858428704215, 1.999999999999972, -7.7781745930521, -6.495190528383222, 2.749999999999988 },
            { -2.133333333333333, -3.066666666666694, 0.5333333333333445, 0.03333333333331806, 0.2666666666666719, -0.3000000000000193, -3.133333333333331, 4.266666666666667, 1.533333333333356, -20.74179891480549, -36.95041722813616, 9.33333333333343, 13.19932658214901, 17.32050807568866, -4.666666666666682 },
            { 0.9833333333333367, 2.116666666666682, -1.18333333333334, -0.3083333333333256, -0.4666666666666744, 0.7750000000000079, 0.8583333333333342, -1.966666666666672, -1.058333333333345, 11.54941075938034, 17.03183294109404, -11.3333333333334, -5.421151989096924, -10.82531754730546, 1.916666666666706 },
            { 4.006938426723759, 3.771236166328304, 1.649915822768596, 0.2357022603955437, 1.885618083164133, -2.121320343559606, 7.542472332656503, -8.013876853447529, -1.885618083164171, 33.33333333333348, 69.4022093788569, 2.357022603955034, -26.66666666666691, -24.49489742783152, 9.428090415820568 },
            { 7.649891066762533, 4.907477288111889, 6.206515393788463, 4.04145188432746, -2.309401076758527, -1.732050807568774, 16.31014510460693, -15.29978213352507, -2.45373864405597, 57.15476066494105, 132.5000000000003, 27.42413778650706, -53.07227776030269, -37.49999999999947, 18.76388374866265 },
            { -0.9166666666666353, -4.833333333333382, 4.916666666666701, 6.166666666666707, -10.66666666666673, 4.500000000000048, 1.583333333333366, 1.833333333333297, 2.416666666666713, -18.85618083164132, -15.87713240271467, 39.16666666666686, 2.357022603955107, 21.6506350946109, -0.8333333333333908 },
            { -5.185449728701304, -6.128258770283487, -0.4714045207910229, -6.835365551470034, 1.88561808316414, 4.949747468305806, -8.720983634634075, 10.37089945740265, 3.064129385141782, -46.66666666666679, -89.81462390205004, 9.428090415820634, 33.33333333333347, 36.74234614174733, -11.78511301977584 },
            { -1.732050807568882, -0.8660254037845985, -1.7320508075688, 19.48557158514984, -17.32050807568871, -2.165063509461027, -3.897114317030013, 3.464101615137809, 0.433012701892323, -12.24744871391646, -30.00000000000087, -8.660254037843817, 12.24744871391601, 67.50000000000018, 99.5929214352096 },
            { 1.833333333333388, 2.166666666666578, 0.1666666666667034, 9.416666666666616, -24.6666666666666, 15.24999999999998, 3.083333333333339, -3.666666666666701, -1.083333333333258, 16.49915822768597, 31.75426480542922, -3.33333333333319, -11.78511301977584, -12.99038105676651, 4.166666666666655 } } };
    alignas(32) static const double PI9[1][15][15] =
        { { { 0.6333333333333299, 0.8166666666666634, -0.03333333333332972, 0.5083333333333426, -0.6000000000000132, 0.09166666666668143, 1.00833333333333, -1.266666666666659, -0.4083333333333339, 5.892556509887871, 10.96965511460285, -1.833333333333303, -4.006938426723787, -3.897114317029898, 2.916666666666646 },
            { 0.8166666666666634, 2.533333333333348, -2.016666666666679, -0.1833333333333451, 1.200000000000036, -1.016666666666672, 0.06666666666665483, -1.633333333333328, -1.266666666666679, 11.78511301977583, 14.14508159514583, -17.16666666666676, -3.7712361663283, -5.196152422706599, 13.33333333333327 },
            { -0.03333333333332972, -2.016666666666679, 2.633333333333347, 1.091666666666675, -2.600000000000021, 1.508333333333339, 1.59166666666668, 0.06666666666666121, 1.008333333333343, -5.892556509887921, -0.5773502691896022, 19.83333333333344, -1.649915822768605, 0.4330127018921939, -12.91666666666668 },
            { 0.5083333333333426, -0.1833333333333451, 1.091666666666675, 3.683333333333333, -5.866666666666654, 2.18333333333333, 1.508333333333339, -1.016666666666674, 0.09166666666667665, 2.357022603955151, 8.8045916051418, 6.916666666666702, -4.006938426723798, 0.4330127018922261, 2.916666666666652 },
            { -0.6000000000000132, 1.200000000000036, -2.600000000000021, -5.866666666666654, 11.73333333333331, -5.866666666666649, -2.600000000000007, 1.200000000000005, -0.6000000000000281, 0.0, -10.39230484541318, -18.00000000000013, 5.656854249492346, 3.464101615137771, 10.00000000000002 },
            { 0.09166666666668143, -1.016666666666672, 1.508333333333339, 2.18333333333333, -5.866666666666649, 3.683333333333304, 1.091666666666681, -0.1833333333333527, 0.5083333333333419, -2.357022603955121, 1.587713240271565, 11.08333333333334, -1.649915822768612, -3.897114317029977, -12.91666666666644 },
            { 1.00833333333333, 0.06666666666665483, 1.59166666666668, 1.508333333333339, -2.600000000000007, 1.091666666666681, 2.633333333333336, -2.016666666666657, -0.03333333333332877, 5.892556509887843, 17.46484564298613, 9.416666666666771, -7.542472332656531, -6.062177826491011, -3.333333333333453 },
            { -1.266666666666659, -1.633333333333328, 0.06666666666666121, -1.016666666666674, 1.200000000000005, -0.1833333333333527, -2.016666666666657, 2.533333333333316, 0.8166666666666679, -11.78511301977574, -21.93931022920569, 3.666666666666618, 8.013876853447567, 7.79422863405982, -5.83333333333325 },
            { -0.4083333333333339, -1.266666666666679, 1.008333333333343, 0.09166666666667665, -0.6000000000000281, 0.5083333333333419, -0.03333333333332877, 0.8166666666666679, 0.633333333333342, -5.89255650988794, -7.072540797572953, 8.583333333333409, 1.885618083164161, 2.598076211353325, -6.666666666666637 },
            { 5.892556509887871, 11.78511301977583, -5.892556509887921, 2.357022603955151, 0.0, -2.357022603955121, 5.892556509887843, -11.78511301977574, -5.89255650988794, 66.66666666666669, 102.0620726159656, -58.92556509887915, -33.33333333333358, -36.74234614174723, 54.2115198909683 },
            { 10.96965511460285, 14.14508159514583, -0.5773502691896022, 8.8045916051418, -10.39230484541318, 1.587713240271565, 17.46484564298613, -21.93931022920569, -7.072540797572953, 102.0620726159656, 189.9999999999997, -31.75426480542924, -69.40220937885711, -67.49999999999928, 50.51814855409134 },
            { -1.833333333333303, -17.16666666666676, 19.83333333333344, 6.916666666666702, -18.00000000000013, 11.08333333333334, 9.416666666666771, 3.666666666666618, 8.583333333333409, -58.92556509887915, -31.75426480542924, 153.3333333333341, -2.357022603955041, 12.99038105676619, -104.1666666666668 },
            { -4.006938426723787, -3.7712361663283, -1.649915822768605, -4.006938426723798, 5.656854249492346, -1.649915822768612, -7.542472332656531, 8.013876853447567, 1.885618083164161, -33.33333333333358, -69.40220937885711, -2.357022603955041, 26.66666666666698, 24.49489742783146, -9.428090415820989 },
            { -3.897114317029898, -5.196152422706599, 0.4330127018921939, 0.4330127018922261, 3.464101615137771, -3.897114317029977, -6.062177826491011, 7.79422863405982, 2.598076211353325, -36.74234614174723, -67.49999999999928, 12.99038105676619, 24.49489742783146, 59.99999999999984, 43.30127018922247 },
            { 2.916666666666646, 13.33333333333327, -12.91666666666668, 2.916666666666652, 10.00000000000002, -12.91666666666644, -3.333333333333453, -5.83333333333325, -6.666666666666637, 54.2115198909683, 50.51814855409134, -104.1666666666668, -9.428090415820989, 43.30127018922247, 183.3333333333317 } } };
    // Unstructured piecewise computations
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q6[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q6[0][0][1];
    alignas(32) double sp[36];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c3 / sp[2];
    sp[4] = -1 * J_c2 / sp[2];
    sp[5] = J_c0 / sp[2];
    sp[6] = sp[5] * sp[3];
    sp[7] = sp[5] * sp[4];
    sp[8] = -1 * J_c1 / sp[2];
    sp[9] = sp[3] * sp[8];
    sp[10] = sp[8] * sp[4];
    sp[11] = -1 * sp[10] + sp[6];
    sp[12] = -1 * sp[7] + sp[7];
    sp[13] = -1 * sp[9] + sp[9];
    sp[14] = -1 * sp[6] + sp[10];
    sp[15] = sp[11] * sp[11];
    sp[16] = sp[11] * sp[12];
    sp[17] = sp[11] * sp[13];
    sp[18] = sp[11] * sp[14];
    sp[19] = sp[12] * sp[12];
    sp[20] = sp[13] * sp[12];
    sp[21] = sp[12] * sp[14];
    sp[22] = sp[13] * sp[13];
    sp[23] = sp[13] * sp[14];
    sp[24] = sp[14] * sp[14];
    sp[25] = std::abs(sp[2]);
    sp[26] = sp[15] * sp[25];
    sp[27] = sp[16] * sp[25];
    sp[28] = sp[17] * sp[25];
    sp[29] = sp[18] * sp[25];
    sp[30] = sp[19] * sp[25];
    sp[31] = sp[20] * sp[25];
    sp[32] = sp[21] * sp[25];
    sp[33] = sp[22] * sp[25];
    sp[34] = sp[23] * sp[25];
    sp[35] = sp[24] * sp[25];
    A[0] = sp[33] * PI0[0][0][0] + sp[34] * PI1[0][0][0] + sp[28] * PI2[0][0][0] + sp[31] * PI3[0][0][0] + sp[34] * PI1[0][0][0] + sp[35] * PI4[0][0][0] + sp[29] * PI5[0][0][0] + sp[32] * PI6[0][0][0] + sp[28] * PI2[0][0][0] + sp[29] * PI5[0][0][0] + sp[26] * PI7[0][0][0] + sp[27] * PI8[0][0][0] + sp[31] * PI3[0][0][0] + sp[32] * PI6[0][0][0] + sp[27] * PI8[0][0][0] + sp[30] * PI9[0][0][0];
    A[1] = sp[33] * PI0[0][0][1] + sp[34] * PI1[0][0][1] + sp[28] * PI2[0][0][1] + sp[31] * PI3[0][0][1] + sp[34] * PI1[0][1][0] + sp[35] * PI4[0][0][1] + sp[29] * PI5[0][0][1] + sp[32] * PI6[0][0][1] + sp[28] * PI2[0][1][0] + sp[29] * PI5[0][1][0] + sp[26] * PI7[0][0][1] + sp[27] * PI8[0][0][1] + sp[31] * PI3[0][1][0] + sp[32] * PI6[0][1][0] + sp[27] * PI8[0][1][0] + sp[30] * PI9[0][0][1];
    A[2] = sp[33] * PI0[0][0][2] + sp[34] * PI1[0][0][2] + sp[28] * PI2[0][0][2] + sp[31] * PI3[0][0][2] + sp[34] * PI1[0][2][0] + sp[35] * PI4[0][0][2] + sp[29] * PI5[0][0][2] + sp[32] * PI6[0][0][2] + sp[28] * PI2[0][2][0] + sp[29] * PI5[0][2][0] + sp[26] * PI7[0][0][2] + sp[27] * PI8[0][0][2] + sp[31] * PI3[0][2][0] + sp[32] * PI6[0][2][0] + sp[27] * PI8[0][2][0] + sp[30] * PI9[0][0][2];
    A[3] = sp[33] * PI0[0][0][3] + sp[34] * PI1[0][0][3] + sp[28] * PI2[0][0][3] + sp[31] * PI3[0][0][3] + sp[34] * PI1[0][3][0] + sp[35] * PI4[0][0][3] + sp[29] * PI5[0][0][3] + sp[32] * PI6[0][0][3] + sp[28] * PI2[0][3][0] + sp[29] * PI5[0][3][0] + sp[26] * PI7[0][0][3] + sp[27] * PI8[0][0][3] + sp[31] * PI3[0][3][0] + sp[32] * PI6[0][3][0] + sp[27] * PI8[0][3][0] + sp[30] * PI9[0][0][3];
    A[4] = sp[33] * PI0[0][0][4] + sp[34] * PI1[0][0][4] + sp[28] * PI2[0][0][4] + sp[31] * PI3[0][0][4] + sp[34] * PI1[0][4][0] + sp[35] * PI4[0][0][4] + sp[29] * PI5[0][0][4] + sp[32] * PI6[0][0][4] + sp[28] * PI2[0][4][0] + sp[29] * PI5[0][4][0] + sp[26] * PI7[0][0][4] + sp[27] * PI8[0][0][4] + sp[31] * PI3[0][4][0] + sp[32] * PI6[0][4][0] + sp[27] * PI8[0][4][0] + sp[30] * PI9[0][0][4];
    A[5] = sp[33] * PI0[0][0][5] + sp[34] * PI1[0][0][5] + sp[28] * PI2[0][0][5] + sp[31] * PI3[0][0][5] + sp[34] * PI1[0][5][0] + sp[35] * PI4[0][0][5] + sp[29] * PI5[0][0][5] + sp[32] * PI6[0][0][5] + sp[28] * PI2[0][5][0] + sp[29] * PI5[0][5][0] + sp[26] * PI7[0][0][5] + sp[27] * PI8[0][0][5] + sp[31] * PI3[0][5][0] + sp[32] * PI6[0][5][0] + sp[27] * PI8[0][5][0] + sp[30] * PI9[0][0][5];
    A[6] = sp[33] * PI0[0][0][6] + sp[34] * PI1[0][0][6] + sp[28] * PI2[0][0][6] + sp[31] * PI3[0][0][6] + sp[34] * PI1[0][6][0] + sp[35] * PI4[0][0][6] + sp[29] * PI5[0][0][6] + sp[32] * PI6[0][0][6] + sp[28] * PI2[0][6][0] + sp[29] * PI5[0][6][0] + sp[26] * PI7[0][0][6] + sp[27] * PI8[0][0][6] + sp[31] * PI3[0][6][0] + sp[32] * PI6[0][6][0] + sp[27] * PI8[0][6][0] + sp[30] * PI9[0][0][6];
    A[7] = sp[33] * PI0[0][0][7] + sp[34] * PI1[0][0][7] + sp[28] * PI2[0][0][7] + sp[31] * PI3[0][0][7] + sp[34] * PI1[0][7][0] + sp[35] * PI4[0][0][7] + sp[29] * PI5[0][0][7] + sp[32] * PI6[0][0][7] + sp[28] * PI2[0][7][0] + sp[29] * PI5[0][7][0] + sp[26] * PI7[0][0][7] + sp[27] * PI8[0][0][7] + sp[31] * PI3[0][7][0] + sp[32] * PI6[0][7][0] + sp[27] * PI8[0][7][0] + sp[30] * PI9[0][0][7];
    A[8] = sp[33] * PI0[0][0][8] + sp[34] * PI1[0][0][8] + sp[28] * PI2[0][0][8] + sp[31] * PI3[0][0][8] + sp[34] * PI1[0][8][0] + sp[35] * PI4[0][0][8] + sp[29] * PI5[0][0][8] + sp[32] * PI6[0][0][8] + sp[28] * PI2[0][8][0] + sp[29] * PI5[0][8][0] + sp[26] * PI7[0][0][8] + sp[27] * PI8[0][0][8] + sp[31] * PI3[0][8][0] + sp[32] * PI6[0][8][0] + sp[27] * PI8[0][8][0] + sp[30] * PI9[0][0][8];
    A[9] = sp[33] * PI0[0][0][9] + sp[34] * PI1[0][0][9] + sp[28] * PI2[0][0][9] + sp[31] * PI3[0][0][9] + sp[34] * PI1[0][9][0] + sp[35] * PI4[0][0][9] + sp[29] * PI5[0][0][9] + sp[32] * PI6[0][0][9] + sp[28] * PI2[0][9][0] + sp[29] * PI5[0][9][0] + sp[26] * PI7[0][0][9] + sp[27] * PI8[0][0][9] + sp[31] * PI3[0][9][0] + sp[32] * PI6[0][9][0] + sp[27] * PI8[0][9][0] + sp[30] * PI9[0][0][9];
    A[10] = sp[33] * PI0[0][0][10] + sp[34] * PI1[0][0][10] + sp[28] * PI2[0][0][10] + sp[31] * PI3[0][0][10] + sp[34] * PI1[0][10][0] + sp[35] * PI4[0][0][10] + sp[29] * PI5[0][0][10] + sp[32] * PI6[0][0][10] + sp[28] * PI2[0][10][0] + sp[29] * PI5[0][10][0] + sp[26] * PI7[0][0][10] + sp[27] * PI8[0][0][10] + sp[31] * PI3[0][10][0] + sp[32] * PI6[0][10][0] + sp[27] * PI8[0][10][0] + sp[30] * PI9[0][0][10];
    A[11] = sp[33] * PI0[0][0][11] + sp[34] * PI1[0][0][11] + sp[28] * PI2[0][0][11] + sp[31] * PI3[0][0][11] + sp[34] * PI1[0][11][0] + sp[35] * PI4[0][0][11] + sp[29] * PI5[0][0][11] + sp[32] * PI6[0][0][11] + sp[28] * PI2[0][11][0] + sp[29] * PI5[0][11][0] + sp[26] * PI7[0][0][11] + sp[27] * PI8[0][0][11] + sp[31] * PI3[0][11][0] + sp[32] * PI6[0][11][0] + sp[27] * PI8[0][11][0] + sp[30] * PI9[0][0][11];
    A[12] = sp[33] * PI0[0][0][12] + sp[34] * PI1[0][0][12] + sp[28] * PI2[0][0][12] + sp[31] * PI3[0][0][12] + sp[34] * PI1[0][12][0] + sp[35] * PI4[0][0][12] + sp[29] * PI5[0][0][12] + sp[32] * PI6[0][0][12] + sp[28] * PI2[0][12][0] + sp[29] * PI5[0][12][0] + sp[26] * PI7[0][0][12] + sp[27] * PI8[0][0][12] + sp[31] * PI3[0][12][0] + sp[32] * PI6[0][12][0] + sp[27] * PI8[0][12][0] + sp[30] * PI9[0][0][12];
    A[13] = sp[33] * PI0[0][0][13] + sp[34] * PI1[0][0][13] + sp[28] * PI2[0][0][13] + sp[31] * PI3[0][0][13] + sp[34] * PI1[0][13][0] + sp[35] * PI4[0][0][13] + sp[29] * PI5[0][0][13] + sp[32] * PI6[0][0][13] + sp[28] * PI2[0][13][0] + sp[29] * PI5[0][13][0] + sp[26] * PI7[0][0][13] + sp[27] * PI8[0][0][13] + sp[31] * PI3[0][13][0] + sp[32] * PI6[0][13][0] + sp[27] * PI8[0][13][0] + sp[30] * PI9[0][0][13];
    A[14] = sp[33] * PI0[0][0][14] + sp[34] * PI1[0][0][14] + sp[28] * PI2[0][0][14] + sp[31] * PI3[0][0][14] + sp[34] * PI1[0][14][0] + sp[35] * PI4[0][0][14] + sp[29] * PI5[0][0][14] + sp[32] * PI6[0][0][14] + sp[28] * PI2[0][14][0] + sp[29] * PI5[0][14][0] + sp[26] * PI7[0][0][14] + sp[27] * PI8[0][0][14] + sp[31] * PI3[0][14][0] + sp[32] * PI6[0][14][0] + sp[27] * PI8[0][14][0] + sp[30] * PI9[0][0][14];
    A[15] = sp[33] * PI0[0][1][0] + sp[34] * PI1[0][1][0] + sp[28] * PI2[0][1][0] + sp[31] * PI3[0][1][0] + sp[34] * PI1[0][0][1] + sp[35] * PI4[0][1][0] + sp[29] * PI5[0][1][0] + sp[32] * PI6[0][1][0] + sp[28] * PI2[0][0][1] + sp[29] * PI5[0][0][1] + sp[26] * PI7[0][1][0] + sp[27] * PI8[0][1][0] + sp[31] * PI3[0][0][1] + sp[32] * PI6[0][0][1] + sp[27] * PI8[0][0][1] + sp[30] * PI9[0][1][0];
    A[16] = sp[33] * PI0[0][1][1] + sp[34] * PI1[0][1][1] + sp[28] * PI2[0][1][1] + sp[31] * PI3[0][1][1] + sp[34] * PI1[0][1][1] + sp[35] * PI4[0][1][1] + sp[29] * PI5[0][1][1] + sp[32] * PI6[0][1][1] + sp[28] * PI2[0][1][1] + sp[29] * PI5[0][1][1] + sp[26] * PI7[0][1][1] + sp[27] * PI8[0][1][1] + sp[31] * PI3[0][1][1] + sp[32] * PI6[0][1][1] + sp[27] * PI8[0][1][1] + sp[30] * PI9[0][1][1];
    A[17] = sp[33] * PI0[0][1][2] + sp[34] * PI1[0][1][2] + sp[28] * PI2[0][1][2] + sp[31] * PI3[0][1][2] + sp[34] * PI1[0][2][1] + sp[35] * PI4[0][1][2] + sp[29] * PI5[0][1][2] + sp[32] * PI6[0][1][2] + sp[28] * PI2[0][2][1] + sp[29] * PI5[0][2][1] + sp[26] * PI7[0][1][2] + sp[27] * PI8[0][1][2] + sp[31] * PI3[0][2][1] + sp[32] * PI6[0][2][1] + sp[27] * PI8[0][2][1] + sp[30] * PI9[0][1][2];
    A[18] = sp[33] * PI0[0][1][3] + sp[34] * PI1[0][1][3] + sp[28] * PI2[0][1][3] + sp[31] * PI3[0][1][3] + sp[34] * PI1[0][3][1] + sp[35] * PI4[0][1][3] + sp[29] * PI5[0][1][3] + sp[32] * PI6[0][1][3] + sp[28] * PI2[0][3][1] + sp[29] * PI5[0][3][1] + sp[26] * PI7[0][1][3] + sp[27] * PI8[0][1][3] + sp[31] * PI3[0][3][1] + sp[32] * PI6[0][3][1] + sp[27] * PI8[0][3][1] + sp[30] * PI9[0][1][3];
    A[19] = sp[33] * PI0[0][1][4] + sp[34] * PI1[0][1][4] + sp[28] * PI2[0][1][4] + sp[31] * PI3[0][1][4] + sp[34] * PI1[0][4][1] + sp[35] * PI4[0][1][4] + sp[29] * PI5[0][1][4] + sp[32] * PI6[0][1][4] + sp[28] * PI2[0][4][1] + sp[29] * PI5[0][4][1] + sp[26] * PI7[0][1][4] + sp[27] * PI8[0][1][4] + sp[31] * PI3[0][4][1] + sp[32] * PI6[0][4][1] + sp[27] * PI8[0][4][1] + sp[30] * PI9[0][1][4];
    A[20] = sp[33] * PI0[0][1][5] + sp[34] * PI1[0][1][5] + sp[28] * PI2[0][1][5] + sp[31] * PI3[0][1][5] + sp[34] * PI1[0][5][1] + sp[35] * PI4[0][1][5] + sp[29] * PI5[0][1][5] + sp[32] * PI6[0][1][5] + sp[28] * PI2[0][5][1] + sp[29] * PI5[0][5][1] + sp[26] * PI7[0][1][5] + sp[27] * PI8[0][1][5] + sp[31] * PI3[0][5][1] + sp[32] * PI6[0][5][1] + sp[27] * PI8[0][5][1] + sp[30] * PI9[0][1][5];
    A[21] = sp[33] * PI0[0][1][6] + sp[34] * PI1[0][1][6] + sp[28] * PI2[0][1][6] + sp[31] * PI3[0][1][6] + sp[34] * PI1[0][6][1] + sp[35] * PI4[0][1][6] + sp[29] * PI5[0][1][6] + sp[32] * PI6[0][1][6] + sp[28] * PI2[0][6][1] + sp[29] * PI5[0][6][1] + sp[26] * PI7[0][1][6] + sp[27] * PI8[0][1][6] + sp[31] * PI3[0][6][1] + sp[32] * PI6[0][6][1] + sp[27] * PI8[0][6][1] + sp[30] * PI9[0][1][6];
    A[22] = sp[33] * PI0[0][1][7] + sp[34] * PI1[0][1][7] + sp[28] * PI2[0][1][7] + sp[31] * PI3[0][1][7] + sp[34] * PI1[0][7][1] + sp[35] * PI4[0][1][7] + sp[29] * PI5[0][1][7] + sp[32] * PI6[0][1][7] + sp[28] * PI2[0][7][1] + sp[29] * PI5[0][7][1] + sp[26] * PI7[0][1][7] + sp[27] * PI8[0][1][7] + sp[31] * PI3[0][7][1] + sp[32] * PI6[0][7][1] + sp[27] * PI8[0][7][1] + sp[30] * PI9[0][1][7];
    A[23] = sp[33] * PI0[0][1][8] + sp[34] * PI1[0][1][8] + sp[28] * PI2[0][1][8] + sp[31] * PI3[0][1][8] + sp[34] * PI1[0][8][1] + sp[35] * PI4[0][1][8] + sp[29] * PI5[0][1][8] + sp[32] * PI6[0][1][8] + sp[28] * PI2[0][8][1] + sp[29] * PI5[0][8][1] + sp[26] * PI7[0][1][8] + sp[27] * PI8[0][1][8] + sp[31] * PI3[0][8][1] + sp[32] * PI6[0][8][1] + sp[27] * PI8[0][8][1] + sp[30] * PI9[0][1][8];
    A[24] = sp[33] * PI0[0][1][9] + sp[34] * PI1[0][1][9] + sp[28] * PI2[0][1][9] + sp[31] * PI3[0][1][9] + sp[34] * PI1[0][9][1] + sp[35] * PI4[0][1][9] + sp[29] * PI5[0][1][9] + sp[32] * PI6[0][1][9] + sp[28] * PI2[0][9][1] + sp[29] * PI5[0][9][1] + sp[26] * PI7[0][1][9] + sp[27] * PI8[0][1][9] + sp[31] * PI3[0][9][1] + sp[32] * PI6[0][9][1] + sp[27] * PI8[0][9][1] + sp[30] * PI9[0][1][9];
    A[25] = sp[33] * PI0[0][1][10] + sp[34] * PI1[0][1][10] + sp[28] * PI2[0][1][10] + sp[31] * PI3[0][1][10] + sp[34] * PI1[0][10][1] + sp[35] * PI4[0][1][10] + sp[29] * PI5[0][1][10] + sp[32] * PI6[0][1][10] + sp[28] * PI2[0][10][1] + sp[29] * PI5[0][10][1] + sp[26] * PI7[0][1][10] + sp[27] * PI8[0][1][10] + sp[31] * PI3[0][10][1] + sp[32] * PI6[0][10][1] + sp[27] * PI8[0][10][1] + sp[30] * PI9[0][1][10];
    A[26] = sp[33] * PI0[0][1][11] + sp[34] * PI1[0][1][11] + sp[28] * PI2[0][1][11] + sp[31] * PI3[0][1][11] + sp[34] * PI1[0][11][1] + sp[35] * PI4[0][1][11] + sp[29] * PI5[0][1][11] + sp[32] * PI6[0][1][11] + sp[28] * PI2[0][11][1] + sp[29] * PI5[0][11][1] + sp[26] * PI7[0][1][11] + sp[27] * PI8[0][1][11] + sp[31] * PI3[0][11][1] + sp[32] * PI6[0][11][1] + sp[27] * PI8[0][11][1] + sp[30] * PI9[0][1][11];
    A[27] = sp[33] * PI0[0][1][12] + sp[34] * PI1[0][1][12] + sp[28] * PI2[0][1][12] + sp[31] * PI3[0][1][12] + sp[34] * PI1[0][12][1] + sp[35] * PI4[0][1][12] + sp[29] * PI5[0][1][12] + sp[32] * PI6[0][1][12] + sp[28] * PI2[0][12][1] + sp[29] * PI5[0][12][1] + sp[26] * PI7[0][1][12] + sp[27] * PI8[0][1][12] + sp[31] * PI3[0][12][1] + sp[32] * PI6[0][12][1] + sp[27] * PI8[0][12][1] + sp[30] * PI9[0][1][12];
    A[28] = sp[33] * PI0[0][1][13] + sp[34] * PI1[0][1][13] + sp[28] * PI2[0][1][13] + sp[31] * PI3[0][1][13] + sp[34] * PI1[0][13][1] + sp[35] * PI4[0][1][13] + sp[29] * PI5[0][1][13] + sp[32] * PI6[0][1][13] + sp[28] * PI2[0][13][1] + sp[29] * PI5[0][13][1] + sp[26] * PI7[0][1][13] + sp[27] * PI8[0][1][13] + sp[31] * PI3[0][13][1] + sp[32] * PI6[0][13][1] + sp[27] * PI8[0][13][1] + sp[30] * PI9[0][1][13];
    A[29] = sp[33] * PI0[0][1][14] + sp[34] * PI1[0][1][14] + sp[28] * PI2[0][1][14] + sp[31] * PI3[0][1][14] + sp[34] * PI1[0][14][1] + sp[35] * PI4[0][1][14] + sp[29] * PI5[0][1][14] + sp[32] * PI6[0][1][14] + sp[28] * PI2[0][14][1] + sp[29] * PI5[0][14][1] + sp[26] * PI7[0][1][14] + sp[27] * PI8[0][1][14] + sp[31] * PI3[0][14][1] + sp[32] * PI6[0][14][1] + sp[27] * PI8[0][14][1] + sp[30] * PI9[0][1][14];
    A[30] = sp[33] * PI0[0][2][0] + sp[34] * PI1[0][2][0] + sp[28] * PI2[0][2][0] + sp[31] * PI3[0][2][0] + sp[34] * PI1[0][0][2] + sp[35] * PI4[0][2][0] + sp[29] * PI5[0][2][0] + sp[32] * PI6[0][2][0] + sp[28] * PI2[0][0][2] + sp[29] * PI5[0][0][2] + sp[26] * PI7[0][2][0] + sp[27] * PI8[0][2][0] + sp[31] * PI3[0][0][2] + sp[32] * PI6[0][0][2] + sp[27] * PI8[0][0][2] + sp[30] * PI9[0][2][0];
    A[31] = sp[33] * PI0[0][2][1] + sp[34] * PI1[0][2][1] + sp[28] * PI2[0][2][1] + sp[31] * PI3[0][2][1] + sp[34] * PI1[0][1][2] + sp[35] * PI4[0][2][1] + sp[29] * PI5[0][2][1] + sp[32] * PI6[0][2][1] + sp[28] * PI2[0][1][2] + sp[29] * PI5[0][1][2] + sp[26] * PI7[0][2][1] + sp[27] * PI8[0][2][1] + sp[31] * PI3[0][1][2] + sp[32] * PI6[0][1][2] + sp[27] * PI8[0][1][2] + sp[30] * PI9[0][2][1];
    A[32] = sp[33] * PI0[0][2][2] + sp[34] * PI1[0][2][2] + sp[28] * PI2[0][2][2] + sp[31] * PI3[0][2][2] + sp[34] * PI1[0][2][2] + sp[35] * PI4[0][2][2] + sp[29] * PI5[0][2][2] + sp[32] * PI6[0][2][2] + sp[28] * PI2[0][2][2] + sp[29] * PI5[0][2][2] + sp[26] * PI7[0][2][2] + sp[27] * PI8[0][2][2] + sp[31] * PI3[0][2][2] + sp[32] * PI6[0][2][2] + sp[27] * PI8[0][2][2] + sp[30] * PI9[0][2][2];
    A[33] = sp[33] * PI0[0][2][3] + sp[34] * PI1[0][2][3] + sp[28] * PI2[0][2][3] + sp[31] * PI3[0][2][3] + sp[34] * PI1[0][3][2] + sp[35] * PI4[0][2][3] + sp[29] * PI5[0][2][3] + sp[32] * PI6[0][2][3] + sp[28] * PI2[0][3][2] + sp[29] * PI5[0][3][2] + sp[26] * PI7[0][2][3] + sp[27] * PI8[0][2][3] + sp[31] * PI3[0][3][2] + sp[32] * PI6[0][3][2] + sp[27] * PI8[0][3][2] + sp[30] * PI9[0][2][3];
    A[34] = sp[33] * PI0[0][2][4] + sp[34] * PI1[0][2][4] + sp[28] * PI2[0][2][4] + sp[31] * PI3[0][2][4] + sp[34] * PI1[0][4][2] + sp[35] * PI4[0][2][4] + sp[29] * PI5[0][2][4] + sp[32] * PI6[0][2][4] + sp[28] * PI2[0][4][2] + sp[29] * PI5[0][4][2] + sp[26] * PI7[0][2][4] + sp[27] * PI8[0][2][4] + sp[31] * PI3[0][4][2] + sp[32] * PI6[0][4][2] + sp[27] * PI8[0][4][2] + sp[30] * PI9[0][2][4];
    A[35] = sp[33] * PI0[0][2][5] + sp[34] * PI1[0][2][5] + sp[28] * PI2[0][2][5] + sp[31] * PI3[0][2][5] + sp[34] * PI1[0][5][2] + sp[35] * PI4[0][2][5] + sp[29] * PI5[0][2][5] + sp[32] * PI6[0][2][5] + sp[28] * PI2[0][5][2] + sp[29] * PI5[0][5][2] + sp[26] * PI7[0][2][5] + sp[27] * PI8[0][2][5] + sp[31] * PI3[0][5][2] + sp[32] * PI6[0][5][2] + sp[27] * PI8[0][5][2] + sp[30] * PI9[0][2][5];
    A[36] = sp[33] * PI0[0][2][6] + sp[34] * PI1[0][2][6] + sp[28] * PI2[0][2][6] + sp[31] * PI3[0][2][6] + sp[34] * PI1[0][6][2] + sp[35] * PI4[0][2][6] + sp[29] * PI5[0][2][6] + sp[32] * PI6[0][2][6] + sp[28] * PI2[0][6][2] + sp[29] * PI5[0][6][2] + sp[26] * PI7[0][2][6] + sp[27] * PI8[0][2][6] + sp[31] * PI3[0][6][2] + sp[32] * PI6[0][6][2] + sp[27] * PI8[0][6][2] + sp[30] * PI9[0][2][6];
    A[37] = sp[33] * PI0[0][2][7] + sp[34] * PI1[0][2][7] + sp[28] * PI2[0][2][7] + sp[31] * PI3[0][2][7] + sp[34] * PI1[0][7][2] + sp[35] * PI4[0][2][7] + sp[29] * PI5[0][2][7] + sp[32] * PI6[0][2][7] + sp[28] * PI2[0][7][2] + sp[29] * PI5[0][7][2] + sp[26] * PI7[0][2][7] + sp[27] * PI8[0][2][7] + sp[31] * PI3[0][7][2] + sp[32] * PI6[0][7][2] + sp[27] * PI8[0][7][2] + sp[30] * PI9[0][2][7];
    A[38] = sp[33] * PI0[0][2][8] + sp[34] * PI1[0][2][8] + sp[28] * PI2[0][2][8] + sp[31] * PI3[0][2][8] + sp[34] * PI1[0][8][2] + sp[35] * PI4[0][2][8] + sp[29] * PI5[0][2][8] + sp[32] * PI6[0][2][8] + sp[28] * PI2[0][8][2] + sp[29] * PI5[0][8][2] + sp[26] * PI7[0][2][8] + sp[27] * PI8[0][2][8] + sp[31] * PI3[0][8][2] + sp[32] * PI6[0][8][2] + sp[27] * PI8[0][8][2] + sp[30] * PI9[0][2][8];
    A[39] = sp[33] * PI0[0][2][9] + sp[34] * PI1[0][2][9] + sp[28] * PI2[0][2][9] + sp[31] * PI3[0][2][9] + sp[34] * PI1[0][9][2] + sp[35] * PI4[0][2][9] + sp[29] * PI5[0][2][9] + sp[32] * PI6[0][2][9] + sp[28] * PI2[0][9][2] + sp[29] * PI5[0][9][2] + sp[26] * PI7[0][2][9] + sp[27] * PI8[0][2][9] + sp[31] * PI3[0][9][2] + sp[32] * PI6[0][9][2] + sp[27] * PI8[0][9][2] + sp[30] * PI9[0][2][9];
    A[40] = sp[33] * PI0[0][2][10] + sp[34] * PI1[0][2][10] + sp[28] * PI2[0][2][10] + sp[31] * PI3[0][2][10] + sp[34] * PI1[0][10][2] + sp[35] * PI4[0][2][10] + sp[29] * PI5[0][2][10] + sp[32] * PI6[0][2][10] + sp[28] * PI2[0][10][2] + sp[29] * PI5[0][10][2] + sp[26] * PI7[0][2][10] + sp[27] * PI8[0][2][10] + sp[31] * PI3[0][10][2] + sp[32] * PI6[0][10][2] + sp[27] * PI8[0][10][2] + sp[30] * PI9[0][2][10];
    A[41] = sp[33] * PI0[0][2][11] + sp[34] * PI1[0][2][11] + sp[28] * PI2[0][2][11] + sp[31] * PI3[0][2][11] + sp[34] * PI1[0][11][2] + sp[35] * PI4[0][2][11] + sp[29] * PI5[0][2][11] + sp[32] * PI6[0][2][11] + sp[28] * PI2[0][11][2] + sp[29] * PI5[0][11][2] + sp[26] * PI7[0][2][11] + sp[27] * PI8[0][2][11] + sp[31] * PI3[0][11][2] + sp[32] * PI6[0][11][2] + sp[27] * PI8[0][11][2] + sp[30] * PI9[0][2][11];
    A[42] = sp[33] * PI0[0][2][12] + sp[34] * PI1[0][2][12] + sp[28] * PI2[0][2][12] + sp[31] * PI3[0][2][12] + sp[34] * PI1[0][12][2] + sp[35] * PI4[0][2][12] + sp[29] * PI5[0][2][12] + sp[32] * PI6[0][2][12] + sp[28] * PI2[0][12][2] + sp[29] * PI5[0][12][2] + sp[26] * PI7[0][2][12] + sp[27] * PI8[0][2][12] + sp[31] * PI3[0][12][2] + sp[32] * PI6[0][12][2] + sp[27] * PI8[0][12][2] + sp[30] * PI9[0][2][12];
    A[43] = sp[33] * PI0[0][2][13] + sp[34] * PI1[0][2][13] + sp[28] * PI2[0][2][13] + sp[31] * PI3[0][2][13] + sp[34] * PI1[0][13][2] + sp[35] * PI4[0][2][13] + sp[29] * PI5[0][2][13] + sp[32] * PI6[0][2][13] + sp[28] * PI2[0][13][2] + sp[29] * PI5[0][13][2] + sp[26] * PI7[0][2][13] + sp[27] * PI8[0][2][13] + sp[31] * PI3[0][13][2] + sp[32] * PI6[0][13][2] + sp[27] * PI8[0][13][2] + sp[30] * PI9[0][2][13];
    A[44] = sp[33] * PI0[0][2][14] + sp[34] * PI1[0][2][14] + sp[28] * PI2[0][2][14] + sp[31] * PI3[0][2][14] + sp[34] * PI1[0][14][2] + sp[35] * PI4[0][2][14] + sp[29] * PI5[0][2][14] + sp[32] * PI6[0][2][14] + sp[28] * PI2[0][14][2] + sp[29] * PI5[0][14][2] + sp[26] * PI7[0][2][14] + sp[27] * PI8[0][2][14] + sp[31] * PI3[0][14][2] + sp[32] * PI6[0][14][2] + sp[27] * PI8[0][14][2] + sp[30] * PI9[0][2][14];
    A[45] = sp[33] * PI0[0][3][0] + sp[34] * PI1[0][3][0] + sp[28] * PI2[0][3][0] + sp[31] * PI3[0][3][0] + sp[34] * PI1[0][0][3] + sp[35] * PI4[0][3][0] + sp[29] * PI5[0][3][0] + sp[32] * PI6[0][3][0] + sp[28] * PI2[0][0][3] + sp[29] * PI5[0][0][3] + sp[26] * PI7[0][3][0] + sp[27] * PI8[0][3][0] + sp[31] * PI3[0][0][3] + sp[32] * PI6[0][0][3] + sp[27] * PI8[0][0][3] + sp[30] * PI9[0][3][0];
    A[46] = sp[33] * PI0[0][3][1] + sp[34] * PI1[0][3][1] + sp[28] * PI2[0][3][1] + sp[31] * PI3[0][3][1] + sp[34] * PI1[0][1][3] + sp[35] * PI4[0][3][1] + sp[29] * PI5[0][3][1] + sp[32] * PI6[0][3][1] + sp[28] * PI2[0][1][3] + sp[29] * PI5[0][1][3] + sp[26] * PI7[0][3][1] + sp[27] * PI8[0][3][1] + sp[31] * PI3[0][1][3] + sp[32] * PI6[0][1][3] + sp[27] * PI8[0][1][3] + sp[30] * PI9[0][3][1];
    A[47] = sp[33] * PI0[0][3][2] + sp[34] * PI1[0][3][2] + sp[28] * PI2[0][3][2] + sp[31] * PI3[0][3][2] + sp[34] * PI1[0][2][3] + sp[35] * PI4[0][3][2] + sp[29] * PI5[0][3][2] + sp[32] * PI6[0][3][2] + sp[28] * PI2[0][2][3] + sp[29] * PI5[0][2][3] + sp[26] * PI7[0][3][2] + sp[27] * PI8[0][3][2] + sp[31] * PI3[0][2][3] + sp[32] * PI6[0][2][3] + sp[27] * PI8[0][2][3] + sp[30] * PI9[0][3][2];
    A[48] = sp[33] * PI0[0][3][3] + sp[34] * PI1[0][3][3] + sp[28] * PI2[0][3][3] + sp[31] * PI3[0][3][3] + sp[34] * PI1[0][3][3] + sp[35] * PI4[0][3][3] + sp[29] * PI5[0][3][3] + sp[32] * PI6[0][3][3] + sp[28] * PI2[0][3][3] + sp[29] * PI5[0][3][3] + sp[26] * PI7[0][3][3] + sp[27] * PI8[0][3][3] + sp[31] * PI3[0][3][3] + sp[32] * PI6[0][3][3] + sp[27] * PI8[0][3][3] + sp[30] * PI9[0][3][3];
    A[49] = sp[33] * PI0[0][3][4] + sp[34] * PI1[0][3][4] + sp[28] * PI2[0][3][4] + sp[31] * PI3[0][3][4] + sp[34] * PI1[0][4][3] + sp[35] * PI4[0][3][4] + sp[29] * PI5[0][3][4] + sp[32] * PI6[0][3][4] + sp[28] * PI2[0][4][3] + sp[29] * PI5[0][4][3] + sp[26] * PI7[0][3][4] + sp[27] * PI8[0][3][4] + sp[31] * PI3[0][4][3] + sp[32] * PI6[0][4][3] + sp[27] * PI8[0][4][3] + sp[30] * PI9[0][3][4];
    A[50] = sp[33] * PI0[0][3][5] + sp[34] * PI1[0][3][5] + sp[28] * PI2[0][3][5] + sp[31] * PI3[0][3][5] + sp[34] * PI1[0][5][3] + sp[35] * PI4[0][3][5] + sp[29] * PI5[0][3][5] + sp[32] * PI6[0][3][5] + sp[28] * PI2[0][5][3] + sp[29] * PI5[0][5][3] + sp[26] * PI7[0][3][5] + sp[27] * PI8[0][3][5] + sp[31] * PI3[0][5][3] + sp[32] * PI6[0][5][3] + sp[27] * PI8[0][5][3] + sp[30] * PI9[0][3][5];
    A[51] = sp[33] * PI0[0][3][6] + sp[34] * PI1[0][3][6] + sp[28] * PI2[0][3][6] + sp[31] * PI3[0][3][6] + sp[34] * PI1[0][6][3] + sp[35] * PI4[0][3][6] + sp[29] * PI5[0][3][6] + sp[32] * PI6[0][3][6] + sp[28] * PI2[0][6][3] + sp[29] * PI5[0][6][3] + sp[26] * PI7[0][3][6] + sp[27] * PI8[0][3][6] + sp[31] * PI3[0][6][3] + sp[32] * PI6[0][6][3] + sp[27] * PI8[0][6][3] + sp[30] * PI9[0][3][6];
    A[52] = sp[33] * PI0[0][3][7] + sp[34] * PI1[0][3][7] + sp[28] * PI2[0][3][7] + sp[31] * PI3[0][3][7] + sp[34] * PI1[0][7][3] + sp[35] * PI4[0][3][7] + sp[29] * PI5[0][3][7] + sp[32] * PI6[0][3][7] + sp[28] * PI2[0][7][3] + sp[29] * PI5[0][7][3] + sp[26] * PI7[0][3][7] + sp[27] * PI8[0][3][7] + sp[31] * PI3[0][7][3] + sp[32] * PI6[0][7][3] + sp[27] * PI8[0][7][3] + sp[30] * PI9[0][3][7];
    A[53] = sp[33] * PI0[0][3][8] + sp[34] * PI1[0][3][8] + sp[28] * PI2[0][3][8] + sp[31] * PI3[0][3][8] + sp[34] * PI1[0][8][3] + sp[35] * PI4[0][3][8] + sp[29] * PI5[0][3][8] + sp[32] * PI6[0][3][8] + sp[28] * PI2[0][8][3] + sp[29] * PI5[0][8][3] + sp[26] * PI7[0][3][8] + sp[27] * PI8[0][3][8] + sp[31] * PI3[0][8][3] + sp[32] * PI6[0][8][3] + sp[27] * PI8[0][8][3] + sp[30] * PI9[0][3][8];
    A[54] = sp[33] * PI0[0][3][9] + sp[34] * PI1[0][3][9] + sp[28] * PI2[0][3][9] + sp[31] * PI3[0][3][9] + sp[34] * PI1[0][9][3] + sp[35] * PI4[0][3][9] + sp[29] * PI5[0][3][9] + sp[32] * PI6[0][3][9] + sp[28] * PI2[0][9][3] + sp[29] * PI5[0][9][3] + sp[26] * PI7[0][3][9] + sp[27] * PI8[0][3][9] + sp[31] * PI3[0][9][3] + sp[32] * PI6[0][9][3] + sp[27] * PI8[0][9][3] + sp[30] * PI9[0][3][9];
    A[55] = sp[33] * PI0[0][3][10] + sp[34] * PI1[0][3][10] + sp[28] * PI2[0][3][10] + sp[31] * PI3[0][3][10] + sp[34] * PI1[0][10][3] + sp[35] * PI4[0][3][10] + sp[29] * PI5[0][3][10] + sp[32] * PI6[0][3][10] + sp[28] * PI2[0][10][3] + sp[29] * PI5[0][10][3] + sp[26] * PI7[0][3][10] + sp[27] * PI8[0][3][10] + sp[31] * PI3[0][10][3] + sp[32] * PI6[0][10][3] + sp[27] * PI8[0][10][3] + sp[30] * PI9[0][3][10];
    A[56] = sp[33] * PI0[0][3][11] + sp[34] * PI1[0][3][11] + sp[28] * PI2[0][3][11] + sp[31] * PI3[0][3][11] + sp[34] * PI1[0][11][3] + sp[35] * PI4[0][3][11] + sp[29] * PI5[0][3][11] + sp[32] * PI6[0][3][11] + sp[28] * PI2[0][11][3] + sp[29] * PI5[0][11][3] + sp[26] * PI7[0][3][11] + sp[27] * PI8[0][3][11] + sp[31] * PI3[0][11][3] + sp[32] * PI6[0][11][3] + sp[27] * PI8[0][11][3] + sp[30] * PI9[0][3][11];
    A[57] = sp[33] * PI0[0][3][12] + sp[34] * PI1[0][3][12] + sp[28] * PI2[0][3][12] + sp[31] * PI3[0][3][12] + sp[34] * PI1[0][12][3] + sp[35] * PI4[0][3][12] + sp[29] * PI5[0][3][12] + sp[32] * PI6[0][3][12] + sp[28] * PI2[0][12][3] + sp[29] * PI5[0][12][3] + sp[26] * PI7[0][3][12] + sp[27] * PI8[0][3][12] + sp[31] * PI3[0][12][3] + sp[32] * PI6[0][12][3] + sp[27] * PI8[0][12][3] + sp[30] * PI9[0][3][12];
    A[58] = sp[33] * PI0[0][3][13] + sp[34] * PI1[0][3][13] + sp[28] * PI2[0][3][13] + sp[31] * PI3[0][3][13] + sp[34] * PI1[0][13][3] + sp[35] * PI4[0][3][13] + sp[29] * PI5[0][3][13] + sp[32] * PI6[0][3][13] + sp[28] * PI2[0][13][3] + sp[29] * PI5[0][13][3] + sp[26] * PI7[0][3][13] + sp[27] * PI8[0][3][13] + sp[31] * PI3[0][13][3] + sp[32] * PI6[0][13][3] + sp[27] * PI8[0][13][3] + sp[30] * PI9[0][3][13];
    A[59] = sp[33] * PI0[0][3][14] + sp[34] * PI1[0][3][14] + sp[28] * PI2[0][3][14] + sp[31] * PI3[0][3][14] + sp[34] * PI1[0][14][3] + sp[35] * PI4[0][3][14] + sp[29] * PI5[0][3][14] + sp[32] * PI6[0][3][14] + sp[28] * PI2[0][14][3] + sp[29] * PI5[0][14][3] + sp[26] * PI7[0][3][14] + sp[27] * PI8[0][3][14] + sp[31] * PI3[0][14][3] + sp[32] * PI6[0][14][3] + sp[27] * PI8[0][14][3] + sp[30] * PI9[0][3][14];
    A[60] = sp[33] * PI0[0][4][0] + sp[34] * PI1[0][4][0] + sp[28] * PI2[0][4][0] + sp[31] * PI3[0][4][0] + sp[34] * PI1[0][0][4] + sp[35] * PI4[0][4][0] + sp[29] * PI5[0][4][0] + sp[32] * PI6[0][4][0] + sp[28] * PI2[0][0][4] + sp[29] * PI5[0][0][4] + sp[26] * PI7[0][4][0] + sp[27] * PI8[0][4][0] + sp[31] * PI3[0][0][4] + sp[32] * PI6[0][0][4] + sp[27] * PI8[0][0][4] + sp[30] * PI9[0][4][0];
    A[61] = sp[33] * PI0[0][4][1] + sp[34] * PI1[0][4][1] + sp[28] * PI2[0][4][1] + sp[31] * PI3[0][4][1] + sp[34] * PI1[0][1][4] + sp[35] * PI4[0][4][1] + sp[29] * PI5[0][4][1] + sp[32] * PI6[0][4][1] + sp[28] * PI2[0][1][4] + sp[29] * PI5[0][1][4] + sp[26] * PI7[0][4][1] + sp[27] * PI8[0][4][1] + sp[31] * PI3[0][1][4] + sp[32] * PI6[0][1][4] + sp[27] * PI8[0][1][4] + sp[30] * PI9[0][4][1];
    A[62] = sp[33] * PI0[0][4][2] + sp[34] * PI1[0][4][2] + sp[28] * PI2[0][4][2] + sp[31] * PI3[0][4][2] + sp[34] * PI1[0][2][4] + sp[35] * PI4[0][4][2] + sp[29] * PI5[0][4][2] + sp[32] * PI6[0][4][2] + sp[28] * PI2[0][2][4] + sp[29] * PI5[0][2][4] + sp[26] * PI7[0][4][2] + sp[27] * PI8[0][4][2] + sp[31] * PI3[0][2][4] + sp[32] * PI6[0][2][4] + sp[27] * PI8[0][2][4] + sp[30] * PI9[0][4][2];
    A[63] = sp[33] * PI0[0][4][3] + sp[34] * PI1[0][4][3] + sp[28] * PI2[0][4][3] + sp[31] * PI3[0][4][3] + sp[34] * PI1[0][3][4] + sp[35] * PI4[0][4][3] + sp[29] * PI5[0][4][3] + sp[32] * PI6[0][4][3] + sp[28] * PI2[0][3][4] + sp[29] * PI5[0][3][4] + sp[26] * PI7[0][4][3] + sp[27] * PI8[0][4][3] + sp[31] * PI3[0][3][4] + sp[32] * PI6[0][3][4] + sp[27] * PI8[0][3][4] + sp[30] * PI9[0][4][3];
    A[64] = sp[33] * PI0[0][4][4] + sp[34] * PI1[0][4][4] + sp[28] * PI2[0][4][4] + sp[31] * PI3[0][4][4] + sp[34] * PI1[0][4][4] + sp[35] * PI4[0][4][4] + sp[29] * PI5[0][4][4] + sp[32] * PI6[0][4][4] + sp[28] * PI2[0][4][4] + sp[29] * PI5[0][4][4] + sp[26] * PI7[0][4][4] + sp[27] * PI8[0][4][4] + sp[31] * PI3[0][4][4] + sp[32] * PI6[0][4][4] + sp[27] * PI8[0][4][4] + sp[30] * PI9[0][4][4];
    A[65] = sp[33] * PI0[0][4][5] + sp[34] * PI1[0][4][5] + sp[28] * PI2[0][4][5] + sp[31] * PI3[0][4][5] + sp[34] * PI1[0][5][4] + sp[35] * PI4[0][4][5] + sp[29] * PI5[0][4][5] + sp[32] * PI6[0][4][5] + sp[28] * PI2[0][5][4] + sp[29] * PI5[0][5][4] + sp[26] * PI7[0][4][5] + sp[27] * PI8[0][4][5] + sp[31] * PI3[0][5][4] + sp[32] * PI6[0][5][4] + sp[27] * PI8[0][5][4] + sp[30] * PI9[0][4][5];
    A[66] = sp[33] * PI0[0][4][6] + sp[34] * PI1[0][4][6] + sp[28] * PI2[0][4][6] + sp[31] * PI3[0][4][6] + sp[34] * PI1[0][6][4] + sp[35] * PI4[0][4][6] + sp[29] * PI5[0][4][6] + sp[32] * PI6[0][4][6] + sp[28] * PI2[0][6][4] + sp[29] * PI5[0][6][4] + sp[26] * PI7[0][4][6] + sp[27] * PI8[0][4][6] + sp[31] * PI3[0][6][4] + sp[32] * PI6[0][6][4] + sp[27] * PI8[0][6][4] + sp[30] * PI9[0][4][6];
    A[67] = sp[33] * PI0[0][4][7] + sp[34] * PI1[0][4][7] + sp[28] * PI2[0][4][7] + sp[31] * PI3[0][4][7] + sp[34] * PI1[0][7][4] + sp[35] * PI4[0][4][7] + sp[29] * PI5[0][4][7] + sp[32] * PI6[0][4][7] + sp[28] * PI2[0][7][4] + sp[29] * PI5[0][7][4] + sp[26] * PI7[0][4][7] + sp[27] * PI8[0][4][7] + sp[31] * PI3[0][7][4] + sp[32] * PI6[0][7][4] + sp[27] * PI8[0][7][4] + sp[30] * PI9[0][4][7];
    A[68] = sp[33] * PI0[0][4][8] + sp[34] * PI1[0][4][8] + sp[28] * PI2[0][4][8] + sp[31] * PI3[0][4][8] + sp[34] * PI1[0][8][4] + sp[35] * PI4[0][4][8] + sp[29] * PI5[0][4][8] + sp[32] * PI6[0][4][8] + sp[28] * PI2[0][8][4] + sp[29] * PI5[0][8][4] + sp[26] * PI7[0][4][8] + sp[27] * PI8[0][4][8] + sp[31] * PI3[0][8][4] + sp[32] * PI6[0][8][4] + sp[27] * PI8[0][8][4] + sp[30] * PI9[0][4][8];
    A[69] = sp[33] * PI0[0][4][9] + sp[34] * PI1[0][4][9] + sp[28] * PI2[0][4][9] + sp[31] * PI3[0][4][9] + sp[34] * PI1[0][9][4] + sp[35] * PI4[0][4][9] + sp[29] * PI5[0][4][9] + sp[32] * PI6[0][4][9] + sp[28] * PI2[0][9][4] + sp[29] * PI5[0][9][4] + sp[26] * PI7[0][4][9] + sp[27] * PI8[0][4][9] + sp[31] * PI3[0][9][4] + sp[32] * PI6[0][9][4] + sp[27] * PI8[0][9][4] + sp[30] * PI9[0][4][9];
    A[70] = sp[33] * PI0[0][4][10] + sp[34] * PI1[0][4][10] + sp[28] * PI2[0][4][10] + sp[31] * PI3[0][4][10] + sp[34] * PI1[0][10][4] + sp[35] * PI4[0][4][10] + sp[29] * PI5[0][4][10] + sp[32] * PI6[0][4][10] + sp[28] * PI2[0][10][4] + sp[29] * PI5[0][10][4] + sp[26] * PI7[0][4][10] + sp[27] * PI8[0][4][10] + sp[31] * PI3[0][10][4] + sp[32] * PI6[0][10][4] + sp[27] * PI8[0][10][4] + sp[30] * PI9[0][4][10];
    A[71] = sp[33] * PI0[0][4][11] + sp[34] * PI1[0][4][11] + sp[28] * PI2[0][4][11] + sp[31] * PI3[0][4][11] + sp[34] * PI1[0][11][4] + sp[35] * PI4[0][4][11] + sp[29] * PI5[0][4][11] + sp[32] * PI6[0][4][11] + sp[28] * PI2[0][11][4] + sp[29] * PI5[0][11][4] + sp[26] * PI7[0][4][11] + sp[27] * PI8[0][4][11] + sp[31] * PI3[0][11][4] + sp[32] * PI6[0][11][4] + sp[27] * PI8[0][11][4] + sp[30] * PI9[0][4][11];
    A[72] = sp[33] * PI0[0][4][12] + sp[34] * PI1[0][4][12] + sp[28] * PI2[0][4][12] + sp[31] * PI3[0][4][12] + sp[34] * PI1[0][12][4] + sp[35] * PI4[0][4][12] + sp[29] * PI5[0][4][12] + sp[32] * PI6[0][4][12] + sp[28] * PI2[0][12][4] + sp[29] * PI5[0][12][4] + sp[26] * PI7[0][4][12] + sp[27] * PI8[0][4][12] + sp[31] * PI3[0][12][4] + sp[32] * PI6[0][12][4] + sp[27] * PI8[0][12][4] + sp[30] * PI9[0][4][12];
    A[73] = sp[33] * PI0[0][4][13] + sp[34] * PI1[0][4][13] + sp[28] * PI2[0][4][13] + sp[31] * PI3[0][4][13] + sp[34] * PI1[0][13][4] + sp[35] * PI4[0][4][13] + sp[29] * PI5[0][4][13] + sp[32] * PI6[0][4][13] + sp[28] * PI2[0][13][4] + sp[29] * PI5[0][13][4] + sp[26] * PI7[0][4][13] + sp[27] * PI8[0][4][13] + sp[31] * PI3[0][13][4] + sp[32] * PI6[0][13][4] + sp[27] * PI8[0][13][4] + sp[30] * PI9[0][4][13];
    A[74] = sp[33] * PI0[0][4][14] + sp[34] * PI1[0][4][14] + sp[28] * PI2[0][4][14] + sp[31] * PI3[0][4][14] + sp[34] * PI1[0][14][4] + sp[35] * PI4[0][4][14] + sp[29] * PI5[0][4][14] + sp[32] * PI6[0][4][14] + sp[28] * PI2[0][14][4] + sp[29] * PI5[0][14][4] + sp[26] * PI7[0][4][14] + sp[27] * PI8[0][4][14] + sp[31] * PI3[0][14][4] + sp[32] * PI6[0][14][4] + sp[27] * PI8[0][14][4] + sp[30] * PI9[0][4][14];
    A[75] = sp[33] * PI0[0][5][0] + sp[34] * PI1[0][5][0] + sp[28] * PI2[0][5][0] + sp[31] * PI3[0][5][0] + sp[34] * PI1[0][0][5] + sp[35] * PI4[0][5][0] + sp[29] * PI5[0][5][0] + sp[32] * PI6[0][5][0] + sp[28] * PI2[0][0][5] + sp[29] * PI5[0][0][5] + sp[26] * PI7[0][5][0] + sp[27] * PI8[0][5][0] + sp[31] * PI3[0][0][5] + sp[32] * PI6[0][0][5] + sp[27] * PI8[0][0][5] + sp[30] * PI9[0][5][0];
    A[76] = sp[33] * PI0[0][5][1] + sp[34] * PI1[0][5][1] + sp[28] * PI2[0][5][1] + sp[31] * PI3[0][5][1] + sp[34] * PI1[0][1][5] + sp[35] * PI4[0][5][1] + sp[29] * PI5[0][5][1] + sp[32] * PI6[0][5][1] + sp[28] * PI2[0][1][5] + sp[29] * PI5[0][1][5] + sp[26] * PI7[0][5][1] + sp[27] * PI8[0][5][1] + sp[31] * PI3[0][1][5] + sp[32] * PI6[0][1][5] + sp[27] * PI8[0][1][5] + sp[30] * PI9[0][5][1];
    A[77] = sp[33] * PI0[0][5][2] + sp[34] * PI1[0][5][2] + sp[28] * PI2[0][5][2] + sp[31] * PI3[0][5][2] + sp[34] * PI1[0][2][5] + sp[35] * PI4[0][5][2] + sp[29] * PI5[0][5][2] + sp[32] * PI6[0][5][2] + sp[28] * PI2[0][2][5] + sp[29] * PI5[0][2][5] + sp[26] * PI7[0][5][2] + sp[27] * PI8[0][5][2] + sp[31] * PI3[0][2][5] + sp[32] * PI6[0][2][5] + sp[27] * PI8[0][2][5] + sp[30] * PI9[0][5][2];
    A[78] = sp[33] * PI0[0][5][3] + sp[34] * PI1[0][5][3] + sp[28] * PI2[0][5][3] + sp[31] * PI3[0][5][3] + sp[34] * PI1[0][3][5] + sp[35] * PI4[0][5][3] + sp[29] * PI5[0][5][3] + sp[32] * PI6[0][5][3] + sp[28] * PI2[0][3][5] + sp[29] * PI5[0][3][5] + sp[26] * PI7[0][5][3] + sp[27] * PI8[0][5][3] + sp[31] * PI3[0][3][5] + sp[32] * PI6[0][3][5] + sp[27] * PI8[0][3][5] + sp[30] * PI9[0][5][3];
    A[79] = sp[33] * PI0[0][5][4] + sp[34] * PI1[0][5][4] + sp[28] * PI2[0][5][4] + sp[31] * PI3[0][5][4] + sp[34] * PI1[0][4][5] + sp[35] * PI4[0][5][4] + sp[29] * PI5[0][5][4] + sp[32] * PI6[0][5][4] + sp[28] * PI2[0][4][5] + sp[29] * PI5[0][4][5] + sp[26] * PI7[0][5][4] + sp[27] * PI8[0][5][4] + sp[31] * PI3[0][4][5] + sp[32] * PI6[0][4][5] + sp[27] * PI8[0][4][5] + sp[30] * PI9[0][5][4];
    A[80] = sp[33] * PI0[0][5][5] + sp[34] * PI1[0][5][5] + sp[28] * PI2[0][5][5] + sp[31] * PI3[0][5][5] + sp[34] * PI1[0][5][5] + sp[35] * PI4[0][5][5] + sp[29] * PI5[0][5][5] + sp[32] * PI6[0][5][5] + sp[28] * PI2[0][5][5] + sp[29] * PI5[0][5][5] + sp[26] * PI7[0][5][5] + sp[27] * PI8[0][5][5] + sp[31] * PI3[0][5][5] + sp[32] * PI6[0][5][5] + sp[27] * PI8[0][5][5] + sp[30] * PI9[0][5][5];
    A[81] = sp[33] * PI0[0][5][6] + sp[34] * PI1[0][5][6] + sp[28] * PI2[0][5][6] + sp[31] * PI3[0][5][6] + sp[34] * PI1[0][6][5] + sp[35] * PI4[0][5][6] + sp[29] * PI5[0][5][6] + sp[32] * PI6[0][5][6] + sp[28] * PI2[0][6][5] + sp[29] * PI5[0][6][5] + sp[26] * PI7[0][5][6] + sp[27] * PI8[0][5][6] + sp[31] * PI3[0][6][5] + sp[32] * PI6[0][6][5] + sp[27] * PI8[0][6][5] + sp[30] * PI9[0][5][6];
    A[82] = sp[33] * PI0[0][5][7] + sp[34] * PI1[0][5][7] + sp[28] * PI2[0][5][7] + sp[31] * PI3[0][5][7] + sp[34] * PI1[0][7][5] + sp[35] * PI4[0][5][7] + sp[29] * PI5[0][5][7] + sp[32] * PI6[0][5][7] + sp[28] * PI2[0][7][5] + sp[29] * PI5[0][7][5] + sp[26] * PI7[0][5][7] + sp[27] * PI8[0][5][7] + sp[31] * PI3[0][7][5] + sp[32] * PI6[0][7][5] + sp[27] * PI8[0][7][5] + sp[30] * PI9[0][5][7];
    A[83] = sp[33] * PI0[0][5][8] + sp[34] * PI1[0][5][8] + sp[28] * PI2[0][5][8] + sp[31] * PI3[0][5][8] + sp[34] * PI1[0][8][5] + sp[35] * PI4[0][5][8] + sp[29] * PI5[0][5][8] + sp[32] * PI6[0][5][8] + sp[28] * PI2[0][8][5] + sp[29] * PI5[0][8][5] + sp[26] * PI7[0][5][8] + sp[27] * PI8[0][5][8] + sp[31] * PI3[0][8][5] + sp[32] * PI6[0][8][5] + sp[27] * PI8[0][8][5] + sp[30] * PI9[0][5][8];
    A[84] = sp[33] * PI0[0][5][9] + sp[34] * PI1[0][5][9] + sp[28] * PI2[0][5][9] + sp[31] * PI3[0][5][9] + sp[34] * PI1[0][9][5] + sp[35] * PI4[0][5][9] + sp[29] * PI5[0][5][9] + sp[32] * PI6[0][5][9] + sp[28] * PI2[0][9][5] + sp[29] * PI5[0][9][5] + sp[26] * PI7[0][5][9] + sp[27] * PI8[0][5][9] + sp[31] * PI3[0][9][5] + sp[32] * PI6[0][9][5] + sp[27] * PI8[0][9][5] + sp[30] * PI9[0][5][9];
    A[85] = sp[33] * PI0[0][5][10] + sp[34] * PI1[0][5][10] + sp[28] * PI2[0][5][10] + sp[31] * PI3[0][5][10] + sp[34] * PI1[0][10][5] + sp[35] * PI4[0][5][10] + sp[29] * PI5[0][5][10] + sp[32] * PI6[0][5][10] + sp[28] * PI2[0][10][5] + sp[29] * PI5[0][10][5] + sp[26] * PI7[0][5][10] + sp[27] * PI8[0][5][10] + sp[31] * PI3[0][10][5] + sp[32] * PI6[0][10][5] + sp[27] * PI8[0][10][5] + sp[30] * PI9[0][5][10];
    A[86] = sp[33] * PI0[0][5][11] + sp[34] * PI1[0][5][11] + sp[28] * PI2[0][5][11] + sp[31] * PI3[0][5][11] + sp[34] * PI1[0][11][5] + sp[35] * PI4[0][5][11] + sp[29] * PI5[0][5][11] + sp[32] * PI6[0][5][11] + sp[28] * PI2[0][11][5] + sp[29] * PI5[0][11][5] + sp[26] * PI7[0][5][11] + sp[27] * PI8[0][5][11] + sp[31] * PI3[0][11][5] + sp[32] * PI6[0][11][5] + sp[27] * PI8[0][11][5] + sp[30] * PI9[0][5][11];
    A[87] = sp[33] * PI0[0][5][12] + sp[34] * PI1[0][5][12] + sp[28] * PI2[0][5][12] + sp[31] * PI3[0][5][12] + sp[34] * PI1[0][12][5] + sp[35] * PI4[0][5][12] + sp[29] * PI5[0][5][12] + sp[32] * PI6[0][5][12] + sp[28] * PI2[0][12][5] + sp[29] * PI5[0][12][5] + sp[26] * PI7[0][5][12] + sp[27] * PI8[0][5][12] + sp[31] * PI3[0][12][5] + sp[32] * PI6[0][12][5] + sp[27] * PI8[0][12][5] + sp[30] * PI9[0][5][12];
    A[88] = sp[33] * PI0[0][5][13] + sp[34] * PI1[0][5][13] + sp[28] * PI2[0][5][13] + sp[31] * PI3[0][5][13] + sp[34] * PI1[0][13][5] + sp[35] * PI4[0][5][13] + sp[29] * PI5[0][5][13] + sp[32] * PI6[0][5][13] + sp[28] * PI2[0][13][5] + sp[29] * PI5[0][13][5] + sp[26] * PI7[0][5][13] + sp[27] * PI8[0][5][13] + sp[31] * PI3[0][13][5] + sp[32] * PI6[0][13][5] + sp[27] * PI8[0][13][5] + sp[30] * PI9[0][5][13];
    A[89] = sp[33] * PI0[0][5][14] + sp[34] * PI1[0][5][14] + sp[28] * PI2[0][5][14] + sp[31] * PI3[0][5][14] + sp[34] * PI1[0][14][5] + sp[35] * PI4[0][5][14] + sp[29] * PI5[0][5][14] + sp[32] * PI6[0][5][14] + sp[28] * PI2[0][14][5] + sp[29] * PI5[0][14][5] + sp[26] * PI7[0][5][14] + sp[27] * PI8[0][5][14] + sp[31] * PI3[0][14][5] + sp[32] * PI6[0][14][5] + sp[27] * PI8[0][14][5] + sp[30] * PI9[0][5][14];
    A[90] = sp[33] * PI0[0][6][0] + sp[34] * PI1[0][6][0] + sp[28] * PI2[0][6][0] + sp[31] * PI3[0][6][0] + sp[34] * PI1[0][0][6] + sp[35] * PI4[0][6][0] + sp[29] * PI5[0][6][0] + sp[32] * PI6[0][6][0] + sp[28] * PI2[0][0][6] + sp[29] * PI5[0][0][6] + sp[26] * PI7[0][6][0] + sp[27] * PI8[0][6][0] + sp[31] * PI3[0][0][6] + sp[32] * PI6[0][0][6] + sp[27] * PI8[0][0][6] + sp[30] * PI9[0][6][0];
    A[91] = sp[33] * PI0[0][6][1] + sp[34] * PI1[0][6][1] + sp[28] * PI2[0][6][1] + sp[31] * PI3[0][6][1] + sp[34] * PI1[0][1][6] + sp[35] * PI4[0][6][1] + sp[29] * PI5[0][6][1] + sp[32] * PI6[0][6][1] + sp[28] * PI2[0][1][6] + sp[29] * PI5[0][1][6] + sp[26] * PI7[0][6][1] + sp[27] * PI8[0][6][1] + sp[31] * PI3[0][1][6] + sp[32] * PI6[0][1][6] + sp[27] * PI8[0][1][6] + sp[30] * PI9[0][6][1];
    A[92] = sp[33] * PI0[0][6][2] + sp[34] * PI1[0][6][2] + sp[28] * PI2[0][6][2] + sp[31] * PI3[0][6][2] + sp[34] * PI1[0][2][6] + sp[35] * PI4[0][6][2] + sp[29] * PI5[0][6][2] + sp[32] * PI6[0][6][2] + sp[28] * PI2[0][2][6] + sp[29] * PI5[0][2][6] + sp[26] * PI7[0][6][2] + sp[27] * PI8[0][6][2] + sp[31] * PI3[0][2][6] + sp[32] * PI6[0][2][6] + sp[27] * PI8[0][2][6] + sp[30] * PI9[0][6][2];
    A[93] = sp[33] * PI0[0][6][3] + sp[34] * PI1[0][6][3] + sp[28] * PI2[0][6][3] + sp[31] * PI3[0][6][3] + sp[34] * PI1[0][3][6] + sp[35] * PI4[0][6][3] + sp[29] * PI5[0][6][3] + sp[32] * PI6[0][6][3] + sp[28] * PI2[0][3][6] + sp[29] * PI5[0][3][6] + sp[26] * PI7[0][6][3] + sp[27] * PI8[0][6][3] + sp[31] * PI3[0][3][6] + sp[32] * PI6[0][3][6] + sp[27] * PI8[0][3][6] + sp[30] * PI9[0][6][3];
    A[94] = sp[33] * PI0[0][6][4] + sp[34] * PI1[0][6][4] + sp[28] * PI2[0][6][4] + sp[31] * PI3[0][6][4] + sp[34] * PI1[0][4][6] + sp[35] * PI4[0][6][4] + sp[29] * PI5[0][6][4] + sp[32] * PI6[0][6][4] + sp[28] * PI2[0][4][6] + sp[29] * PI5[0][4][6] + sp[26] * PI7[0][6][4] + sp[27] * PI8[0][6][4] + sp[31] * PI3[0][4][6] + sp[32] * PI6[0][4][6] + sp[27] * PI8[0][4][6] + sp[30] * PI9[0][6][4];
    A[95] = sp[33] * PI0[0][6][5] + sp[34] * PI1[0][6][5] + sp[28] * PI2[0][6][5] + sp[31] * PI3[0][6][5] + sp[34] * PI1[0][5][6] + sp[35] * PI4[0][6][5] + sp[29] * PI5[0][6][5] + sp[32] * PI6[0][6][5] + sp[28] * PI2[0][5][6] + sp[29] * PI5[0][5][6] + sp[26] * PI7[0][6][5] + sp[27] * PI8[0][6][5] + sp[31] * PI3[0][5][6] + sp[32] * PI6[0][5][6] + sp[27] * PI8[0][5][6] + sp[30] * PI9[0][6][5];
    A[96] = sp[33] * PI0[0][6][6] + sp[34] * PI1[0][6][6] + sp[28] * PI2[0][6][6] + sp[31] * PI3[0][6][6] + sp[34] * PI1[0][6][6] + sp[35] * PI4[0][6][6] + sp[29] * PI5[0][6][6] + sp[32] * PI6[0][6][6] + sp[28] * PI2[0][6][6] + sp[29] * PI5[0][6][6] + sp[26] * PI7[0][6][6] + sp[27] * PI8[0][6][6] + sp[31] * PI3[0][6][6] + sp[32] * PI6[0][6][6] + sp[27] * PI8[0][6][6] + sp[30] * PI9[0][6][6];
    A[97] = sp[33] * PI0[0][6][7] + sp[34] * PI1[0][6][7] + sp[28] * PI2[0][6][7] + sp[31] * PI3[0][6][7] + sp[34] * PI1[0][7][6] + sp[35] * PI4[0][6][7] + sp[29] * PI5[0][6][7] + sp[32] * PI6[0][6][7] + sp[28] * PI2[0][7][6] + sp[29] * PI5[0][7][6] + sp[26] * PI7[0][6][7] + sp[27] * PI8[0][6][7] + sp[31] * PI3[0][7][6] + sp[32] * PI6[0][7][6] + sp[27] * PI8[0][7][6] + sp[30] * PI9[0][6][7];
    A[98] = sp[33] * PI0[0][6][8] + sp[34] * PI1[0][6][8] + sp[28] * PI2[0][6][8] + sp[31] * PI3[0][6][8] + sp[34] * PI1[0][8][6] + sp[35] * PI4[0][6][8] + sp[29] * PI5[0][6][8] + sp[32] * PI6[0][6][8] + sp[28] * PI2[0][8][6] + sp[29] * PI5[0][8][6] + sp[26] * PI7[0][6][8] + sp[27] * PI8[0][6][8] + sp[31] * PI3[0][8][6] + sp[32] * PI6[0][8][6] + sp[27] * PI8[0][8][6] + sp[30] * PI9[0][6][8];
    A[99] = sp[33] * PI0[0][6][9] + sp[34] * PI1[0][6][9] + sp[28] * PI2[0][6][9] + sp[31] * PI3[0][6][9] + sp[34] * PI1[0][9][6] + sp[35] * PI4[0][6][9] + sp[29] * PI5[0][6][9] + sp[32] * PI6[0][6][9] + sp[28] * PI2[0][9][6] + sp[29] * PI5[0][9][6] + sp[26] * PI7[0][6][9] + sp[27] * PI8[0][6][9] + sp[31] * PI3[0][9][6] + sp[32] * PI6[0][9][6] + sp[27] * PI8[0][9][6] + sp[30] * PI9[0][6][9];
    A[100] = sp[33] * PI0[0][6][10] + sp[34] * PI1[0][6][10] + sp[28] * PI2[0][6][10] + sp[31] * PI3[0][6][10] + sp[34] * PI1[0][10][6] + sp[35] * PI4[0][6][10] + sp[29] * PI5[0][6][10] + sp[32] * PI6[0][6][10] + sp[28] * PI2[0][10][6] + sp[29] * PI5[0][10][6] + sp[26] * PI7[0][6][10] + sp[27] * PI8[0][6][10] + sp[31] * PI3[0][10][6] + sp[32] * PI6[0][10][6] + sp[27] * PI8[0][10][6] + sp[30] * PI9[0][6][10];
    A[101] = sp[33] * PI0[0][6][11] + sp[34] * PI1[0][6][11] + sp[28] * PI2[0][6][11] + sp[31] * PI3[0][6][11] + sp[34] * PI1[0][11][6] + sp[35] * PI4[0][6][11] + sp[29] * PI5[0][6][11] + sp[32] * PI6[0][6][11] + sp[28] * PI2[0][11][6] + sp[29] * PI5[0][11][6] + sp[26] * PI7[0][6][11] + sp[27] * PI8[0][6][11] + sp[31] * PI3[0][11][6] + sp[32] * PI6[0][11][6] + sp[27] * PI8[0][11][6] + sp[30] * PI9[0][6][11];
    A[102] = sp[33] * PI0[0][6][12] + sp[34] * PI1[0][6][12] + sp[28] * PI2[0][6][12] + sp[31] * PI3[0][6][12] + sp[34] * PI1[0][12][6] + sp[35] * PI4[0][6][12] + sp[29] * PI5[0][6][12] + sp[32] * PI6[0][6][12] + sp[28] * PI2[0][12][6] + sp[29] * PI5[0][12][6] + sp[26] * PI7[0][6][12] + sp[27] * PI8[0][6][12] + sp[31] * PI3[0][12][6] + sp[32] * PI6[0][12][6] + sp[27] * PI8[0][12][6] + sp[30] * PI9[0][6][12];
    A[103] = sp[33] * PI0[0][6][13] + sp[34] * PI1[0][6][13] + sp[28] * PI2[0][6][13] + sp[31] * PI3[0][6][13] + sp[34] * PI1[0][13][6] + sp[35] * PI4[0][6][13] + sp[29] * PI5[0][6][13] + sp[32] * PI6[0][6][13] + sp[28] * PI2[0][13][6] + sp[29] * PI5[0][13][6] + sp[26] * PI7[0][6][13] + sp[27] * PI8[0][6][13] + sp[31] * PI3[0][13][6] + sp[32] * PI6[0][13][6] + sp[27] * PI8[0][13][6] + sp[30] * PI9[0][6][13];
    A[104] = sp[33] * PI0[0][6][14] + sp[34] * PI1[0][6][14] + sp[28] * PI2[0][6][14] + sp[31] * PI3[0][6][14] + sp[34] * PI1[0][14][6] + sp[35] * PI4[0][6][14] + sp[29] * PI5[0][6][14] + sp[32] * PI6[0][6][14] + sp[28] * PI2[0][14][6] + sp[29] * PI5[0][14][6] + sp[26] * PI7[0][6][14] + sp[27] * PI8[0][6][14] + sp[31] * PI3[0][14][6] + sp[32] * PI6[0][14][6] + sp[27] * PI8[0][14][6] + sp[30] * PI9[0][6][14];
    A[105] = sp[33] * PI0[0][7][0] + sp[34] * PI1[0][7][0] + sp[28] * PI2[0][7][0] + sp[31] * PI3[0][7][0] + sp[34] * PI1[0][0][7] + sp[35] * PI4[0][7][0] + sp[29] * PI5[0][7][0] + sp[32] * PI6[0][7][0] + sp[28] * PI2[0][0][7] + sp[29] * PI5[0][0][7] + sp[26] * PI7[0][7][0] + sp[27] * PI8[0][7][0] + sp[31] * PI3[0][0][7] + sp[32] * PI6[0][0][7] + sp[27] * PI8[0][0][7] + sp[30] * PI9[0][7][0];
    A[106] = sp[33] * PI0[0][7][1] + sp[34] * PI1[0][7][1] + sp[28] * PI2[0][7][1] + sp[31] * PI3[0][7][1] + sp[34] * PI1[0][1][7] + sp[35] * PI4[0][7][1] + sp[29] * PI5[0][7][1] + sp[32] * PI6[0][7][1] + sp[28] * PI2[0][1][7] + sp[29] * PI5[0][1][7] + sp[26] * PI7[0][7][1] + sp[27] * PI8[0][7][1] + sp[31] * PI3[0][1][7] + sp[32] * PI6[0][1][7] + sp[27] * PI8[0][1][7] + sp[30] * PI9[0][7][1];
    A[107] = sp[33] * PI0[0][7][2] + sp[34] * PI1[0][7][2] + sp[28] * PI2[0][7][2] + sp[31] * PI3[0][7][2] + sp[34] * PI1[0][2][7] + sp[35] * PI4[0][7][2] + sp[29] * PI5[0][7][2] + sp[32] * PI6[0][7][2] + sp[28] * PI2[0][2][7] + sp[29] * PI5[0][2][7] + sp[26] * PI7[0][7][2] + sp[27] * PI8[0][7][2] + sp[31] * PI3[0][2][7] + sp[32] * PI6[0][2][7] + sp[27] * PI8[0][2][7] + sp[30] * PI9[0][7][2];
    A[108] = sp[33] * PI0[0][7][3] + sp[34] * PI1[0][7][3] + sp[28] * PI2[0][7][3] + sp[31] * PI3[0][7][3] + sp[34] * PI1[0][3][7] + sp[35] * PI4[0][7][3] + sp[29] * PI5[0][7][3] + sp[32] * PI6[0][7][3] + sp[28] * PI2[0][3][7] + sp[29] * PI5[0][3][7] + sp[26] * PI7[0][7][3] + sp[27] * PI8[0][7][3] + sp[31] * PI3[0][3][7] + sp[32] * PI6[0][3][7] + sp[27] * PI8[0][3][7] + sp[30] * PI9[0][7][3];
    A[109] = sp[33] * PI0[0][7][4] + sp[34] * PI1[0][7][4] + sp[28] * PI2[0][7][4] + sp[31] * PI3[0][7][4] + sp[34] * PI1[0][4][7] + sp[35] * PI4[0][7][4] + sp[29] * PI5[0][7][4] + sp[32] * PI6[0][7][4] + sp[28] * PI2[0][4][7] + sp[29] * PI5[0][4][7] + sp[26] * PI7[0][7][4] + sp[27] * PI8[0][7][4] + sp[31] * PI3[0][4][7] + sp[32] * PI6[0][4][7] + sp[27] * PI8[0][4][7] + sp[30] * PI9[0][7][4];
    A[110] = sp[33] * PI0[0][7][5] + sp[34] * PI1[0][7][5] + sp[28] * PI2[0][7][5] + sp[31] * PI3[0][7][5] + sp[34] * PI1[0][5][7] + sp[35] * PI4[0][7][5] + sp[29] * PI5[0][7][5] + sp[32] * PI6[0][7][5] + sp[28] * PI2[0][5][7] + sp[29] * PI5[0][5][7] + sp[26] * PI7[0][7][5] + sp[27] * PI8[0][7][5] + sp[31] * PI3[0][5][7] + sp[32] * PI6[0][5][7] + sp[27] * PI8[0][5][7] + sp[30] * PI9[0][7][5];
    A[111] = sp[33] * PI0[0][7][6] + sp[34] * PI1[0][7][6] + sp[28] * PI2[0][7][6] + sp[31] * PI3[0][7][6] + sp[34] * PI1[0][6][7] + sp[35] * PI4[0][7][6] + sp[29] * PI5[0][7][6] + sp[32] * PI6[0][7][6] + sp[28] * PI2[0][6][7] + sp[29] * PI5[0][6][7] + sp[26] * PI7[0][7][6] + sp[27] * PI8[0][7][6] + sp[31] * PI3[0][6][7] + sp[32] * PI6[0][6][7] + sp[27] * PI8[0][6][7] + sp[30] * PI9[0][7][6];
    A[112] = sp[33] * PI0[0][7][7] + sp[34] * PI1[0][7][7] + sp[28] * PI2[0][7][7] + sp[31] * PI3[0][7][7] + sp[34] * PI1[0][7][7] + sp[35] * PI4[0][7][7] + sp[29] * PI5[0][7][7] + sp[32] * PI6[0][7][7] + sp[28] * PI2[0][7][7] + sp[29] * PI5[0][7][7] + sp[26] * PI7[0][7][7] + sp[27] * PI8[0][7][7] + sp[31] * PI3[0][7][7] + sp[32] * PI6[0][7][7] + sp[27] * PI8[0][7][7] + sp[30] * PI9[0][7][7];
    A[113] = sp[33] * PI0[0][7][8] + sp[34] * PI1[0][7][8] + sp[28] * PI2[0][7][8] + sp[31] * PI3[0][7][8] + sp[34] * PI1[0][8][7] + sp[35] * PI4[0][7][8] + sp[29] * PI5[0][7][8] + sp[32] * PI6[0][7][8] + sp[28] * PI2[0][8][7] + sp[29] * PI5[0][8][7] + sp[26] * PI7[0][7][8] + sp[27] * PI8[0][7][8] + sp[31] * PI3[0][8][7] + sp[32] * PI6[0][8][7] + sp[27] * PI8[0][8][7] + sp[30] * PI9[0][7][8];
    A[114] = sp[33] * PI0[0][7][9] + sp[34] * PI1[0][7][9] + sp[28] * PI2[0][7][9] + sp[31] * PI3[0][7][9] + sp[34] * PI1[0][9][7] + sp[35] * PI4[0][7][9] + sp[29] * PI5[0][7][9] + sp[32] * PI6[0][7][9] + sp[28] * PI2[0][9][7] + sp[29] * PI5[0][9][7] + sp[26] * PI7[0][7][9] + sp[27] * PI8[0][7][9] + sp[31] * PI3[0][9][7] + sp[32] * PI6[0][9][7] + sp[27] * PI8[0][9][7] + sp[30] * PI9[0][7][9];
    A[115] = sp[33] * PI0[0][7][10] + sp[34] * PI1[0][7][10] + sp[28] * PI2[0][7][10] + sp[31] * PI3[0][7][10] + sp[34] * PI1[0][10][7] + sp[35] * PI4[0][7][10] + sp[29] * PI5[0][7][10] + sp[32] * PI6[0][7][10] + sp[28] * PI2[0][10][7] + sp[29] * PI5[0][10][7] + sp[26] * PI7[0][7][10] + sp[27] * PI8[0][7][10] + sp[31] * PI3[0][10][7] + sp[32] * PI6[0][10][7] + sp[27] * PI8[0][10][7] + sp[30] * PI9[0][7][10];
    A[116] = sp[33] * PI0[0][7][11] + sp[34] * PI1[0][7][11] + sp[28] * PI2[0][7][11] + sp[31] * PI3[0][7][11] + sp[34] * PI1[0][11][7] + sp[35] * PI4[0][7][11] + sp[29] * PI5[0][7][11] + sp[32] * PI6[0][7][11] + sp[28] * PI2[0][11][7] + sp[29] * PI5[0][11][7] + sp[26] * PI7[0][7][11] + sp[27] * PI8[0][7][11] + sp[31] * PI3[0][11][7] + sp[32] * PI6[0][11][7] + sp[27] * PI8[0][11][7] + sp[30] * PI9[0][7][11];
    A[117] = sp[33] * PI0[0][7][12] + sp[34] * PI1[0][7][12] + sp[28] * PI2[0][7][12] + sp[31] * PI3[0][7][12] + sp[34] * PI1[0][12][7] + sp[35] * PI4[0][7][12] + sp[29] * PI5[0][7][12] + sp[32] * PI6[0][7][12] + sp[28] * PI2[0][12][7] + sp[29] * PI5[0][12][7] + sp[26] * PI7[0][7][12] + sp[27] * PI8[0][7][12] + sp[31] * PI3[0][12][7] + sp[32] * PI6[0][12][7] + sp[27] * PI8[0][12][7] + sp[30] * PI9[0][7][12];
    A[118] = sp[33] * PI0[0][7][13] + sp[34] * PI1[0][7][13] + sp[28] * PI2[0][7][13] + sp[31] * PI3[0][7][13] + sp[34] * PI1[0][13][7] + sp[35] * PI4[0][7][13] + sp[29] * PI5[0][7][13] + sp[32] * PI6[0][7][13] + sp[28] * PI2[0][13][7] + sp[29] * PI5[0][13][7] + sp[26] * PI7[0][7][13] + sp[27] * PI8[0][7][13] + sp[31] * PI3[0][13][7] + sp[32] * PI6[0][13][7] + sp[27] * PI8[0][13][7] + sp[30] * PI9[0][7][13];
    A[119] = sp[33] * PI0[0][7][14] + sp[34] * PI1[0][7][14] + sp[28] * PI2[0][7][14] + sp[31] * PI3[0][7][14] + sp[34] * PI1[0][14][7] + sp[35] * PI4[0][7][14] + sp[29] * PI5[0][7][14] + sp[32] * PI6[0][7][14] + sp[28] * PI2[0][14][7] + sp[29] * PI5[0][14][7] + sp[26] * PI7[0][7][14] + sp[27] * PI8[0][7][14] + sp[31] * PI3[0][14][7] + sp[32] * PI6[0][14][7] + sp[27] * PI8[0][14][7] + sp[30] * PI9[0][7][14];
    A[120] = sp[33] * PI0[0][8][0] + sp[34] * PI1[0][8][0] + sp[28] * PI2[0][8][0] + sp[31] * PI3[0][8][0] + sp[34] * PI1[0][0][8] + sp[35] * PI4[0][8][0] + sp[29] * PI5[0][8][0] + sp[32] * PI6[0][8][0] + sp[28] * PI2[0][0][8] + sp[29] * PI5[0][0][8] + sp[26] * PI7[0][8][0] + sp[27] * PI8[0][8][0] + sp[31] * PI3[0][0][8] + sp[32] * PI6[0][0][8] + sp[27] * PI8[0][0][8] + sp[30] * PI9[0][8][0];
    A[121] = sp[33] * PI0[0][8][1] + sp[34] * PI1[0][8][1] + sp[28] * PI2[0][8][1] + sp[31] * PI3[0][8][1] + sp[34] * PI1[0][1][8] + sp[35] * PI4[0][8][1] + sp[29] * PI5[0][8][1] + sp[32] * PI6[0][8][1] + sp[28] * PI2[0][1][8] + sp[29] * PI5[0][1][8] + sp[26] * PI7[0][8][1] + sp[27] * PI8[0][8][1] + sp[31] * PI3[0][1][8] + sp[32] * PI6[0][1][8] + sp[27] * PI8[0][1][8] + sp[30] * PI9[0][8][1];
    A[122] = sp[33] * PI0[0][8][2] + sp[34] * PI1[0][8][2] + sp[28] * PI2[0][8][2] + sp[31] * PI3[0][8][2] + sp[34] * PI1[0][2][8] + sp[35] * PI4[0][8][2] + sp[29] * PI5[0][8][2] + sp[32] * PI6[0][8][2] + sp[28] * PI2[0][2][8] + sp[29] * PI5[0][2][8] + sp[26] * PI7[0][8][2] + sp[27] * PI8[0][8][2] + sp[31] * PI3[0][2][8] + sp[32] * PI6[0][2][8] + sp[27] * PI8[0][2][8] + sp[30] * PI9[0][8][2];
    A[123] = sp[33] * PI0[0][8][3] + sp[34] * PI1[0][8][3] + sp[28] * PI2[0][8][3] + sp[31] * PI3[0][8][3] + sp[34] * PI1[0][3][8] + sp[35] * PI4[0][8][3] + sp[29] * PI5[0][8][3] + sp[32] * PI6[0][8][3] + sp[28] * PI2[0][3][8] + sp[29] * PI5[0][3][8] + sp[26] * PI7[0][8][3] + sp[27] * PI8[0][8][3] + sp[31] * PI3[0][3][8] + sp[32] * PI6[0][3][8] + sp[27] * PI8[0][3][8] + sp[30] * PI9[0][8][3];
    A[124] = sp[33] * PI0[0][8][4] + sp[34] * PI1[0][8][4] + sp[28] * PI2[0][8][4] + sp[31] * PI3[0][8][4] + sp[34] * PI1[0][4][8] + sp[35] * PI4[0][8][4] + sp[29] * PI5[0][8][4] + sp[32] * PI6[0][8][4] + sp[28] * PI2[0][4][8] + sp[29] * PI5[0][4][8] + sp[26] * PI7[0][8][4] + sp[27] * PI8[0][8][4] + sp[31] * PI3[0][4][8] + sp[32] * PI6[0][4][8] + sp[27] * PI8[0][4][8] + sp[30] * PI9[0][8][4];
    A[125] = sp[33] * PI0[0][8][5] + sp[34] * PI1[0][8][5] + sp[28] * PI2[0][8][5] + sp[31] * PI3[0][8][5] + sp[34] * PI1[0][5][8] + sp[35] * PI4[0][8][5] + sp[29] * PI5[0][8][5] + sp[32] * PI6[0][8][5] + sp[28] * PI2[0][5][8] + sp[29] * PI5[0][5][8] + sp[26] * PI7[0][8][5] + sp[27] * PI8[0][8][5] + sp[31] * PI3[0][5][8] + sp[32] * PI6[0][5][8] + sp[27] * PI8[0][5][8] + sp[30] * PI9[0][8][5];
    A[126] = sp[33] * PI0[0][8][6] + sp[34] * PI1[0][8][6] + sp[28] * PI2[0][8][6] + sp[31] * PI3[0][8][6] + sp[34] * PI1[0][6][8] + sp[35] * PI4[0][8][6] + sp[29] * PI5[0][8][6] + sp[32] * PI6[0][8][6] + sp[28] * PI2[0][6][8] + sp[29] * PI5[0][6][8] + sp[26] * PI7[0][8][6] + sp[27] * PI8[0][8][6] + sp[31] * PI3[0][6][8] + sp[32] * PI6[0][6][8] + sp[27] * PI8[0][6][8] + sp[30] * PI9[0][8][6];
    A[127] = sp[33] * PI0[0][8][7] + sp[34] * PI1[0][8][7] + sp[28] * PI2[0][8][7] + sp[31] * PI3[0][8][7] + sp[34] * PI1[0][7][8] + sp[35] * PI4[0][8][7] + sp[29] * PI5[0][8][7] + sp[32] * PI6[0][8][7] + sp[28] * PI2[0][7][8] + sp[29] * PI5[0][7][8] + sp[26] * PI7[0][8][7] + sp[27] * PI8[0][8][7] + sp[31] * PI3[0][7][8] + sp[32] * PI6[0][7][8] + sp[27] * PI8[0][7][8] + sp[30] * PI9[0][8][7];
    A[128] = sp[33] * PI0[0][8][8] + sp[34] * PI1[0][8][8] + sp[28] * PI2[0][8][8] + sp[31] * PI3[0][8][8] + sp[34] * PI1[0][8][8] + sp[35] * PI4[0][8][8] + sp[29] * PI5[0][8][8] + sp[32] * PI6[0][8][8] + sp[28] * PI2[0][8][8] + sp[29] * PI5[0][8][8] + sp[26] * PI7[0][8][8] + sp[27] * PI8[0][8][8] + sp[31] * PI3[0][8][8] + sp[32] * PI6[0][8][8] + sp[27] * PI8[0][8][8] + sp[30] * PI9[0][8][8];
    A[129] = sp[33] * PI0[0][8][9] + sp[34] * PI1[0][8][9] + sp[28] * PI2[0][8][9] + sp[31] * PI3[0][8][9] + sp[34] * PI1[0][9][8] + sp[35] * PI4[0][8][9] + sp[29] * PI5[0][8][9] + sp[32] * PI6[0][8][9] + sp[28] * PI2[0][9][8] + sp[29] * PI5[0][9][8] + sp[26] * PI7[0][8][9] + sp[27] * PI8[0][8][9] + sp[31] * PI3[0][9][8] + sp[32] * PI6[0][9][8] + sp[27] * PI8[0][9][8] + sp[30] * PI9[0][8][9];
    A[130] = sp[33] * PI0[0][8][10] + sp[34] * PI1[0][8][10] + sp[28] * PI2[0][8][10] + sp[31] * PI3[0][8][10] + sp[34] * PI1[0][10][8] + sp[35] * PI4[0][8][10] + sp[29] * PI5[0][8][10] + sp[32] * PI6[0][8][10] + sp[28] * PI2[0][10][8] + sp[29] * PI5[0][10][8] + sp[26] * PI7[0][8][10] + sp[27] * PI8[0][8][10] + sp[31] * PI3[0][10][8] + sp[32] * PI6[0][10][8] + sp[27] * PI8[0][10][8] + sp[30] * PI9[0][8][10];
    A[131] = sp[33] * PI0[0][8][11] + sp[34] * PI1[0][8][11] + sp[28] * PI2[0][8][11] + sp[31] * PI3[0][8][11] + sp[34] * PI1[0][11][8] + sp[35] * PI4[0][8][11] + sp[29] * PI5[0][8][11] + sp[32] * PI6[0][8][11] + sp[28] * PI2[0][11][8] + sp[29] * PI5[0][11][8] + sp[26] * PI7[0][8][11] + sp[27] * PI8[0][8][11] + sp[31] * PI3[0][11][8] + sp[32] * PI6[0][11][8] + sp[27] * PI8[0][11][8] + sp[30] * PI9[0][8][11];
    A[132] = sp[33] * PI0[0][8][12] + sp[34] * PI1[0][8][12] + sp[28] * PI2[0][8][12] + sp[31] * PI3[0][8][12] + sp[34] * PI1[0][12][8] + sp[35] * PI4[0][8][12] + sp[29] * PI5[0][8][12] + sp[32] * PI6[0][8][12] + sp[28] * PI2[0][12][8] + sp[29] * PI5[0][12][8] + sp[26] * PI7[0][8][12] + sp[27] * PI8[0][8][12] + sp[31] * PI3[0][12][8] + sp[32] * PI6[0][12][8] + sp[27] * PI8[0][12][8] + sp[30] * PI9[0][8][12];
    A[133] = sp[33] * PI0[0][8][13] + sp[34] * PI1[0][8][13] + sp[28] * PI2[0][8][13] + sp[31] * PI3[0][8][13] + sp[34] * PI1[0][13][8] + sp[35] * PI4[0][8][13] + sp[29] * PI5[0][8][13] + sp[32] * PI6[0][8][13] + sp[28] * PI2[0][13][8] + sp[29] * PI5[0][13][8] + sp[26] * PI7[0][8][13] + sp[27] * PI8[0][8][13] + sp[31] * PI3[0][13][8] + sp[32] * PI6[0][13][8] + sp[27] * PI8[0][13][8] + sp[30] * PI9[0][8][13];
    A[134] = sp[33] * PI0[0][8][14] + sp[34] * PI1[0][8][14] + sp[28] * PI2[0][8][14] + sp[31] * PI3[0][8][14] + sp[34] * PI1[0][14][8] + sp[35] * PI4[0][8][14] + sp[29] * PI5[0][8][14] + sp[32] * PI6[0][8][14] + sp[28] * PI2[0][14][8] + sp[29] * PI5[0][14][8] + sp[26] * PI7[0][8][14] + sp[27] * PI8[0][8][14] + sp[31] * PI3[0][14][8] + sp[32] * PI6[0][14][8] + sp[27] * PI8[0][14][8] + sp[30] * PI9[0][8][14];
    A[135] = sp[33] * PI0[0][9][0] + sp[34] * PI1[0][9][0] + sp[28] * PI2[0][9][0] + sp[31] * PI3[0][9][0] + sp[34] * PI1[0][0][9] + sp[35] * PI4[0][9][0] + sp[29] * PI5[0][9][0] + sp[32] * PI6[0][9][0] + sp[28] * PI2[0][0][9] + sp[29] * PI5[0][0][9] + sp[26] * PI7[0][9][0] + sp[27] * PI8[0][9][0] + sp[31] * PI3[0][0][9] + sp[32] * PI6[0][0][9] + sp[27] * PI8[0][0][9] + sp[30] * PI9[0][9][0];
    A[136] = sp[33] * PI0[0][9][1] + sp[34] * PI1[0][9][1] + sp[28] * PI2[0][9][1] + sp[31] * PI3[0][9][1] + sp[34] * PI1[0][1][9] + sp[35] * PI4[0][9][1] + sp[29] * PI5[0][9][1] + sp[32] * PI6[0][9][1] + sp[28] * PI2[0][1][9] + sp[29] * PI5[0][1][9] + sp[26] * PI7[0][9][1] + sp[27] * PI8[0][9][1] + sp[31] * PI3[0][1][9] + sp[32] * PI6[0][1][9] + sp[27] * PI8[0][1][9] + sp[30] * PI9[0][9][1];
    A[137] = sp[33] * PI0[0][9][2] + sp[34] * PI1[0][9][2] + sp[28] * PI2[0][9][2] + sp[31] * PI3[0][9][2] + sp[34] * PI1[0][2][9] + sp[35] * PI4[0][9][2] + sp[29] * PI5[0][9][2] + sp[32] * PI6[0][9][2] + sp[28] * PI2[0][2][9] + sp[29] * PI5[0][2][9] + sp[26] * PI7[0][9][2] + sp[27] * PI8[0][9][2] + sp[31] * PI3[0][2][9] + sp[32] * PI6[0][2][9] + sp[27] * PI8[0][2][9] + sp[30] * PI9[0][9][2];
    A[138] = sp[33] * PI0[0][9][3] + sp[34] * PI1[0][9][3] + sp[28] * PI2[0][9][3] + sp[31] * PI3[0][9][3] + sp[34] * PI1[0][3][9] + sp[35] * PI4[0][9][3] + sp[29] * PI5[0][9][3] + sp[32] * PI6[0][9][3] + sp[28] * PI2[0][3][9] + sp[29] * PI5[0][3][9] + sp[26] * PI7[0][9][3] + sp[27] * PI8[0][9][3] + sp[31] * PI3[0][3][9] + sp[32] * PI6[0][3][9] + sp[27] * PI8[0][3][9] + sp[30] * PI9[0][9][3];
    A[139] = sp[33] * PI0[0][9][4] + sp[34] * PI1[0][9][4] + sp[28] * PI2[0][9][4] + sp[31] * PI3[0][9][4] + sp[34] * PI1[0][4][9] + sp[35] * PI4[0][9][4] + sp[29] * PI5[0][9][4] + sp[32] * PI6[0][9][4] + sp[28] * PI2[0][4][9] + sp[29] * PI5[0][4][9] + sp[26] * PI7[0][9][4] + sp[27] * PI8[0][9][4] + sp[31] * PI3[0][4][9] + sp[32] * PI6[0][4][9] + sp[27] * PI8[0][4][9] + sp[30] * PI9[0][9][4];
    A[140] = sp[33] * PI0[0][9][5] + sp[34] * PI1[0][9][5] + sp[28] * PI2[0][9][5] + sp[31] * PI3[0][9][5] + sp[34] * PI1[0][5][9] + sp[35] * PI4[0][9][5] + sp[29] * PI5[0][9][5] + sp[32] * PI6[0][9][5] + sp[28] * PI2[0][5][9] + sp[29] * PI5[0][5][9] + sp[26] * PI7[0][9][5] + sp[27] * PI8[0][9][5] + sp[31] * PI3[0][5][9] + sp[32] * PI6[0][5][9] + sp[27] * PI8[0][5][9] + sp[30] * PI9[0][9][5];
    A[141] = sp[33] * PI0[0][9][6] + sp[34] * PI1[0][9][6] + sp[28] * PI2[0][9][6] + sp[31] * PI3[0][9][6] + sp[34] * PI1[0][6][9] + sp[35] * PI4[0][9][6] + sp[29] * PI5[0][9][6] + sp[32] * PI6[0][9][6] + sp[28] * PI2[0][6][9] + sp[29] * PI5[0][6][9] + sp[26] * PI7[0][9][6] + sp[27] * PI8[0][9][6] + sp[31] * PI3[0][6][9] + sp[32] * PI6[0][6][9] + sp[27] * PI8[0][6][9] + sp[30] * PI9[0][9][6];
    A[142] = sp[33] * PI0[0][9][7] + sp[34] * PI1[0][9][7] + sp[28] * PI2[0][9][7] + sp[31] * PI3[0][9][7] + sp[34] * PI1[0][7][9] + sp[35] * PI4[0][9][7] + sp[29] * PI5[0][9][7] + sp[32] * PI6[0][9][7] + sp[28] * PI2[0][7][9] + sp[29] * PI5[0][7][9] + sp[26] * PI7[0][9][7] + sp[27] * PI8[0][9][7] + sp[31] * PI3[0][7][9] + sp[32] * PI6[0][7][9] + sp[27] * PI8[0][7][9] + sp[30] * PI9[0][9][7];
    A[143] = sp[33] * PI0[0][9][8] + sp[34] * PI1[0][9][8] + sp[28] * PI2[0][9][8] + sp[31] * PI3[0][9][8] + sp[34] * PI1[0][8][9] + sp[35] * PI4[0][9][8] + sp[29] * PI5[0][9][8] + sp[32] * PI6[0][9][8] + sp[28] * PI2[0][8][9] + sp[29] * PI5[0][8][9] + sp[26] * PI7[0][9][8] + sp[27] * PI8[0][9][8] + sp[31] * PI3[0][8][9] + sp[32] * PI6[0][8][9] + sp[27] * PI8[0][8][9] + sp[30] * PI9[0][9][8];
    A[144] = sp[33] * PI0[0][9][9] + sp[34] * PI1[0][9][9] + sp[28] * PI2[0][9][9] + sp[31] * PI3[0][9][9] + sp[34] * PI1[0][9][9] + sp[35] * PI4[0][9][9] + sp[29] * PI5[0][9][9] + sp[32] * PI6[0][9][9] + sp[28] * PI2[0][9][9] + sp[29] * PI5[0][9][9] + sp[26] * PI7[0][9][9] + sp[27] * PI8[0][9][9] + sp[31] * PI3[0][9][9] + sp[32] * PI6[0][9][9] + sp[27] * PI8[0][9][9] + sp[30] * PI9[0][9][9];
    A[145] = sp[33] * PI0[0][9][10] + sp[34] * PI1[0][9][10] + sp[28] * PI2[0][9][10] + sp[31] * PI3[0][9][10] + sp[34] * PI1[0][10][9] + sp[35] * PI4[0][9][10] + sp[29] * PI5[0][9][10] + sp[32] * PI6[0][9][10] + sp[28] * PI2[0][10][9] + sp[29] * PI5[0][10][9] + sp[26] * PI7[0][9][10] + sp[27] * PI8[0][9][10] + sp[31] * PI3[0][10][9] + sp[32] * PI6[0][10][9] + sp[27] * PI8[0][10][9] + sp[30] * PI9[0][9][10];
    A[146] = sp[33] * PI0[0][9][11] + sp[34] * PI1[0][9][11] + sp[28] * PI2[0][9][11] + sp[31] * PI3[0][9][11] + sp[34] * PI1[0][11][9] + sp[35] * PI4[0][9][11] + sp[29] * PI5[0][9][11] + sp[32] * PI6[0][9][11] + sp[28] * PI2[0][11][9] + sp[29] * PI5[0][11][9] + sp[26] * PI7[0][9][11] + sp[27] * PI8[0][9][11] + sp[31] * PI3[0][11][9] + sp[32] * PI6[0][11][9] + sp[27] * PI8[0][11][9] + sp[30] * PI9[0][9][11];
    A[147] = sp[33] * PI0[0][9][12] + sp[34] * PI1[0][9][12] + sp[28] * PI2[0][9][12] + sp[31] * PI3[0][9][12] + sp[34] * PI1[0][12][9] + sp[35] * PI4[0][9][12] + sp[29] * PI5[0][9][12] + sp[32] * PI6[0][9][12] + sp[28] * PI2[0][12][9] + sp[29] * PI5[0][12][9] + sp[26] * PI7[0][9][12] + sp[27] * PI8[0][9][12] + sp[31] * PI3[0][12][9] + sp[32] * PI6[0][12][9] + sp[27] * PI8[0][12][9] + sp[30] * PI9[0][9][12];
    A[148] = sp[33] * PI0[0][9][13] + sp[34] * PI1[0][9][13] + sp[28] * PI2[0][9][13] + sp[31] * PI3[0][9][13] + sp[34] * PI1[0][13][9] + sp[35] * PI4[0][9][13] + sp[29] * PI5[0][9][13] + sp[32] * PI6[0][9][13] + sp[28] * PI2[0][13][9] + sp[29] * PI5[0][13][9] + sp[26] * PI7[0][9][13] + sp[27] * PI8[0][9][13] + sp[31] * PI3[0][13][9] + sp[32] * PI6[0][13][9] + sp[27] * PI8[0][13][9] + sp[30] * PI9[0][9][13];
    A[149] = sp[33] * PI0[0][9][14] + sp[34] * PI1[0][9][14] + sp[28] * PI2[0][9][14] + sp[31] * PI3[0][9][14] + sp[34] * PI1[0][14][9] + sp[35] * PI4[0][9][14] + sp[29] * PI5[0][9][14] + sp[32] * PI6[0][9][14] + sp[28] * PI2[0][14][9] + sp[29] * PI5[0][14][9] + sp[26] * PI7[0][9][14] + sp[27] * PI8[0][9][14] + sp[31] * PI3[0][14][9] + sp[32] * PI6[0][14][9] + sp[27] * PI8[0][14][9] + sp[30] * PI9[0][9][14];
    A[150] = sp[33] * PI0[0][10][0] + sp[34] * PI1[0][10][0] + sp[28] * PI2[0][10][0] + sp[31] * PI3[0][10][0] + sp[34] * PI1[0][0][10] + sp[35] * PI4[0][10][0] + sp[29] * PI5[0][10][0] + sp[32] * PI6[0][10][0] + sp[28] * PI2[0][0][10] + sp[29] * PI5[0][0][10] + sp[26] * PI7[0][10][0] + sp[27] * PI8[0][10][0] + sp[31] * PI3[0][0][10] + sp[32] * PI6[0][0][10] + sp[27] * PI8[0][0][10] + sp[30] * PI9[0][10][0];
    A[151] = sp[33] * PI0[0][10][1] + sp[34] * PI1[0][10][1] + sp[28] * PI2[0][10][1] + sp[31] * PI3[0][10][1] + sp[34] * PI1[0][1][10] + sp[35] * PI4[0][10][1] + sp[29] * PI5[0][10][1] + sp[32] * PI6[0][10][1] + sp[28] * PI2[0][1][10] + sp[29] * PI5[0][1][10] + sp[26] * PI7[0][10][1] + sp[27] * PI8[0][10][1] + sp[31] * PI3[0][1][10] + sp[32] * PI6[0][1][10] + sp[27] * PI8[0][1][10] + sp[30] * PI9[0][10][1];
    A[152] = sp[33] * PI0[0][10][2] + sp[34] * PI1[0][10][2] + sp[28] * PI2[0][10][2] + sp[31] * PI3[0][10][2] + sp[34] * PI1[0][2][10] + sp[35] * PI4[0][10][2] + sp[29] * PI5[0][10][2] + sp[32] * PI6[0][10][2] + sp[28] * PI2[0][2][10] + sp[29] * PI5[0][2][10] + sp[26] * PI7[0][10][2] + sp[27] * PI8[0][10][2] + sp[31] * PI3[0][2][10] + sp[32] * PI6[0][2][10] + sp[27] * PI8[0][2][10] + sp[30] * PI9[0][10][2];
    A[153] = sp[33] * PI0[0][10][3] + sp[34] * PI1[0][10][3] + sp[28] * PI2[0][10][3] + sp[31] * PI3[0][10][3] + sp[34] * PI1[0][3][10] + sp[35] * PI4[0][10][3] + sp[29] * PI5[0][10][3] + sp[32] * PI6[0][10][3] + sp[28] * PI2[0][3][10] + sp[29] * PI5[0][3][10] + sp[26] * PI7[0][10][3] + sp[27] * PI8[0][10][3] + sp[31] * PI3[0][3][10] + sp[32] * PI6[0][3][10] + sp[27] * PI8[0][3][10] + sp[30] * PI9[0][10][3];
    A[154] = sp[33] * PI0[0][10][4] + sp[34] * PI1[0][10][4] + sp[28] * PI2[0][10][4] + sp[31] * PI3[0][10][4] + sp[34] * PI1[0][4][10] + sp[35] * PI4[0][10][4] + sp[29] * PI5[0][10][4] + sp[32] * PI6[0][10][4] + sp[28] * PI2[0][4][10] + sp[29] * PI5[0][4][10] + sp[26] * PI7[0][10][4] + sp[27] * PI8[0][10][4] + sp[31] * PI3[0][4][10] + sp[32] * PI6[0][4][10] + sp[27] * PI8[0][4][10] + sp[30] * PI9[0][10][4];
    A[155] = sp[33] * PI0[0][10][5] + sp[34] * PI1[0][10][5] + sp[28] * PI2[0][10][5] + sp[31] * PI3[0][10][5] + sp[34] * PI1[0][5][10] + sp[35] * PI4[0][10][5] + sp[29] * PI5[0][10][5] + sp[32] * PI6[0][10][5] + sp[28] * PI2[0][5][10] + sp[29] * PI5[0][5][10] + sp[26] * PI7[0][10][5] + sp[27] * PI8[0][10][5] + sp[31] * PI3[0][5][10] + sp[32] * PI6[0][5][10] + sp[27] * PI8[0][5][10] + sp[30] * PI9[0][10][5];
    A[156] = sp[33] * PI0[0][10][6] + sp[34] * PI1[0][10][6] + sp[28] * PI2[0][10][6] + sp[31] * PI3[0][10][6] + sp[34] * PI1[0][6][10] + sp[35] * PI4[0][10][6] + sp[29] * PI5[0][10][6] + sp[32] * PI6[0][10][6] + sp[28] * PI2[0][6][10] + sp[29] * PI5[0][6][10] + sp[26] * PI7[0][10][6] + sp[27] * PI8[0][10][6] + sp[31] * PI3[0][6][10] + sp[32] * PI6[0][6][10] + sp[27] * PI8[0][6][10] + sp[30] * PI9[0][10][6];
    A[157] = sp[33] * PI0[0][10][7] + sp[34] * PI1[0][10][7] + sp[28] * PI2[0][10][7] + sp[31] * PI3[0][10][7] + sp[34] * PI1[0][7][10] + sp[35] * PI4[0][10][7] + sp[29] * PI5[0][10][7] + sp[32] * PI6[0][10][7] + sp[28] * PI2[0][7][10] + sp[29] * PI5[0][7][10] + sp[26] * PI7[0][10][7] + sp[27] * PI8[0][10][7] + sp[31] * PI3[0][7][10] + sp[32] * PI6[0][7][10] + sp[27] * PI8[0][7][10] + sp[30] * PI9[0][10][7];
    A[158] = sp[33] * PI0[0][10][8] + sp[34] * PI1[0][10][8] + sp[28] * PI2[0][10][8] + sp[31] * PI3[0][10][8] + sp[34] * PI1[0][8][10] + sp[35] * PI4[0][10][8] + sp[29] * PI5[0][10][8] + sp[32] * PI6[0][10][8] + sp[28] * PI2[0][8][10] + sp[29] * PI5[0][8][10] + sp[26] * PI7[0][10][8] + sp[27] * PI8[0][10][8] + sp[31] * PI3[0][8][10] + sp[32] * PI6[0][8][10] + sp[27] * PI8[0][8][10] + sp[30] * PI9[0][10][8];
    A[159] = sp[33] * PI0[0][10][9] + sp[34] * PI1[0][10][9] + sp[28] * PI2[0][10][9] + sp[31] * PI3[0][10][9] + sp[34] * PI1[0][9][10] + sp[35] * PI4[0][10][9] + sp[29] * PI5[0][10][9] + sp[32] * PI6[0][10][9] + sp[28] * PI2[0][9][10] + sp[29] * PI5[0][9][10] + sp[26] * PI7[0][10][9] + sp[27] * PI8[0][10][9] + sp[31] * PI3[0][9][10] + sp[32] * PI6[0][9][10] + sp[27] * PI8[0][9][10] + sp[30] * PI9[0][10][9];
    A[160] = sp[33] * PI0[0][10][10] + sp[34] * PI1[0][10][10] + sp[28] * PI2[0][10][10] + sp[31] * PI3[0][10][10] + sp[34] * PI1[0][10][10] + sp[35] * PI4[0][10][10] + sp[29] * PI5[0][10][10] + sp[32] * PI6[0][10][10] + sp[28] * PI2[0][10][10] + sp[29] * PI5[0][10][10] + sp[26] * PI7[0][10][10] + sp[27] * PI8[0][10][10] + sp[31] * PI3[0][10][10] + sp[32] * PI6[0][10][10] + sp[27] * PI8[0][10][10] + sp[30] * PI9[0][10][10];
    A[161] = sp[33] * PI0[0][10][11] + sp[34] * PI1[0][10][11] + sp[28] * PI2[0][10][11] + sp[31] * PI3[0][10][11] + sp[34] * PI1[0][11][10] + sp[35] * PI4[0][10][11] + sp[29] * PI5[0][10][11] + sp[32] * PI6[0][10][11] + sp[28] * PI2[0][11][10] + sp[29] * PI5[0][11][10] + sp[26] * PI7[0][10][11] + sp[27] * PI8[0][10][11] + sp[31] * PI3[0][11][10] + sp[32] * PI6[0][11][10] + sp[27] * PI8[0][11][10] + sp[30] * PI9[0][10][11];
    A[162] = sp[33] * PI0[0][10][12] + sp[34] * PI1[0][10][12] + sp[28] * PI2[0][10][12] + sp[31] * PI3[0][10][12] + sp[34] * PI1[0][12][10] + sp[35] * PI4[0][10][12] + sp[29] * PI5[0][10][12] + sp[32] * PI6[0][10][12] + sp[28] * PI2[0][12][10] + sp[29] * PI5[0][12][10] + sp[26] * PI7[0][10][12] + sp[27] * PI8[0][10][12] + sp[31] * PI3[0][12][10] + sp[32] * PI6[0][12][10] + sp[27] * PI8[0][12][10] + sp[30] * PI9[0][10][12];
    A[163] = sp[33] * PI0[0][10][13] + sp[34] * PI1[0][10][13] + sp[28] * PI2[0][10][13] + sp[31] * PI3[0][10][13] + sp[34] * PI1[0][13][10] + sp[35] * PI4[0][10][13] + sp[29] * PI5[0][10][13] + sp[32] * PI6[0][10][13] + sp[28] * PI2[0][13][10] + sp[29] * PI5[0][13][10] + sp[26] * PI7[0][10][13] + sp[27] * PI8[0][10][13] + sp[31] * PI3[0][13][10] + sp[32] * PI6[0][13][10] + sp[27] * PI8[0][13][10] + sp[30] * PI9[0][10][13];
    A[164] = sp[33] * PI0[0][10][14] + sp[34] * PI1[0][10][14] + sp[28] * PI2[0][10][14] + sp[31] * PI3[0][10][14] + sp[34] * PI1[0][14][10] + sp[35] * PI4[0][10][14] + sp[29] * PI5[0][10][14] + sp[32] * PI6[0][10][14] + sp[28] * PI2[0][14][10] + sp[29] * PI5[0][14][10] + sp[26] * PI7[0][10][14] + sp[27] * PI8[0][10][14] + sp[31] * PI3[0][14][10] + sp[32] * PI6[0][14][10] + sp[27] * PI8[0][14][10] + sp[30] * PI9[0][10][14];
    A[165] = sp[33] * PI0[0][11][0] + sp[34] * PI1[0][11][0] + sp[28] * PI2[0][11][0] + sp[31] * PI3[0][11][0] + sp[34] * PI1[0][0][11] + sp[35] * PI4[0][11][0] + sp[29] * PI5[0][11][0] + sp[32] * PI6[0][11][0] + sp[28] * PI2[0][0][11] + sp[29] * PI5[0][0][11] + sp[26] * PI7[0][11][0] + sp[27] * PI8[0][11][0] + sp[31] * PI3[0][0][11] + sp[32] * PI6[0][0][11] + sp[27] * PI8[0][0][11] + sp[30] * PI9[0][11][0];
    A[166] = sp[33] * PI0[0][11][1] + sp[34] * PI1[0][11][1] + sp[28] * PI2[0][11][1] + sp[31] * PI3[0][11][1] + sp[34] * PI1[0][1][11] + sp[35] * PI4[0][11][1] + sp[29] * PI5[0][11][1] + sp[32] * PI6[0][11][1] + sp[28] * PI2[0][1][11] + sp[29] * PI5[0][1][11] + sp[26] * PI7[0][11][1] + sp[27] * PI8[0][11][1] + sp[31] * PI3[0][1][11] + sp[32] * PI6[0][1][11] + sp[27] * PI8[0][1][11] + sp[30] * PI9[0][11][1];
    A[167] = sp[33] * PI0[0][11][2] + sp[34] * PI1[0][11][2] + sp[28] * PI2[0][11][2] + sp[31] * PI3[0][11][2] + sp[34] * PI1[0][2][11] + sp[35] * PI4[0][11][2] + sp[29] * PI5[0][11][2] + sp[32] * PI6[0][11][2] + sp[28] * PI2[0][2][11] + sp[29] * PI5[0][2][11] + sp[26] * PI7[0][11][2] + sp[27] * PI8[0][11][2] + sp[31] * PI3[0][2][11] + sp[32] * PI6[0][2][11] + sp[27] * PI8[0][2][11] + sp[30] * PI9[0][11][2];
    A[168] = sp[33] * PI0[0][11][3] + sp[34] * PI1[0][11][3] + sp[28] * PI2[0][11][3] + sp[31] * PI3[0][11][3] + sp[34] * PI1[0][3][11] + sp[35] * PI4[0][11][3] + sp[29] * PI5[0][11][3] + sp[32] * PI6[0][11][3] + sp[28] * PI2[0][3][11] + sp[29] * PI5[0][3][11] + sp[26] * PI7[0][11][3] + sp[27] * PI8[0][11][3] + sp[31] * PI3[0][3][11] + sp[32] * PI6[0][3][11] + sp[27] * PI8[0][3][11] + sp[30] * PI9[0][11][3];
    A[169] = sp[33] * PI0[0][11][4] + sp[34] * PI1[0][11][4] + sp[28] * PI2[0][11][4] + sp[31] * PI3[0][11][4] + sp[34] * PI1[0][4][11] + sp[35] * PI4[0][11][4] + sp[29] * PI5[0][11][4] + sp[32] * PI6[0][11][4] + sp[28] * PI2[0][4][11] + sp[29] * PI5[0][4][11] + sp[26] * PI7[0][11][4] + sp[27] * PI8[0][11][4] + sp[31] * PI3[0][4][11] + sp[32] * PI6[0][4][11] + sp[27] * PI8[0][4][11] + sp[30] * PI9[0][11][4];
    A[170] = sp[33] * PI0[0][11][5] + sp[34] * PI1[0][11][5] + sp[28] * PI2[0][11][5] + sp[31] * PI3[0][11][5] + sp[34] * PI1[0][5][11] + sp[35] * PI4[0][11][5] + sp[29] * PI5[0][11][5] + sp[32] * PI6[0][11][5] + sp[28] * PI2[0][5][11] + sp[29] * PI5[0][5][11] + sp[26] * PI7[0][11][5] + sp[27] * PI8[0][11][5] + sp[31] * PI3[0][5][11] + sp[32] * PI6[0][5][11] + sp[27] * PI8[0][5][11] + sp[30] * PI9[0][11][5];
    A[171] = sp[33] * PI0[0][11][6] + sp[34] * PI1[0][11][6] + sp[28] * PI2[0][11][6] + sp[31] * PI3[0][11][6] + sp[34] * PI1[0][6][11] + sp[35] * PI4[0][11][6] + sp[29] * PI5[0][11][6] + sp[32] * PI6[0][11][6] + sp[28] * PI2[0][6][11] + sp[29] * PI5[0][6][11] + sp[26] * PI7[0][11][6] + sp[27] * PI8[0][11][6] + sp[31] * PI3[0][6][11] + sp[32] * PI6[0][6][11] + sp[27] * PI8[0][6][11] + sp[30] * PI9[0][11][6];
    A[172] = sp[33] * PI0[0][11][7] + sp[34] * PI1[0][11][7] + sp[28] * PI2[0][11][7] + sp[31] * PI3[0][11][7] + sp[34] * PI1[0][7][11] + sp[35] * PI4[0][11][7] + sp[29] * PI5[0][11][7] + sp[32] * PI6[0][11][7] + sp[28] * PI2[0][7][11] + sp[29] * PI5[0][7][11] + sp[26] * PI7[0][11][7] + sp[27] * PI8[0][11][7] + sp[31] * PI3[0][7][11] + sp[32] * PI6[0][7][11] + sp[27] * PI8[0][7][11] + sp[30] * PI9[0][11][7];
    A[173] = sp[33] * PI0[0][11][8] + sp[34] * PI1[0][11][8] + sp[28] * PI2[0][11][8] + sp[31] * PI3[0][11][8] + sp[34] * PI1[0][8][11] + sp[35] * PI4[0][11][8] + sp[29] * PI5[0][11][8] + sp[32] * PI6[0][11][8] + sp[28] * PI2[0][8][11] + sp[29] * PI5[0][8][11] + sp[26] * PI7[0][11][8] + sp[27] * PI8[0][11][8] + sp[31] * PI3[0][8][11] + sp[32] * PI6[0][8][11] + sp[27] * PI8[0][8][11] + sp[30] * PI9[0][11][8];
    A[174] = sp[33] * PI0[0][11][9] + sp[34] * PI1[0][11][9] + sp[28] * PI2[0][11][9] + sp[31] * PI3[0][11][9] + sp[34] * PI1[0][9][11] + sp[35] * PI4[0][11][9] + sp[29] * PI5[0][11][9] + sp[32] * PI6[0][11][9] + sp[28] * PI2[0][9][11] + sp[29] * PI5[0][9][11] + sp[26] * PI7[0][11][9] + sp[27] * PI8[0][11][9] + sp[31] * PI3[0][9][11] + sp[32] * PI6[0][9][11] + sp[27] * PI8[0][9][11] + sp[30] * PI9[0][11][9];
    A[175] = sp[33] * PI0[0][11][10] + sp[34] * PI1[0][11][10] + sp[28] * PI2[0][11][10] + sp[31] * PI3[0][11][10] + sp[34] * PI1[0][10][11] + sp[35] * PI4[0][11][10] + sp[29] * PI5[0][11][10] + sp[32] * PI6[0][11][10] + sp[28] * PI2[0][10][11] + sp[29] * PI5[0][10][11] + sp[26] * PI7[0][11][10] + sp[27] * PI8[0][11][10] + sp[31] * PI3[0][10][11] + sp[32] * PI6[0][10][11] + sp[27] * PI8[0][10][11] + sp[30] * PI9[0][11][10];
    A[176] = sp[33] * PI0[0][11][11] + sp[34] * PI1[0][11][11] + sp[28] * PI2[0][11][11] + sp[31] * PI3[0][11][11] + sp[34] * PI1[0][11][11] + sp[35] * PI4[0][11][11] + sp[29] * PI5[0][11][11] + sp[32] * PI6[0][11][11] + sp[28] * PI2[0][11][11] + sp[29] * PI5[0][11][11] + sp[26] * PI7[0][11][11] + sp[27] * PI8[0][11][11] + sp[31] * PI3[0][11][11] + sp[32] * PI6[0][11][11] + sp[27] * PI8[0][11][11] + sp[30] * PI9[0][11][11];
    A[177] = sp[33] * PI0[0][11][12] + sp[34] * PI1[0][11][12] + sp[28] * PI2[0][11][12] + sp[31] * PI3[0][11][12] + sp[34] * PI1[0][12][11] + sp[35] * PI4[0][11][12] + sp[29] * PI5[0][11][12] + sp[32] * PI6[0][11][12] + sp[28] * PI2[0][12][11] + sp[29] * PI5[0][12][11] + sp[26] * PI7[0][11][12] + sp[27] * PI8[0][11][12] + sp[31] * PI3[0][12][11] + sp[32] * PI6[0][12][11] + sp[27] * PI8[0][12][11] + sp[30] * PI9[0][11][12];
    A[178] = sp[33] * PI0[0][11][13] + sp[34] * PI1[0][11][13] + sp[28] * PI2[0][11][13] + sp[31] * PI3[0][11][13] + sp[34] * PI1[0][13][11] + sp[35] * PI4[0][11][13] + sp[29] * PI5[0][11][13] + sp[32] * PI6[0][11][13] + sp[28] * PI2[0][13][11] + sp[29] * PI5[0][13][11] + sp[26] * PI7[0][11][13] + sp[27] * PI8[0][11][13] + sp[31] * PI3[0][13][11] + sp[32] * PI6[0][13][11] + sp[27] * PI8[0][13][11] + sp[30] * PI9[0][11][13];
    A[179] = sp[33] * PI0[0][11][14] + sp[34] * PI1[0][11][14] + sp[28] * PI2[0][11][14] + sp[31] * PI3[0][11][14] + sp[34] * PI1[0][14][11] + sp[35] * PI4[0][11][14] + sp[29] * PI5[0][11][14] + sp[32] * PI6[0][11][14] + sp[28] * PI2[0][14][11] + sp[29] * PI5[0][14][11] + sp[26] * PI7[0][11][14] + sp[27] * PI8[0][11][14] + sp[31] * PI3[0][14][11] + sp[32] * PI6[0][14][11] + sp[27] * PI8[0][14][11] + sp[30] * PI9[0][11][14];
    A[180] = sp[33] * PI0[0][12][0] + sp[34] * PI1[0][12][0] + sp[28] * PI2[0][12][0] + sp[31] * PI3[0][12][0] + sp[34] * PI1[0][0][12] + sp[35] * PI4[0][12][0] + sp[29] * PI5[0][12][0] + sp[32] * PI6[0][12][0] + sp[28] * PI2[0][0][12] + sp[29] * PI5[0][0][12] + sp[26] * PI7[0][12][0] + sp[27] * PI8[0][12][0] + sp[31] * PI3[0][0][12] + sp[32] * PI6[0][0][12] + sp[27] * PI8[0][0][12] + sp[30] * PI9[0][12][0];
    A[181] = sp[33] * PI0[0][12][1] + sp[34] * PI1[0][12][1] + sp[28] * PI2[0][12][1] + sp[31] * PI3[0][12][1] + sp[34] * PI1[0][1][12] + sp[35] * PI4[0][12][1] + sp[29] * PI5[0][12][1] + sp[32] * PI6[0][12][1] + sp[28] * PI2[0][1][12] + sp[29] * PI5[0][1][12] + sp[26] * PI7[0][12][1] + sp[27] * PI8[0][12][1] + sp[31] * PI3[0][1][12] + sp[32] * PI6[0][1][12] + sp[27] * PI8[0][1][12] + sp[30] * PI9[0][12][1];
    A[182] = sp[33] * PI0[0][12][2] + sp[34] * PI1[0][12][2] + sp[28] * PI2[0][12][2] + sp[31] * PI3[0][12][2] + sp[34] * PI1[0][2][12] + sp[35] * PI4[0][12][2] + sp[29] * PI5[0][12][2] + sp[32] * PI6[0][12][2] + sp[28] * PI2[0][2][12] + sp[29] * PI5[0][2][12] + sp[26] * PI7[0][12][2] + sp[27] * PI8[0][12][2] + sp[31] * PI3[0][2][12] + sp[32] * PI6[0][2][12] + sp[27] * PI8[0][2][12] + sp[30] * PI9[0][12][2];
    A[183] = sp[33] * PI0[0][12][3] + sp[34] * PI1[0][12][3] + sp[28] * PI2[0][12][3] + sp[31] * PI3[0][12][3] + sp[34] * PI1[0][3][12] + sp[35] * PI4[0][12][3] + sp[29] * PI5[0][12][3] + sp[32] * PI6[0][12][3] + sp[28] * PI2[0][3][12] + sp[29] * PI5[0][3][12] + sp[26] * PI7[0][12][3] + sp[27] * PI8[0][12][3] + sp[31] * PI3[0][3][12] + sp[32] * PI6[0][3][12] + sp[27] * PI8[0][3][12] + sp[30] * PI9[0][12][3];
    A[184] = sp[33] * PI0[0][12][4] + sp[34] * PI1[0][12][4] + sp[28] * PI2[0][12][4] + sp[31] * PI3[0][12][4] + sp[34] * PI1[0][4][12] + sp[35] * PI4[0][12][4] + sp[29] * PI5[0][12][4] + sp[32] * PI6[0][12][4] + sp[28] * PI2[0][4][12] + sp[29] * PI5[0][4][12] + sp[26] * PI7[0][12][4] + sp[27] * PI8[0][12][4] + sp[31] * PI3[0][4][12] + sp[32] * PI6[0][4][12] + sp[27] * PI8[0][4][12] + sp[30] * PI9[0][12][4];
    A[185] = sp[33] * PI0[0][12][5] + sp[34] * PI1[0][12][5] + sp[28] * PI2[0][12][5] + sp[31] * PI3[0][12][5] + sp[34] * PI1[0][5][12] + sp[35] * PI4[0][12][5] + sp[29] * PI5[0][12][5] + sp[32] * PI6[0][12][5] + sp[28] * PI2[0][5][12] + sp[29] * PI5[0][5][12] + sp[26] * PI7[0][12][5] + sp[27] * PI8[0][12][5] + sp[31] * PI3[0][5][12] + sp[32] * PI6[0][5][12] + sp[27] * PI8[0][5][12] + sp[30] * PI9[0][12][5];
    A[186] = sp[33] * PI0[0][12][6] + sp[34] * PI1[0][12][6] + sp[28] * PI2[0][12][6] + sp[31] * PI3[0][12][6] + sp[34] * PI1[0][6][12] + sp[35] * PI4[0][12][6] + sp[29] * PI5[0][12][6] + sp[32] * PI6[0][12][6] + sp[28] * PI2[0][6][12] + sp[29] * PI5[0][6][12] + sp[26] * PI7[0][12][6] + sp[27] * PI8[0][12][6] + sp[31] * PI3[0][6][12] + sp[32] * PI6[0][6][12] + sp[27] * PI8[0][6][12] + sp[30] * PI9[0][12][6];
    A[187] = sp[33] * PI0[0][12][7] + sp[34] * PI1[0][12][7] + sp[28] * PI2[0][12][7] + sp[31] * PI3[0][12][7] + sp[34] * PI1[0][7][12] + sp[35] * PI4[0][12][7] + sp[29] * PI5[0][12][7] + sp[32] * PI6[0][12][7] + sp[28] * PI2[0][7][12] + sp[29] * PI5[0][7][12] + sp[26] * PI7[0][12][7] + sp[27] * PI8[0][12][7] + sp[31] * PI3[0][7][12] + sp[32] * PI6[0][7][12] + sp[27] * PI8[0][7][12] + sp[30] * PI9[0][12][7];
    A[188] = sp[33] * PI0[0][12][8] + sp[34] * PI1[0][12][8] + sp[28] * PI2[0][12][8] + sp[31] * PI3[0][12][8] + sp[34] * PI1[0][8][12] + sp[35] * PI4[0][12][8] + sp[29] * PI5[0][12][8] + sp[32] * PI6[0][12][8] + sp[28] * PI2[0][8][12] + sp[29] * PI5[0][8][12] + sp[26] * PI7[0][12][8] + sp[27] * PI8[0][12][8] + sp[31] * PI3[0][8][12] + sp[32] * PI6[0][8][12] + sp[27] * PI8[0][8][12] + sp[30] * PI9[0][12][8];
    A[189] = sp[33] * PI0[0][12][9] + sp[34] * PI1[0][12][9] + sp[28] * PI2[0][12][9] + sp[31] * PI3[0][12][9] + sp[34] * PI1[0][9][12] + sp[35] * PI4[0][12][9] + sp[29] * PI5[0][12][9] + sp[32] * PI6[0][12][9] + sp[28] * PI2[0][9][12] + sp[29] * PI5[0][9][12] + sp[26] * PI7[0][12][9] + sp[27] * PI8[0][12][9] + sp[31] * PI3[0][9][12] + sp[32] * PI6[0][9][12] + sp[27] * PI8[0][9][12] + sp[30] * PI9[0][12][9];
    A[190] = sp[33] * PI0[0][12][10] + sp[34] * PI1[0][12][10] + sp[28] * PI2[0][12][10] + sp[31] * PI3[0][12][10] + sp[34] * PI1[0][10][12] + sp[35] * PI4[0][12][10] + sp[29] * PI5[0][12][10] + sp[32] * PI6[0][12][10] + sp[28] * PI2[0][10][12] + sp[29] * PI5[0][10][12] + sp[26] * PI7[0][12][10] + sp[27] * PI8[0][12][10] + sp[31] * PI3[0][10][12] + sp[32] * PI6[0][10][12] + sp[27] * PI8[0][10][12] + sp[30] * PI9[0][12][10];
    A[191] = sp[33] * PI0[0][12][11] + sp[34] * PI1[0][12][11] + sp[28] * PI2[0][12][11] + sp[31] * PI3[0][12][11] + sp[34] * PI1[0][11][12] + sp[35] * PI4[0][12][11] + sp[29] * PI5[0][12][11] + sp[32] * PI6[0][12][11] + sp[28] * PI2[0][11][12] + sp[29] * PI5[0][11][12] + sp[26] * PI7[0][12][11] + sp[27] * PI8[0][12][11] + sp[31] * PI3[0][11][12] + sp[32] * PI6[0][11][12] + sp[27] * PI8[0][11][12] + sp[30] * PI9[0][12][11];
    A[192] = sp[33] * PI0[0][12][12] + sp[34] * PI1[0][12][12] + sp[28] * PI2[0][12][12] + sp[31] * PI3[0][12][12] + sp[34] * PI1[0][12][12] + sp[35] * PI4[0][12][12] + sp[29] * PI5[0][12][12] + sp[32] * PI6[0][12][12] + sp[28] * PI2[0][12][12] + sp[29] * PI5[0][12][12] + sp[26] * PI7[0][12][12] + sp[27] * PI8[0][12][12] + sp[31] * PI3[0][12][12] + sp[32] * PI6[0][12][12] + sp[27] * PI8[0][12][12] + sp[30] * PI9[0][12][12];
    A[193] = sp[33] * PI0[0][12][13] + sp[34] * PI1[0][12][13] + sp[28] * PI2[0][12][13] + sp[31] * PI3[0][12][13] + sp[34] * PI1[0][13][12] + sp[35] * PI4[0][12][13] + sp[29] * PI5[0][12][13] + sp[32] * PI6[0][12][13] + sp[28] * PI2[0][13][12] + sp[29] * PI5[0][13][12] + sp[26] * PI7[0][12][13] + sp[27] * PI8[0][12][13] + sp[31] * PI3[0][13][12] + sp[32] * PI6[0][13][12] + sp[27] * PI8[0][13][12] + sp[30] * PI9[0][12][13];
    A[194] = sp[33] * PI0[0][12][14] + sp[34] * PI1[0][12][14] + sp[28] * PI2[0][12][14] + sp[31] * PI3[0][12][14] + sp[34] * PI1[0][14][12] + sp[35] * PI4[0][12][14] + sp[29] * PI5[0][12][14] + sp[32] * PI6[0][12][14] + sp[28] * PI2[0][14][12] + sp[29] * PI5[0][14][12] + sp[26] * PI7[0][12][14] + sp[27] * PI8[0][12][14] + sp[31] * PI3[0][14][12] + sp[32] * PI6[0][14][12] + sp[27] * PI8[0][14][12] + sp[30] * PI9[0][12][14];
    A[195] = sp[33] * PI0[0][13][0] + sp[34] * PI1[0][13][0] + sp[28] * PI2[0][13][0] + sp[31] * PI3[0][13][0] + sp[34] * PI1[0][0][13] + sp[35] * PI4[0][13][0] + sp[29] * PI5[0][13][0] + sp[32] * PI6[0][13][0] + sp[28] * PI2[0][0][13] + sp[29] * PI5[0][0][13] + sp[26] * PI7[0][13][0] + sp[27] * PI8[0][13][0] + sp[31] * PI3[0][0][13] + sp[32] * PI6[0][0][13] + sp[27] * PI8[0][0][13] + sp[30] * PI9[0][13][0];
    A[196] = sp[33] * PI0[0][13][1] + sp[34] * PI1[0][13][1] + sp[28] * PI2[0][13][1] + sp[31] * PI3[0][13][1] + sp[34] * PI1[0][1][13] + sp[35] * PI4[0][13][1] + sp[29] * PI5[0][13][1] + sp[32] * PI6[0][13][1] + sp[28] * PI2[0][1][13] + sp[29] * PI5[0][1][13] + sp[26] * PI7[0][13][1] + sp[27] * PI8[0][13][1] + sp[31] * PI3[0][1][13] + sp[32] * PI6[0][1][13] + sp[27] * PI8[0][1][13] + sp[30] * PI9[0][13][1];
    A[197] = sp[33] * PI0[0][13][2] + sp[34] * PI1[0][13][2] + sp[28] * PI2[0][13][2] + sp[31] * PI3[0][13][2] + sp[34] * PI1[0][2][13] + sp[35] * PI4[0][13][2] + sp[29] * PI5[0][13][2] + sp[32] * PI6[0][13][2] + sp[28] * PI2[0][2][13] + sp[29] * PI5[0][2][13] + sp[26] * PI7[0][13][2] + sp[27] * PI8[0][13][2] + sp[31] * PI3[0][2][13] + sp[32] * PI6[0][2][13] + sp[27] * PI8[0][2][13] + sp[30] * PI9[0][13][2];
    A[198] = sp[33] * PI0[0][13][3] + sp[34] * PI1[0][13][3] + sp[28] * PI2[0][13][3] + sp[31] * PI3[0][13][3] + sp[34] * PI1[0][3][13] + sp[35] * PI4[0][13][3] + sp[29] * PI5[0][13][3] + sp[32] * PI6[0][13][3] + sp[28] * PI2[0][3][13] + sp[29] * PI5[0][3][13] + sp[26] * PI7[0][13][3] + sp[27] * PI8[0][13][3] + sp[31] * PI3[0][3][13] + sp[32] * PI6[0][3][13] + sp[27] * PI8[0][3][13] + sp[30] * PI9[0][13][3];
    A[199] = sp[33] * PI0[0][13][4] + sp[34] * PI1[0][13][4] + sp[28] * PI2[0][13][4] + sp[31] * PI3[0][13][4] + sp[34] * PI1[0][4][13] + sp[35] * PI4[0][13][4] + sp[29] * PI5[0][13][4] + sp[32] * PI6[0][13][4] + sp[28] * PI2[0][4][13] + sp[29] * PI5[0][4][13] + sp[26] * PI7[0][13][4] + sp[27] * PI8[0][13][4] + sp[31] * PI3[0][4][13] + sp[32] * PI6[0][4][13] + sp[27] * PI8[0][4][13] + sp[30] * PI9[0][13][4];
    A[200] = sp[33] * PI0[0][13][5] + sp[34] * PI1[0][13][5] + sp[28] * PI2[0][13][5] + sp[31] * PI3[0][13][5] + sp[34] * PI1[0][5][13] + sp[35] * PI4[0][13][5] + sp[29] * PI5[0][13][5] + sp[32] * PI6[0][13][5] + sp[28] * PI2[0][5][13] + sp[29] * PI5[0][5][13] + sp[26] * PI7[0][13][5] + sp[27] * PI8[0][13][5] + sp[31] * PI3[0][5][13] + sp[32] * PI6[0][5][13] + sp[27] * PI8[0][5][13] + sp[30] * PI9[0][13][5];
    A[201] = sp[33] * PI0[0][13][6] + sp[34] * PI1[0][13][6] + sp[28] * PI2[0][13][6] + sp[31] * PI3[0][13][6] + sp[34] * PI1[0][6][13] + sp[35] * PI4[0][13][6] + sp[29] * PI5[0][13][6] + sp[32] * PI6[0][13][6] + sp[28] * PI2[0][6][13] + sp[29] * PI5[0][6][13] + sp[26] * PI7[0][13][6] + sp[27] * PI8[0][13][6] + sp[31] * PI3[0][6][13] + sp[32] * PI6[0][6][13] + sp[27] * PI8[0][6][13] + sp[30] * PI9[0][13][6];
    A[202] = sp[33] * PI0[0][13][7] + sp[34] * PI1[0][13][7] + sp[28] * PI2[0][13][7] + sp[31] * PI3[0][13][7] + sp[34] * PI1[0][7][13] + sp[35] * PI4[0][13][7] + sp[29] * PI5[0][13][7] + sp[32] * PI6[0][13][7] + sp[28] * PI2[0][7][13] + sp[29] * PI5[0][7][13] + sp[26] * PI7[0][13][7] + sp[27] * PI8[0][13][7] + sp[31] * PI3[0][7][13] + sp[32] * PI6[0][7][13] + sp[27] * PI8[0][7][13] + sp[30] * PI9[0][13][7];
    A[203] = sp[33] * PI0[0][13][8] + sp[34] * PI1[0][13][8] + sp[28] * PI2[0][13][8] + sp[31] * PI3[0][13][8] + sp[34] * PI1[0][8][13] + sp[35] * PI4[0][13][8] + sp[29] * PI5[0][13][8] + sp[32] * PI6[0][13][8] + sp[28] * PI2[0][8][13] + sp[29] * PI5[0][8][13] + sp[26] * PI7[0][13][8] + sp[27] * PI8[0][13][8] + sp[31] * PI3[0][8][13] + sp[32] * PI6[0][8][13] + sp[27] * PI8[0][8][13] + sp[30] * PI9[0][13][8];
    A[204] = sp[33] * PI0[0][13][9] + sp[34] * PI1[0][13][9] + sp[28] * PI2[0][13][9] + sp[31] * PI3[0][13][9] + sp[34] * PI1[0][9][13] + sp[35] * PI4[0][13][9] + sp[29] * PI5[0][13][9] + sp[32] * PI6[0][13][9] + sp[28] * PI2[0][9][13] + sp[29] * PI5[0][9][13] + sp[26] * PI7[0][13][9] + sp[27] * PI8[0][13][9] + sp[31] * PI3[0][9][13] + sp[32] * PI6[0][9][13] + sp[27] * PI8[0][9][13] + sp[30] * PI9[0][13][9];
    A[205] = sp[33] * PI0[0][13][10] + sp[34] * PI1[0][13][10] + sp[28] * PI2[0][13][10] + sp[31] * PI3[0][13][10] + sp[34] * PI1[0][10][13] + sp[35] * PI4[0][13][10] + sp[29] * PI5[0][13][10] + sp[32] * PI6[0][13][10] + sp[28] * PI2[0][10][13] + sp[29] * PI5[0][10][13] + sp[26] * PI7[0][13][10] + sp[27] * PI8[0][13][10] + sp[31] * PI3[0][10][13] + sp[32] * PI6[0][10][13] + sp[27] * PI8[0][10][13] + sp[30] * PI9[0][13][10];
    A[206] = sp[33] * PI0[0][13][11] + sp[34] * PI1[0][13][11] + sp[28] * PI2[0][13][11] + sp[31] * PI3[0][13][11] + sp[34] * PI1[0][11][13] + sp[35] * PI4[0][13][11] + sp[29] * PI5[0][13][11] + sp[32] * PI6[0][13][11] + sp[28] * PI2[0][11][13] + sp[29] * PI5[0][11][13] + sp[26] * PI7[0][13][11] + sp[27] * PI8[0][13][11] + sp[31] * PI3[0][11][13] + sp[32] * PI6[0][11][13] + sp[27] * PI8[0][11][13] + sp[30] * PI9[0][13][11];
    A[207] = sp[33] * PI0[0][13][12] + sp[34] * PI1[0][13][12] + sp[28] * PI2[0][13][12] + sp[31] * PI3[0][13][12] + sp[34] * PI1[0][12][13] + sp[35] * PI4[0][13][12] + sp[29] * PI5[0][13][12] + sp[32] * PI6[0][13][12] + sp[28] * PI2[0][12][13] + sp[29] * PI5[0][12][13] + sp[26] * PI7[0][13][12] + sp[27] * PI8[0][13][12] + sp[31] * PI3[0][12][13] + sp[32] * PI6[0][12][13] + sp[27] * PI8[0][12][13] + sp[30] * PI9[0][13][12];
    A[208] = sp[33] * PI0[0][13][13] + sp[34] * PI1[0][13][13] + sp[28] * PI2[0][13][13] + sp[31] * PI3[0][13][13] + sp[34] * PI1[0][13][13] + sp[35] * PI4[0][13][13] + sp[29] * PI5[0][13][13] + sp[32] * PI6[0][13][13] + sp[28] * PI2[0][13][13] + sp[29] * PI5[0][13][13] + sp[26] * PI7[0][13][13] + sp[27] * PI8[0][13][13] + sp[31] * PI3[0][13][13] + sp[32] * PI6[0][13][13] + sp[27] * PI8[0][13][13] + sp[30] * PI9[0][13][13];
    A[209] = sp[33] * PI0[0][13][14] + sp[34] * PI1[0][13][14] + sp[28] * PI2[0][13][14] + sp[31] * PI3[0][13][14] + sp[34] * PI1[0][14][13] + sp[35] * PI4[0][13][14] + sp[29] * PI5[0][13][14] + sp[32] * PI6[0][13][14] + sp[28] * PI2[0][14][13] + sp[29] * PI5[0][14][13] + sp[26] * PI7[0][13][14] + sp[27] * PI8[0][13][14] + sp[31] * PI3[0][14][13] + sp[32] * PI6[0][14][13] + sp[27] * PI8[0][14][13] + sp[30] * PI9[0][13][14];
    A[210] = sp[33] * PI0[0][14][0] + sp[34] * PI1[0][14][0] + sp[28] * PI2[0][14][0] + sp[31] * PI3[0][14][0] + sp[34] * PI1[0][0][14] + sp[35] * PI4[0][14][0] + sp[29] * PI5[0][14][0] + sp[32] * PI6[0][14][0] + sp[28] * PI2[0][0][14] + sp[29] * PI5[0][0][14] + sp[26] * PI7[0][14][0] + sp[27] * PI8[0][14][0] + sp[31] * PI3[0][0][14] + sp[32] * PI6[0][0][14] + sp[27] * PI8[0][0][14] + sp[30] * PI9[0][14][0];
    A[211] = sp[33] * PI0[0][14][1] + sp[34] * PI1[0][14][1] + sp[28] * PI2[0][14][1] + sp[31] * PI3[0][14][1] + sp[34] * PI1[0][1][14] + sp[35] * PI4[0][14][1] + sp[29] * PI5[0][14][1] + sp[32] * PI6[0][14][1] + sp[28] * PI2[0][1][14] + sp[29] * PI5[0][1][14] + sp[26] * PI7[0][14][1] + sp[27] * PI8[0][14][1] + sp[31] * PI3[0][1][14] + sp[32] * PI6[0][1][14] + sp[27] * PI8[0][1][14] + sp[30] * PI9[0][14][1];
    A[212] = sp[33] * PI0[0][14][2] + sp[34] * PI1[0][14][2] + sp[28] * PI2[0][14][2] + sp[31] * PI3[0][14][2] + sp[34] * PI1[0][2][14] + sp[35] * PI4[0][14][2] + sp[29] * PI5[0][14][2] + sp[32] * PI6[0][14][2] + sp[28] * PI2[0][2][14] + sp[29] * PI5[0][2][14] + sp[26] * PI7[0][14][2] + sp[27] * PI8[0][14][2] + sp[31] * PI3[0][2][14] + sp[32] * PI6[0][2][14] + sp[27] * PI8[0][2][14] + sp[30] * PI9[0][14][2];
    A[213] = sp[33] * PI0[0][14][3] + sp[34] * PI1[0][14][3] + sp[28] * PI2[0][14][3] + sp[31] * PI3[0][14][3] + sp[34] * PI1[0][3][14] + sp[35] * PI4[0][14][3] + sp[29] * PI5[0][14][3] + sp[32] * PI6[0][14][3] + sp[28] * PI2[0][3][14] + sp[29] * PI5[0][3][14] + sp[26] * PI7[0][14][3] + sp[27] * PI8[0][14][3] + sp[31] * PI3[0][3][14] + sp[32] * PI6[0][3][14] + sp[27] * PI8[0][3][14] + sp[30] * PI9[0][14][3];
    A[214] = sp[33] * PI0[0][14][4] + sp[34] * PI1[0][14][4] + sp[28] * PI2[0][14][4] + sp[31] * PI3[0][14][4] + sp[34] * PI1[0][4][14] + sp[35] * PI4[0][14][4] + sp[29] * PI5[0][14][4] + sp[32] * PI6[0][14][4] + sp[28] * PI2[0][4][14] + sp[29] * PI5[0][4][14] + sp[26] * PI7[0][14][4] + sp[27] * PI8[0][14][4] + sp[31] * PI3[0][4][14] + sp[32] * PI6[0][4][14] + sp[27] * PI8[0][4][14] + sp[30] * PI9[0][14][4];
    A[215] = sp[33] * PI0[0][14][5] + sp[34] * PI1[0][14][5] + sp[28] * PI2[0][14][5] + sp[31] * PI3[0][14][5] + sp[34] * PI1[0][5][14] + sp[35] * PI4[0][14][5] + sp[29] * PI5[0][14][5] + sp[32] * PI6[0][14][5] + sp[28] * PI2[0][5][14] + sp[29] * PI5[0][5][14] + sp[26] * PI7[0][14][5] + sp[27] * PI8[0][14][5] + sp[31] * PI3[0][5][14] + sp[32] * PI6[0][5][14] + sp[27] * PI8[0][5][14] + sp[30] * PI9[0][14][5];
    A[216] = sp[33] * PI0[0][14][6] + sp[34] * PI1[0][14][6] + sp[28] * PI2[0][14][6] + sp[31] * PI3[0][14][6] + sp[34] * PI1[0][6][14] + sp[35] * PI4[0][14][6] + sp[29] * PI5[0][14][6] + sp[32] * PI6[0][14][6] + sp[28] * PI2[0][6][14] + sp[29] * PI5[0][6][14] + sp[26] * PI7[0][14][6] + sp[27] * PI8[0][14][6] + sp[31] * PI3[0][6][14] + sp[32] * PI6[0][6][14] + sp[27] * PI8[0][6][14] + sp[30] * PI9[0][14][6];
    A[217] = sp[33] * PI0[0][14][7] + sp[34] * PI1[0][14][7] + sp[28] * PI2[0][14][7] + sp[31] * PI3[0][14][7] + sp[34] * PI1[0][7][14] + sp[35] * PI4[0][14][7] + sp[29] * PI5[0][14][7] + sp[32] * PI6[0][14][7] + sp[28] * PI2[0][7][14] + sp[29] * PI5[0][7][14] + sp[26] * PI7[0][14][7] + sp[27] * PI8[0][14][7] + sp[31] * PI3[0][7][14] + sp[32] * PI6[0][7][14] + sp[27] * PI8[0][7][14] + sp[30] * PI9[0][14][7];
    A[218] = sp[33] * PI0[0][14][8] + sp[34] * PI1[0][14][8] + sp[28] * PI2[0][14][8] + sp[31] * PI3[0][14][8] + sp[34] * PI1[0][8][14] + sp[35] * PI4[0][14][8] + sp[29] * PI5[0][14][8] + sp[32] * PI6[0][14][8] + sp[28] * PI2[0][8][14] + sp[29] * PI5[0][8][14] + sp[26] * PI7[0][14][8] + sp[27] * PI8[0][14][8] + sp[31] * PI3[0][8][14] + sp[32] * PI6[0][8][14] + sp[27] * PI8[0][8][14] + sp[30] * PI9[0][14][8];
    A[219] = sp[33] * PI0[0][14][9] + sp[34] * PI1[0][14][9] + sp[28] * PI2[0][14][9] + sp[31] * PI3[0][14][9] + sp[34] * PI1[0][9][14] + sp[35] * PI4[0][14][9] + sp[29] * PI5[0][14][9] + sp[32] * PI6[0][14][9] + sp[28] * PI2[0][9][14] + sp[29] * PI5[0][9][14] + sp[26] * PI7[0][14][9] + sp[27] * PI8[0][14][9] + sp[31] * PI3[0][9][14] + sp[32] * PI6[0][9][14] + sp[27] * PI8[0][9][14] + sp[30] * PI9[0][14][9];
    A[220] = sp[33] * PI0[0][14][10] + sp[34] * PI1[0][14][10] + sp[28] * PI2[0][14][10] + sp[31] * PI3[0][14][10] + sp[34] * PI1[0][10][14] + sp[35] * PI4[0][14][10] + sp[29] * PI5[0][14][10] + sp[32] * PI6[0][14][10] + sp[28] * PI2[0][10][14] + sp[29] * PI5[0][10][14] + sp[26] * PI7[0][14][10] + sp[27] * PI8[0][14][10] + sp[31] * PI3[0][10][14] + sp[32] * PI6[0][10][14] + sp[27] * PI8[0][10][14] + sp[30] * PI9[0][14][10];
    A[221] = sp[33] * PI0[0][14][11] + sp[34] * PI1[0][14][11] + sp[28] * PI2[0][14][11] + sp[31] * PI3[0][14][11] + sp[34] * PI1[0][11][14] + sp[35] * PI4[0][14][11] + sp[29] * PI5[0][14][11] + sp[32] * PI6[0][14][11] + sp[28] * PI2[0][11][14] + sp[29] * PI5[0][11][14] + sp[26] * PI7[0][14][11] + sp[27] * PI8[0][14][11] + sp[31] * PI3[0][11][14] + sp[32] * PI6[0][11][14] + sp[27] * PI8[0][11][14] + sp[30] * PI9[0][14][11];
    A[222] = sp[33] * PI0[0][14][12] + sp[34] * PI1[0][14][12] + sp[28] * PI2[0][14][12] + sp[31] * PI3[0][14][12] + sp[34] * PI1[0][12][14] + sp[35] * PI4[0][14][12] + sp[29] * PI5[0][14][12] + sp[32] * PI6[0][14][12] + sp[28] * PI2[0][12][14] + sp[29] * PI5[0][12][14] + sp[26] * PI7[0][14][12] + sp[27] * PI8[0][14][12] + sp[31] * PI3[0][12][14] + sp[32] * PI6[0][12][14] + sp[27] * PI8[0][12][14] + sp[30] * PI9[0][14][12];
    A[223] = sp[33] * PI0[0][14][13] + sp[34] * PI1[0][14][13] + sp[28] * PI2[0][14][13] + sp[31] * PI3[0][14][13] + sp[34] * PI1[0][13][14] + sp[35] * PI4[0][14][13] + sp[29] * PI5[0][14][13] + sp[32] * PI6[0][14][13] + sp[28] * PI2[0][13][14] + sp[29] * PI5[0][13][14] + sp[26] * PI7[0][14][13] + sp[27] * PI8[0][14][13] + sp[31] * PI3[0][13][14] + sp[32] * PI6[0][13][14] + sp[27] * PI8[0][13][14] + sp[30] * PI9[0][14][13];
    A[224] = sp[33] * PI0[0][14][14] + sp[34] * PI1[0][14][14] + sp[28] * PI2[0][14][14] + sp[31] * PI3[0][14][14] + sp[34] * PI1[0][14][14] + sp[35] * PI4[0][14][14] + sp[29] * PI5[0][14][14] + sp[32] * PI6[0][14][14] + sp[28] * PI2[0][14][14] + sp[29] * PI5[0][14][14] + sp[26] * PI7[0][14][14] + sp[27] * PI8[0][14][14] + sp[31] * PI3[0][14][14] + sp[32] * PI6[0][14][14] + sp[27] * PI8[0][14][14] + sp[30] * PI9[0][14][14];
  }

};


class forms_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  forms_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~forms_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q12[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[1][15][15] =
        { { { 0.02162698412698427, -0.02986111111111118, 0.01765873015873009, -0.01542658730158736, 0.01746031746031737, -0.023859126984127, -0.01314484126984125, 0.02777777777777794, -0.0205853174603176, 0.04349267900155091, 0.06529556615835197, -0.01686507936508153, 0.03507474113028568, -0.100520805796409, 0.0620039682539693 },
            { -0.02986111111111118, 0.06865079365079393, -0.04871031746031753, 0.01746031746031736, -0.04384920634920631, 0.06111111111111135, 0.01041666666666663, -0.01785714285714293, 0.02529761904761929, -0.07856742013183698, -0.05326743555023484, -0.00496031746031431, -0.07014948226057137, 0.04639421805988, -0.1240079365079386 },
            { 0.01765873015873009, -0.04871031746031753, 0.05734126984127014, -0.02385912698412706, 0.06111111111111146, -0.05114087301587321, -0.01860119047619065, 0.011904761904762, -0.01116071428571436, 0.1248660784238153, -0.00343660874517756, 0.1001984126984116, -0.03507474113028568, -0.02319710902993954, -0.0620039682539693 },
            { -0.01542658730158736, 0.01746031746031736, -0.02385912698412706, 0.02162698412698431, -0.02986111111111127, 0.01765873015873011, 0.02058531746031756, -0.02777777777777797, 0.01314484126984127, -0.07856742013183686, -0.03522523963805725, -0.04513888888888833, 0.03507474113028571, 0.100520805796409, 0.06200396825396938 },
            { 0.01746031746031737, -0.04384920634920631, 0.06111111111111146, -0.02986111111111127, 0.06865079365079407, -0.04871031746031759, -0.02529761904761927, 0.01785714285714301, -0.01041666666666668, 0.1487169023924088, -0.006873217490354432, 0.1289682539682536, -0.07014948226057131, -0.04639421805988019, -0.1240079365079386 },
            { -0.023859126984127, 0.06111111111111135, -0.05114087301587321, 0.01765873015873011, -0.04871031746031759, 0.0573412698412701, 0.01116071428571434, -0.01190476190476198, 0.01860119047619068, -0.08979133729352937, -0.02663371777511699, -0.03819444444444214, -0.03507474113028567, 0.02319710902993945, -0.06200396825396928 },
            { -0.01314484126984125, 0.01041666666666663, -0.01860119047619065, 0.02058531746031756, -0.02529761904761927, 0.01116071428571434, 0.1012896825396832, -0.09444444444444483, 0.04474206349206345, -0.2062394778460754, 0.1314502845029977, 0.1473214285714271, 0.04208968935634284, 0.1030982623552903, 0.07440476190476322 },
            { 0.02777777777777794, -0.01785714285714293, 0.011904761904762, -0.02777777777777797, 0.01785714285714301, -0.01190476190476198, -0.09444444444444483, 0.1630952380952394, -0.09444444444444493, 0.1346870059402923, 0.1030982623552915, -0.1071428571428557, 0.0, -0.206196524710582, 0.0 },
            { -0.0205853174603176, 0.02529761904761929, -0.01116071428571436, 0.01314484126984127, -0.01041666666666668, 0.01860119047619068, 0.04474206349206345, -0.09444444444444493, 0.1012896825396834, -0.1641497884897317, -0.2345485468582885, 0.2217261904761906, -0.04208968935634282, 0.1030982623552905, -0.07440476190476338 },
            { 0.04349267900155091, -0.07856742013183698, 0.1248660784238153, -0.07856742013183686, 0.1487169023924088, -0.08979133729352937, -0.2062394778460754, 0.1346870059402923, -0.1641497884897317, 4.92063492063491, 0.02430049347996777, -0.519106168728202, -0.1984126984127021, -0.2187044413199083, -0.3507474113028562 },
            { 0.06529556615835197, -0.05326743555023484, -0.00343660874517756, -0.03522523963805725, -0.006873217490354432, -0.02663371777511699, 0.1314502845029977, 0.1030982623552915, -0.2345485468582885, 0.02430049347996777, 5.416666666666707, -0.1890134809847089, 0.170103454359953, -0.4017857142857208, 0.3007032652029485 },
            { -0.01686507936508153, -0.00496031746031431, 0.1001984126984116, -0.04513888888888833, 0.1289682539682536, -0.03819444444444214, 0.1473214285714271, -0.1071428571428557, 0.2217261904761906, -0.519106168728202, -0.1890134809847089, 5.555555555555568, -0.3507474113028575, 0.07732369676647488, -0.620039682539695 },
            { 0.03507474113028568, -0.07014948226057137, -0.03507474113028568, 0.03507474113028571, -0.07014948226057131, -0.03507474113028567, 0.04208968935634284, 0.0, -0.04208968935634282, -0.1984126984127021, 0.170103454359953, -0.3507474113028575, 0.3968253968254036, 0.0, 0.7014948226057142 },
            { -0.100520805796409, 0.04639421805988, -0.02319710902993954, 0.100520805796409, -0.04639421805988019, 0.02319710902993945, 0.1030982623552903, -0.206196524710582, 0.1030982623552905, -0.2187044413199083, -0.4017857142857208, 0.07732369676647488, 0.0, 0.8035714285714393, 0.0 },
            { 0.0620039682539693, -0.1240079365079386, -0.0620039682539693, 0.06200396825396938, -0.1240079365079386, -0.06200396825396928, 0.07440476190476322, 0.0, -0.07440476190476338, -0.3507474113028562, 0.3007032652029485, -0.620039682539695, 0.7014948226057142, 0.0, 1.240079365079387 } } };
    alignas(32) static const double PI1[1][15][15] =
        { { { -0.01116071428571434, 0.005952380952380896, -0.004712301587301546, -0.02447916666666675, 0.02167658730158715, -0.03266369047619053, -0.008804563492063525, 0.01413690476190483, -0.007068452380952375, -0.02314932914598854, -0.05154913117764564, -0.007440476190475804, 0.1283735525368421, -0.06314768569261536, 0.0959821428571415 },
            { 0.009920634920634993, -0.01289682539682547, 0.005952380952380855, 0.02316468253968246, -0.05327380952380962, 0.07524801587301626, 0.004216269841269763, -0.009424603174603207, 0.01165674603174615, -0.009820927516480003, -0.008591521862941591, 0.01984126984126914, -0.1360899955855052, 0.04897167461876177, -0.2405753968253959 },
            { -0.004712301587301626, 0.009920634920634991, -0.01116071428571432, -0.03067956349206368, 0.07276785714285772, -0.05820932539682566, -0.009052579365079406, 0.005704365079365102, -0.006820436507936586, 0.01192541198429712, -0.01718304372588163, -0.07192460317460349, 0.0624330392119065, 0.00128872827944115, 0.1460813492063474 },
            { 0.009052579365079394, -0.004216269841269768, 0.008804563492063527, 0.03278769841269868, -0.0358134920634922, 0.02237103174603168, 0.01351686507936519, -0.01364087301587309, 0.00434027777777773, 0.02665680325901711, 0.07947157723220395, 0.04340277777777798, -0.09329881140655669, 0.03737312010379355, -0.03397817460317268 },
            { -0.005704365079365115, 0.009424603174603209, -0.01413690476190482, -0.03978174603174633, 0.08154761904761966, -0.05466269841269857, -0.0136408730158731, 0.008432539682539725, -0.006200396825396868, 0.002805979290422825, -0.04725337024617509, -0.09176587301587352, 0.06594051332493443, 0.002577456558881785, 0.1165674603174581 },
            { 0.006820436507936579, -0.01165674603174613, 0.007068452380952339, 0.02237103174603176, -0.05863095238095271, 0.06850198412698452, 0.004340277777777739, -0.006200396825396857, 0.00954861111111124, -0.01543288609732569, -0.01073940232867669, 0.03596230158730128, -0.09750778034219187, 0.02448583730938069, -0.2080853174603165 },
            { 0.03067956349206367, -0.02316468253968259, 0.02447916666666684, 0.07879464285714322, -0.1005456349206355, 0.0438244047619049, 0.03278769841269867, -0.03978174603174628, 0.02237103174603183, 0.04700015311458271, 0.1576544261849666, 0.1068948412698421, -0.1529258713280409, 0.0154647393532922, 0.01537698412698326 },
            { -0.07276785714285776, 0.05327380952380985, -0.02167658730158731, -0.1005456349206357, 0.07113095238095256, -0.03358134920634901, -0.03581349206349218, 0.08154761904761967, -0.05863095238095285, -0.07997040977705122, -0.1520699369740542, 0.01934523809523971, 0.2946278254943947, -0.1030982623552906, -0.1458333333333372 },
            { 0.05820932539682569, -0.07524801587301651, 0.03266369047619068, 0.04382440476190493, -0.0335813492063491, 0.04308035714285736, 0.02237103174603174, -0.05466269841269858, 0.06850198412698472, -0.05822407027627447, -0.06142938132002931, 0.099454365079366, -0.1950155606843831, 0.08763352300199839, -0.05902777777777984 },
            { -0.06243303921190631, 0.1360899955855054, -0.1283735525368425, -0.152925871328041, 0.2946278254943953, -0.1950155606843835, -0.09329881140655719, 0.06594051332493432, -0.09750778034219214, 0.1984126984127023, -0.06075123369997203, -0.8067190459965529, 4.305555555555534, -0.03645074021998795, 0.540151013406388 },
            { -0.1271545235715235, 0.1838585678669347, -0.05154913117764426, 0.02104922856420384, -0.1778445025628795, -0.007302793583500292, -0.01073940232867412, 0.1022391101689942, -0.167964252420494, 0.2308546880599305, 0.4315476190476349, -0.06873217490352396, 0.4495591293798407, 3.593749999999992, 0.1761261981902901 },
            { 0.07192460317460246, -0.1626984126984121, 0.1026785714285715, 0.005704365079364476, -0.01636904761904622, 0.1054067460317484, 0.04935515873015851, -0.0560515873015868, 0.1252480158730151, -0.3016427737204516, -0.2749286996141054, 0.5902777777777781, -0.3016427737204438, 0.1675346763273493, 3.395337301587294 },
            { -0.01192541198429702, 0.009820927516479899, 0.02314932914598861, 0.04700015311458294, -0.07997040977705135, -0.05822407027627421, 0.02665680325901712, 0.002805979290422768, -0.01543288609732564, 0.01984126984127025, 0.1579532076199499, 0.2034334985556569, 0.1984126984127013, -0.1458029608799465, 0.350747411302857 },
            { 0.07088005536926235, -0.01288728279441051, 0.03221820698602822, 0.1714008611656714, -0.05928150085429046, 0.05541531601596754, 0.07732369676646836, -0.1030982623552909, 0.0257745655888221, 0.2551551815399185, 0.5580357142857217, 0.06443641397205555, -0.7290148043997451, 0.4017857142857193, -0.05154913117763461 },
            { -0.02108134920634949, 0.01736111111111145, 0.04092261904761978, 0.08308531746031914, -0.1413690476190501, -0.102926587301589, 0.04712301587301667, 0.004960317460317484, -0.02728174603174657, 0.03507474113028614, 0.2792244605455836, 0.3596230158730215, 0.3507474113028574, -0.2577456558882176, 0.6200396825396933 } } };
    alignas(32) static const double PI2[1][15][15] =
        { { { 0.05734126984127029, -0.04871031746031774, 0.01765873015873019, 0.01860119047619067, -0.01190476190476192, 0.01116071428571419, 0.02385912698412708, -0.06111111111111157, 0.05114087301587338, 0.03507474113028577, 0.06529556615835101, -0.01091269841269935, -0.1248660784238148, -0.08505606644311356, 0.05307539682539823 },
            { -0.04871031746031774, 0.06865079365079427, -0.02986111111111133, -0.0104166666666667, 0.01785714285714289, -0.02529761904761913, -0.01746031746031748, 0.04384920634920651, -0.06111111111111166, 0.07014948226057136, 0.08419691425682241, -0.1021825396825407, 0.07856742013183708, 0.03092947870658551, 0.04365079365079546 },
            { 0.01765873015873019, -0.02986111111111133, 0.02162698412698435, 0.01314484126984131, -0.02777777777777795, 0.02058531746031752, 0.01542658730158744, -0.01746031746031748, 0.02385912698412714, -0.0350747411302857, -0.003436608745176543, 0.1180555555555572, -0.04349267900155115, -0.01804219591217486, -0.06498015873016044 },
            { 0.01860119047619067, -0.0104166666666667, 0.01314484126984131, 0.1012896825396832, -0.09444444444444486, 0.04474206349206342, 0.02058531746031758, -0.02529761904761928, 0.01116071428571438, 0.04208968935634278, 0.1159855451497027, 0.05208333333333309, -0.2062394778460749, 0.1933092419161691, 0.04017857142857471 },
            { -0.01190476190476192, 0.01785714285714289, -0.02777777777777795, -0.09444444444444486, 0.1630952380952394, -0.09444444444444493, -0.02777777777777797, 0.01785714285714289, -0.01190476190476193, 0.0, -0.1030982623552913, -0.17857142857143, 0.1346870059402922, -0.04123930494211457, 0.1428571428571435 },
            { 0.01116071428571419, -0.02529761904761913, 0.02058531746031752, 0.04474206349206342, -0.09444444444444493, 0.1012896825396832, 0.01314484126984128, -0.01041666666666653, 0.01860119047619054, -0.04208968935634287, -0.0128872827944121, 0.1264880952380963, -0.1641497884897316, 0.07474624020758412, -0.3139880952380977 },
            { 0.02385912698412708, -0.01746031746031748, 0.01542658730158744, 0.02058531746031758, -0.02777777777777797, 0.01314484126984128, 0.02162698412698432, -0.02986111111111125, 0.01765873015873019, 0.03507474113028552, 0.1039574145415856, 0.05605158730158807, -0.07856742013183692, -0.05670404429540896, -0.007936507936508425 },
            { -0.06111111111111157, 0.04384920634920651, -0.01746031746031748, -0.02529761904761928, 0.01785714285714289, -0.01041666666666653, -0.02986111111111125, 0.06865079365079416, -0.04871031746031775, -0.07014948226057129, -0.1305911323167023, 0.02182539682539789, 0.1487169023924083, 0.1082531754730538, -0.07043650793651 },
            { 0.05114087301587338, -0.06111111111111166, 0.02385912698412714, 0.01116071428571438, -0.01190476190476193, 0.01860119047619054, 0.01765873015873019, -0.04871031746031775, 0.05734126984127037, -0.03507474113028575, -0.04209845712841163, 0.05109126984127011, -0.08979133729352934, -0.04639421805987927, -0.003968253968254846 },
            { 0.03507474113028577, 0.07014948226057136, -0.0350747411302857, 0.04208968935634278, 0.0, -0.04208968935634287, 0.03507474113028552, -0.07014948226057129, -0.03507474113028575, 0.3968253968254037, 0.6075123369998058, -0.3507474113028574, -0.1984126984127005, -0.2187044413199271, 0.3226876183986351 },
            { 0.06529556615835101, 0.08419691425682241, -0.003436608745176543, 0.1159855451497027, -0.1030982623552913, -0.0128872827944121, 0.1039574145415856, -0.1305911323167023, -0.04209845712841163, 0.6075123369998058, 1.130952380952398, -0.189013480984702, -0.4131083891598571, -0.401785714285715, 0.3007032652029429 },
            { -0.01091269841269935, -0.1021825396825407, 0.1180555555555572, 0.05208333333333309, -0.17857142857143, 0.1264880952380963, 0.05605158730158807, 0.02182539682539789, 0.05109126984127011, -0.3507474113028574, -0.189013480984702, 0.9126984126984281, -0.01402989645209628, 0.07732369676647233, -0.6200396825397022 },
            { -0.1248660784238148, 0.07856742013183708, -0.04349267900155115, -0.2062394778460749, 0.1346870059402922, -0.1641497884897316, -0.07856742013183692, 0.1487169023924083, -0.08979133729352934, -0.1984126984127005, -0.4131083891598571, -0.01402989645209628, 4.920634920634905, -0.4374088826398524, 0.2805979290422597 },
            { -0.08505606644311356, 0.03092947870658551, -0.01804219591217486, 0.1933092419161691, -0.04123930494211457, 0.07474624020758412, -0.05670404429540896, 0.1082531754730538, -0.04639421805987927, -0.2187044413199271, -0.401785714285715, 0.07732369676647233, -0.4374088826398524, 5.357142857142862, -0.1546473935329271 },
            { 0.05307539682539823, 0.04365079365079546, -0.06498015873016044, 0.04017857142857471, 0.1428571428571435, -0.3139880952380977, -0.007936507936508425, -0.07043650793651, -0.003968253968254846, 0.3226876183986351, 0.3007032652029429, -0.6200396825397022, 0.2805979290422597, -0.1546473935329271, 5.615079365079415 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q12[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q12[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q12[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q12[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q12[0][0][1];
    alignas(32) double sp[20];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = sp[3] * sp[3];
    sp[6] = sp[3] * sp[4];
    sp[7] = sp[4] * sp[4];
    sp[8] = J_c3 / sp[2];
    sp[9] = -1 * J_c2 / sp[2];
    sp[10] = sp[9] * sp[9];
    sp[11] = sp[8] * sp[9];
    sp[12] = sp[8] * sp[8];
    sp[13] = sp[5] + sp[10];
    sp[14] = sp[6] + sp[11];
    sp[15] = sp[12] + sp[7];
    sp[16] = std::abs(sp[2]);
    sp[17] = sp[13] * sp[16];
    sp[18] = sp[14] * sp[16];
    sp[19] = sp[15] * sp[16];
    A[0] = sp[19] * PI0[0][0][0] + sp[18] * PI1[0][0][0] + sp[18] * PI1[0][0][0] + sp[17] * PI2[0][0][0];
    A[1] = sp[19] * PI0[0][0][1] + sp[18] * PI1[0][0][1] + sp[18] * PI1[0][1][0] + sp[17] * PI2[0][0][1];
    A[2] = sp[19] * PI0[0][0][2] + sp[18] * PI1[0][0][2] + sp[18] * PI1[0][2][0] + sp[17] * PI2[0][0][2];
    A[3] = sp[19] * PI0[0][0][3] + sp[18] * PI1[0][0][3] + sp[18] * PI1[0][3][0] + sp[17] * PI2[0][0][3];
    A[4] = sp[19] * PI0[0][0][4] + sp[18] * PI1[0][0][4] + sp[18] * PI1[0][4][0] + sp[17] * PI2[0][0][4];
    A[5] = sp[19] * PI0[0][0][5] + sp[18] * PI1[0][0][5] + sp[18] * PI1[0][5][0] + sp[17] * PI2[0][0][5];
    A[6] = sp[19] * PI0[0][0][6] + sp[18] * PI1[0][0][6] + sp[18] * PI1[0][6][0] + sp[17] * PI2[0][0][6];
    A[7] = sp[19] * PI0[0][0][7] + sp[18] * PI1[0][0][7] + sp[18] * PI1[0][7][0] + sp[17] * PI2[0][0][7];
    A[8] = sp[19] * PI0[0][0][8] + sp[18] * PI1[0][0][8] + sp[18] * PI1[0][8][0] + sp[17] * PI2[0][0][8];
    A[9] = sp[19] * PI0[0][0][9] + sp[18] * PI1[0][0][9] + sp[18] * PI1[0][9][0] + sp[17] * PI2[0][0][9];
    A[10] = sp[19] * PI0[0][0][10] + sp[18] * PI1[0][0][10] + sp[18] * PI1[0][10][0] + sp[17] * PI2[0][0][10];
    A[11] = sp[19] * PI0[0][0][11] + sp[18] * PI1[0][0][11] + sp[18] * PI1[0][11][0] + sp[17] * PI2[0][0][11];
    A[12] = sp[19] * PI0[0][0][12] + sp[18] * PI1[0][0][12] + sp[18] * PI1[0][12][0] + sp[17] * PI2[0][0][12];
    A[13] = sp[19] * PI0[0][0][13] + sp[18] * PI1[0][0][13] + sp[18] * PI1[0][13][0] + sp[17] * PI2[0][0][13];
    A[14] = sp[19] * PI0[0][0][14] + sp[18] * PI1[0][0][14] + sp[18] * PI1[0][14][0] + sp[17] * PI2[0][0][14];
    A[15] = sp[19] * PI0[0][1][0] + sp[18] * PI1[0][1][0] + sp[18] * PI1[0][0][1] + sp[17] * PI2[0][1][0];
    A[16] = sp[19] * PI0[0][1][1] + sp[18] * PI1[0][1][1] + sp[18] * PI1[0][1][1] + sp[17] * PI2[0][1][1];
    A[17] = sp[19] * PI0[0][1][2] + sp[18] * PI1[0][1][2] + sp[18] * PI1[0][2][1] + sp[17] * PI2[0][1][2];
    A[18] = sp[19] * PI0[0][1][3] + sp[18] * PI1[0][1][3] + sp[18] * PI1[0][3][1] + sp[17] * PI2[0][1][3];
    A[19] = sp[19] * PI0[0][1][4] + sp[18] * PI1[0][1][4] + sp[18] * PI1[0][4][1] + sp[17] * PI2[0][1][4];
    A[20] = sp[19] * PI0[0][1][5] + sp[18] * PI1[0][1][5] + sp[18] * PI1[0][5][1] + sp[17] * PI2[0][1][5];
    A[21] = sp[19] * PI0[0][1][6] + sp[18] * PI1[0][1][6] + sp[18] * PI1[0][6][1] + sp[17] * PI2[0][1][6];
    A[22] = sp[19] * PI0[0][1][7] + sp[18] * PI1[0][1][7] + sp[18] * PI1[0][7][1] + sp[17] * PI2[0][1][7];
    A[23] = sp[19] * PI0[0][1][8] + sp[18] * PI1[0][1][8] + sp[18] * PI1[0][8][1] + sp[17] * PI2[0][1][8];
    A[24] = sp[19] * PI0[0][1][9] + sp[18] * PI1[0][1][9] + sp[18] * PI1[0][9][1] + sp[17] * PI2[0][1][9];
    A[25] = sp[19] * PI0[0][1][10] + sp[18] * PI1[0][1][10] + sp[18] * PI1[0][10][1] + sp[17] * PI2[0][1][10];
    A[26] = sp[19] * PI0[0][1][11] + sp[18] * PI1[0][1][11] + sp[18] * PI1[0][11][1] + sp[17] * PI2[0][1][11];
    A[27] = sp[19] * PI0[0][1][12] + sp[18] * PI1[0][1][12] + sp[18] * PI1[0][12][1] + sp[17] * PI2[0][1][12];
    A[28] = sp[19] * PI0[0][1][13] + sp[18] * PI1[0][1][13] + sp[18] * PI1[0][13][1] + sp[17] * PI2[0][1][13];
    A[29] = sp[19] * PI0[0][1][14] + sp[18] * PI1[0][1][14] + sp[18] * PI1[0][14][1] + sp[17] * PI2[0][1][14];
    A[30] = sp[19] * PI0[0][2][0] + sp[18] * PI1[0][2][0] + sp[18] * PI1[0][0][2] + sp[17] * PI2[0][2][0];
    A[31] = sp[19] * PI0[0][2][1] + sp[18] * PI1[0][2][1] + sp[18] * PI1[0][1][2] + sp[17] * PI2[0][2][1];
    A[32] = sp[19] * PI0[0][2][2] + sp[18] * PI1[0][2][2] + sp[18] * PI1[0][2][2] + sp[17] * PI2[0][2][2];
    A[33] = sp[19] * PI0[0][2][3] + sp[18] * PI1[0][2][3] + sp[18] * PI1[0][3][2] + sp[17] * PI2[0][2][3];
    A[34] = sp[19] * PI0[0][2][4] + sp[18] * PI1[0][2][4] + sp[18] * PI1[0][4][2] + sp[17] * PI2[0][2][4];
    A[35] = sp[19] * PI0[0][2][5] + sp[18] * PI1[0][2][5] + sp[18] * PI1[0][5][2] + sp[17] * PI2[0][2][5];
    A[36] = sp[19] * PI0[0][2][6] + sp[18] * PI1[0][2][6] + sp[18] * PI1[0][6][2] + sp[17] * PI2[0][2][6];
    A[37] = sp[19] * PI0[0][2][7] + sp[18] * PI1[0][2][7] + sp[18] * PI1[0][7][2] + sp[17] * PI2[0][2][7];
    A[38] = sp[19] * PI0[0][2][8] + sp[18] * PI1[0][2][8] + sp[18] * PI1[0][8][2] + sp[17] * PI2[0][2][8];
    A[39] = sp[19] * PI0[0][2][9] + sp[18] * PI1[0][2][9] + sp[18] * PI1[0][9][2] + sp[17] * PI2[0][2][9];
    A[40] = sp[19] * PI0[0][2][10] + sp[18] * PI1[0][2][10] + sp[18] * PI1[0][10][2] + sp[17] * PI2[0][2][10];
    A[41] = sp[19] * PI0[0][2][11] + sp[18] * PI1[0][2][11] + sp[18] * PI1[0][11][2] + sp[17] * PI2[0][2][11];
    A[42] = sp[19] * PI0[0][2][12] + sp[18] * PI1[0][2][12] + sp[18] * PI1[0][12][2] + sp[17] * PI2[0][2][12];
    A[43] = sp[19] * PI0[0][2][13] + sp[18] * PI1[0][2][13] + sp[18] * PI1[0][13][2] + sp[17] * PI2[0][2][13];
    A[44] = sp[19] * PI0[0][2][14] + sp[18] * PI1[0][2][14] + sp[18] * PI1[0][14][2] + sp[17] * PI2[0][2][14];
    A[45] = sp[19] * PI0[0][3][0] + sp[18] * PI1[0][3][0] + sp[18] * PI1[0][0][3] + sp[17] * PI2[0][3][0];
    A[46] = sp[19] * PI0[0][3][1] + sp[18] * PI1[0][3][1] + sp[18] * PI1[0][1][3] + sp[17] * PI2[0][3][1];
    A[47] = sp[19] * PI0[0][3][2] + sp[18] * PI1[0][3][2] + sp[18] * PI1[0][2][3] + sp[17] * PI2[0][3][2];
    A[48] = sp[19] * PI0[0][3][3] + sp[18] * PI1[0][3][3] + sp[18] * PI1[0][3][3] + sp[17] * PI2[0][3][3];
    A[49] = sp[19] * PI0[0][3][4] + sp[18] * PI1[0][3][4] + sp[18] * PI1[0][4][3] + sp[17] * PI2[0][3][4];
    A[50] = sp[19] * PI0[0][3][5] + sp[18] * PI1[0][3][5] + sp[18] * PI1[0][5][3] + sp[17] * PI2[0][3][5];
    A[51] = sp[19] * PI0[0][3][6] + sp[18] * PI1[0][3][6] + sp[18] * PI1[0][6][3] + sp[17] * PI2[0][3][6];
    A[52] = sp[19] * PI0[0][3][7] + sp[18] * PI1[0][3][7] + sp[18] * PI1[0][7][3] + sp[17] * PI2[0][3][7];
    A[53] = sp[19] * PI0[0][3][8] + sp[18] * PI1[0][3][8] + sp[18] * PI1[0][8][3] + sp[17] * PI2[0][3][8];
    A[54] = sp[19] * PI0[0][3][9] + sp[18] * PI1[0][3][9] + sp[18] * PI1[0][9][3] + sp[17] * PI2[0][3][9];
    A[55] = sp[19] * PI0[0][3][10] + sp[18] * PI1[0][3][10] + sp[18] * PI1[0][10][3] + sp[17] * PI2[0][3][10];
    A[56] = sp[19] * PI0[0][3][11] + sp[18] * PI1[0][3][11] + sp[18] * PI1[0][11][3] + sp[17] * PI2[0][3][11];
    A[57] = sp[19] * PI0[0][3][12] + sp[18] * PI1[0][3][12] + sp[18] * PI1[0][12][3] + sp[17] * PI2[0][3][12];
    A[58] = sp[19] * PI0[0][3][13] + sp[18] * PI1[0][3][13] + sp[18] * PI1[0][13][3] + sp[17] * PI2[0][3][13];
    A[59] = sp[19] * PI0[0][3][14] + sp[18] * PI1[0][3][14] + sp[18] * PI1[0][14][3] + sp[17] * PI2[0][3][14];
    A[60] = sp[19] * PI0[0][4][0] + sp[18] * PI1[0][4][0] + sp[18] * PI1[0][0][4] + sp[17] * PI2[0][4][0];
    A[61] = sp[19] * PI0[0][4][1] + sp[18] * PI1[0][4][1] + sp[18] * PI1[0][1][4] + sp[17] * PI2[0][4][1];
    A[62] = sp[19] * PI0[0][4][2] + sp[18] * PI1[0][4][2] + sp[18] * PI1[0][2][4] + sp[17] * PI2[0][4][2];
    A[63] = sp[19] * PI0[0][4][3] + sp[18] * PI1[0][4][3] + sp[18] * PI1[0][3][4] + sp[17] * PI2[0][4][3];
    A[64] = sp[19] * PI0[0][4][4] + sp[18] * PI1[0][4][4] + sp[18] * PI1[0][4][4] + sp[17] * PI2[0][4][4];
    A[65] = sp[19] * PI0[0][4][5] + sp[18] * PI1[0][4][5] + sp[18] * PI1[0][5][4] + sp[17] * PI2[0][4][5];
    A[66] = sp[19] * PI0[0][4][6] + sp[18] * PI1[0][4][6] + sp[18] * PI1[0][6][4] + sp[17] * PI2[0][4][6];
    A[67] = sp[19] * PI0[0][4][7] + sp[18] * PI1[0][4][7] + sp[18] * PI1[0][7][4] + sp[17] * PI2[0][4][7];
    A[68] = sp[19] * PI0[0][4][8] + sp[18] * PI1[0][4][8] + sp[18] * PI1[0][8][4] + sp[17] * PI2[0][4][8];
    A[69] = sp[19] * PI0[0][4][9] + sp[18] * PI1[0][4][9] + sp[18] * PI1[0][9][4] + sp[17] * PI2[0][4][9];
    A[70] = sp[19] * PI0[0][4][10] + sp[18] * PI1[0][4][10] + sp[18] * PI1[0][10][4] + sp[17] * PI2[0][4][10];
    A[71] = sp[19] * PI0[0][4][11] + sp[18] * PI1[0][4][11] + sp[18] * PI1[0][11][4] + sp[17] * PI2[0][4][11];
    A[72] = sp[19] * PI0[0][4][12] + sp[18] * PI1[0][4][12] + sp[18] * PI1[0][12][4] + sp[17] * PI2[0][4][12];
    A[73] = sp[19] * PI0[0][4][13] + sp[18] * PI1[0][4][13] + sp[18] * PI1[0][13][4] + sp[17] * PI2[0][4][13];
    A[74] = sp[19] * PI0[0][4][14] + sp[18] * PI1[0][4][14] + sp[18] * PI1[0][14][4] + sp[17] * PI2[0][4][14];
    A[75] = sp[19] * PI0[0][5][0] + sp[18] * PI1[0][5][0] + sp[18] * PI1[0][0][5] + sp[17] * PI2[0][5][0];
    A[76] = sp[19] * PI0[0][5][1] + sp[18] * PI1[0][5][1] + sp[18] * PI1[0][1][5] + sp[17] * PI2[0][5][1];
    A[77] = sp[19] * PI0[0][5][2] + sp[18] * PI1[0][5][2] + sp[18] * PI1[0][2][5] + sp[17] * PI2[0][5][2];
    A[78] = sp[19] * PI0[0][5][3] + sp[18] * PI1[0][5][3] + sp[18] * PI1[0][3][5] + sp[17] * PI2[0][5][3];
    A[79] = sp[19] * PI0[0][5][4] + sp[18] * PI1[0][5][4] + sp[18] * PI1[0][4][5] + sp[17] * PI2[0][5][4];
    A[80] = sp[19] * PI0[0][5][5] + sp[18] * PI1[0][5][5] + sp[18] * PI1[0][5][5] + sp[17] * PI2[0][5][5];
    A[81] = sp[19] * PI0[0][5][6] + sp[18] * PI1[0][5][6] + sp[18] * PI1[0][6][5] + sp[17] * PI2[0][5][6];
    A[82] = sp[19] * PI0[0][5][7] + sp[18] * PI1[0][5][7] + sp[18] * PI1[0][7][5] + sp[17] * PI2[0][5][7];
    A[83] = sp[19] * PI0[0][5][8] + sp[18] * PI1[0][5][8] + sp[18] * PI1[0][8][5] + sp[17] * PI2[0][5][8];
    A[84] = sp[19] * PI0[0][5][9] + sp[18] * PI1[0][5][9] + sp[18] * PI1[0][9][5] + sp[17] * PI2[0][5][9];
    A[85] = sp[19] * PI0[0][5][10] + sp[18] * PI1[0][5][10] + sp[18] * PI1[0][10][5] + sp[17] * PI2[0][5][10];
    A[86] = sp[19] * PI0[0][5][11] + sp[18] * PI1[0][5][11] + sp[18] * PI1[0][11][5] + sp[17] * PI2[0][5][11];
    A[87] = sp[19] * PI0[0][5][12] + sp[18] * PI1[0][5][12] + sp[18] * PI1[0][12][5] + sp[17] * PI2[0][5][12];
    A[88] = sp[19] * PI0[0][5][13] + sp[18] * PI1[0][5][13] + sp[18] * PI1[0][13][5] + sp[17] * PI2[0][5][13];
    A[89] = sp[19] * PI0[0][5][14] + sp[18] * PI1[0][5][14] + sp[18] * PI1[0][14][5] + sp[17] * PI2[0][5][14];
    A[90] = sp[19] * PI0[0][6][0] + sp[18] * PI1[0][6][0] + sp[18] * PI1[0][0][6] + sp[17] * PI2[0][6][0];
    A[91] = sp[19] * PI0[0][6][1] + sp[18] * PI1[0][6][1] + sp[18] * PI1[0][1][6] + sp[17] * PI2[0][6][1];
    A[92] = sp[19] * PI0[0][6][2] + sp[18] * PI1[0][6][2] + sp[18] * PI1[0][2][6] + sp[17] * PI2[0][6][2];
    A[93] = sp[19] * PI0[0][6][3] + sp[18] * PI1[0][6][3] + sp[18] * PI1[0][3][6] + sp[17] * PI2[0][6][3];
    A[94] = sp[19] * PI0[0][6][4] + sp[18] * PI1[0][6][4] + sp[18] * PI1[0][4][6] + sp[17] * PI2[0][6][4];
    A[95] = sp[19] * PI0[0][6][5] + sp[18] * PI1[0][6][5] + sp[18] * PI1[0][5][6] + sp[17] * PI2[0][6][5];
    A[96] = sp[19] * PI0[0][6][6] + sp[18] * PI1[0][6][6] + sp[18] * PI1[0][6][6] + sp[17] * PI2[0][6][6];
    A[97] = sp[19] * PI0[0][6][7] + sp[18] * PI1[0][6][7] + sp[18] * PI1[0][7][6] + sp[17] * PI2[0][6][7];
    A[98] = sp[19] * PI0[0][6][8] + sp[18] * PI1[0][6][8] + sp[18] * PI1[0][8][6] + sp[17] * PI2[0][6][8];
    A[99] = sp[19] * PI0[0][6][9] + sp[18] * PI1[0][6][9] + sp[18] * PI1[0][9][6] + sp[17] * PI2[0][6][9];
    A[100] = sp[19] * PI0[0][6][10] + sp[18] * PI1[0][6][10] + sp[18] * PI1[0][10][6] + sp[17] * PI2[0][6][10];
    A[101] = sp[19] * PI0[0][6][11] + sp[18] * PI1[0][6][11] + sp[18] * PI1[0][11][6] + sp[17] * PI2[0][6][11];
    A[102] = sp[19] * PI0[0][6][12] + sp[18] * PI1[0][6][12] + sp[18] * PI1[0][12][6] + sp[17] * PI2[0][6][12];
    A[103] = sp[19] * PI0[0][6][13] + sp[18] * PI1[0][6][13] + sp[18] * PI1[0][13][6] + sp[17] * PI2[0][6][13];
    A[104] = sp[19] * PI0[0][6][14] + sp[18] * PI1[0][6][14] + sp[18] * PI1[0][14][6] + sp[17] * PI2[0][6][14];
    A[105] = sp[19] * PI0[0][7][0] + sp[18] * PI1[0][7][0] + sp[18] * PI1[0][0][7] + sp[17] * PI2[0][7][0];
    A[106] = sp[19] * PI0[0][7][1] + sp[18] * PI1[0][7][1] + sp[18] * PI1[0][1][7] + sp[17] * PI2[0][7][1];
    A[107] = sp[19] * PI0[0][7][2] + sp[18] * PI1[0][7][2] + sp[18] * PI1[0][2][7] + sp[17] * PI2[0][7][2];
    A[108] = sp[19] * PI0[0][7][3] + sp[18] * PI1[0][7][3] + sp[18] * PI1[0][3][7] + sp[17] * PI2[0][7][3];
    A[109] = sp[19] * PI0[0][7][4] + sp[18] * PI1[0][7][4] + sp[18] * PI1[0][4][7] + sp[17] * PI2[0][7][4];
    A[110] = sp[19] * PI0[0][7][5] + sp[18] * PI1[0][7][5] + sp[18] * PI1[0][5][7] + sp[17] * PI2[0][7][5];
    A[111] = sp[19] * PI0[0][7][6] + sp[18] * PI1[0][7][6] + sp[18] * PI1[0][6][7] + sp[17] * PI2[0][7][6];
    A[112] = sp[19] * PI0[0][7][7] + sp[18] * PI1[0][7][7] + sp[18] * PI1[0][7][7] + sp[17] * PI2[0][7][7];
    A[113] = sp[19] * PI0[0][7][8] + sp[18] * PI1[0][7][8] + sp[18] * PI1[0][8][7] + sp[17] * PI2[0][7][8];
    A[114] = sp[19] * PI0[0][7][9] + sp[18] * PI1[0][7][9] + sp[18] * PI1[0][9][7] + sp[17] * PI2[0][7][9];
    A[115] = sp[19] * PI0[0][7][10] + sp[18] * PI1[0][7][10] + sp[18] * PI1[0][10][7] + sp[17] * PI2[0][7][10];
    A[116] = sp[19] * PI0[0][7][11] + sp[18] * PI1[0][7][11] + sp[18] * PI1[0][11][7] + sp[17] * PI2[0][7][11];
    A[117] = sp[19] * PI0[0][7][12] + sp[18] * PI1[0][7][12] + sp[18] * PI1[0][12][7] + sp[17] * PI2[0][7][12];
    A[118] = sp[19] * PI0[0][7][13] + sp[18] * PI1[0][7][13] + sp[18] * PI1[0][13][7] + sp[17] * PI2[0][7][13];
    A[119] = sp[19] * PI0[0][7][14] + sp[18] * PI1[0][7][14] + sp[18] * PI1[0][14][7] + sp[17] * PI2[0][7][14];
    A[120] = sp[19] * PI0[0][8][0] + sp[18] * PI1[0][8][0] + sp[18] * PI1[0][0][8] + sp[17] * PI2[0][8][0];
    A[121] = sp[19] * PI0[0][8][1] + sp[18] * PI1[0][8][1] + sp[18] * PI1[0][1][8] + sp[17] * PI2[0][8][1];
    A[122] = sp[19] * PI0[0][8][2] + sp[18] * PI1[0][8][2] + sp[18] * PI1[0][2][8] + sp[17] * PI2[0][8][2];
    A[123] = sp[19] * PI0[0][8][3] + sp[18] * PI1[0][8][3] + sp[18] * PI1[0][3][8] + sp[17] * PI2[0][8][3];
    A[124] = sp[19] * PI0[0][8][4] + sp[18] * PI1[0][8][4] + sp[18] * PI1[0][4][8] + sp[17] * PI2[0][8][4];
    A[125] = sp[19] * PI0[0][8][5] + sp[18] * PI1[0][8][5] + sp[18] * PI1[0][5][8] + sp[17] * PI2[0][8][5];
    A[126] = sp[19] * PI0[0][8][6] + sp[18] * PI1[0][8][6] + sp[18] * PI1[0][6][8] + sp[17] * PI2[0][8][6];
    A[127] = sp[19] * PI0[0][8][7] + sp[18] * PI1[0][8][7] + sp[18] * PI1[0][7][8] + sp[17] * PI2[0][8][7];
    A[128] = sp[19] * PI0[0][8][8] + sp[18] * PI1[0][8][8] + sp[18] * PI1[0][8][8] + sp[17] * PI2[0][8][8];
    A[129] = sp[19] * PI0[0][8][9] + sp[18] * PI1[0][8][9] + sp[18] * PI1[0][9][8] + sp[17] * PI2[0][8][9];
    A[130] = sp[19] * PI0[0][8][10] + sp[18] * PI1[0][8][10] + sp[18] * PI1[0][10][8] + sp[17] * PI2[0][8][10];
    A[131] = sp[19] * PI0[0][8][11] + sp[18] * PI1[0][8][11] + sp[18] * PI1[0][11][8] + sp[17] * PI2[0][8][11];
    A[132] = sp[19] * PI0[0][8][12] + sp[18] * PI1[0][8][12] + sp[18] * PI1[0][12][8] + sp[17] * PI2[0][8][12];
    A[133] = sp[19] * PI0[0][8][13] + sp[18] * PI1[0][8][13] + sp[18] * PI1[0][13][8] + sp[17] * PI2[0][8][13];
    A[134] = sp[19] * PI0[0][8][14] + sp[18] * PI1[0][8][14] + sp[18] * PI1[0][14][8] + sp[17] * PI2[0][8][14];
    A[135] = sp[19] * PI0[0][9][0] + sp[18] * PI1[0][9][0] + sp[18] * PI1[0][0][9] + sp[17] * PI2[0][9][0];
    A[136] = sp[19] * PI0[0][9][1] + sp[18] * PI1[0][9][1] + sp[18] * PI1[0][1][9] + sp[17] * PI2[0][9][1];
    A[137] = sp[19] * PI0[0][9][2] + sp[18] * PI1[0][9][2] + sp[18] * PI1[0][2][9] + sp[17] * PI2[0][9][2];
    A[138] = sp[19] * PI0[0][9][3] + sp[18] * PI1[0][9][3] + sp[18] * PI1[0][3][9] + sp[17] * PI2[0][9][3];
    A[139] = sp[19] * PI0[0][9][4] + sp[18] * PI1[0][9][4] + sp[18] * PI1[0][4][9] + sp[17] * PI2[0][9][4];
    A[140] = sp[19] * PI0[0][9][5] + sp[18] * PI1[0][9][5] + sp[18] * PI1[0][5][9] + sp[17] * PI2[0][9][5];
    A[141] = sp[19] * PI0[0][9][6] + sp[18] * PI1[0][9][6] + sp[18] * PI1[0][6][9] + sp[17] * PI2[0][9][6];
    A[142] = sp[19] * PI0[0][9][7] + sp[18] * PI1[0][9][7] + sp[18] * PI1[0][7][9] + sp[17] * PI2[0][9][7];
    A[143] = sp[19] * PI0[0][9][8] + sp[18] * PI1[0][9][8] + sp[18] * PI1[0][8][9] + sp[17] * PI2[0][9][8];
    A[144] = sp[19] * PI0[0][9][9] + sp[18] * PI1[0][9][9] + sp[18] * PI1[0][9][9] + sp[17] * PI2[0][9][9];
    A[145] = sp[19] * PI0[0][9][10] + sp[18] * PI1[0][9][10] + sp[18] * PI1[0][10][9] + sp[17] * PI2[0][9][10];
    A[146] = sp[19] * PI0[0][9][11] + sp[18] * PI1[0][9][11] + sp[18] * PI1[0][11][9] + sp[17] * PI2[0][9][11];
    A[147] = sp[19] * PI0[0][9][12] + sp[18] * PI1[0][9][12] + sp[18] * PI1[0][12][9] + sp[17] * PI2[0][9][12];
    A[148] = sp[19] * PI0[0][9][13] + sp[18] * PI1[0][9][13] + sp[18] * PI1[0][13][9] + sp[17] * PI2[0][9][13];
    A[149] = sp[19] * PI0[0][9][14] + sp[18] * PI1[0][9][14] + sp[18] * PI1[0][14][9] + sp[17] * PI2[0][9][14];
    A[150] = sp[19] * PI0[0][10][0] + sp[18] * PI1[0][10][0] + sp[18] * PI1[0][0][10] + sp[17] * PI2[0][10][0];
    A[151] = sp[19] * PI0[0][10][1] + sp[18] * PI1[0][10][1] + sp[18] * PI1[0][1][10] + sp[17] * PI2[0][10][1];
    A[152] = sp[19] * PI0[0][10][2] + sp[18] * PI1[0][10][2] + sp[18] * PI1[0][2][10] + sp[17] * PI2[0][10][2];
    A[153] = sp[19] * PI0[0][10][3] + sp[18] * PI1[0][10][3] + sp[18] * PI1[0][3][10] + sp[17] * PI2[0][10][3];
    A[154] = sp[19] * PI0[0][10][4] + sp[18] * PI1[0][10][4] + sp[18] * PI1[0][4][10] + sp[17] * PI2[0][10][4];
    A[155] = sp[19] * PI0[0][10][5] + sp[18] * PI1[0][10][5] + sp[18] * PI1[0][5][10] + sp[17] * PI2[0][10][5];
    A[156] = sp[19] * PI0[0][10][6] + sp[18] * PI1[0][10][6] + sp[18] * PI1[0][6][10] + sp[17] * PI2[0][10][6];
    A[157] = sp[19] * PI0[0][10][7] + sp[18] * PI1[0][10][7] + sp[18] * PI1[0][7][10] + sp[17] * PI2[0][10][7];
    A[158] = sp[19] * PI0[0][10][8] + sp[18] * PI1[0][10][8] + sp[18] * PI1[0][8][10] + sp[17] * PI2[0][10][8];
    A[159] = sp[19] * PI0[0][10][9] + sp[18] * PI1[0][10][9] + sp[18] * PI1[0][9][10] + sp[17] * PI2[0][10][9];
    A[160] = sp[19] * PI0[0][10][10] + sp[18] * PI1[0][10][10] + sp[18] * PI1[0][10][10] + sp[17] * PI2[0][10][10];
    A[161] = sp[19] * PI0[0][10][11] + sp[18] * PI1[0][10][11] + sp[18] * PI1[0][11][10] + sp[17] * PI2[0][10][11];
    A[162] = sp[19] * PI0[0][10][12] + sp[18] * PI1[0][10][12] + sp[18] * PI1[0][12][10] + sp[17] * PI2[0][10][12];
    A[163] = sp[19] * PI0[0][10][13] + sp[18] * PI1[0][10][13] + sp[18] * PI1[0][13][10] + sp[17] * PI2[0][10][13];
    A[164] = sp[19] * PI0[0][10][14] + sp[18] * PI1[0][10][14] + sp[18] * PI1[0][14][10] + sp[17] * PI2[0][10][14];
    A[165] = sp[19] * PI0[0][11][0] + sp[18] * PI1[0][11][0] + sp[18] * PI1[0][0][11] + sp[17] * PI2[0][11][0];
    A[166] = sp[19] * PI0[0][11][1] + sp[18] * PI1[0][11][1] + sp[18] * PI1[0][1][11] + sp[17] * PI2[0][11][1];
    A[167] = sp[19] * PI0[0][11][2] + sp[18] * PI1[0][11][2] + sp[18] * PI1[0][2][11] + sp[17] * PI2[0][11][2];
    A[168] = sp[19] * PI0[0][11][3] + sp[18] * PI1[0][11][3] + sp[18] * PI1[0][3][11] + sp[17] * PI2[0][11][3];
    A[169] = sp[19] * PI0[0][11][4] + sp[18] * PI1[0][11][4] + sp[18] * PI1[0][4][11] + sp[17] * PI2[0][11][4];
    A[170] = sp[19] * PI0[0][11][5] + sp[18] * PI1[0][11][5] + sp[18] * PI1[0][5][11] + sp[17] * PI2[0][11][5];
    A[171] = sp[19] * PI0[0][11][6] + sp[18] * PI1[0][11][6] + sp[18] * PI1[0][6][11] + sp[17] * PI2[0][11][6];
    A[172] = sp[19] * PI0[0][11][7] + sp[18] * PI1[0][11][7] + sp[18] * PI1[0][7][11] + sp[17] * PI2[0][11][7];
    A[173] = sp[19] * PI0[0][11][8] + sp[18] * PI1[0][11][8] + sp[18] * PI1[0][8][11] + sp[17] * PI2[0][11][8];
    A[174] = sp[19] * PI0[0][11][9] + sp[18] * PI1[0][11][9] + sp[18] * PI1[0][9][11] + sp[17] * PI2[0][11][9];
    A[175] = sp[19] * PI0[0][11][10] + sp[18] * PI1[0][11][10] + sp[18] * PI1[0][10][11] + sp[17] * PI2[0][11][10];
    A[176] = sp[19] * PI0[0][11][11] + sp[18] * PI1[0][11][11] + sp[18] * PI1[0][11][11] + sp[17] * PI2[0][11][11];
    A[177] = sp[19] * PI0[0][11][12] + sp[18] * PI1[0][11][12] + sp[18] * PI1[0][12][11] + sp[17] * PI2[0][11][12];
    A[178] = sp[19] * PI0[0][11][13] + sp[18] * PI1[0][11][13] + sp[18] * PI1[0][13][11] + sp[17] * PI2[0][11][13];
    A[179] = sp[19] * PI0[0][11][14] + sp[18] * PI1[0][11][14] + sp[18] * PI1[0][14][11] + sp[17] * PI2[0][11][14];
    A[180] = sp[19] * PI0[0][12][0] + sp[18] * PI1[0][12][0] + sp[18] * PI1[0][0][12] + sp[17] * PI2[0][12][0];
    A[181] = sp[19] * PI0[0][12][1] + sp[18] * PI1[0][12][1] + sp[18] * PI1[0][1][12] + sp[17] * PI2[0][12][1];
    A[182] = sp[19] * PI0[0][12][2] + sp[18] * PI1[0][12][2] + sp[18] * PI1[0][2][12] + sp[17] * PI2[0][12][2];
    A[183] = sp[19] * PI0[0][12][3] + sp[18] * PI1[0][12][3] + sp[18] * PI1[0][3][12] + sp[17] * PI2[0][12][3];
    A[184] = sp[19] * PI0[0][12][4] + sp[18] * PI1[0][12][4] + sp[18] * PI1[0][4][12] + sp[17] * PI2[0][12][4];
    A[185] = sp[19] * PI0[0][12][5] + sp[18] * PI1[0][12][5] + sp[18] * PI1[0][5][12] + sp[17] * PI2[0][12][5];
    A[186] = sp[19] * PI0[0][12][6] + sp[18] * PI1[0][12][6] + sp[18] * PI1[0][6][12] + sp[17] * PI2[0][12][6];
    A[187] = sp[19] * PI0[0][12][7] + sp[18] * PI1[0][12][7] + sp[18] * PI1[0][7][12] + sp[17] * PI2[0][12][7];
    A[188] = sp[19] * PI0[0][12][8] + sp[18] * PI1[0][12][8] + sp[18] * PI1[0][8][12] + sp[17] * PI2[0][12][8];
    A[189] = sp[19] * PI0[0][12][9] + sp[18] * PI1[0][12][9] + sp[18] * PI1[0][9][12] + sp[17] * PI2[0][12][9];
    A[190] = sp[19] * PI0[0][12][10] + sp[18] * PI1[0][12][10] + sp[18] * PI1[0][10][12] + sp[17] * PI2[0][12][10];
    A[191] = sp[19] * PI0[0][12][11] + sp[18] * PI1[0][12][11] + sp[18] * PI1[0][11][12] + sp[17] * PI2[0][12][11];
    A[192] = sp[19] * PI0[0][12][12] + sp[18] * PI1[0][12][12] + sp[18] * PI1[0][12][12] + sp[17] * PI2[0][12][12];
    A[193] = sp[19] * PI0[0][12][13] + sp[18] * PI1[0][12][13] + sp[18] * PI1[0][13][12] + sp[17] * PI2[0][12][13];
    A[194] = sp[19] * PI0[0][12][14] + sp[18] * PI1[0][12][14] + sp[18] * PI1[0][14][12] + sp[17] * PI2[0][12][14];
    A[195] = sp[19] * PI0[0][13][0] + sp[18] * PI1[0][13][0] + sp[18] * PI1[0][0][13] + sp[17] * PI2[0][13][0];
    A[196] = sp[19] * PI0[0][13][1] + sp[18] * PI1[0][13][1] + sp[18] * PI1[0][1][13] + sp[17] * PI2[0][13][1];
    A[197] = sp[19] * PI0[0][13][2] + sp[18] * PI1[0][13][2] + sp[18] * PI1[0][2][13] + sp[17] * PI2[0][13][2];
    A[198] = sp[19] * PI0[0][13][3] + sp[18] * PI1[0][13][3] + sp[18] * PI1[0][3][13] + sp[17] * PI2[0][13][3];
    A[199] = sp[19] * PI0[0][13][4] + sp[18] * PI1[0][13][4] + sp[18] * PI1[0][4][13] + sp[17] * PI2[0][13][4];
    A[200] = sp[19] * PI0[0][13][5] + sp[18] * PI1[0][13][5] + sp[18] * PI1[0][5][13] + sp[17] * PI2[0][13][5];
    A[201] = sp[19] * PI0[0][13][6] + sp[18] * PI1[0][13][6] + sp[18] * PI1[0][6][13] + sp[17] * PI2[0][13][6];
    A[202] = sp[19] * PI0[0][13][7] + sp[18] * PI1[0][13][7] + sp[18] * PI1[0][7][13] + sp[17] * PI2[0][13][7];
    A[203] = sp[19] * PI0[0][13][8] + sp[18] * PI1[0][13][8] + sp[18] * PI1[0][8][13] + sp[17] * PI2[0][13][8];
    A[204] = sp[19] * PI0[0][13][9] + sp[18] * PI1[0][13][9] + sp[18] * PI1[0][9][13] + sp[17] * PI2[0][13][9];
    A[205] = sp[19] * PI0[0][13][10] + sp[18] * PI1[0][13][10] + sp[18] * PI1[0][10][13] + sp[17] * PI2[0][13][10];
    A[206] = sp[19] * PI0[0][13][11] + sp[18] * PI1[0][13][11] + sp[18] * PI1[0][11][13] + sp[17] * PI2[0][13][11];
    A[207] = sp[19] * PI0[0][13][12] + sp[18] * PI1[0][13][12] + sp[18] * PI1[0][12][13] + sp[17] * PI2[0][13][12];
    A[208] = sp[19] * PI0[0][13][13] + sp[18] * PI1[0][13][13] + sp[18] * PI1[0][13][13] + sp[17] * PI2[0][13][13];
    A[209] = sp[19] * PI0[0][13][14] + sp[18] * PI1[0][13][14] + sp[18] * PI1[0][14][13] + sp[17] * PI2[0][13][14];
    A[210] = sp[19] * PI0[0][14][0] + sp[18] * PI1[0][14][0] + sp[18] * PI1[0][0][14] + sp[17] * PI2[0][14][0];
    A[211] = sp[19] * PI0[0][14][1] + sp[18] * PI1[0][14][1] + sp[18] * PI1[0][1][14] + sp[17] * PI2[0][14][1];
    A[212] = sp[19] * PI0[0][14][2] + sp[18] * PI1[0][14][2] + sp[18] * PI1[0][2][14] + sp[17] * PI2[0][14][2];
    A[213] = sp[19] * PI0[0][14][3] + sp[18] * PI1[0][14][3] + sp[18] * PI1[0][3][14] + sp[17] * PI2[0][14][3];
    A[214] = sp[19] * PI0[0][14][4] + sp[18] * PI1[0][14][4] + sp[18] * PI1[0][4][14] + sp[17] * PI2[0][14][4];
    A[215] = sp[19] * PI0[0][14][5] + sp[18] * PI1[0][14][5] + sp[18] * PI1[0][5][14] + sp[17] * PI2[0][14][5];
    A[216] = sp[19] * PI0[0][14][6] + sp[18] * PI1[0][14][6] + sp[18] * PI1[0][6][14] + sp[17] * PI2[0][14][6];
    A[217] = sp[19] * PI0[0][14][7] + sp[18] * PI1[0][14][7] + sp[18] * PI1[0][7][14] + sp[17] * PI2[0][14][7];
    A[218] = sp[19] * PI0[0][14][8] + sp[18] * PI1[0][14][8] + sp[18] * PI1[0][8][14] + sp[17] * PI2[0][14][8];
    A[219] = sp[19] * PI0[0][14][9] + sp[18] * PI1[0][14][9] + sp[18] * PI1[0][9][14] + sp[17] * PI2[0][14][9];
    A[220] = sp[19] * PI0[0][14][10] + sp[18] * PI1[0][14][10] + sp[18] * PI1[0][10][14] + sp[17] * PI2[0][14][10];
    A[221] = sp[19] * PI0[0][14][11] + sp[18] * PI1[0][14][11] + sp[18] * PI1[0][11][14] + sp[17] * PI2[0][14][11];
    A[222] = sp[19] * PI0[0][14][12] + sp[18] * PI1[0][14][12] + sp[18] * PI1[0][12][14] + sp[17] * PI2[0][14][12];
    A[223] = sp[19] * PI0[0][14][13] + sp[18] * PI1[0][14][13] + sp[18] * PI1[0][13][14] + sp[17] * PI2[0][14][13];
    A[224] = sp[19] * PI0[0][14][14] + sp[18] * PI1[0][14][14] + sp[18] * PI1[0][14][14] + sp[17] * PI2[0][14][14];
  }

};


class forms_form_0: public ufc::form
{
public:

  forms_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~forms_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "f73909de61c7a584972308ec948cee2299c4122dad45668967747d44c6ce516601cdfd142f5b6360ed154254d5bea9a4e3611c10e94363e563535029705adcee";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new forms_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new forms_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new forms_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_finite_element_2();
    case 1:
        return new forms_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_dofmap_2();
    case 1:
        return new forms_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new forms_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class forms_form_1: public ufc::form
{
public:

  forms_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~forms_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "cf03543d81a8e3c872e762cb0952a22f306c14fc3d1e17af7ee979d98d16f96a16b33af01c29b918dd9d99e71e0450ba5b0dbc734baaf9f881f8778c54173636";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 0;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new forms_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new forms_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new forms_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_finite_element_2();
    case 1:
        return new forms_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new forms_dofmap_2();
    case 1:
        return new forms_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new forms_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace Forms
{

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const forms_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<forms_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_L_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const forms_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_FunctionSpace_1 TrialSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "There are no coefficients");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_FunctionSpace_1 TrialSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;

  // Coefficients
};

// Class typedefs
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
