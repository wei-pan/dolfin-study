// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'uflacs'
//  split:                          False

#ifndef __HYPERELASTICITY_H
#define __HYPERELASTICITY_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class hyperelasticity_finite_element_0: public ufc::finite_element
{
public:

  hyperelasticity_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~hyperelasticity_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 1.825741858350554, 0.0, 0.0, 0.0 },
            { 5.163977794943222, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[4];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[4];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 4, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new hyperelasticity_finite_element_0();
  }

};


class hyperelasticity_finite_element_1: public ufc::finite_element
{
public:

  hyperelasticity_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~hyperelasticity_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 1.825741858350554, 0.0, 0.0, 0.0 },
            { 5.163977794943222, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[36];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[36];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[9] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new hyperelasticity_finite_element_0();
    case 1:
        return new hyperelasticity_finite_element_0();
    case 2:
        return new hyperelasticity_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new hyperelasticity_finite_element_1();
  }

};


class hyperelasticity_finite_element_2: public ufc::finite_element
{
public:

  hyperelasticity_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~hyperelasticity_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[3] = { 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 3, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new hyperelasticity_finite_element_2();
  }

};


class hyperelasticity_dofmap_0: public ufc::dofmap
{
public:

  hyperelasticity_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~hyperelasticity_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 4;
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 3, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new hyperelasticity_dofmap_0();
  }

};


class hyperelasticity_dofmap_1: public ufc::dofmap
{
public:

  hyperelasticity_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~hyperelasticity_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 9, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new hyperelasticity_dofmap_0();
    case 1:
        return new hyperelasticity_dofmap_0();
    case 2:
        return new hyperelasticity_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new hyperelasticity_dofmap_1();
  }

};


class hyperelasticity_dofmap_2: public ufc::dofmap
{
public:

  hyperelasticity_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~hyperelasticity_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = {};
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new hyperelasticity_dofmap_2();
  }

};


class hyperelasticity_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  hyperelasticity_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~hyperelasticity_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new hyperelasticity_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new hyperelasticity_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new hyperelasticity_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    hyperelasticity_finite_element_0 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    hyperelasticity_finite_element_0 xelement;
    double dphi[12];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[4] = { 0.25000000000000006, 0.25, 0.25, 0.25 };
    const double dphi_Xm[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
  }

};


class hyperelasticity_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  hyperelasticity_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~hyperelasticity_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, false, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE32_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE32_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.138196601125011, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.138196601125011, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    alignas(32) static const double PI0[1][2] = { { -0.1666666666666667, 0.1666666666666667 } };
    // Unstructured piecewise computations
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE32_C0_D001_Q4[0][0][ic];
    const double J_c4 = coordinate_dofs[1] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE32_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE32_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE32_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE32_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE32_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE32_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE32_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE32_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE32_C0_D001_Q4[0][0][1];
    const double w0_d1_c0 = w[0][0] * FE32_C0_D001_Q4[0][0][0] + w[0][2] * FE32_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE32_C0_D001_Q4[0][0][0] + w[0][3] * FE32_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE32_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE32_C0_D001_Q4[0][0][0] + w[0][6] * FE32_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE32_C0_D001_Q4[0][0][0] + w[0][7] * FE32_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE32_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE32_C0_D001_Q4[0][0][0] + w[0][10] * FE32_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE32_C0_D001_Q4[0][0][0] + w[0][11] * FE32_C0_D001_Q4[0][0][1];
    alignas(32) double sp[347];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = w0_d0_c0 * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = w0_d1_c0 * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = w0_d2_c0 * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = J_c2 * J_c7;
    sp[25] = J_c8 * (-1 * J_c1);
    sp[26] = sp[24] + sp[25];
    sp[27] = sp[26] / sp[13];
    sp[28] = w0_d0_c1 * sp[27];
    sp[29] = J_c0 * J_c8;
    sp[30] = J_c6 * (-1 * J_c2);
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] / sp[13];
    sp[33] = w0_d1_c1 * sp[32];
    sp[34] = sp[28] + sp[33];
    sp[35] = J_c1 * J_c6;
    sp[36] = J_c0 * J_c7;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = w0_d2_c1 * sp[38];
    sp[40] = sp[34] + sp[39];
    sp[41] = J_c1 * J_c5;
    sp[42] = J_c2 * J_c4;
    sp[43] = sp[41] + -1 * sp[42];
    sp[44] = sp[43] / sp[13];
    sp[45] = J_c2 * J_c3;
    sp[46] = J_c0 * J_c5;
    sp[47] = sp[45] + -1 * sp[46];
    sp[48] = sp[47] / sp[13];
    sp[49] = J_c0 * J_c4;
    sp[50] = J_c1 * J_c3;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = (1 + sp[40]) * sp[44];
    sp[54] = (1 + sp[40]) * sp[48];
    sp[55] = (1 + sp[40]) * sp[52];
    sp[56] = w0_d0_c2 * sp[44];
    sp[57] = w0_d1_c2 * sp[48];
    sp[58] = sp[56] + sp[57];
    sp[59] = w0_d2_c2 * sp[52];
    sp[60] = sp[58] + sp[59];
    sp[61] = (1 + sp[60]) * sp[27];
    sp[62] = (1 + sp[60]) * sp[32];
    sp[63] = (1 + sp[60]) * sp[38];
    sp[64] = w0_d0_c1 * sp[44];
    sp[65] = w0_d1_c1 * sp[48];
    sp[66] = sp[64] + sp[65];
    sp[67] = w0_d2_c1 * sp[52];
    sp[68] = sp[66] + sp[67];
    sp[69] = sp[68] * sp[27];
    sp[70] = sp[68] * sp[32];
    sp[71] = sp[68] * sp[38];
    sp[72] = w0_d0_c2 * sp[27];
    sp[73] = w0_d1_c2 * sp[32];
    sp[74] = sp[72] + sp[73];
    sp[75] = w0_d2_c2 * sp[38];
    sp[76] = sp[74] + sp[75];
    sp[77] = sp[76] * sp[44];
    sp[78] = sp[76] * sp[48];
    sp[79] = sp[76] * sp[52];
    sp[80] = -1 * sp[69] + sp[53];
    sp[81] = -1 * sp[70] + sp[54];
    sp[82] = -1 * sp[71] + sp[55];
    sp[83] = -1 * sp[77] + sp[61];
    sp[84] = -1 * sp[78] + sp[62];
    sp[85] = -1 * sp[79] + sp[63];
    sp[86] = (1 + sp[23]) * sp[80];
    sp[87] = (1 + sp[23]) * sp[81];
    sp[88] = (1 + sp[23]) * sp[82];
    sp[89] = (1 + sp[23]) * sp[83];
    sp[90] = (1 + sp[23]) * sp[84];
    sp[91] = (1 + sp[23]) * sp[85];
    sp[92] = (1 + sp[60]) * (1 + sp[40]);
    sp[93] = sp[68] * sp[76];
    sp[94] = sp[92] + -1 * sp[93];
    sp[95] = sp[94] * sp[14];
    sp[96] = sp[94] * sp[18];
    sp[97] = sp[94] * sp[21];
    sp[98] = w0_d0_c2 * sp[14];
    sp[99] = w0_d1_c2 * sp[18];
    sp[100] = sp[98] + sp[99];
    sp[101] = w0_d2_c2 * sp[21];
    sp[102] = sp[100] + sp[101];
    sp[103] = sp[68] * sp[102];
    sp[104] = w0_d0_c1 * sp[14];
    sp[105] = w0_d1_c1 * sp[18];
    sp[106] = sp[104] + sp[105];
    sp[107] = w0_d2_c1 * sp[21];
    sp[108] = sp[106] + sp[107];
    sp[109] = (1 + sp[60]) * sp[108];
    sp[110] = sp[103] + -1 * sp[109];
    sp[111] = sp[110] * sp[27];
    sp[112] = sp[110] * sp[32];
    sp[113] = sp[110] * sp[38];
    sp[114] = sp[68] * sp[14];
    sp[115] = sp[68] * sp[18];
    sp[116] = sp[68] * sp[21];
    sp[117] = sp[102] * sp[44];
    sp[118] = sp[102] * sp[48];
    sp[119] = sp[102] * sp[52];
    sp[120] = (1 + sp[60]) * sp[14];
    sp[121] = (1 + sp[60]) * sp[18];
    sp[122] = (1 + sp[60]) * sp[21];
    sp[123] = sp[108] * sp[44];
    sp[124] = sp[108] * sp[48];
    sp[125] = sp[108] * sp[52];
    sp[126] = -1 * sp[123] + sp[114];
    sp[127] = -1 * sp[124] + sp[115];
    sp[128] = -1 * sp[125] + sp[116];
    sp[129] = -1 * sp[120] + sp[117];
    sp[130] = -1 * sp[121] + sp[118];
    sp[131] = -1 * sp[122] + sp[119];
    sp[132] = w0_d0_c0 * sp[27];
    sp[133] = w0_d1_c0 * sp[32];
    sp[134] = sp[132] + sp[133];
    sp[135] = w0_d2_c0 * sp[38];
    sp[136] = sp[134] + sp[135];
    sp[137] = sp[136] * sp[126];
    sp[138] = sp[136] * sp[127];
    sp[139] = sp[128] * sp[136];
    sp[140] = sp[129] * sp[136];
    sp[141] = sp[130] * sp[136];
    sp[142] = sp[131] * sp[136];
    sp[143] = sp[86] + sp[137];
    sp[144] = sp[87] + sp[138];
    sp[145] = sp[88] + sp[139];
    sp[146] = sp[89] + sp[140];
    sp[147] = sp[90] + sp[141];
    sp[148] = sp[142] + sp[91];
    sp[149] = sp[111] + sp[95];
    sp[150] = sp[112] + sp[96];
    sp[151] = sp[97] + sp[113];
    sp[152] = sp[108] * sp[76];
    sp[153] = (1 + sp[40]) * sp[102];
    sp[154] = sp[152] + -1 * sp[153];
    sp[155] = sp[154] * sp[44];
    sp[156] = sp[154] * sp[48];
    sp[157] = sp[154] * sp[52];
    sp[158] = sp[108] * sp[27];
    sp[159] = sp[108] * sp[32];
    sp[160] = sp[108] * sp[38];
    sp[161] = sp[76] * sp[14];
    sp[162] = sp[76] * sp[18];
    sp[163] = sp[76] * sp[21];
    sp[164] = (1 + sp[40]) * sp[14];
    sp[165] = (1 + sp[40]) * sp[18];
    sp[166] = (1 + sp[40]) * sp[21];
    sp[167] = sp[102] * sp[27];
    sp[168] = sp[102] * sp[32];
    sp[169] = sp[102] * sp[38];
    sp[170] = -1 * sp[164] + sp[158];
    sp[171] = -1 * sp[165] + sp[159];
    sp[172] = -1 * sp[166] + sp[160];
    sp[173] = -1 * sp[167] + sp[161];
    sp[174] = -1 * sp[168] + sp[162];
    sp[175] = -1 * sp[169] + sp[163];
    sp[176] = w0_d0_c0 * sp[44];
    sp[177] = w0_d1_c0 * sp[48];
    sp[178] = sp[176] + sp[177];
    sp[179] = w0_d2_c0 * sp[52];
    sp[180] = sp[178] + sp[179];
    sp[181] = sp[170] * sp[180];
    sp[182] = sp[171] * sp[180];
    sp[183] = sp[180] * sp[172];
    sp[184] = sp[180] * sp[173];
    sp[185] = sp[180] * sp[174];
    sp[186] = sp[180] * sp[175];
    sp[187] = sp[143] + sp[181];
    sp[188] = sp[144] + sp[182];
    sp[189] = sp[145] + sp[183];
    sp[190] = sp[146] + sp[184];
    sp[191] = sp[147] + sp[185];
    sp[192] = sp[148] + sp[186];
    sp[193] = sp[149] + sp[155];
    sp[194] = sp[150] + sp[156];
    sp[195] = sp[151] + sp[157];
    sp[196] = (1 + sp[23]) * sp[94];
    sp[197] = sp[110] * sp[136];
    sp[198] = sp[196] + sp[197];
    sp[199] = sp[154] * sp[180];
    sp[200] = sp[198] + sp[199];
    sp[201] = sp[187] / sp[200];
    sp[202] = sp[188] / sp[200];
    sp[203] = sp[189] / sp[200];
    sp[204] = sp[190] / sp[200];
    sp[205] = sp[191] / sp[200];
    sp[206] = sp[192] / sp[200];
    sp[207] = sp[193] / sp[200];
    sp[208] = sp[194] / sp[200];
    sp[209] = sp[195] / sp[200];
    sp[210] = sp[201] * w[3][0];
    sp[211] = sp[202] * w[3][0];
    sp[212] = sp[203] * w[3][0];
    sp[213] = sp[204] * w[3][0];
    sp[214] = sp[205] * w[3][0];
    sp[215] = sp[206] * w[3][0];
    sp[216] = sp[207] * w[3][0];
    sp[217] = sp[208] * w[3][0];
    sp[218] = sp[209] * w[3][0];
    sp[219] = (1 + sp[23]) * sp[14];
    sp[220] = (1 + sp[23]) * sp[18];
    sp[221] = (1 + sp[23]) * sp[21];
    sp[222] = sp[219] + sp[219];
    sp[223] = sp[220] + sp[220];
    sp[224] = sp[221] + sp[221];
    sp[225] = sp[108] * sp[14];
    sp[226] = sp[108] * sp[18];
    sp[227] = sp[108] * sp[21];
    sp[228] = sp[225] + sp[225];
    sp[229] = sp[226] + sp[226];
    sp[230] = sp[227] + sp[227];
    sp[231] = sp[102] * sp[14];
    sp[232] = sp[102] * sp[18];
    sp[233] = sp[102] * sp[21];
    sp[234] = sp[231] + sp[231];
    sp[235] = sp[232] + sp[232];
    sp[236] = sp[233] + sp[233];
    sp[237] = sp[136] * sp[27];
    sp[238] = sp[136] * sp[32];
    sp[239] = sp[136] * sp[38];
    sp[240] = sp[237] + sp[237];
    sp[241] = sp[238] + sp[238];
    sp[242] = sp[239] + sp[239];
    sp[243] = (1 + sp[40]) * sp[27];
    sp[244] = (1 + sp[40]) * sp[32];
    sp[245] = (1 + sp[40]) * sp[38];
    sp[246] = sp[243] + sp[243];
    sp[247] = sp[244] + sp[244];
    sp[248] = sp[245] + sp[245];
    sp[249] = sp[76] * sp[27];
    sp[250] = sp[76] * sp[32];
    sp[251] = sp[76] * sp[38];
    sp[252] = sp[249] + sp[249];
    sp[253] = sp[250] + sp[250];
    sp[254] = sp[251] + sp[251];
    sp[255] = sp[252] + sp[234];
    sp[256] = sp[253] + sp[235];
    sp[257] = sp[236] + sp[254];
    sp[258] = sp[246] + sp[228];
    sp[259] = sp[247] + sp[229];
    sp[260] = sp[230] + sp[248];
    sp[261] = sp[240] + sp[222];
    sp[262] = sp[241] + sp[223];
    sp[263] = sp[224] + sp[242];
    sp[264] = sp[180] * sp[44];
    sp[265] = sp[180] * sp[48];
    sp[266] = sp[180] * sp[52];
    sp[267] = sp[264] + sp[264];
    sp[268] = sp[265] + sp[265];
    sp[269] = sp[266] + sp[266];
    sp[270] = sp[68] * sp[44];
    sp[271] = sp[68] * sp[48];
    sp[272] = sp[68] * sp[52];
    sp[273] = sp[270] + sp[270];
    sp[274] = sp[271] + sp[271];
    sp[275] = sp[272] + sp[272];
    sp[276] = (1 + sp[60]) * sp[44];
    sp[277] = (1 + sp[60]) * sp[48];
    sp[278] = (1 + sp[60]) * sp[52];
    sp[279] = sp[276] + sp[276];
    sp[280] = sp[277] + sp[277];
    sp[281] = sp[278] + sp[278];
    sp[282] = sp[255] + sp[279];
    sp[283] = sp[256] + sp[280];
    sp[284] = sp[257] + sp[281];
    sp[285] = sp[258] + sp[273];
    sp[286] = sp[259] + sp[274];
    sp[287] = sp[260] + sp[275];
    sp[288] = sp[261] + sp[267];
    sp[289] = sp[262] + sp[268];
    sp[290] = sp[263] + sp[269];
    sp[291] = sp[282] * (w[3][0] / 2);
    sp[292] = sp[283] * (w[3][0] / 2);
    sp[293] = sp[284] * (w[3][0] / 2);
    sp[294] = sp[285] * (w[3][0] / 2);
    sp[295] = sp[286] * (w[3][0] / 2);
    sp[296] = sp[287] * (w[3][0] / 2);
    sp[297] = sp[288] * (w[3][0] / 2);
    sp[298] = sp[289] * (w[3][0] / 2);
    sp[299] = sp[290] * (w[3][0] / 2);
    sp[300] = -1 * sp[210] + sp[291];
    sp[301] = -1 * sp[211] + sp[292];
    sp[302] = -1 * sp[212] + sp[293];
    sp[303] = -1 * sp[213] + sp[294];
    sp[304] = -1 * sp[214] + sp[295];
    sp[305] = -1 * sp[215] + sp[296];
    sp[306] = -1 * sp[216] + sp[297];
    sp[307] = -1 * sp[217] + sp[298];
    sp[308] = -1 * sp[218] + sp[299];
    sp[309] = std::log(sp[200]);
    sp[310] = 2 * sp[201] * sp[309];
    sp[311] = 2 * sp[202] * sp[309];
    sp[312] = 2 * sp[203] * sp[309];
    sp[313] = 2 * sp[204] * sp[309];
    sp[314] = 2 * sp[205] * sp[309];
    sp[315] = 2 * sp[206] * sp[309];
    sp[316] = 2 * sp[207] * sp[309];
    sp[317] = 2 * sp[208] * sp[309];
    sp[318] = 2 * sp[209] * sp[309];
    sp[319] = sp[310] * (w[4][0] / 2);
    sp[320] = sp[311] * (w[4][0] / 2);
    sp[321] = sp[312] * (w[4][0] / 2);
    sp[322] = sp[313] * (w[4][0] / 2);
    sp[323] = sp[314] * (w[4][0] / 2);
    sp[324] = sp[315] * (w[4][0] / 2);
    sp[325] = sp[316] * (w[4][0] / 2);
    sp[326] = sp[317] * (w[4][0] / 2);
    sp[327] = sp[318] * (w[4][0] / 2);
    sp[328] = sp[300] + sp[319];
    sp[329] = sp[301] + sp[320];
    sp[330] = sp[302] + sp[321];
    sp[331] = sp[303] + sp[322];
    sp[332] = sp[304] + sp[323];
    sp[333] = sp[305] + sp[324];
    sp[334] = sp[306] + sp[325];
    sp[335] = sp[307] + sp[326];
    sp[336] = sp[308] + sp[327];
    sp[337] = std::abs(sp[13]);
    sp[338] = sp[328] * sp[337];
    sp[339] = sp[329] * sp[337];
    sp[340] = sp[330] * sp[337];
    sp[341] = sp[331] * sp[337];
    sp[342] = sp[332] * sp[337];
    sp[343] = sp[333] * sp[337];
    sp[344] = sp[334] * sp[337];
    sp[345] = sp[335] * sp[337];
    sp[346] = sp[336] * sp[337];
    alignas(32) double BF0[4] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[4] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE32_C0_Q4[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE32_C0_Q4[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE32_C0_Q4[0][iq][ic];
        alignas(32) double sv4[3];
        sv4[0] = -1 * w1_c0 * sp[337];
        sv4[1] = -1 * w1_c1 * sp[337];
        sv4[2] = -1 * w1_c2 * sp[337];
        const double fw0 = sv4[0] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF0[i] += fw0 * FE32_C0_Q4[0][iq][i];
        const double fw1 = sv4[1] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE32_C0_Q4[0][iq][i];
        const double fw2 = sv4[2] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF2[i] += fw2 * FE32_C0_Q4[0][iq][i];
    }
    A[0] = sp[344] * PI0[0][0] + sp[345] * PI0[0][0] + sp[346] * PI0[0][0];
    A[1] = sp[344] * PI0[0][1];
    A[2] = sp[345] * PI0[0][1];
    A[3] = sp[346] * PI0[0][1];
    A[4] = sp[341] * PI0[0][0] + sp[342] * PI0[0][0] + sp[343] * PI0[0][0];
    A[5] = sp[341] * PI0[0][1];
    A[6] = sp[342] * PI0[0][1];
    A[7] = sp[343] * PI0[0][1];
    A[8] = sp[338] * PI0[0][0] + sp[339] * PI0[0][0] + sp[340] * PI0[0][0];
    A[9] = sp[338] * PI0[0][1];
    A[10] = sp[339] * PI0[0][1];
    A[11] = sp[340] * PI0[0][1];
    for (int i = 0; i < 4; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF1[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF2[i];
  }

};


class hyperelasticity_exterior_facet_integral_0_otherwise: public ufc::exterior_facet_integral
{
public:

  hyperelasticity_exterior_facet_integral_0_otherwise() : ufc::exterior_facet_integral()
  {

  }

  ~hyperelasticity_exterior_facet_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({false, false, true, false, false});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights3[3] = { 0.1666666666666667, 0.1666666666666667, 0.1666666666666667 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE14_C0_D001_F_Q3[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE14_C0_F_Q3[4][3][4] =
        { { { 0.0, 0.6666666666666666, 0.1666666666666667, 0.1666666666666666 },
            { 0.0, 0.1666666666666668, 0.1666666666666667, 0.6666666666666666 },
            { 0.0, 0.1666666666666668, 0.6666666666666666, 0.1666666666666667 } },
          { { 0.6666666666666667, 0.0, 0.1666666666666667, 0.1666666666666666 },
            { 0.1666666666666668, 0.0, 0.1666666666666667, 0.6666666666666666 },
            { 0.1666666666666668, 0.0, 0.6666666666666666, 0.1666666666666667 } },
          { { 0.6666666666666669, 0.1666666666666667, 0.0, 0.1666666666666666 },
            { 0.1666666666666669, 0.1666666666666667, 0.0, 0.6666666666666666 },
            { 0.1666666666666668, 0.6666666666666666, 0.0, 0.1666666666666667 } },
          { { 0.6666666666666669, 0.1666666666666666, 0.1666666666666667, 0.0 },
            { 0.1666666666666668, 0.1666666666666666, 0.6666666666666666, 0.0 },
            { 0.1666666666666667, 0.6666666666666665, 0.1666666666666667, 0.0 } } };
    // Unstructured piecewise computations
    const double J_c3 = coordinate_dofs[1] * FE14_C0_D001_F_Q3[0][0][0] + coordinate_dofs[4] * FE14_C0_D001_F_Q3[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE14_C0_D001_F_Q3[0][0][0] + coordinate_dofs[7] * FE14_C0_D001_F_Q3[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE14_C0_D001_F_Q3[0][0][0] + coordinate_dofs[10] * FE14_C0_D001_F_Q3[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE14_C0_D001_F_Q3[0][0][0] + coordinate_dofs[5] * FE14_C0_D001_F_Q3[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE14_C0_D001_F_Q3[0][0][0] + coordinate_dofs[8] * FE14_C0_D001_F_Q3[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE14_C0_D001_F_Q3[0][0][0] + coordinate_dofs[11] * FE14_C0_D001_F_Q3[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE14_C0_D001_F_Q3[0][0][0] + coordinate_dofs[3] * FE14_C0_D001_F_Q3[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE14_C0_D001_F_Q3[0][0][0] + coordinate_dofs[6] * FE14_C0_D001_F_Q3[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE14_C0_D001_F_Q3[0][0][0] + coordinate_dofs[9] * FE14_C0_D001_F_Q3[0][0][1];
    alignas(32) double sp[45];
    sp[0] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c3;
    sp[1] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c4;
    sp[2] = sp[0] + sp[1];
    sp[3] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[4] = sp[2] + sp[3];
    sp[5] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c6;
    sp[6] = tetrahedron_reference_facet_jacobian[facet][1][1] * J_c7;
    sp[7] = sp[5] + sp[6];
    sp[8] = tetrahedron_reference_facet_jacobian[facet][2][1] * J_c8;
    sp[9] = sp[7] + sp[8];
    sp[10] = sp[4] * sp[9];
    sp[11] = tetrahedron_reference_facet_jacobian[facet][0][1] * J_c3;
    sp[12] = J_c4 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[13] = sp[11] + sp[12];
    sp[14] = J_c5 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[15] = sp[13] + sp[14];
    sp[16] = tetrahedron_reference_facet_jacobian[facet][0][0] * J_c6;
    sp[17] = tetrahedron_reference_facet_jacobian[facet][1][0] * J_c7;
    sp[18] = sp[16] + sp[17];
    sp[19] = tetrahedron_reference_facet_jacobian[facet][2][0] * J_c8;
    sp[20] = sp[18] + sp[19];
    sp[21] = sp[15] * sp[20];
    sp[22] = sp[10] + -1 * sp[21];
    sp[23] = sp[22] * sp[22];
    sp[24] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][1];
    sp[25] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][1];
    sp[26] = sp[24] + sp[25];
    sp[27] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][1];
    sp[28] = sp[26] + sp[27];
    sp[29] = sp[28] * sp[20];
    sp[30] = J_c0 * tetrahedron_reference_facet_jacobian[facet][0][0];
    sp[31] = J_c1 * tetrahedron_reference_facet_jacobian[facet][1][0];
    sp[32] = sp[30] + sp[31];
    sp[33] = J_c2 * tetrahedron_reference_facet_jacobian[facet][2][0];
    sp[34] = sp[32] + sp[33];
    sp[35] = sp[34] * sp[9];
    sp[36] = sp[29] + -1 * sp[35];
    sp[37] = sp[36] * sp[36];
    sp[38] = sp[23] + sp[37];
    sp[39] = sp[34] * sp[15];
    sp[40] = sp[4] * sp[28];
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] * sp[41];
    sp[43] = sp[38] + sp[42];
    sp[44] = std::sqrt(sp[43]);
    alignas(32) double BF0[4] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[4] = {};
    for (int iq = 0; iq < 3; ++iq)
    {
        // Quadrature loop body setup (num_points=3)
        // Unstructured varying computations for num_points=3
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c0 += w[2][ic] * FE14_C0_F_Q3[facet][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c1 += w[2][ic + 4] * FE14_C0_F_Q3[facet][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w2_c2 += w[2][ic + 8] * FE14_C0_F_Q3[facet][iq][ic];
        alignas(32) double sv3[3];
        sv3[0] = -1 * w2_c0 * sp[44];
        sv3[1] = -1 * w2_c1 * sp[44];
        sv3[2] = -1 * w2_c2 * sp[44];
        const double fw0 = sv3[0] * weights3[iq];
        for (int i = 0; i < 4; ++i)
            BF0[i] += fw0 * FE14_C0_F_Q3[facet][iq][i];
        const double fw1 = sv3[1] * weights3[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE14_C0_F_Q3[facet][iq][i];
        const double fw2 = sv3[2] * weights3[iq];
        for (int i = 0; i < 4; ++i)
            BF2[i] += fw2 * FE14_C0_F_Q3[facet][iq][i];
    }
    std::fill(A, A + 12, 0.0);
    for (int i = 0; i < 4; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF1[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF2[i];
  }

};


class hyperelasticity_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  hyperelasticity_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~hyperelasticity_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 0
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 0
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           0
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE35_C0_D001_Q1[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[1][2][2] =
        { { { 0.1666666666666667, -0.1666666666666667 },
            { -0.1666666666666667, 0.1666666666666667 } } };
    // Unstructured piecewise computations
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE35_C0_D001_Q1[0][0][ic];
    const double J_c4 = coordinate_dofs[1] * FE35_C0_D001_Q1[0][0][0] + coordinate_dofs[7] * FE35_C0_D001_Q1[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE35_C0_D001_Q1[0][0][0] + coordinate_dofs[11] * FE35_C0_D001_Q1[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE35_C0_D001_Q1[0][0][0] + coordinate_dofs[10] * FE35_C0_D001_Q1[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE35_C0_D001_Q1[0][0][0] + coordinate_dofs[8] * FE35_C0_D001_Q1[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE35_C0_D001_Q1[0][0][0] + coordinate_dofs[3] * FE35_C0_D001_Q1[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE35_C0_D001_Q1[0][0][0] + coordinate_dofs[6] * FE35_C0_D001_Q1[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE35_C0_D001_Q1[0][0][0] + coordinate_dofs[5] * FE35_C0_D001_Q1[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE35_C0_D001_Q1[0][0][0] + coordinate_dofs[4] * FE35_C0_D001_Q1[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE35_C0_D001_Q1[0][0][0] + coordinate_dofs[9] * FE35_C0_D001_Q1[0][0][1];
    const double w0_d1_c0 = w[0][0] * FE35_C0_D001_Q1[0][0][0] + w[0][2] * FE35_C0_D001_Q1[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE35_C0_D001_Q1[0][0][0] + w[0][3] * FE35_C0_D001_Q1[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE35_C0_D001_Q1[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE35_C0_D001_Q1[0][0][0] + w[0][6] * FE35_C0_D001_Q1[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE35_C0_D001_Q1[0][0][0] + w[0][7] * FE35_C0_D001_Q1[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE35_C0_D001_Q1[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE35_C0_D001_Q1[0][0][0] + w[0][10] * FE35_C0_D001_Q1[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE35_C0_D001_Q1[0][0][0] + w[0][11] * FE35_C0_D001_Q1[0][0][1];
    alignas(32) double sp[1265];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = w0_d0_c0 * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = w0_d1_c0 * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = w0_d2_c0 * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = J_c1 * J_c5;
    sp[25] = J_c2 * J_c4;
    sp[26] = sp[24] + -1 * sp[25];
    sp[27] = sp[26] / sp[13];
    sp[28] = J_c2 * J_c3;
    sp[29] = J_c0 * J_c5;
    sp[30] = sp[28] + -1 * sp[29];
    sp[31] = sp[30] / sp[13];
    sp[32] = J_c0 * J_c4;
    sp[33] = J_c1 * J_c3;
    sp[34] = sp[32] + -1 * sp[33];
    sp[35] = sp[34] / sp[13];
    sp[36] = J_c2 * J_c7;
    sp[37] = J_c8 * (-1 * J_c1);
    sp[38] = sp[36] + sp[37];
    sp[39] = sp[38] / sp[13];
    sp[40] = J_c0 * J_c8;
    sp[41] = J_c6 * (-1 * J_c2);
    sp[42] = sp[40] + sp[41];
    sp[43] = sp[42] / sp[13];
    sp[44] = J_c1 * J_c6;
    sp[45] = J_c0 * J_c7;
    sp[46] = sp[44] + -1 * sp[45];
    sp[47] = sp[46] / sp[13];
    sp[48] = sp[39] * sp[27];
    sp[49] = sp[43] * sp[27];
    sp[50] = sp[27] * sp[47];
    sp[51] = sp[39] * sp[31];
    sp[52] = sp[43] * sp[31];
    sp[53] = sp[31] * sp[47];
    sp[54] = sp[39] * sp[35];
    sp[55] = sp[43] * sp[35];
    sp[56] = sp[35] * sp[47];
    sp[57] = -1 * sp[48] + sp[48];
    sp[58] = -1 * sp[51] + sp[49];
    sp[59] = -1 * sp[54] + sp[50];
    sp[60] = -1 * sp[49] + sp[51];
    sp[61] = -1 * sp[52] + sp[52];
    sp[62] = -1 * sp[55] + sp[53];
    sp[63] = -1 * sp[50] + sp[54];
    sp[64] = -1 * sp[53] + sp[55];
    sp[65] = -1 * sp[56] + sp[56];
    sp[66] = (1 + sp[23]) * sp[57];
    sp[67] = (1 + sp[23]) * sp[58];
    sp[68] = (1 + sp[23]) * sp[59];
    sp[69] = (1 + sp[23]) * sp[60];
    sp[70] = (1 + sp[23]) * sp[61];
    sp[71] = (1 + sp[23]) * sp[62];
    sp[72] = (1 + sp[23]) * sp[63];
    sp[73] = (1 + sp[23]) * sp[64];
    sp[74] = (1 + sp[23]) * sp[65];
    sp[75] = w0_d0_c1 * sp[39];
    sp[76] = w0_d1_c1 * sp[43];
    sp[77] = sp[75] + sp[76];
    sp[78] = w0_d2_c1 * sp[47];
    sp[79] = sp[77] + sp[78];
    sp[80] = (1 + sp[79]) * sp[27];
    sp[81] = (1 + sp[79]) * sp[31];
    sp[82] = (1 + sp[79]) * sp[35];
    sp[83] = w0_d0_c2 * sp[27];
    sp[84] = w0_d1_c2 * sp[31];
    sp[85] = sp[83] + sp[84];
    sp[86] = w0_d2_c2 * sp[35];
    sp[87] = sp[85] + sp[86];
    sp[88] = (1 + sp[87]) * sp[39];
    sp[89] = (1 + sp[87]) * sp[43];
    sp[90] = (1 + sp[87]) * sp[47];
    sp[91] = w0_d0_c1 * sp[27];
    sp[92] = w0_d1_c1 * sp[31];
    sp[93] = sp[91] + sp[92];
    sp[94] = w0_d2_c1 * sp[35];
    sp[95] = sp[93] + sp[94];
    sp[96] = sp[95] * sp[39];
    sp[97] = sp[95] * sp[43];
    sp[98] = sp[95] * sp[47];
    sp[99] = w0_d0_c2 * sp[39];
    sp[100] = w0_d1_c2 * sp[43];
    sp[101] = sp[99] + sp[100];
    sp[102] = w0_d2_c2 * sp[47];
    sp[103] = sp[101] + sp[102];
    sp[104] = sp[103] * sp[27];
    sp[105] = sp[103] * sp[31];
    sp[106] = sp[103] * sp[35];
    sp[107] = -1 * sp[104] + sp[88];
    sp[108] = -1 * sp[105] + sp[89];
    sp[109] = -1 * sp[106] + sp[90];
    sp[110] = -1 * sp[96] + sp[80];
    sp[111] = -1 * sp[97] + sp[81];
    sp[112] = -1 * sp[98] + sp[82];
    sp[113] = sp[107] * sp[14];
    sp[114] = sp[107] * sp[18];
    sp[115] = sp[107] * sp[21];
    sp[116] = sp[108] * sp[14];
    sp[117] = sp[108] * sp[18];
    sp[118] = sp[108] * sp[21];
    sp[119] = sp[109] * sp[14];
    sp[120] = sp[109] * sp[18];
    sp[121] = sp[109] * sp[21];
    sp[122] = sp[110] * sp[14];
    sp[123] = sp[110] * sp[18];
    sp[124] = sp[110] * sp[21];
    sp[125] = sp[111] * sp[14];
    sp[126] = sp[111] * sp[18];
    sp[127] = sp[111] * sp[21];
    sp[128] = sp[112] * sp[14];
    sp[129] = sp[112] * sp[18];
    sp[130] = sp[112] * sp[21];
    sp[131] = sp[95] * sp[14];
    sp[132] = sp[95] * sp[18];
    sp[133] = sp[95] * sp[21];
    sp[134] = w0_d0_c2 * sp[14];
    sp[135] = w0_d1_c2 * sp[18];
    sp[136] = sp[134] + sp[135];
    sp[137] = w0_d2_c2 * sp[21];
    sp[138] = sp[136] + sp[137];
    sp[139] = sp[138] * sp[27];
    sp[140] = sp[138] * sp[31];
    sp[141] = sp[138] * sp[35];
    sp[142] = (1 + sp[87]) * sp[14];
    sp[143] = (1 + sp[87]) * sp[18];
    sp[144] = (1 + sp[87]) * sp[21];
    sp[145] = w0_d0_c1 * sp[14];
    sp[146] = w0_d1_c1 * sp[18];
    sp[147] = sp[145] + sp[146];
    sp[148] = w0_d2_c1 * sp[21];
    sp[149] = sp[147] + sp[148];
    sp[150] = sp[149] * sp[27];
    sp[151] = sp[149] * sp[31];
    sp[152] = sp[149] * sp[35];
    sp[153] = -1 * sp[142] + sp[139];
    sp[154] = -1 * sp[143] + sp[140];
    sp[155] = -1 * sp[144] + sp[141];
    sp[156] = -1 * sp[150] + sp[131];
    sp[157] = -1 * sp[151] + sp[132];
    sp[158] = -1 * sp[152] + sp[133];
    sp[159] = sp[153] * sp[39];
    sp[160] = sp[153] * sp[43];
    sp[161] = sp[153] * sp[47];
    sp[162] = sp[154] * sp[39];
    sp[163] = sp[154] * sp[43];
    sp[164] = sp[154] * sp[47];
    sp[165] = sp[155] * sp[39];
    sp[166] = sp[155] * sp[43];
    sp[167] = sp[155] * sp[47];
    sp[168] = sp[156] * sp[39];
    sp[169] = sp[156] * sp[43];
    sp[170] = sp[156] * sp[47];
    sp[171] = sp[157] * sp[39];
    sp[172] = sp[157] * sp[43];
    sp[173] = sp[157] * sp[47];
    sp[174] = sp[158] * sp[39];
    sp[175] = sp[158] * sp[43];
    sp[176] = sp[158] * sp[47];
    sp[177] = sp[27] * sp[14];
    sp[178] = sp[27] * sp[18];
    sp[179] = sp[27] * sp[21];
    sp[180] = sp[31] * sp[14];
    sp[181] = sp[31] * sp[18];
    sp[182] = sp[31] * sp[21];
    sp[183] = sp[35] * sp[14];
    sp[184] = sp[35] * sp[18];
    sp[185] = sp[35] * sp[21];
    sp[186] = -1 * sp[177] + sp[177];
    sp[187] = -1 * sp[178] + sp[180];
    sp[188] = -1 * sp[179] + sp[183];
    sp[189] = -1 * sp[180] + sp[178];
    sp[190] = -1 * sp[181] + sp[181];
    sp[191] = -1 * sp[182] + sp[184];
    sp[192] = -1 * sp[183] + sp[179];
    sp[193] = -1 * sp[184] + sp[182];
    sp[194] = -1 * sp[185] + sp[185];
    sp[195] = w0_d0_c0 * sp[39];
    sp[196] = w0_d1_c0 * sp[43];
    sp[197] = sp[195] + sp[196];
    sp[198] = w0_d2_c0 * sp[47];
    sp[199] = sp[197] + sp[198];
    sp[200] = sp[199] * sp[186];
    sp[201] = sp[199] * sp[187];
    sp[202] = sp[199] * sp[188];
    sp[203] = sp[199] * sp[189];
    sp[204] = sp[199] * sp[190];
    sp[205] = sp[199] * sp[191];
    sp[206] = sp[192] * sp[199];
    sp[207] = sp[193] * sp[199];
    sp[208] = sp[194] * sp[199];
    sp[209] = sp[66] + sp[200];
    sp[210] = sp[67] + sp[201];
    sp[211] = sp[68] + sp[202];
    sp[212] = sp[168] + sp[122];
    sp[213] = sp[169] + sp[123];
    sp[214] = sp[124] + sp[170];
    sp[215] = sp[69] + sp[203];
    sp[216] = sp[70] + sp[204];
    sp[217] = sp[71] + sp[205];
    sp[218] = sp[171] + sp[125];
    sp[219] = sp[172] + sp[126];
    sp[220] = sp[127] + sp[173];
    sp[221] = sp[72] + sp[206];
    sp[222] = sp[73] + sp[207];
    sp[223] = sp[208] + sp[74];
    sp[224] = sp[174] + sp[128];
    sp[225] = sp[175] + sp[129];
    sp[226] = sp[130] + sp[176];
    sp[227] = sp[159] + sp[113];
    sp[228] = sp[160] + sp[114];
    sp[229] = sp[115] + sp[161];
    sp[230] = sp[162] + sp[116];
    sp[231] = sp[163] + sp[117];
    sp[232] = sp[118] + sp[164];
    sp[233] = sp[165] + sp[119];
    sp[234] = sp[166] + sp[120];
    sp[235] = sp[121] + sp[167];
    sp[236] = sp[149] * sp[39];
    sp[237] = sp[149] * sp[43];
    sp[238] = sp[149] * sp[47];
    sp[239] = sp[103] * sp[14];
    sp[240] = sp[103] * sp[18];
    sp[241] = sp[103] * sp[21];
    sp[242] = (1 + sp[79]) * sp[14];
    sp[243] = (1 + sp[79]) * sp[18];
    sp[244] = (1 + sp[79]) * sp[21];
    sp[245] = sp[138] * sp[39];
    sp[246] = sp[138] * sp[43];
    sp[247] = sp[138] * sp[47];
    sp[248] = -1 * sp[245] + sp[239];
    sp[249] = -1 * sp[246] + sp[240];
    sp[250] = -1 * sp[247] + sp[241];
    sp[251] = -1 * sp[242] + sp[236];
    sp[252] = -1 * sp[243] + sp[237];
    sp[253] = -1 * sp[244] + sp[238];
    sp[254] = sp[248] * sp[27];
    sp[255] = sp[248] * sp[31];
    sp[256] = sp[248] * sp[35];
    sp[257] = sp[249] * sp[27];
    sp[258] = sp[249] * sp[31];
    sp[259] = sp[249] * sp[35];
    sp[260] = sp[250] * sp[27];
    sp[261] = sp[250] * sp[31];
    sp[262] = sp[250] * sp[35];
    sp[263] = sp[251] * sp[27];
    sp[264] = sp[251] * sp[31];
    sp[265] = sp[251] * sp[35];
    sp[266] = sp[252] * sp[27];
    sp[267] = sp[252] * sp[31];
    sp[268] = sp[252] * sp[35];
    sp[269] = sp[253] * sp[27];
    sp[270] = sp[253] * sp[31];
    sp[271] = sp[253] * sp[35];
    sp[272] = sp[39] * sp[14];
    sp[273] = sp[43] * sp[14];
    sp[274] = sp[47] * sp[14];
    sp[275] = sp[39] * sp[18];
    sp[276] = sp[43] * sp[18];
    sp[277] = sp[47] * sp[18];
    sp[278] = sp[39] * sp[21];
    sp[279] = sp[43] * sp[21];
    sp[280] = sp[21] * sp[47];
    sp[281] = -1 * sp[272] + sp[272];
    sp[282] = -1 * sp[273] + sp[275];
    sp[283] = -1 * sp[274] + sp[278];
    sp[284] = -1 * sp[275] + sp[273];
    sp[285] = -1 * sp[276] + sp[276];
    sp[286] = -1 * sp[277] + sp[279];
    sp[287] = -1 * sp[278] + sp[274];
    sp[288] = -1 * sp[279] + sp[277];
    sp[289] = -1 * sp[280] + sp[280];
    sp[290] = w0_d0_c0 * sp[27];
    sp[291] = w0_d1_c0 * sp[31];
    sp[292] = sp[290] + sp[291];
    sp[293] = w0_d2_c0 * sp[35];
    sp[294] = sp[292] + sp[293];
    sp[295] = sp[294] * sp[281];
    sp[296] = sp[294] * sp[282];
    sp[297] = sp[294] * sp[283];
    sp[298] = sp[294] * sp[284];
    sp[299] = sp[294] * sp[285];
    sp[300] = sp[294] * sp[286];
    sp[301] = sp[294] * sp[287];
    sp[302] = sp[294] * sp[288];
    sp[303] = sp[294] * sp[289];
    sp[304] = sp[209] + sp[295];
    sp[305] = sp[210] + sp[296];
    sp[306] = sp[211] + sp[297];
    sp[307] = sp[212] + sp[263];
    sp[308] = sp[213] + sp[264];
    sp[309] = sp[214] + sp[265];
    sp[310] = sp[215] + sp[298];
    sp[311] = sp[216] + sp[299];
    sp[312] = sp[217] + sp[300];
    sp[313] = sp[218] + sp[266];
    sp[314] = sp[219] + sp[267];
    sp[315] = sp[220] + sp[268];
    sp[316] = sp[221] + sp[301];
    sp[317] = sp[222] + sp[302];
    sp[318] = sp[223] + sp[303];
    sp[319] = sp[224] + sp[269];
    sp[320] = sp[225] + sp[270];
    sp[321] = sp[226] + sp[271];
    sp[322] = sp[227] + sp[254];
    sp[323] = sp[228] + sp[255];
    sp[324] = sp[229] + sp[256];
    sp[325] = sp[230] + sp[257];
    sp[326] = sp[231] + sp[258];
    sp[327] = sp[232] + sp[259];
    sp[328] = sp[233] + sp[260];
    sp[329] = sp[234] + sp[261];
    sp[330] = sp[235] + sp[262];
    sp[331] = (1 + sp[23]) * sp[110];
    sp[332] = (1 + sp[23]) * sp[111];
    sp[333] = (1 + sp[23]) * sp[112];
    sp[334] = (1 + sp[23]) * sp[107];
    sp[335] = (1 + sp[23]) * sp[108];
    sp[336] = (1 + sp[23]) * sp[109];
    sp[337] = (1 + sp[87]) * (1 + sp[79]);
    sp[338] = sp[95] * sp[103];
    sp[339] = sp[337] + -1 * sp[338];
    sp[340] = sp[339] * sp[14];
    sp[341] = sp[339] * sp[18];
    sp[342] = sp[339] * sp[21];
    sp[343] = sp[95] * sp[138];
    sp[344] = (1 + sp[87]) * sp[149];
    sp[345] = sp[343] + -1 * sp[344];
    sp[346] = sp[345] * sp[39];
    sp[347] = sp[345] * sp[43];
    sp[348] = sp[345] * sp[47];
    sp[349] = sp[199] * sp[156];
    sp[350] = sp[199] * sp[157];
    sp[351] = sp[158] * sp[199];
    sp[352] = sp[153] * sp[199];
    sp[353] = sp[154] * sp[199];
    sp[354] = sp[155] * sp[199];
    sp[355] = sp[331] + sp[349];
    sp[356] = sp[332] + sp[350];
    sp[357] = sp[333] + sp[351];
    sp[358] = sp[334] + sp[352];
    sp[359] = sp[335] + sp[353];
    sp[360] = sp[354] + sp[336];
    sp[361] = sp[346] + sp[340];
    sp[362] = sp[347] + sp[341];
    sp[363] = sp[342] + sp[348];
    sp[364] = sp[149] * sp[103];
    sp[365] = (1 + sp[79]) * sp[138];
    sp[366] = sp[364] + -1 * sp[365];
    sp[367] = sp[366] * sp[27];
    sp[368] = sp[366] * sp[31];
    sp[369] = sp[366] * sp[35];
    sp[370] = sp[251] * sp[294];
    sp[371] = sp[252] * sp[294];
    sp[372] = sp[294] * sp[253];
    sp[373] = sp[294] * sp[248];
    sp[374] = sp[294] * sp[249];
    sp[375] = sp[294] * sp[250];
    sp[376] = sp[355] + sp[370];
    sp[377] = sp[356] + sp[371];
    sp[378] = sp[357] + sp[372];
    sp[379] = sp[358] + sp[373];
    sp[380] = sp[359] + sp[374];
    sp[381] = sp[360] + sp[375];
    sp[382] = sp[361] + sp[367];
    sp[383] = sp[362] + sp[368];
    sp[384] = sp[363] + sp[369];
    sp[385] = (1 + sp[23]) * sp[339];
    sp[386] = sp[345] * sp[199];
    sp[387] = sp[385] + sp[386];
    sp[388] = sp[366] * sp[294];
    sp[389] = sp[387] + sp[388];
    sp[390] = sp[379] / sp[389];
    sp[391] = sp[380] / sp[389];
    sp[392] = sp[381] / sp[389];
    sp[393] = sp[376] / sp[389];
    sp[394] = sp[377] / sp[389];
    sp[395] = sp[378] / sp[389];
    sp[396] = sp[382] / sp[389];
    sp[397] = sp[383] / sp[389];
    sp[398] = sp[384] / sp[389];
    sp[399] = sp[376] * sp[390];
    sp[400] = sp[376] * sp[391];
    sp[401] = sp[376] * sp[392];
    sp[402] = sp[376] * sp[393];
    sp[403] = sp[376] * sp[394];
    sp[404] = sp[376] * sp[395];
    sp[405] = sp[376] * sp[396];
    sp[406] = sp[376] * sp[397];
    sp[407] = sp[376] * sp[398];
    sp[408] = sp[377] * sp[390];
    sp[409] = sp[377] * sp[391];
    sp[410] = sp[377] * sp[392];
    sp[411] = sp[377] * sp[393];
    sp[412] = sp[377] * sp[394];
    sp[413] = sp[377] * sp[395];
    sp[414] = sp[377] * sp[396];
    sp[415] = sp[377] * sp[397];
    sp[416] = sp[377] * sp[398];
    sp[417] = sp[378] * sp[390];
    sp[418] = sp[378] * sp[391];
    sp[419] = sp[378] * sp[392];
    sp[420] = sp[378] * sp[393];
    sp[421] = sp[378] * sp[394];
    sp[422] = sp[378] * sp[395];
    sp[423] = sp[378] * sp[396];
    sp[424] = sp[378] * sp[397];
    sp[425] = sp[378] * sp[398];
    sp[426] = sp[379] * sp[390];
    sp[427] = sp[379] * sp[391];
    sp[428] = sp[379] * sp[392];
    sp[429] = sp[379] * sp[393];
    sp[430] = sp[379] * sp[394];
    sp[431] = sp[379] * sp[395];
    sp[432] = sp[379] * sp[396];
    sp[433] = sp[379] * sp[397];
    sp[434] = sp[379] * sp[398];
    sp[435] = sp[380] * sp[390];
    sp[436] = sp[380] * sp[391];
    sp[437] = sp[380] * sp[392];
    sp[438] = sp[380] * sp[393];
    sp[439] = sp[380] * sp[394];
    sp[440] = sp[380] * sp[395];
    sp[441] = sp[380] * sp[396];
    sp[442] = sp[380] * sp[397];
    sp[443] = sp[380] * sp[398];
    sp[444] = sp[381] * sp[390];
    sp[445] = sp[381] * sp[391];
    sp[446] = sp[381] * sp[392];
    sp[447] = sp[381] * sp[393];
    sp[448] = sp[381] * sp[394];
    sp[449] = sp[381] * sp[395];
    sp[450] = sp[381] * sp[396];
    sp[451] = sp[381] * sp[397];
    sp[452] = sp[381] * sp[398];
    sp[453] = sp[382] * sp[390];
    sp[454] = sp[382] * sp[391];
    sp[455] = sp[382] * sp[392];
    sp[456] = sp[382] * sp[393];
    sp[457] = sp[382] * sp[394];
    sp[458] = sp[382] * sp[395];
    sp[459] = sp[382] * sp[396];
    sp[460] = sp[382] * sp[397];
    sp[461] = sp[382] * sp[398];
    sp[462] = sp[383] * sp[390];
    sp[463] = sp[383] * sp[391];
    sp[464] = sp[383] * sp[392];
    sp[465] = sp[383] * sp[393];
    sp[466] = sp[383] * sp[394];
    sp[467] = sp[383] * sp[395];
    sp[468] = sp[383] * sp[396];
    sp[469] = sp[383] * sp[397];
    sp[470] = sp[383] * sp[398];
    sp[471] = sp[384] * sp[390];
    sp[472] = sp[384] * sp[391];
    sp[473] = sp[384] * sp[392];
    sp[474] = sp[384] * sp[393];
    sp[475] = sp[384] * sp[394];
    sp[476] = sp[384] * sp[395];
    sp[477] = sp[384] * sp[396];
    sp[478] = sp[384] * sp[397];
    sp[479] = sp[384] * sp[398];
    sp[480] = sp[304] + -1 * sp[399];
    sp[481] = sp[305] + -1 * sp[400];
    sp[482] = sp[306] + -1 * sp[401];
    sp[483] = sp[307] + -1 * sp[405];
    sp[484] = sp[308] + -1 * sp[406];
    sp[485] = sp[309] + -1 * sp[407];
    sp[486] = sp[310] + -1 * sp[408];
    sp[487] = sp[311] + -1 * sp[409];
    sp[488] = sp[312] + -1 * sp[410];
    sp[489] = sp[313] + -1 * sp[414];
    sp[490] = sp[314] + -1 * sp[415];
    sp[491] = sp[315] + -1 * sp[416];
    sp[492] = sp[316] + -1 * sp[417];
    sp[493] = sp[317] + -1 * sp[418];
    sp[494] = sp[318] + -1 * sp[419];
    sp[495] = sp[319] + -1 * sp[423];
    sp[496] = sp[320] + -1 * sp[424];
    sp[497] = sp[321] + -1 * sp[425];
    sp[498] = sp[322] + -1 * sp[453];
    sp[499] = sp[323] + -1 * sp[462];
    sp[500] = sp[324] + -1 * sp[471];
    sp[501] = sp[325] + -1 * sp[454];
    sp[502] = sp[326] + -1 * sp[463];
    sp[503] = sp[327] + -1 * sp[472];
    sp[504] = sp[328] + -1 * sp[455];
    sp[505] = sp[329] + -1 * sp[464];
    sp[506] = sp[330] + -1 * sp[473];
    sp[507] = sp[304] + -1 * sp[429];
    sp[508] = sp[305] + -1 * sp[438];
    sp[509] = sp[306] + -1 * sp[447];
    sp[510] = sp[307] + -1 * sp[456];
    sp[511] = sp[308] + -1 * sp[465];
    sp[512] = sp[309] + -1 * sp[474];
    sp[513] = sp[310] + -1 * sp[430];
    sp[514] = sp[311] + -1 * sp[439];
    sp[515] = sp[312] + -1 * sp[448];
    sp[516] = sp[313] + -1 * sp[457];
    sp[517] = sp[314] + -1 * sp[466];
    sp[518] = sp[315] + -1 * sp[475];
    sp[519] = sp[316] + -1 * sp[431];
    sp[520] = sp[317] + -1 * sp[440];
    sp[521] = sp[318] + -1 * sp[449];
    sp[522] = sp[319] + -1 * sp[458];
    sp[523] = sp[320] + -1 * sp[467];
    sp[524] = sp[321] + -1 * sp[476];
    sp[525] = sp[322] + -1 * sp[432];
    sp[526] = sp[323] + -1 * sp[433];
    sp[527] = sp[324] + -1 * sp[434];
    sp[528] = sp[325] + -1 * sp[441];
    sp[529] = sp[326] + -1 * sp[442];
    sp[530] = sp[327] + -1 * sp[443];
    sp[531] = sp[328] + -1 * sp[450];
    sp[532] = sp[329] + -1 * sp[451];
    sp[533] = sp[330] + -1 * sp[452];
    sp[534] = sp[480] / sp[389];
    sp[535] = sp[481] / sp[389];
    sp[536] = sp[482] / sp[389];
    sp[537] = -1 * sp[402] / sp[389];
    sp[538] = -1 * sp[403] / sp[389];
    sp[539] = -1 * sp[404] / sp[389];
    sp[540] = sp[483] / sp[389];
    sp[541] = sp[484] / sp[389];
    sp[542] = sp[485] / sp[389];
    sp[543] = sp[486] / sp[389];
    sp[544] = sp[487] / sp[389];
    sp[545] = sp[488] / sp[389];
    sp[546] = -1 * sp[411] / sp[389];
    sp[547] = -1 * sp[412] / sp[389];
    sp[548] = -1 * sp[413] / sp[389];
    sp[549] = sp[489] / sp[389];
    sp[550] = sp[490] / sp[389];
    sp[551] = sp[491] / sp[389];
    sp[552] = sp[492] / sp[389];
    sp[553] = sp[493] / sp[389];
    sp[554] = sp[494] / sp[389];
    sp[555] = -1 * sp[420] / sp[389];
    sp[556] = -1 * sp[421] / sp[389];
    sp[557] = -1 * sp[422] / sp[389];
    sp[558] = sp[495] / sp[389];
    sp[559] = sp[496] / sp[389];
    sp[560] = sp[497] / sp[389];
    sp[561] = -1 * sp[426] / sp[389];
    sp[562] = -1 * sp[435] / sp[389];
    sp[563] = -1 * sp[444] / sp[389];
    sp[564] = sp[498] / sp[389];
    sp[565] = sp[499] / sp[389];
    sp[566] = sp[500] / sp[389];
    sp[567] = -1 * sp[427] / sp[389];
    sp[568] = -1 * sp[436] / sp[389];
    sp[569] = -1 * sp[445] / sp[389];
    sp[570] = sp[501] / sp[389];
    sp[571] = sp[502] / sp[389];
    sp[572] = sp[503] / sp[389];
    sp[573] = -1 * sp[428] / sp[389];
    sp[574] = -1 * sp[437] / sp[389];
    sp[575] = -1 * sp[446] / sp[389];
    sp[576] = sp[504] / sp[389];
    sp[577] = sp[505] / sp[389];
    sp[578] = sp[506] / sp[389];
    sp[579] = sp[507] / sp[389];
    sp[580] = sp[508] / sp[389];
    sp[581] = sp[509] / sp[389];
    sp[582] = sp[510] / sp[389];
    sp[583] = sp[511] / sp[389];
    sp[584] = sp[512] / sp[389];
    sp[585] = sp[513] / sp[389];
    sp[586] = sp[514] / sp[389];
    sp[587] = sp[515] / sp[389];
    sp[588] = sp[516] / sp[389];
    sp[589] = sp[517] / sp[389];
    sp[590] = sp[518] / sp[389];
    sp[591] = sp[519] / sp[389];
    sp[592] = sp[520] / sp[389];
    sp[593] = sp[521] / sp[389];
    sp[594] = sp[522] / sp[389];
    sp[595] = sp[523] / sp[389];
    sp[596] = sp[524] / sp[389];
    sp[597] = sp[525] / sp[389];
    sp[598] = sp[526] / sp[389];
    sp[599] = sp[527] / sp[389];
    sp[600] = sp[528] / sp[389];
    sp[601] = sp[529] / sp[389];
    sp[602] = sp[530] / sp[389];
    sp[603] = sp[531] / sp[389];
    sp[604] = sp[532] / sp[389];
    sp[605] = sp[533] / sp[389];
    sp[606] = -1 * sp[459] / sp[389];
    sp[607] = -1 * sp[460] / sp[389];
    sp[608] = -1 * sp[461] / sp[389];
    sp[609] = -1 * sp[468] / sp[389];
    sp[610] = -1 * sp[469] / sp[389];
    sp[611] = -1 * sp[470] / sp[389];
    sp[612] = -1 * sp[477] / sp[389];
    sp[613] = -1 * sp[478] / sp[389];
    sp[614] = -1 * sp[479] / sp[389];
    sp[615] = sp[534] * w[1][0];
    sp[616] = sp[535] * w[1][0];
    sp[617] = sp[536] * w[1][0];
    sp[618] = sp[537] * w[1][0];
    sp[619] = sp[538] * w[1][0];
    sp[620] = sp[539] * w[1][0];
    sp[621] = sp[540] * w[1][0];
    sp[622] = sp[541] * w[1][0];
    sp[623] = sp[542] * w[1][0];
    sp[624] = sp[543] * w[1][0];
    sp[625] = sp[544] * w[1][0];
    sp[626] = sp[545] * w[1][0];
    sp[627] = sp[546] * w[1][0];
    sp[628] = sp[547] * w[1][0];
    sp[629] = sp[548] * w[1][0];
    sp[630] = sp[549] * w[1][0];
    sp[631] = sp[550] * w[1][0];
    sp[632] = sp[551] * w[1][0];
    sp[633] = sp[552] * w[1][0];
    sp[634] = sp[553] * w[1][0];
    sp[635] = sp[554] * w[1][0];
    sp[636] = sp[555] * w[1][0];
    sp[637] = sp[556] * w[1][0];
    sp[638] = sp[557] * w[1][0];
    sp[639] = sp[558] * w[1][0];
    sp[640] = sp[559] * w[1][0];
    sp[641] = sp[560] * w[1][0];
    sp[642] = sp[561] * w[1][0];
    sp[643] = sp[562] * w[1][0];
    sp[644] = sp[563] * w[1][0];
    sp[645] = sp[564] * w[1][0];
    sp[646] = sp[565] * w[1][0];
    sp[647] = sp[566] * w[1][0];
    sp[648] = sp[567] * w[1][0];
    sp[649] = sp[568] * w[1][0];
    sp[650] = sp[569] * w[1][0];
    sp[651] = sp[570] * w[1][0];
    sp[652] = sp[571] * w[1][0];
    sp[653] = sp[572] * w[1][0];
    sp[654] = sp[573] * w[1][0];
    sp[655] = sp[574] * w[1][0];
    sp[656] = sp[575] * w[1][0];
    sp[657] = sp[576] * w[1][0];
    sp[658] = sp[577] * w[1][0];
    sp[659] = sp[578] * w[1][0];
    sp[660] = sp[579] * w[1][0];
    sp[661] = sp[580] * w[1][0];
    sp[662] = sp[581] * w[1][0];
    sp[663] = sp[582] * w[1][0];
    sp[664] = sp[583] * w[1][0];
    sp[665] = sp[584] * w[1][0];
    sp[666] = sp[585] * w[1][0];
    sp[667] = sp[586] * w[1][0];
    sp[668] = sp[587] * w[1][0];
    sp[669] = sp[588] * w[1][0];
    sp[670] = sp[589] * w[1][0];
    sp[671] = sp[590] * w[1][0];
    sp[672] = sp[591] * w[1][0];
    sp[673] = sp[592] * w[1][0];
    sp[674] = sp[593] * w[1][0];
    sp[675] = sp[594] * w[1][0];
    sp[676] = sp[595] * w[1][0];
    sp[677] = sp[596] * w[1][0];
    sp[678] = sp[597] * w[1][0];
    sp[679] = sp[598] * w[1][0];
    sp[680] = sp[599] * w[1][0];
    sp[681] = sp[600] * w[1][0];
    sp[682] = sp[601] * w[1][0];
    sp[683] = sp[602] * w[1][0];
    sp[684] = sp[603] * w[1][0];
    sp[685] = sp[604] * w[1][0];
    sp[686] = sp[605] * w[1][0];
    sp[687] = sp[606] * w[1][0];
    sp[688] = sp[607] * w[1][0];
    sp[689] = sp[608] * w[1][0];
    sp[690] = sp[609] * w[1][0];
    sp[691] = sp[610] * w[1][0];
    sp[692] = sp[611] * w[1][0];
    sp[693] = sp[612] * w[1][0];
    sp[694] = sp[613] * w[1][0];
    sp[695] = sp[614] * w[1][0];
    sp[696] = sp[14] * sp[14];
    sp[697] = sp[14] * sp[18];
    sp[698] = sp[21] * sp[14];
    sp[699] = sp[18] * sp[18];
    sp[700] = sp[21] * sp[18];
    sp[701] = sp[21] * sp[21];
    sp[702] = sp[696] + sp[696];
    sp[703] = sp[697] + sp[697];
    sp[704] = sp[698] + sp[698];
    sp[705] = sp[699] + sp[699];
    sp[706] = sp[700] + sp[700];
    sp[707] = sp[701] + sp[701];
    sp[708] = sp[39] * sp[39];
    sp[709] = sp[39] * sp[43];
    sp[710] = sp[39] * sp[47];
    sp[711] = sp[43] * sp[43];
    sp[712] = sp[43] * sp[47];
    sp[713] = sp[47] * sp[47];
    sp[714] = sp[708] + sp[708];
    sp[715] = sp[709] + sp[709];
    sp[716] = sp[710] + sp[710];
    sp[717] = sp[711] + sp[711];
    sp[718] = sp[712] + sp[712];
    sp[719] = sp[713] + sp[713];
    sp[720] = sp[714] + sp[702];
    sp[721] = sp[715] + sp[703];
    sp[722] = sp[716] + sp[704];
    sp[723] = sp[717] + sp[705];
    sp[724] = sp[718] + sp[706];
    sp[725] = sp[707] + sp[719];
    sp[726] = sp[27] * sp[27];
    sp[727] = sp[27] * sp[31];
    sp[728] = sp[35] * sp[27];
    sp[729] = sp[31] * sp[31];
    sp[730] = sp[35] * sp[31];
    sp[731] = sp[35] * sp[35];
    sp[732] = sp[726] + sp[726];
    sp[733] = sp[727] + sp[727];
    sp[734] = sp[728] + sp[728];
    sp[735] = sp[729] + sp[729];
    sp[736] = sp[730] + sp[730];
    sp[737] = sp[731] + sp[731];
    sp[738] = sp[720] + sp[732];
    sp[739] = sp[721] + sp[733];
    sp[740] = sp[722] + sp[734];
    sp[741] = sp[723] + sp[735];
    sp[742] = sp[724] + sp[736];
    sp[743] = sp[725] + sp[737];
    sp[744] = sp[738] * (w[1][0] / 2);
    sp[745] = sp[739] * (w[1][0] / 2);
    sp[746] = sp[740] * (w[1][0] / 2);
    sp[747] = sp[741] * (w[1][0] / 2);
    sp[748] = sp[742] * (w[1][0] / 2);
    sp[749] = sp[743] * (w[1][0] / 2);
    sp[750] = -1 * sp[618] + sp[744];
    sp[751] = -1 * sp[619] + sp[745];
    sp[752] = -1 * sp[620] + sp[746];
    sp[753] = -1 * sp[627] + sp[745];
    sp[754] = -1 * sp[628] + sp[747];
    sp[755] = -1 * sp[629] + sp[748];
    sp[756] = -1 * sp[636] + sp[746];
    sp[757] = -1 * sp[637] + sp[748];
    sp[758] = -1 * sp[638] + sp[749];
    sp[759] = -1 * sp[642] + sp[744];
    sp[760] = -1 * sp[643] + sp[745];
    sp[761] = -1 * sp[644] + sp[746];
    sp[762] = -1 * sp[648] + sp[745];
    sp[763] = -1 * sp[649] + sp[747];
    sp[764] = -1 * sp[650] + sp[748];
    sp[765] = -1 * sp[654] + sp[746];
    sp[766] = -1 * sp[655] + sp[748];
    sp[767] = -1 * sp[656] + sp[749];
    sp[768] = -1 * sp[687] + sp[744];
    sp[769] = -1 * sp[688] + sp[745];
    sp[770] = -1 * sp[689] + sp[746];
    sp[771] = -1 * sp[690] + sp[745];
    sp[772] = -1 * sp[691] + sp[747];
    sp[773] = -1 * sp[692] + sp[748];
    sp[774] = -1 * sp[693] + sp[746];
    sp[775] = -1 * sp[694] + sp[748];
    sp[776] = -1 * sp[695] + sp[749];
    sp[777] = 2 * sp[390] * sp[393];
    sp[778] = 2 * sp[390] * sp[394];
    sp[779] = 2 * sp[390] * sp[395];
    sp[780] = 2 * sp[390] * sp[390];
    sp[781] = 2 * sp[390] * sp[391];
    sp[782] = 2 * sp[390] * sp[392];
    sp[783] = 2 * sp[390] * sp[396];
    sp[784] = 2 * sp[390] * sp[397];
    sp[785] = 2 * sp[390] * sp[398];
    sp[786] = 2 * sp[391] * sp[393];
    sp[787] = 2 * sp[391] * sp[394];
    sp[788] = 2 * sp[391] * sp[395];
    sp[789] = 2 * sp[391] * sp[390];
    sp[790] = 2 * sp[391] * sp[391];
    sp[791] = 2 * sp[391] * sp[392];
    sp[792] = 2 * sp[391] * sp[396];
    sp[793] = 2 * sp[391] * sp[397];
    sp[794] = 2 * sp[391] * sp[398];
    sp[795] = 2 * sp[392] * sp[393];
    sp[796] = 2 * sp[392] * sp[394];
    sp[797] = 2 * sp[392] * sp[395];
    sp[798] = 2 * sp[392] * sp[390];
    sp[799] = 2 * sp[392] * sp[391];
    sp[800] = 2 * sp[392] * sp[392];
    sp[801] = 2 * sp[392] * sp[396];
    sp[802] = 2 * sp[392] * sp[397];
    sp[803] = 2 * sp[392] * sp[398];
    sp[804] = 2 * sp[393] * sp[393];
    sp[805] = 2 * sp[393] * sp[394];
    sp[806] = 2 * sp[393] * sp[395];
    sp[807] = 2 * sp[393] * sp[390];
    sp[808] = 2 * sp[393] * sp[391];
    sp[809] = 2 * sp[393] * sp[392];
    sp[810] = 2 * sp[393] * sp[396];
    sp[811] = 2 * sp[393] * sp[397];
    sp[812] = 2 * sp[393] * sp[398];
    sp[813] = 2 * sp[394] * sp[393];
    sp[814] = 2 * sp[394] * sp[394];
    sp[815] = 2 * sp[394] * sp[395];
    sp[816] = 2 * sp[394] * sp[390];
    sp[817] = 2 * sp[394] * sp[391];
    sp[818] = 2 * sp[394] * sp[392];
    sp[819] = 2 * sp[394] * sp[396];
    sp[820] = 2 * sp[394] * sp[397];
    sp[821] = 2 * sp[394] * sp[398];
    sp[822] = 2 * sp[395] * sp[393];
    sp[823] = 2 * sp[395] * sp[394];
    sp[824] = 2 * sp[395] * sp[395];
    sp[825] = 2 * sp[395] * sp[390];
    sp[826] = 2 * sp[395] * sp[391];
    sp[827] = 2 * sp[395] * sp[392];
    sp[828] = 2 * sp[395] * sp[396];
    sp[829] = 2 * sp[395] * sp[397];
    sp[830] = 2 * sp[395] * sp[398];
    sp[831] = 2 * sp[396] * sp[393];
    sp[832] = 2 * sp[396] * sp[394];
    sp[833] = 2 * sp[396] * sp[395];
    sp[834] = 2 * sp[396] * sp[390];
    sp[835] = 2 * sp[396] * sp[391];
    sp[836] = 2 * sp[396] * sp[392];
    sp[837] = 2 * sp[396] * sp[396];
    sp[838] = 2 * sp[396] * sp[397];
    sp[839] = 2 * sp[396] * sp[398];
    sp[840] = 2 * sp[397] * sp[393];
    sp[841] = 2 * sp[397] * sp[394];
    sp[842] = 2 * sp[397] * sp[395];
    sp[843] = 2 * sp[397] * sp[390];
    sp[844] = 2 * sp[397] * sp[391];
    sp[845] = 2 * sp[397] * sp[392];
    sp[846] = 2 * sp[397] * sp[396];
    sp[847] = 2 * sp[397] * sp[397];
    sp[848] = 2 * sp[397] * sp[398];
    sp[849] = 2 * sp[398] * sp[393];
    sp[850] = 2 * sp[398] * sp[394];
    sp[851] = 2 * sp[398] * sp[395];
    sp[852] = 2 * sp[398] * sp[390];
    sp[853] = 2 * sp[398] * sp[391];
    sp[854] = 2 * sp[398] * sp[392];
    sp[855] = 2 * sp[398] * sp[396];
    sp[856] = 2 * sp[398] * sp[397];
    sp[857] = 2 * sp[398] * sp[398];
    sp[858] = std::log(sp[389]);
    sp[859] = 2 * sp[534] * sp[858];
    sp[860] = 2 * sp[535] * sp[858];
    sp[861] = 2 * sp[536] * sp[858];
    sp[862] = 2 * sp[537] * sp[858];
    sp[863] = 2 * sp[538] * sp[858];
    sp[864] = 2 * sp[539] * sp[858];
    sp[865] = 2 * sp[540] * sp[858];
    sp[866] = 2 * sp[541] * sp[858];
    sp[867] = 2 * sp[542] * sp[858];
    sp[868] = 2 * sp[543] * sp[858];
    sp[869] = 2 * sp[544] * sp[858];
    sp[870] = 2 * sp[545] * sp[858];
    sp[871] = 2 * sp[546] * sp[858];
    sp[872] = 2 * sp[547] * sp[858];
    sp[873] = 2 * sp[548] * sp[858];
    sp[874] = 2 * sp[549] * sp[858];
    sp[875] = 2 * sp[550] * sp[858];
    sp[876] = 2 * sp[551] * sp[858];
    sp[877] = 2 * sp[552] * sp[858];
    sp[878] = 2 * sp[553] * sp[858];
    sp[879] = 2 * sp[554] * sp[858];
    sp[880] = 2 * sp[555] * sp[858];
    sp[881] = 2 * sp[556] * sp[858];
    sp[882] = 2 * sp[557] * sp[858];
    sp[883] = 2 * sp[558] * sp[858];
    sp[884] = 2 * sp[559] * sp[858];
    sp[885] = 2 * sp[560] * sp[858];
    sp[886] = 2 * sp[561] * sp[858];
    sp[887] = 2 * sp[562] * sp[858];
    sp[888] = 2 * sp[563] * sp[858];
    sp[889] = 2 * sp[564] * sp[858];
    sp[890] = 2 * sp[565] * sp[858];
    sp[891] = 2 * sp[566] * sp[858];
    sp[892] = 2 * sp[567] * sp[858];
    sp[893] = 2 * sp[568] * sp[858];
    sp[894] = 2 * sp[569] * sp[858];
    sp[895] = 2 * sp[570] * sp[858];
    sp[896] = 2 * sp[571] * sp[858];
    sp[897] = 2 * sp[572] * sp[858];
    sp[898] = 2 * sp[573] * sp[858];
    sp[899] = 2 * sp[574] * sp[858];
    sp[900] = 2 * sp[575] * sp[858];
    sp[901] = 2 * sp[576] * sp[858];
    sp[902] = 2 * sp[577] * sp[858];
    sp[903] = 2 * sp[578] * sp[858];
    sp[904] = 2 * sp[579] * sp[858];
    sp[905] = 2 * sp[580] * sp[858];
    sp[906] = 2 * sp[581] * sp[858];
    sp[907] = 2 * sp[582] * sp[858];
    sp[908] = 2 * sp[583] * sp[858];
    sp[909] = 2 * sp[584] * sp[858];
    sp[910] = 2 * sp[585] * sp[858];
    sp[911] = 2 * sp[586] * sp[858];
    sp[912] = 2 * sp[587] * sp[858];
    sp[913] = 2 * sp[588] * sp[858];
    sp[914] = 2 * sp[589] * sp[858];
    sp[915] = 2 * sp[590] * sp[858];
    sp[916] = 2 * sp[591] * sp[858];
    sp[917] = 2 * sp[592] * sp[858];
    sp[918] = 2 * sp[593] * sp[858];
    sp[919] = 2 * sp[594] * sp[858];
    sp[920] = 2 * sp[595] * sp[858];
    sp[921] = 2 * sp[596] * sp[858];
    sp[922] = 2 * sp[597] * sp[858];
    sp[923] = 2 * sp[598] * sp[858];
    sp[924] = 2 * sp[599] * sp[858];
    sp[925] = 2 * sp[600] * sp[858];
    sp[926] = 2 * sp[601] * sp[858];
    sp[927] = 2 * sp[602] * sp[858];
    sp[928] = 2 * sp[603] * sp[858];
    sp[929] = 2 * sp[604] * sp[858];
    sp[930] = 2 * sp[605] * sp[858];
    sp[931] = 2 * sp[606] * sp[858];
    sp[932] = 2 * sp[607] * sp[858];
    sp[933] = 2 * sp[608] * sp[858];
    sp[934] = 2 * sp[609] * sp[858];
    sp[935] = 2 * sp[610] * sp[858];
    sp[936] = 2 * sp[611] * sp[858];
    sp[937] = 2 * sp[612] * sp[858];
    sp[938] = 2 * sp[613] * sp[858];
    sp[939] = 2 * sp[614] * sp[858];
    sp[940] = sp[777] + sp[859];
    sp[941] = sp[786] + sp[860];
    sp[942] = sp[795] + sp[861];
    sp[943] = sp[804] + sp[862];
    sp[944] = sp[813] + sp[863];
    sp[945] = sp[822] + sp[864];
    sp[946] = sp[831] + sp[865];
    sp[947] = sp[840] + sp[866];
    sp[948] = sp[849] + sp[867];
    sp[949] = sp[778] + sp[868];
    sp[950] = sp[787] + sp[869];
    sp[951] = sp[796] + sp[870];
    sp[952] = sp[805] + sp[871];
    sp[953] = sp[814] + sp[872];
    sp[954] = sp[823] + sp[873];
    sp[955] = sp[832] + sp[874];
    sp[956] = sp[841] + sp[875];
    sp[957] = sp[850] + sp[876];
    sp[958] = sp[779] + sp[877];
    sp[959] = sp[788] + sp[878];
    sp[960] = sp[797] + sp[879];
    sp[961] = sp[806] + sp[880];
    sp[962] = sp[815] + sp[881];
    sp[963] = sp[824] + sp[882];
    sp[964] = sp[833] + sp[883];
    sp[965] = sp[842] + sp[884];
    sp[966] = sp[851] + sp[885];
    sp[967] = sp[780] + sp[886];
    sp[968] = sp[781] + sp[887];
    sp[969] = sp[782] + sp[888];
    sp[970] = sp[783] + sp[889];
    sp[971] = sp[784] + sp[890];
    sp[972] = sp[785] + sp[891];
    sp[973] = sp[789] + sp[892];
    sp[974] = sp[790] + sp[893];
    sp[975] = sp[791] + sp[894];
    sp[976] = sp[792] + sp[895];
    sp[977] = sp[793] + sp[896];
    sp[978] = sp[794] + sp[897];
    sp[979] = sp[798] + sp[898];
    sp[980] = sp[799] + sp[899];
    sp[981] = sp[800] + sp[900];
    sp[982] = sp[801] + sp[901];
    sp[983] = sp[802] + sp[902];
    sp[984] = sp[803] + sp[903];
    sp[985] = sp[807] + sp[904];
    sp[986] = sp[808] + sp[905];
    sp[987] = sp[809] + sp[906];
    sp[988] = sp[810] + sp[907];
    sp[989] = sp[811] + sp[908];
    sp[990] = sp[812] + sp[909];
    sp[991] = sp[816] + sp[910];
    sp[992] = sp[817] + sp[911];
    sp[993] = sp[818] + sp[912];
    sp[994] = sp[819] + sp[913];
    sp[995] = sp[820] + sp[914];
    sp[996] = sp[821] + sp[915];
    sp[997] = sp[825] + sp[916];
    sp[998] = sp[826] + sp[917];
    sp[999] = sp[827] + sp[918];
    sp[1000] = sp[828] + sp[919];
    sp[1001] = sp[829] + sp[920];
    sp[1002] = sp[830] + sp[921];
    sp[1003] = sp[834] + sp[922];
    sp[1004] = sp[843] + sp[923];
    sp[1005] = sp[852] + sp[924];
    sp[1006] = sp[835] + sp[925];
    sp[1007] = sp[844] + sp[926];
    sp[1008] = sp[853] + sp[927];
    sp[1009] = sp[836] + sp[928];
    sp[1010] = sp[845] + sp[929];
    sp[1011] = sp[854] + sp[930];
    sp[1012] = sp[837] + sp[931];
    sp[1013] = sp[846] + sp[932];
    sp[1014] = sp[855] + sp[933];
    sp[1015] = sp[838] + sp[934];
    sp[1016] = sp[847] + sp[935];
    sp[1017] = sp[856] + sp[936];
    sp[1018] = sp[839] + sp[937];
    sp[1019] = sp[848] + sp[938];
    sp[1020] = sp[857] + sp[939];
    sp[1021] = sp[940] * (w[2][0] / 2);
    sp[1022] = sp[941] * (w[2][0] / 2);
    sp[1023] = sp[942] * (w[2][0] / 2);
    sp[1024] = sp[943] * (w[2][0] / 2);
    sp[1025] = sp[944] * (w[2][0] / 2);
    sp[1026] = sp[945] * (w[2][0] / 2);
    sp[1027] = sp[946] * (w[2][0] / 2);
    sp[1028] = sp[947] * (w[2][0] / 2);
    sp[1029] = sp[948] * (w[2][0] / 2);
    sp[1030] = sp[949] * (w[2][0] / 2);
    sp[1031] = sp[950] * (w[2][0] / 2);
    sp[1032] = sp[951] * (w[2][0] / 2);
    sp[1033] = sp[952] * (w[2][0] / 2);
    sp[1034] = sp[953] * (w[2][0] / 2);
    sp[1035] = sp[954] * (w[2][0] / 2);
    sp[1036] = sp[955] * (w[2][0] / 2);
    sp[1037] = sp[956] * (w[2][0] / 2);
    sp[1038] = sp[957] * (w[2][0] / 2);
    sp[1039] = sp[958] * (w[2][0] / 2);
    sp[1040] = sp[959] * (w[2][0] / 2);
    sp[1041] = sp[960] * (w[2][0] / 2);
    sp[1042] = sp[961] * (w[2][0] / 2);
    sp[1043] = sp[962] * (w[2][0] / 2);
    sp[1044] = sp[963] * (w[2][0] / 2);
    sp[1045] = sp[964] * (w[2][0] / 2);
    sp[1046] = sp[965] * (w[2][0] / 2);
    sp[1047] = sp[966] * (w[2][0] / 2);
    sp[1048] = sp[967] * (w[2][0] / 2);
    sp[1049] = sp[968] * (w[2][0] / 2);
    sp[1050] = sp[969] * (w[2][0] / 2);
    sp[1051] = sp[970] * (w[2][0] / 2);
    sp[1052] = sp[971] * (w[2][0] / 2);
    sp[1053] = sp[972] * (w[2][0] / 2);
    sp[1054] = sp[973] * (w[2][0] / 2);
    sp[1055] = sp[974] * (w[2][0] / 2);
    sp[1056] = sp[975] * (w[2][0] / 2);
    sp[1057] = sp[976] * (w[2][0] / 2);
    sp[1058] = sp[977] * (w[2][0] / 2);
    sp[1059] = sp[978] * (w[2][0] / 2);
    sp[1060] = sp[979] * (w[2][0] / 2);
    sp[1061] = sp[980] * (w[2][0] / 2);
    sp[1062] = sp[981] * (w[2][0] / 2);
    sp[1063] = sp[982] * (w[2][0] / 2);
    sp[1064] = sp[983] * (w[2][0] / 2);
    sp[1065] = sp[984] * (w[2][0] / 2);
    sp[1066] = sp[985] * (w[2][0] / 2);
    sp[1067] = sp[986] * (w[2][0] / 2);
    sp[1068] = sp[987] * (w[2][0] / 2);
    sp[1069] = sp[988] * (w[2][0] / 2);
    sp[1070] = sp[989] * (w[2][0] / 2);
    sp[1071] = sp[990] * (w[2][0] / 2);
    sp[1072] = sp[991] * (w[2][0] / 2);
    sp[1073] = sp[992] * (w[2][0] / 2);
    sp[1074] = sp[993] * (w[2][0] / 2);
    sp[1075] = sp[994] * (w[2][0] / 2);
    sp[1076] = sp[995] * (w[2][0] / 2);
    sp[1077] = sp[996] * (w[2][0] / 2);
    sp[1078] = sp[997] * (w[2][0] / 2);
    sp[1079] = sp[998] * (w[2][0] / 2);
    sp[1080] = sp[999] * (w[2][0] / 2);
    sp[1081] = sp[1000] * (w[2][0] / 2);
    sp[1082] = sp[1001] * (w[2][0] / 2);
    sp[1083] = sp[1002] * (w[2][0] / 2);
    sp[1084] = sp[1003] * (w[2][0] / 2);
    sp[1085] = sp[1004] * (w[2][0] / 2);
    sp[1086] = sp[1005] * (w[2][0] / 2);
    sp[1087] = sp[1006] * (w[2][0] / 2);
    sp[1088] = sp[1007] * (w[2][0] / 2);
    sp[1089] = sp[1008] * (w[2][0] / 2);
    sp[1090] = sp[1009] * (w[2][0] / 2);
    sp[1091] = sp[1010] * (w[2][0] / 2);
    sp[1092] = sp[1011] * (w[2][0] / 2);
    sp[1093] = sp[1012] * (w[2][0] / 2);
    sp[1094] = sp[1013] * (w[2][0] / 2);
    sp[1095] = sp[1014] * (w[2][0] / 2);
    sp[1096] = sp[1015] * (w[2][0] / 2);
    sp[1097] = sp[1016] * (w[2][0] / 2);
    sp[1098] = sp[1017] * (w[2][0] / 2);
    sp[1099] = sp[1018] * (w[2][0] / 2);
    sp[1100] = sp[1019] * (w[2][0] / 2);
    sp[1101] = sp[1020] * (w[2][0] / 2);
    sp[1102] = -1 * sp[615] + sp[1021];
    sp[1103] = -1 * sp[616] + sp[1022];
    sp[1104] = -1 * sp[617] + sp[1023];
    sp[1105] = sp[750] + sp[1024];
    sp[1106] = sp[751] + sp[1025];
    sp[1107] = sp[752] + sp[1026];
    sp[1108] = -1 * sp[621] + sp[1027];
    sp[1109] = -1 * sp[622] + sp[1028];
    sp[1110] = -1 * sp[623] + sp[1029];
    sp[1111] = -1 * sp[624] + sp[1030];
    sp[1112] = -1 * sp[625] + sp[1031];
    sp[1113] = -1 * sp[626] + sp[1032];
    sp[1114] = sp[753] + sp[1033];
    sp[1115] = sp[754] + sp[1034];
    sp[1116] = sp[755] + sp[1035];
    sp[1117] = -1 * sp[630] + sp[1036];
    sp[1118] = -1 * sp[631] + sp[1037];
    sp[1119] = -1 * sp[632] + sp[1038];
    sp[1120] = -1 * sp[633] + sp[1039];
    sp[1121] = -1 * sp[634] + sp[1040];
    sp[1122] = -1 * sp[635] + sp[1041];
    sp[1123] = sp[756] + sp[1042];
    sp[1124] = sp[757] + sp[1043];
    sp[1125] = sp[758] + sp[1044];
    sp[1126] = -1 * sp[639] + sp[1045];
    sp[1127] = -1 * sp[640] + sp[1046];
    sp[1128] = -1 * sp[641] + sp[1047];
    sp[1129] = sp[759] + sp[1048];
    sp[1130] = sp[760] + sp[1049];
    sp[1131] = sp[761] + sp[1050];
    sp[1132] = -1 * sp[645] + sp[1051];
    sp[1133] = -1 * sp[646] + sp[1052];
    sp[1134] = -1 * sp[647] + sp[1053];
    sp[1135] = sp[762] + sp[1054];
    sp[1136] = sp[763] + sp[1055];
    sp[1137] = sp[764] + sp[1056];
    sp[1138] = -1 * sp[651] + sp[1057];
    sp[1139] = -1 * sp[652] + sp[1058];
    sp[1140] = -1 * sp[653] + sp[1059];
    sp[1141] = sp[765] + sp[1060];
    sp[1142] = sp[766] + sp[1061];
    sp[1143] = sp[767] + sp[1062];
    sp[1144] = -1 * sp[657] + sp[1063];
    sp[1145] = -1 * sp[658] + sp[1064];
    sp[1146] = -1 * sp[659] + sp[1065];
    sp[1147] = -1 * sp[660] + sp[1066];
    sp[1148] = -1 * sp[661] + sp[1067];
    sp[1149] = -1 * sp[662] + sp[1068];
    sp[1150] = -1 * sp[663] + sp[1069];
    sp[1151] = -1 * sp[664] + sp[1070];
    sp[1152] = -1 * sp[665] + sp[1071];
    sp[1153] = -1 * sp[666] + sp[1072];
    sp[1154] = -1 * sp[667] + sp[1073];
    sp[1155] = -1 * sp[668] + sp[1074];
    sp[1156] = -1 * sp[669] + sp[1075];
    sp[1157] = -1 * sp[670] + sp[1076];
    sp[1158] = -1 * sp[671] + sp[1077];
    sp[1159] = -1 * sp[672] + sp[1078];
    sp[1160] = -1 * sp[673] + sp[1079];
    sp[1161] = -1 * sp[674] + sp[1080];
    sp[1162] = -1 * sp[675] + sp[1081];
    sp[1163] = -1 * sp[676] + sp[1082];
    sp[1164] = -1 * sp[677] + sp[1083];
    sp[1165] = -1 * sp[678] + sp[1084];
    sp[1166] = -1 * sp[679] + sp[1085];
    sp[1167] = -1 * sp[680] + sp[1086];
    sp[1168] = -1 * sp[681] + sp[1087];
    sp[1169] = -1 * sp[682] + sp[1088];
    sp[1170] = -1 * sp[683] + sp[1089];
    sp[1171] = -1 * sp[684] + sp[1090];
    sp[1172] = -1 * sp[685] + sp[1091];
    sp[1173] = -1 * sp[686] + sp[1092];
    sp[1174] = sp[768] + sp[1093];
    sp[1175] = sp[769] + sp[1094];
    sp[1176] = sp[770] + sp[1095];
    sp[1177] = sp[771] + sp[1096];
    sp[1178] = sp[772] + sp[1097];
    sp[1179] = sp[773] + sp[1098];
    sp[1180] = sp[774] + sp[1099];
    sp[1181] = sp[775] + sp[1100];
    sp[1182] = sp[776] + sp[1101];
    sp[1183] = std::abs(sp[13]);
    sp[1184] = sp[1102] * sp[1183];
    sp[1185] = sp[1103] * sp[1183];
    sp[1186] = sp[1104] * sp[1183];
    sp[1187] = sp[1105] * sp[1183];
    sp[1188] = sp[1106] * sp[1183];
    sp[1189] = sp[1107] * sp[1183];
    sp[1190] = sp[1108] * sp[1183];
    sp[1191] = sp[1109] * sp[1183];
    sp[1192] = sp[1110] * sp[1183];
    sp[1193] = sp[1111] * sp[1183];
    sp[1194] = sp[1112] * sp[1183];
    sp[1195] = sp[1113] * sp[1183];
    sp[1196] = sp[1114] * sp[1183];
    sp[1197] = sp[1115] * sp[1183];
    sp[1198] = sp[1116] * sp[1183];
    sp[1199] = sp[1117] * sp[1183];
    sp[1200] = sp[1118] * sp[1183];
    sp[1201] = sp[1119] * sp[1183];
    sp[1202] = sp[1120] * sp[1183];
    sp[1203] = sp[1121] * sp[1183];
    sp[1204] = sp[1122] * sp[1183];
    sp[1205] = sp[1123] * sp[1183];
    sp[1206] = sp[1124] * sp[1183];
    sp[1207] = sp[1125] * sp[1183];
    sp[1208] = sp[1126] * sp[1183];
    sp[1209] = sp[1127] * sp[1183];
    sp[1210] = sp[1128] * sp[1183];
    sp[1211] = sp[1129] * sp[1183];
    sp[1212] = sp[1130] * sp[1183];
    sp[1213] = sp[1131] * sp[1183];
    sp[1214] = sp[1132] * sp[1183];
    sp[1215] = sp[1133] * sp[1183];
    sp[1216] = sp[1134] * sp[1183];
    sp[1217] = sp[1135] * sp[1183];
    sp[1218] = sp[1136] * sp[1183];
    sp[1219] = sp[1137] * sp[1183];
    sp[1220] = sp[1138] * sp[1183];
    sp[1221] = sp[1139] * sp[1183];
    sp[1222] = sp[1140] * sp[1183];
    sp[1223] = sp[1141] * sp[1183];
    sp[1224] = sp[1142] * sp[1183];
    sp[1225] = sp[1143] * sp[1183];
    sp[1226] = sp[1144] * sp[1183];
    sp[1227] = sp[1145] * sp[1183];
    sp[1228] = sp[1146] * sp[1183];
    sp[1229] = sp[1147] * sp[1183];
    sp[1230] = sp[1148] * sp[1183];
    sp[1231] = sp[1149] * sp[1183];
    sp[1232] = sp[1150] * sp[1183];
    sp[1233] = sp[1151] * sp[1183];
    sp[1234] = sp[1152] * sp[1183];
    sp[1235] = sp[1153] * sp[1183];
    sp[1236] = sp[1154] * sp[1183];
    sp[1237] = sp[1155] * sp[1183];
    sp[1238] = sp[1156] * sp[1183];
    sp[1239] = sp[1157] * sp[1183];
    sp[1240] = sp[1158] * sp[1183];
    sp[1241] = sp[1159] * sp[1183];
    sp[1242] = sp[1160] * sp[1183];
    sp[1243] = sp[1161] * sp[1183];
    sp[1244] = sp[1162] * sp[1183];
    sp[1245] = sp[1163] * sp[1183];
    sp[1246] = sp[1164] * sp[1183];
    sp[1247] = sp[1165] * sp[1183];
    sp[1248] = sp[1166] * sp[1183];
    sp[1249] = sp[1167] * sp[1183];
    sp[1250] = sp[1168] * sp[1183];
    sp[1251] = sp[1169] * sp[1183];
    sp[1252] = sp[1170] * sp[1183];
    sp[1253] = sp[1171] * sp[1183];
    sp[1254] = sp[1172] * sp[1183];
    sp[1255] = sp[1173] * sp[1183];
    sp[1256] = sp[1174] * sp[1183];
    sp[1257] = sp[1175] * sp[1183];
    sp[1258] = sp[1176] * sp[1183];
    sp[1259] = sp[1177] * sp[1183];
    sp[1260] = sp[1178] * sp[1183];
    sp[1261] = sp[1179] * sp[1183];
    sp[1262] = sp[1180] * sp[1183];
    sp[1263] = sp[1181] * sp[1183];
    sp[1264] = sp[1182] * sp[1183];
    A[0] = sp[1256] * PI0[0][0][0] + sp[1259] * PI0[0][0][0] + sp[1262] * PI0[0][0][0] + sp[1257] * PI0[0][0][0] + sp[1260] * PI0[0][0][0] + sp[1263] * PI0[0][0][0] + sp[1258] * PI0[0][0][0] + sp[1261] * PI0[0][0][0] + sp[1264] * PI0[0][0][0];
    A[1] = sp[1256] * PI0[0][0][1] + sp[1257] * PI0[0][0][1] + sp[1258] * PI0[0][0][1];
    A[2] = sp[1259] * PI0[0][0][1] + sp[1260] * PI0[0][0][1] + sp[1261] * PI0[0][0][1];
    A[3] = sp[1262] * PI0[0][0][1] + sp[1263] * PI0[0][0][1] + sp[1264] * PI0[0][0][1];
    A[4] = sp[1247] * PI0[0][0][0] + sp[1250] * PI0[0][0][0] + sp[1253] * PI0[0][0][0] + sp[1248] * PI0[0][0][0] + sp[1251] * PI0[0][0][0] + sp[1254] * PI0[0][0][0] + sp[1249] * PI0[0][0][0] + sp[1252] * PI0[0][0][0] + sp[1255] * PI0[0][0][0];
    A[5] = sp[1247] * PI0[0][0][1] + sp[1248] * PI0[0][0][1] + sp[1249] * PI0[0][0][1];
    A[6] = sp[1250] * PI0[0][0][1] + sp[1251] * PI0[0][0][1] + sp[1252] * PI0[0][0][1];
    A[7] = sp[1253] * PI0[0][0][1] + sp[1254] * PI0[0][0][1] + sp[1255] * PI0[0][0][1];
    A[8] = sp[1190] * PI0[0][0][0] + sp[1199] * PI0[0][0][0] + sp[1208] * PI0[0][0][0] + sp[1191] * PI0[0][0][0] + sp[1200] * PI0[0][0][0] + sp[1209] * PI0[0][0][0] + sp[1192] * PI0[0][0][0] + sp[1201] * PI0[0][0][0] + sp[1210] * PI0[0][0][0];
    A[9] = sp[1190] * PI0[0][0][1] + sp[1191] * PI0[0][0][1] + sp[1192] * PI0[0][0][1];
    A[10] = sp[1199] * PI0[0][0][1] + sp[1200] * PI0[0][0][1] + sp[1201] * PI0[0][0][1];
    A[11] = sp[1208] * PI0[0][0][1] + sp[1209] * PI0[0][0][1] + sp[1210] * PI0[0][0][1];
    A[12] = sp[1256] * PI0[0][1][0] + sp[1259] * PI0[0][1][0] + sp[1262] * PI0[0][1][0];
    A[13] = sp[1256] * PI0[0][1][1];
    A[14] = sp[1259] * PI0[0][1][1];
    A[15] = sp[1262] * PI0[0][1][1];
    A[16] = sp[1247] * PI0[0][1][0] + sp[1250] * PI0[0][1][0] + sp[1253] * PI0[0][1][0];
    A[17] = sp[1247] * PI0[0][1][1];
    A[18] = sp[1250] * PI0[0][1][1];
    A[19] = sp[1253] * PI0[0][1][1];
    A[20] = sp[1190] * PI0[0][1][0] + sp[1199] * PI0[0][1][0] + sp[1208] * PI0[0][1][0];
    A[21] = sp[1190] * PI0[0][1][1];
    A[22] = sp[1199] * PI0[0][1][1];
    A[23] = sp[1208] * PI0[0][1][1];
    A[24] = sp[1257] * PI0[0][1][0] + sp[1260] * PI0[0][1][0] + sp[1263] * PI0[0][1][0];
    A[25] = sp[1257] * PI0[0][1][1];
    A[26] = sp[1260] * PI0[0][1][1];
    A[27] = sp[1263] * PI0[0][1][1];
    A[28] = sp[1248] * PI0[0][1][0] + sp[1251] * PI0[0][1][0] + sp[1254] * PI0[0][1][0];
    A[29] = sp[1248] * PI0[0][1][1];
    A[30] = sp[1251] * PI0[0][1][1];
    A[31] = sp[1254] * PI0[0][1][1];
    A[32] = sp[1191] * PI0[0][1][0] + sp[1200] * PI0[0][1][0] + sp[1209] * PI0[0][1][0];
    A[33] = sp[1191] * PI0[0][1][1];
    A[34] = sp[1200] * PI0[0][1][1];
    A[35] = sp[1209] * PI0[0][1][1];
    A[36] = sp[1258] * PI0[0][1][0] + sp[1261] * PI0[0][1][0] + sp[1264] * PI0[0][1][0];
    A[37] = sp[1258] * PI0[0][1][1];
    A[38] = sp[1261] * PI0[0][1][1];
    A[39] = sp[1264] * PI0[0][1][1];
    A[40] = sp[1249] * PI0[0][1][0] + sp[1252] * PI0[0][1][0] + sp[1255] * PI0[0][1][0];
    A[41] = sp[1249] * PI0[0][1][1];
    A[42] = sp[1252] * PI0[0][1][1];
    A[43] = sp[1255] * PI0[0][1][1];
    A[44] = sp[1192] * PI0[0][1][0] + sp[1201] * PI0[0][1][0] + sp[1210] * PI0[0][1][0];
    A[45] = sp[1192] * PI0[0][1][1];
    A[46] = sp[1201] * PI0[0][1][1];
    A[47] = sp[1210] * PI0[0][1][1];
    A[48] = sp[1214] * PI0[0][0][0] + sp[1215] * PI0[0][0][0] + sp[1216] * PI0[0][0][0] + sp[1220] * PI0[0][0][0] + sp[1221] * PI0[0][0][0] + sp[1222] * PI0[0][0][0] + sp[1226] * PI0[0][0][0] + sp[1227] * PI0[0][0][0] + sp[1228] * PI0[0][0][0];
    A[49] = sp[1214] * PI0[0][0][1] + sp[1220] * PI0[0][0][1] + sp[1226] * PI0[0][0][1];
    A[50] = sp[1215] * PI0[0][0][1] + sp[1221] * PI0[0][0][1] + sp[1227] * PI0[0][0][1];
    A[51] = sp[1216] * PI0[0][0][1] + sp[1222] * PI0[0][0][1] + sp[1228] * PI0[0][0][1];
    A[52] = sp[1211] * PI0[0][0][0] + sp[1212] * PI0[0][0][0] + sp[1213] * PI0[0][0][0] + sp[1217] * PI0[0][0][0] + sp[1218] * PI0[0][0][0] + sp[1219] * PI0[0][0][0] + sp[1223] * PI0[0][0][0] + sp[1224] * PI0[0][0][0] + sp[1225] * PI0[0][0][0];
    A[53] = sp[1211] * PI0[0][0][1] + sp[1217] * PI0[0][0][1] + sp[1223] * PI0[0][0][1];
    A[54] = sp[1212] * PI0[0][0][1] + sp[1218] * PI0[0][0][1] + sp[1224] * PI0[0][0][1];
    A[55] = sp[1213] * PI0[0][0][1] + sp[1219] * PI0[0][0][1] + sp[1225] * PI0[0][0][1];
    A[56] = sp[1184] * PI0[0][0][0] + sp[1193] * PI0[0][0][0] + sp[1202] * PI0[0][0][0] + sp[1185] * PI0[0][0][0] + sp[1194] * PI0[0][0][0] + sp[1203] * PI0[0][0][0] + sp[1186] * PI0[0][0][0] + sp[1195] * PI0[0][0][0] + sp[1204] * PI0[0][0][0];
    A[57] = sp[1184] * PI0[0][0][1] + sp[1185] * PI0[0][0][1] + sp[1186] * PI0[0][0][1];
    A[58] = sp[1193] * PI0[0][0][1] + sp[1194] * PI0[0][0][1] + sp[1195] * PI0[0][0][1];
    A[59] = sp[1202] * PI0[0][0][1] + sp[1203] * PI0[0][0][1] + sp[1204] * PI0[0][0][1];
    A[60] = sp[1214] * PI0[0][1][0] + sp[1215] * PI0[0][1][0] + sp[1216] * PI0[0][1][0];
    A[61] = sp[1214] * PI0[0][1][1];
    A[62] = sp[1215] * PI0[0][1][1];
    A[63] = sp[1216] * PI0[0][1][1];
    A[64] = sp[1211] * PI0[0][1][0] + sp[1212] * PI0[0][1][0] + sp[1213] * PI0[0][1][0];
    A[65] = sp[1211] * PI0[0][1][1];
    A[66] = sp[1212] * PI0[0][1][1];
    A[67] = sp[1213] * PI0[0][1][1];
    A[68] = sp[1184] * PI0[0][1][0] + sp[1193] * PI0[0][1][0] + sp[1202] * PI0[0][1][0];
    A[69] = sp[1184] * PI0[0][1][1];
    A[70] = sp[1193] * PI0[0][1][1];
    A[71] = sp[1202] * PI0[0][1][1];
    A[72] = sp[1220] * PI0[0][1][0] + sp[1221] * PI0[0][1][0] + sp[1222] * PI0[0][1][0];
    A[73] = sp[1220] * PI0[0][1][1];
    A[74] = sp[1221] * PI0[0][1][1];
    A[75] = sp[1222] * PI0[0][1][1];
    A[76] = sp[1217] * PI0[0][1][0] + sp[1218] * PI0[0][1][0] + sp[1219] * PI0[0][1][0];
    A[77] = sp[1217] * PI0[0][1][1];
    A[78] = sp[1218] * PI0[0][1][1];
    A[79] = sp[1219] * PI0[0][1][1];
    A[80] = sp[1185] * PI0[0][1][0] + sp[1194] * PI0[0][1][0] + sp[1203] * PI0[0][1][0];
    A[81] = sp[1185] * PI0[0][1][1];
    A[82] = sp[1194] * PI0[0][1][1];
    A[83] = sp[1203] * PI0[0][1][1];
    A[84] = sp[1226] * PI0[0][1][0] + sp[1227] * PI0[0][1][0] + sp[1228] * PI0[0][1][0];
    A[85] = sp[1226] * PI0[0][1][1];
    A[86] = sp[1227] * PI0[0][1][1];
    A[87] = sp[1228] * PI0[0][1][1];
    A[88] = sp[1223] * PI0[0][1][0] + sp[1224] * PI0[0][1][0] + sp[1225] * PI0[0][1][0];
    A[89] = sp[1223] * PI0[0][1][1];
    A[90] = sp[1224] * PI0[0][1][1];
    A[91] = sp[1225] * PI0[0][1][1];
    A[92] = sp[1186] * PI0[0][1][0] + sp[1195] * PI0[0][1][0] + sp[1204] * PI0[0][1][0];
    A[93] = sp[1186] * PI0[0][1][1];
    A[94] = sp[1195] * PI0[0][1][1];
    A[95] = sp[1204] * PI0[0][1][1];
    A[96] = sp[1232] * PI0[0][0][0] + sp[1233] * PI0[0][0][0] + sp[1234] * PI0[0][0][0] + sp[1238] * PI0[0][0][0] + sp[1239] * PI0[0][0][0] + sp[1240] * PI0[0][0][0] + sp[1244] * PI0[0][0][0] + sp[1245] * PI0[0][0][0] + sp[1246] * PI0[0][0][0];
    A[97] = sp[1232] * PI0[0][0][1] + sp[1238] * PI0[0][0][1] + sp[1244] * PI0[0][0][1];
    A[98] = sp[1233] * PI0[0][0][1] + sp[1239] * PI0[0][0][1] + sp[1245] * PI0[0][0][1];
    A[99] = sp[1234] * PI0[0][0][1] + sp[1240] * PI0[0][0][1] + sp[1246] * PI0[0][0][1];
    A[100] = sp[1229] * PI0[0][0][0] + sp[1230] * PI0[0][0][0] + sp[1231] * PI0[0][0][0] + sp[1235] * PI0[0][0][0] + sp[1236] * PI0[0][0][0] + sp[1237] * PI0[0][0][0] + sp[1241] * PI0[0][0][0] + sp[1242] * PI0[0][0][0] + sp[1243] * PI0[0][0][0];
    A[101] = sp[1229] * PI0[0][0][1] + sp[1235] * PI0[0][0][1] + sp[1241] * PI0[0][0][1];
    A[102] = sp[1230] * PI0[0][0][1] + sp[1236] * PI0[0][0][1] + sp[1242] * PI0[0][0][1];
    A[103] = sp[1231] * PI0[0][0][1] + sp[1237] * PI0[0][0][1] + sp[1243] * PI0[0][0][1];
    A[104] = sp[1187] * PI0[0][0][0] + sp[1196] * PI0[0][0][0] + sp[1205] * PI0[0][0][0] + sp[1188] * PI0[0][0][0] + sp[1197] * PI0[0][0][0] + sp[1206] * PI0[0][0][0] + sp[1189] * PI0[0][0][0] + sp[1198] * PI0[0][0][0] + sp[1207] * PI0[0][0][0];
    A[105] = sp[1187] * PI0[0][0][1] + sp[1188] * PI0[0][0][1] + sp[1189] * PI0[0][0][1];
    A[106] = sp[1196] * PI0[0][0][1] + sp[1197] * PI0[0][0][1] + sp[1198] * PI0[0][0][1];
    A[107] = sp[1205] * PI0[0][0][1] + sp[1206] * PI0[0][0][1] + sp[1207] * PI0[0][0][1];
    A[108] = sp[1232] * PI0[0][1][0] + sp[1233] * PI0[0][1][0] + sp[1234] * PI0[0][1][0];
    A[109] = sp[1232] * PI0[0][1][1];
    A[110] = sp[1233] * PI0[0][1][1];
    A[111] = sp[1234] * PI0[0][1][1];
    A[112] = sp[1229] * PI0[0][1][0] + sp[1230] * PI0[0][1][0] + sp[1231] * PI0[0][1][0];
    A[113] = sp[1229] * PI0[0][1][1];
    A[114] = sp[1230] * PI0[0][1][1];
    A[115] = sp[1231] * PI0[0][1][1];
    A[116] = sp[1187] * PI0[0][1][0] + sp[1196] * PI0[0][1][0] + sp[1205] * PI0[0][1][0];
    A[117] = sp[1187] * PI0[0][1][1];
    A[118] = sp[1196] * PI0[0][1][1];
    A[119] = sp[1205] * PI0[0][1][1];
    A[120] = sp[1238] * PI0[0][1][0] + sp[1239] * PI0[0][1][0] + sp[1240] * PI0[0][1][0];
    A[121] = sp[1238] * PI0[0][1][1];
    A[122] = sp[1239] * PI0[0][1][1];
    A[123] = sp[1240] * PI0[0][1][1];
    A[124] = sp[1235] * PI0[0][1][0] + sp[1236] * PI0[0][1][0] + sp[1237] * PI0[0][1][0];
    A[125] = sp[1235] * PI0[0][1][1];
    A[126] = sp[1236] * PI0[0][1][1];
    A[127] = sp[1237] * PI0[0][1][1];
    A[128] = sp[1188] * PI0[0][1][0] + sp[1197] * PI0[0][1][0] + sp[1206] * PI0[0][1][0];
    A[129] = sp[1188] * PI0[0][1][1];
    A[130] = sp[1197] * PI0[0][1][1];
    A[131] = sp[1206] * PI0[0][1][1];
    A[132] = sp[1244] * PI0[0][1][0] + sp[1245] * PI0[0][1][0] + sp[1246] * PI0[0][1][0];
    A[133] = sp[1244] * PI0[0][1][1];
    A[134] = sp[1245] * PI0[0][1][1];
    A[135] = sp[1246] * PI0[0][1][1];
    A[136] = sp[1241] * PI0[0][1][0] + sp[1242] * PI0[0][1][0] + sp[1243] * PI0[0][1][0];
    A[137] = sp[1241] * PI0[0][1][1];
    A[138] = sp[1242] * PI0[0][1][1];
    A[139] = sp[1243] * PI0[0][1][1];
    A[140] = sp[1189] * PI0[0][1][0] + sp[1198] * PI0[0][1][0] + sp[1207] * PI0[0][1][0];
    A[141] = sp[1189] * PI0[0][1][1];
    A[142] = sp[1198] * PI0[0][1][1];
    A[143] = sp[1207] * PI0[0][1][1];
  }

};


class hyperelasticity_form_0: public ufc::form
{
public:

  hyperelasticity_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~hyperelasticity_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "aa7729dfea18c3c39094a0a18fe9b96d8020c97ec12c38c7bcb6bafffb02b8bec8eaa2425c9216ce602bd8770ac37f92ea739d94e2ea7ed06708982fefe19092";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new hyperelasticity_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new hyperelasticity_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new hyperelasticity_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new hyperelasticity_finite_element_1();
    case 1:
        return new hyperelasticity_finite_element_1();
    case 2:
        return new hyperelasticity_finite_element_1();
    case 3:
        return new hyperelasticity_finite_element_1();
    case 4:
        return new hyperelasticity_finite_element_2();
    case 5:
        return new hyperelasticity_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new hyperelasticity_dofmap_1();
    case 1:
        return new hyperelasticity_dofmap_1();
    case 2:
        return new hyperelasticity_dofmap_1();
    case 3:
        return new hyperelasticity_dofmap_1();
    case 4:
        return new hyperelasticity_dofmap_2();
    case 5:
        return new hyperelasticity_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new hyperelasticity_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new hyperelasticity_exterior_facet_integral_0_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class hyperelasticity_form_1: public ufc::form
{
public:

  hyperelasticity_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~hyperelasticity_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "54ec8c322b8e48c03205acb7f8339555db731b80d49a5a93c128146f7e51e530fa2be206574b16b43d1b8234a73a190a9ef7ab065f75c14122c87aa36321cfa1";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 3;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new hyperelasticity_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new hyperelasticity_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new hyperelasticity_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new hyperelasticity_finite_element_1();
    case 1:
        return new hyperelasticity_finite_element_1();
    case 2:
        return new hyperelasticity_finite_element_1();
    case 3:
        return new hyperelasticity_finite_element_2();
    case 4:
        return new hyperelasticity_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new hyperelasticity_dofmap_1();
    case 1:
        return new hyperelasticity_dofmap_1();
    case 2:
        return new hyperelasticity_dofmap_1();
    case 3:
        return new hyperelasticity_dofmap_2();
    case 4:
        return new hyperelasticity_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new hyperelasticity_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace HyperElasticity
{

class CoefficientSpace_B: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_B(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_B(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_T: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_T(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_T(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_lmbda: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_lmbda(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_lmbda(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_mu: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_mu(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_mu(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_F_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_F_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_F_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_F_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u Form_F_FunctionSpace_1;

typedef CoefficientSpace_B Form_F_FunctionSpace_2;

typedef CoefficientSpace_T Form_F_FunctionSpace_3;

typedef CoefficientSpace_mu Form_F_FunctionSpace_4;

typedef CoefficientSpace_lmbda Form_F_FunctionSpace_5;

class Form_F: public dolfin::Form
{
public:

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 5), u(*this, 0), B(*this, 1), T(*this, 2), mu(*this, 3), lmbda(*this, 4)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const hyperelasticity_form_0>();
  }

  // Constructor
  Form_F(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> B, std::shared_ptr<const dolfin::GenericFunction> T, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> lmbda):
    dolfin::Form(1, 5), u(*this, 0), B(*this, 1), T(*this, 2), mu(*this, 3), lmbda(*this, 4)
  {
    _function_spaces[0] = V0;

    this->u = u;
    this->B = B;
    this->T = T;
    this->mu = mu;
    this->lmbda = lmbda;

    _ufc_form = std::make_shared<const hyperelasticity_form_0>();
  }

  // Destructor
  ~Form_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "B")
      return 1;
    else if (name == "T")
      return 2;
    else if (name == "mu")
      return 3;
    else if (name == "lmbda")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "B";
    case 2:
      return "T";
    case 3:
      return "mu";
    case 4:
      return "lmbda";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_B;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_T;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_mu;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_lmbda;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner B;
  dolfin::CoefficientAssigner T;
  dolfin::CoefficientAssigner mu;
  dolfin::CoefficientAssigner lmbda;
};

class MultiMeshForm_F: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), u(*this, 0), B(*this, 1), T(*this, 2), mu(*this, 3), lmbda(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_F(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> B, std::shared_ptr<const dolfin::GenericFunction> T, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> lmbda):
    dolfin::MultiMeshForm(V0), u(*this, 0), B(*this, 1), T(*this, 2), mu(*this, 3), lmbda(*this, 4)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_F(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u = u;
    this->B = B;
    this->T = T;
    this->mu = mu;
    this->lmbda = lmbda;

  }

  // Destructor
  ~MultiMeshForm_F()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "B")
      return 1;
    else if (name == "T")
      return 2;
    else if (name == "mu")
      return 3;
    else if (name == "lmbda")
      return 4;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "B";
    case 2:
      return "T";
    case 3:
      return "mu";
    case 4:
      return "lmbda";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_F_FunctionSpace_0 TestSpace;
  typedef Form_F_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_F_FunctionSpace_1 CoefficientSpace_u;
  typedef Form_F_FunctionSpace_2 CoefficientSpace_B;
  typedef Form_F_FunctionSpace_3 CoefficientSpace_T;
  typedef Form_F_FunctionSpace_4 CoefficientSpace_mu;
  typedef Form_F_FunctionSpace_5 CoefficientSpace_lmbda;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u;
  dolfin::MultiMeshCoefficientAssigner B;
  dolfin::MultiMeshCoefficientAssigner T;
  dolfin::MultiMeshCoefficientAssigner mu;
  dolfin::MultiMeshCoefficientAssigner lmbda;
};

class Form_J_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_J_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<hyperelasticity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<hyperelasticity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_J_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_J_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_J_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_J_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_u Form_J_FunctionSpace_2;

typedef CoefficientSpace_mu Form_J_FunctionSpace_3;

typedef CoefficientSpace_lmbda Form_J_FunctionSpace_4;

class Form_J: public dolfin::Form
{
public:

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 3), u(*this, 0), mu(*this, 1), lmbda(*this, 2)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const hyperelasticity_form_1>();
  }

  // Constructor
  Form_J(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> lmbda):
    dolfin::Form(2, 3), u(*this, 0), mu(*this, 1), lmbda(*this, 2)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->u = u;
    this->mu = mu;
    this->lmbda = lmbda;

    _ufc_form = std::make_shared<const hyperelasticity_form_1>();
  }

  // Destructor
  ~Form_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "mu")
      return 1;
    else if (name == "lmbda")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "mu";
    case 2:
      return "lmbda";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_u;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_mu;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_lmbda;

  // Coefficients
  dolfin::CoefficientAssigner u;
  dolfin::CoefficientAssigner mu;
  dolfin::CoefficientAssigner lmbda;
};

class MultiMeshForm_J: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), u(*this, 0), mu(*this, 1), lmbda(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_J(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> u, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> lmbda):
    dolfin::MultiMeshForm(V1, V0), u(*this, 0), mu(*this, 1), lmbda(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_J(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->u = u;
    this->mu = mu;
    this->lmbda = lmbda;

  }

  // Destructor
  ~MultiMeshForm_J()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "u")
      return 0;
    else if (name == "mu")
      return 1;
    else if (name == "lmbda")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "u";
    case 1:
      return "mu";
    case 2:
      return "lmbda";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_J_FunctionSpace_0 TestSpace;
  typedef Form_J_FunctionSpace_1 TrialSpace;
  typedef Form_J_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_J_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_J_FunctionSpace_2 CoefficientSpace_u;
  typedef Form_J_FunctionSpace_3 CoefficientSpace_mu;
  typedef Form_J_FunctionSpace_4 CoefficientSpace_lmbda;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner u;
  dolfin::MultiMeshCoefficientAssigner mu;
  dolfin::MultiMeshCoefficientAssigner lmbda;
};

// Class typedefs
typedef Form_J BilinearForm;
typedef MultiMeshForm_J MultiMeshBilinearForm;
typedef Form_J JacobianForm;
typedef MultiMeshForm_J MultiMeshJacobianForm;
typedef Form_F LinearForm;
typedef MultiMeshForm_F MultiMeshLinearForm;
typedef Form_F ResidualForm;
typedef MultiMeshForm_F MultiMeshResidualForm;
typedef Form_F::TestSpace FunctionSpace;
typedef Form_F::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
