// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          True

#include "Poisson3D_3.h"

poisson3d_3_finite_element_0::poisson3d_3_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

poisson3d_3_finite_element_0::~poisson3d_3_finite_element_0()
{
    // Do nothing
}

const char * poisson3d_3_finite_element_0::signature() const
{
    return "FiniteElement('Lagrange', tetrahedron, 1)";
}

ufc::shape poisson3d_3_finite_element_0::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t poisson3d_3_finite_element_0::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_3_finite_element_0::geometric_dimension() const
{
    return 3;
}

std::size_t poisson3d_3_finite_element_0::space_dimension() const
{
    return 4;
}

std::size_t poisson3d_3_finite_element_0::value_rank() const
{
    return 0;
}

std::size_t poisson3d_3_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson3d_3_finite_element_0::value_size() const
{
    return 1;
}

std::size_t poisson3d_3_finite_element_0::reference_value_rank() const
{
    return 0;
}

std::size_t poisson3d_3_finite_element_0::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson3d_3_finite_element_0::reference_value_size() const
{
    return 1;
}

std::size_t poisson3d_3_finite_element_0::degree() const
{
    return 1;
}

const char * poisson3d_3_finite_element_0::family() const
{
    return "Lagrange";
}

void poisson3d_3_finite_element_0::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
}

void poisson3d_3_finite_element_0::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 1.825741858350554, 0.0, 0.0, 0.0 },
            { 5.163977794943222, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void poisson3d_3_finite_element_0::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void poisson3d_3_finite_element_0::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[4];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[4];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
}

void poisson3d_3_finite_element_0::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
}

void poisson3d_3_finite_element_0::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
}

void poisson3d_3_finite_element_0::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 4, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
}

double poisson3d_3_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
}

void poisson3d_3_finite_element_0::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

void poisson3d_3_finite_element_0::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

void poisson3d_3_finite_element_0::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
}

void poisson3d_3_finite_element_0::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
}

std::size_t poisson3d_3_finite_element_0::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * poisson3d_3_finite_element_0::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * poisson3d_3_finite_element_0::create() const
{
    return new poisson3d_3_finite_element_0();
}


poisson3d_3_finite_element_1::poisson3d_3_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

poisson3d_3_finite_element_1::~poisson3d_3_finite_element_1()
{
    // Do nothing
}

const char * poisson3d_3_finite_element_1::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

ufc::shape poisson3d_3_finite_element_1::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t poisson3d_3_finite_element_1::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_3_finite_element_1::geometric_dimension() const
{
    return 3;
}

std::size_t poisson3d_3_finite_element_1::space_dimension() const
{
    return 12;
}

std::size_t poisson3d_3_finite_element_1::value_rank() const
{
    return 1;
}

std::size_t poisson3d_3_finite_element_1::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t poisson3d_3_finite_element_1::value_size() const
{
    return 3;
}

std::size_t poisson3d_3_finite_element_1::reference_value_rank() const
{
    return 1;
}

std::size_t poisson3d_3_finite_element_1::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t poisson3d_3_finite_element_1::reference_value_size() const
{
    return 3;
}

std::size_t poisson3d_3_finite_element_1::degree() const
{
    return 1;
}

const char * poisson3d_3_finite_element_1::family() const
{
    return "Lagrange";
}

void poisson3d_3_finite_element_1::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
}

void poisson3d_3_finite_element_1::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 1.825741858350554, 0.0, 0.0, 0.0 },
            { 5.163977794943222, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void poisson3d_3_finite_element_1::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void poisson3d_3_finite_element_1::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[36];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[36];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
}

void poisson3d_3_finite_element_1::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
}

void poisson3d_3_finite_element_1::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
}

void poisson3d_3_finite_element_1::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[9] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
}

double poisson3d_3_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
}

void poisson3d_3_finite_element_1::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
}

void poisson3d_3_finite_element_1::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

void poisson3d_3_finite_element_1::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
}

void poisson3d_3_finite_element_1::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
}

std::size_t poisson3d_3_finite_element_1::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * poisson3d_3_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_3_finite_element_0();
    case 1:
        return new poisson3d_3_finite_element_0();
    case 2:
        return new poisson3d_3_finite_element_0();
    default:
        return nullptr;
    }
}

ufc::finite_element * poisson3d_3_finite_element_1::create() const
{
    return new poisson3d_3_finite_element_1();
}


poisson3d_3_finite_element_2::poisson3d_3_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

poisson3d_3_finite_element_2::~poisson3d_3_finite_element_2()
{
    // Do nothing
}

const char * poisson3d_3_finite_element_2::signature() const
{
    return "FiniteElement('Lagrange', tetrahedron, 3)";
}

ufc::shape poisson3d_3_finite_element_2::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t poisson3d_3_finite_element_2::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_3_finite_element_2::geometric_dimension() const
{
    return 3;
}

std::size_t poisson3d_3_finite_element_2::space_dimension() const
{
    return 20;
}

std::size_t poisson3d_3_finite_element_2::value_rank() const
{
    return 0;
}

std::size_t poisson3d_3_finite_element_2::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson3d_3_finite_element_2::value_size() const
{
    return 1;
}

std::size_t poisson3d_3_finite_element_2::reference_value_rank() const
{
    return 0;
}

std::size_t poisson3d_3_finite_element_2::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson3d_3_finite_element_2::reference_value_size() const
{
    return 1;
}

std::size_t poisson3d_3_finite_element_2::degree() const
{
    return 3;
}

const char * poisson3d_3_finite_element_2::family() const
{
    return "Lagrange";
}

void poisson3d_3_finite_element_2::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][20] = { { 0.028867513459481502, 0.01304101327393252, 0.007529232524210494, 0.005323971374999493, 0.018298126367784998, 0.014173667737846002, 0.011572751247156877, 0.008183170883849705, 0.006681531047810616, 0.0047245559126153185, -0.028347335475692043, -0.023957871187497752, -0.02074812506896831, -0.018557687223952277, -0.01607142857142857, -0.0131222664791956, -0.010714285714285716, -0.009278843611976128, -0.007576144084141593, -0.005357142857142843 } };
    static const double coefficients1[1][20] = { { 0.028867513459481256, -0.01304101327393256, 0.007529232524210435, 0.005323971374999505, 0.018298126367784984, -0.01417366773784601, -0.011572751247156891, 0.008183170883849712, 0.006681531047810593, 0.004724555912615336, 0.028347335475692043, -0.023957871187497752, -0.020748125068968306, 0.01855768722395226, 0.01607142857142857, 0.013122266479195602, -0.010714285714285723, -0.00927884361197613, -0.007576144084141591, -0.005357142857142858 } };
    static const double coefficients2[1][20] = { { 0.028867513459481218, 0.0, -0.015058465048420894, 0.005323971374999505, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621221, 0.004724555912615361, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714286, -0.02783653083592837, 0.015152288168283167, -0.005357142857142866 } };
    static const double coefficients3[1][20] = { { 0.02886751345948124, 0.0, 0.0, -0.01597191412499854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.11293848786315637, -0.06388765649999399, 0.0, 0.0, 0.0, 0.0736485379546474, 0.026726124191242397, -0.02362277956307671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383288, -0.060609152673132646, 0.026785714285714288 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.02258769757263127, 0.127775312999988, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.0472455591261534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.053571428571428575 } };
    static const double coefficients6[1][20] = { { 0.0, 0.09780759955449396, -0.05646924393157821, -0.06388765649999406, 0.054894379103354984, -0.04252100321353805, 0.023145502494313786, 0.02454951265154914, -0.013363062095621209, -0.023622779563076717, 0.0, 0.0, 0.04841229182759271, 0.0, -0.0375, -0.052489065916782374, 0.0, 0.02165063509461097, 0.030304576336566337, 0.02678571428571431 } };
    static const double coefficients7[1][20] = { { 0.0, -0.01956151991089882, 0.011293848786315647, 0.12777531299998807, 0.0, 0.0, 0.05786375623578448, 0.0, -0.03340765523905306, 0.04724555912615341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.03788072042070791, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.09780759955449396, -0.0790569415042095, -0.031943828249996996, 0.05489437910335498, 0.014173667737846025, -0.046291004988627586, -0.02454951265154914, 0.013363062095621226, 0.023622779563076714, 0.0, 0.04791574237499548, -0.006916041689656097, -0.06185895741317419, -0.016071428571428573, 0.008748177652797054, 0.04285714285714287, 0.015464739353293552, 0.0, -0.005357142857142861 } };
    static const double coefficients9[1][20] = { { 0.0, -0.019561519910898845, 0.12423233664947204, -0.03194382824999701, 0.0, 0.05669467095138406, -0.011572751247156898, 0.024549512651549133, -0.04677071733467428, 0.023622779563076683, 0.0, 0.0, 0.0, 0.06185895741317419, -0.021428571428571436, 0.004374088826398533, -0.0642857142857143, 0.009278843611976121, 0.007576144084141586, -0.005357142857142848 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449397, -0.056469243931578234, -0.06388765649999403, 0.054894379103355005, 0.042521003213538036, -0.023145502494313783, 0.024549512651549133, -0.013363062095621214, -0.0236227795630767, 0.0, 0.0, 0.04841229182759272, 0.0, 0.03749999999999999, 0.05248906591678239, 0.0, 0.021650635094610963, 0.030304576336566344, 0.026785714285714298 } };
    static const double coefficients11[1][20] = { { 0.0, 0.019561519910898818, 0.011293848786315612, 0.127775312999988, 0.0, 0.0, -0.05786375623578449, 0.0, -0.03340765523905308, 0.04724555912615339, 0.0, 0.0, 0.0, 0.0, 0.0, -0.065611332395978, 0.0, 0.0, -0.037880720420707906, -0.05357142857142858 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449395, -0.0790569415042095, -0.03194382824999696, 0.05489437910335501, -0.01417366773784601, 0.046291004988627565, -0.02454951265154913, 0.013363062095621228, 0.023622779563076728, 0.0, 0.0479157423749955, -0.006916041689656097, 0.06185895741317418, 0.016071428571428566, -0.008748177652797062, 0.042857142857142864, 0.015464739353293547, 0.0, -0.005357142857142869 } };
    static const double coefficients13[1][20] = { { 0.0, 0.01956151991089883, 0.12423233664947207, -0.031943828249997024, 0.0, -0.05669467095138405, 0.011572751247156907, 0.024549512651549157, -0.046770717334674285, 0.023622779563076693, 0.0, 0.0, 0.0, -0.06185895741317419, 0.021428571428571446, -0.00437408882639853, -0.06428571428571431, 0.009278843611976137, 0.007576144084141586, -0.0053571428571428485 } };
    static const double coefficients14[1][20] = { { 0.0, -0.11736911946539282, -0.045175395145262545, -0.031943828249997, -0.01829812636778497, 0.04252100321353805, 0.034718253741470674, 0.04091585441924857, 0.033407655239053036, 0.023622779563076703, 0.08504200642707613, 0.02395787118749774, 0.020748125068968316, -0.00618589574131741, -0.005357142857142858, -0.0043740888263985155, -0.01071428571428572, -0.009278843611976124, -0.007576144084141584, -0.005357142857142857 } };
    static const double coefficients15[1][20] = { { 0.0, 0.11736911946539276, -0.04517539514526255, -0.03194382824999702, -0.018298126367785005, -0.04252100321353806, -0.03471825374147068, 0.04091585441924857, 0.03340765523905305, 0.02362277956307669, -0.08504200642707613, 0.023957871187497752, 0.020748125068968306, 0.006185895741317408, 0.005357142857142866, 0.004374088826398518, -0.010714285714285716, -0.00927884361197613, -0.007576144084141588, -0.005357142857142848 } };
    static const double coefficients16[1][20] = { { 0.2598076211353318, 0.11736911946539276, 0.06776309271789384, 0.047915742374995546, 0.0, 0.0850420064270761, 0.06943650748294139, -0.07364853795464743, 0.04008918628686368, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, 0.07500000000000001, -0.026244532958391183, 0.0, -0.06495190528383292, -0.015152288168283155, 0.02678571428571428 } };
    static const double coefficients17[1][20] = { { 0.2598076211353318, -0.11736911946539276, 0.06776309271789388, 0.04791574237499545, 0.0, -0.08504200642707616, -0.06943650748294138, -0.07364853795464739, 0.04008918628686364, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.02624453295839119, 0.0, -0.06495190528383286, -0.015152288168283179, 0.026785714285714298 } };
    static const double coefficients18[1][20] = { { 0.25980762113533146, 0.0, -0.13552618543578765, 0.04791574237499548, -0.10978875820671001, 0.0, 0.0, 0.024549512651549112, -0.08017837257372729, -0.09921567416492212, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610952, 0.030304576336566316, 0.02678571428571427 } };
    static const double coefficients19[1][20] = { { 0.2598076211353316, 0.0, 0.0, -0.14374722712498647, -0.10978875820671, 0.0, 0.0, -0.1227475632577457, 0.0, 0.042521003213538036, 0.0, -0.09583148474999097, 0.013832083379312191, 0.0, 0.0, 0.0, 0.04285714285714287, 0.015464739353293545, 0.0, -0.00535714285714285 } };
    for (std::size_t k = 0; k < num_points * 20; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 1] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 3] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 4] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 5] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 6] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 7] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 8] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 9] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 10] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 11] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 12] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 13] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 14] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 15] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 16] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 17] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 18] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 19] += coefficients19[0][r] * basisvalues3[r];
    }
}

void poisson3d_3_finite_element_2::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 20 * num_derivatives, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][20][20] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.499090833947012, 0.0, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][20] = { { 0.028867513459481502, 0.01304101327393252, 0.007529232524210494, 0.005323971374999493, 0.018298126367784998, 0.014173667737846002, 0.011572751247156877, 0.008183170883849705, 0.006681531047810616, 0.0047245559126153185, -0.028347335475692043, -0.023957871187497752, -0.02074812506896831, -0.018557687223952277, -0.01607142857142857, -0.0131222664791956, -0.010714285714285716, -0.009278843611976128, -0.007576144084141593, -0.005357142857142843 } };
    static const double coefficients1[1][20] = { { 0.028867513459481256, -0.01304101327393256, 0.007529232524210435, 0.005323971374999505, 0.018298126367784984, -0.01417366773784601, -0.011572751247156891, 0.008183170883849712, 0.006681531047810593, 0.004724555912615336, 0.028347335475692043, -0.023957871187497752, -0.020748125068968306, 0.01855768722395226, 0.01607142857142857, 0.013122266479195602, -0.010714285714285723, -0.00927884361197613, -0.007576144084141591, -0.005357142857142858 } };
    static const double coefficients2[1][20] = { { 0.028867513459481218, 0.0, -0.015058465048420894, 0.005323971374999505, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621221, 0.004724555912615361, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714286, -0.02783653083592837, 0.015152288168283167, -0.005357142857142866 } };
    static const double coefficients3[1][20] = { { 0.02886751345948124, 0.0, 0.0, -0.01597191412499854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.11293848786315637, -0.06388765649999399, 0.0, 0.0, 0.0, 0.0736485379546474, 0.026726124191242397, -0.02362277956307671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383288, -0.060609152673132646, 0.026785714285714288 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.02258769757263127, 0.127775312999988, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.0472455591261534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.053571428571428575 } };
    static const double coefficients6[1][20] = { { 0.0, 0.09780759955449396, -0.05646924393157821, -0.06388765649999406, 0.054894379103354984, -0.04252100321353805, 0.023145502494313786, 0.02454951265154914, -0.013363062095621209, -0.023622779563076717, 0.0, 0.0, 0.04841229182759271, 0.0, -0.0375, -0.052489065916782374, 0.0, 0.02165063509461097, 0.030304576336566337, 0.02678571428571431 } };
    static const double coefficients7[1][20] = { { 0.0, -0.01956151991089882, 0.011293848786315647, 0.12777531299998807, 0.0, 0.0, 0.05786375623578448, 0.0, -0.03340765523905306, 0.04724555912615341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.03788072042070791, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.09780759955449396, -0.0790569415042095, -0.031943828249996996, 0.05489437910335498, 0.014173667737846025, -0.046291004988627586, -0.02454951265154914, 0.013363062095621226, 0.023622779563076714, 0.0, 0.04791574237499548, -0.006916041689656097, -0.06185895741317419, -0.016071428571428573, 0.008748177652797054, 0.04285714285714287, 0.015464739353293552, 0.0, -0.005357142857142861 } };
    static const double coefficients9[1][20] = { { 0.0, -0.019561519910898845, 0.12423233664947204, -0.03194382824999701, 0.0, 0.05669467095138406, -0.011572751247156898, 0.024549512651549133, -0.04677071733467428, 0.023622779563076683, 0.0, 0.0, 0.0, 0.06185895741317419, -0.021428571428571436, 0.004374088826398533, -0.0642857142857143, 0.009278843611976121, 0.007576144084141586, -0.005357142857142848 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449397, -0.056469243931578234, -0.06388765649999403, 0.054894379103355005, 0.042521003213538036, -0.023145502494313783, 0.024549512651549133, -0.013363062095621214, -0.0236227795630767, 0.0, 0.0, 0.04841229182759272, 0.0, 0.03749999999999999, 0.05248906591678239, 0.0, 0.021650635094610963, 0.030304576336566344, 0.026785714285714298 } };
    static const double coefficients11[1][20] = { { 0.0, 0.019561519910898818, 0.011293848786315612, 0.127775312999988, 0.0, 0.0, -0.05786375623578449, 0.0, -0.03340765523905308, 0.04724555912615339, 0.0, 0.0, 0.0, 0.0, 0.0, -0.065611332395978, 0.0, 0.0, -0.037880720420707906, -0.05357142857142858 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449395, -0.0790569415042095, -0.03194382824999696, 0.05489437910335501, -0.01417366773784601, 0.046291004988627565, -0.02454951265154913, 0.013363062095621228, 0.023622779563076728, 0.0, 0.0479157423749955, -0.006916041689656097, 0.06185895741317418, 0.016071428571428566, -0.008748177652797062, 0.042857142857142864, 0.015464739353293547, 0.0, -0.005357142857142869 } };
    static const double coefficients13[1][20] = { { 0.0, 0.01956151991089883, 0.12423233664947207, -0.031943828249997024, 0.0, -0.05669467095138405, 0.011572751247156907, 0.024549512651549157, -0.046770717334674285, 0.023622779563076693, 0.0, 0.0, 0.0, -0.06185895741317419, 0.021428571428571446, -0.00437408882639853, -0.06428571428571431, 0.009278843611976137, 0.007576144084141586, -0.0053571428571428485 } };
    static const double coefficients14[1][20] = { { 0.0, -0.11736911946539282, -0.045175395145262545, -0.031943828249997, -0.01829812636778497, 0.04252100321353805, 0.034718253741470674, 0.04091585441924857, 0.033407655239053036, 0.023622779563076703, 0.08504200642707613, 0.02395787118749774, 0.020748125068968316, -0.00618589574131741, -0.005357142857142858, -0.0043740888263985155, -0.01071428571428572, -0.009278843611976124, -0.007576144084141584, -0.005357142857142857 } };
    static const double coefficients15[1][20] = { { 0.0, 0.11736911946539276, -0.04517539514526255, -0.03194382824999702, -0.018298126367785005, -0.04252100321353806, -0.03471825374147068, 0.04091585441924857, 0.03340765523905305, 0.02362277956307669, -0.08504200642707613, 0.023957871187497752, 0.020748125068968306, 0.006185895741317408, 0.005357142857142866, 0.004374088826398518, -0.010714285714285716, -0.00927884361197613, -0.007576144084141588, -0.005357142857142848 } };
    static const double coefficients16[1][20] = { { 0.2598076211353318, 0.11736911946539276, 0.06776309271789384, 0.047915742374995546, 0.0, 0.0850420064270761, 0.06943650748294139, -0.07364853795464743, 0.04008918628686368, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, 0.07500000000000001, -0.026244532958391183, 0.0, -0.06495190528383292, -0.015152288168283155, 0.02678571428571428 } };
    static const double coefficients17[1][20] = { { 0.2598076211353318, -0.11736911946539276, 0.06776309271789388, 0.04791574237499545, 0.0, -0.08504200642707616, -0.06943650748294138, -0.07364853795464739, 0.04008918628686364, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.02624453295839119, 0.0, -0.06495190528383286, -0.015152288168283179, 0.026785714285714298 } };
    static const double coefficients18[1][20] = { { 0.25980762113533146, 0.0, -0.13552618543578765, 0.04791574237499548, -0.10978875820671001, 0.0, 0.0, 0.024549512651549112, -0.08017837257372729, -0.09921567416492212, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610952, 0.030304576336566316, 0.02678571428571427 } };
    static const double coefficients19[1][20] = { { 0.2598076211353316, 0.0, 0.0, -0.14374722712498647, -0.10978875820671, 0.0, 0.0, -0.1227475632577457, 0.0, 0.042521003213538036, 0.0, -0.09583148474999097, 0.013832083379312191, 0.0, 0.0, 0.0, 0.04285714285714287, 0.015464739353293545, 0.0, -0.00535714285714285 } };
    const std::size_t reference_offset[20] = {};
    const std::size_t num_components[20] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 20; ++i)
        {
            double derivatives[27] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[20 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void poisson3d_3_finite_element_2::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    std::fill_n(values, num_points * 20 * num_derivatives, 0.0);
    const std::size_t reference_offsets[20] = {};
    const std::size_t physical_offsets[20] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[27][27];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 20; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[20 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[20 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void poisson3d_3_finite_element_2::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[20];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[20];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
}

void poisson3d_3_finite_element_2::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 20; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
}

void poisson3d_3_finite_element_2::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    // Declare transformation matrix
    double transform[27][27] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481502, 0.01304101327393252, 0.007529232524210494, 0.005323971374999493, 0.018298126367784998, 0.014173667737846002, 0.011572751247156877, 0.008183170883849705, 0.006681531047810616, 0.0047245559126153185, -0.028347335475692043, -0.023957871187497752, -0.02074812506896831, -0.018557687223952277, -0.01607142857142857, -0.0131222664791956, -0.010714285714285716, -0.009278843611976128, -0.007576144084141593, -0.005357142857142843 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481256, -0.01304101327393256, 0.007529232524210435, 0.005323971374999505, 0.018298126367784984, -0.01417366773784601, -0.011572751247156891, 0.008183170883849712, 0.006681531047810593, 0.004724555912615336, 0.028347335475692043, -0.023957871187497752, -0.020748125068968306, 0.01855768722395226, 0.01607142857142857, 0.013122266479195602, -0.010714285714285723, -0.00927884361197613, -0.007576144084141591, -0.005357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481218, 0.0, -0.015058465048420894, 0.005323971374999505, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621221, 0.004724555912615361, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714286, -0.02783653083592837, 0.015152288168283167, -0.005357142857142866 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.02886751345948124, 0.0, 0.0, -0.01597191412499854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569205, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.11293848786315637, -0.06388765649999399, 0.0, 0.0, 0.0, 0.0736485379546474, 0.026726124191242397, -0.02362277956307671, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383288, -0.060609152673132646, 0.026785714285714288 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.02258769757263127, 0.127775312999988, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.0472455591261534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.05646924393157821, -0.06388765649999406, 0.054894379103354984, -0.04252100321353805, 0.023145502494313786, 0.02454951265154914, -0.013363062095621209, -0.023622779563076717, 0.0, 0.0, 0.04841229182759271, 0.0, -0.0375, -0.052489065916782374, 0.0, 0.02165063509461097, 0.030304576336566337, 0.02678571428571431 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.01956151991089882, 0.011293848786315647, 0.12777531299998807, 0.0, 0.0, 0.05786375623578448, 0.0, -0.03340765523905306, 0.04724555912615341, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.03788072042070791, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.0790569415042095, -0.031943828249996996, 0.05489437910335498, 0.014173667737846025, -0.046291004988627586, -0.02454951265154914, 0.013363062095621226, 0.023622779563076714, 0.0, 0.04791574237499548, -0.006916041689656097, -0.06185895741317419, -0.016071428571428573, 0.008748177652797054, 0.04285714285714287, 0.015464739353293552, 0.0, -0.005357142857142861 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898845, 0.12423233664947204, -0.03194382824999701, 0.0, 0.05669467095138406, -0.011572751247156898, 0.024549512651549133, -0.04677071733467428, 0.023622779563076683, 0.0, 0.0, 0.0, 0.06185895741317419, -0.021428571428571436, 0.004374088826398533, -0.0642857142857143, 0.009278843611976121, 0.007576144084141586, -0.005357142857142848 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449397, -0.056469243931578234, -0.06388765649999403, 0.054894379103355005, 0.042521003213538036, -0.023145502494313783, 0.024549512651549133, -0.013363062095621214, -0.0236227795630767, 0.0, 0.0, 0.04841229182759272, 0.0, 0.03749999999999999, 0.05248906591678239, 0.0, 0.021650635094610963, 0.030304576336566344, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.019561519910898818, 0.011293848786315612, 0.127775312999988, 0.0, 0.0, -0.05786375623578449, 0.0, -0.03340765523905308, 0.04724555912615339, 0.0, 0.0, 0.0, 0.0, 0.0, -0.065611332395978, 0.0, 0.0, -0.037880720420707906, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449395, -0.0790569415042095, -0.03194382824999696, 0.05489437910335501, -0.01417366773784601, 0.046291004988627565, -0.02454951265154913, 0.013363062095621228, 0.023622779563076728, 0.0, 0.0479157423749955, -0.006916041689656097, 0.06185895741317418, 0.016071428571428566, -0.008748177652797062, 0.042857142857142864, 0.015464739353293547, 0.0, -0.005357142857142869 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.01956151991089883, 0.12423233664947207, -0.031943828249997024, 0.0, -0.05669467095138405, 0.011572751247156907, 0.024549512651549157, -0.046770717334674285, 0.023622779563076693, 0.0, 0.0, 0.0, -0.06185895741317419, 0.021428571428571446, -0.00437408882639853, -0.06428571428571431, 0.009278843611976137, 0.007576144084141586, -0.0053571428571428485 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.11736911946539282, -0.045175395145262545, -0.031943828249997, -0.01829812636778497, 0.04252100321353805, 0.034718253741470674, 0.04091585441924857, 0.033407655239053036, 0.023622779563076703, 0.08504200642707613, 0.02395787118749774, 0.020748125068968316, -0.00618589574131741, -0.005357142857142858, -0.0043740888263985155, -0.01071428571428572, -0.009278843611976124, -0.007576144084141584, -0.005357142857142857 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.11736911946539276, -0.04517539514526255, -0.03194382824999702, -0.018298126367785005, -0.04252100321353806, -0.03471825374147068, 0.04091585441924857, 0.03340765523905305, 0.02362277956307669, -0.08504200642707613, 0.023957871187497752, 0.020748125068968306, 0.006185895741317408, 0.005357142857142866, 0.004374088826398518, -0.010714285714285716, -0.00927884361197613, -0.007576144084141588, -0.005357142857142848 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353318, 0.11736911946539276, 0.06776309271789384, 0.047915742374995546, 0.0, 0.0850420064270761, 0.06943650748294139, -0.07364853795464743, 0.04008918628686368, -0.09921567416492216, 0.0, 0.0, 0.0, 0.0, 0.07500000000000001, -0.026244532958391183, 0.0, -0.06495190528383292, -0.015152288168283155, 0.02678571428571428 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353318, -0.11736911946539276, 0.06776309271789388, 0.04791574237499545, 0.0, -0.08504200642707616, -0.06943650748294138, -0.07364853795464739, 0.04008918628686364, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.02624453295839119, 0.0, -0.06495190528383286, -0.015152288168283179, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.25980762113533146, 0.0, -0.13552618543578765, 0.04791574237499548, -0.10978875820671001, 0.0, 0.0, 0.024549512651549112, -0.08017837257372729, -0.09921567416492212, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610952, 0.030304576336566316, 0.02678571428571427 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, 0.0, 0.0, -0.14374722712498647, -0.10978875820671, 0.0, 0.0, -0.1227475632577457, 0.0, 0.042521003213538036, 0.0, -0.09583148474999097, 0.013832083379312191, 0.0, 0.0, 0.0, 0.04285714285714287, 0.015464739353293545, 0.0, -0.00535714285714285 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955861, 0.0, 8.36660026534077, -1.1832159566199265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739515, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947012, -3.536332675425702e-14, -3.3466401061363062, -2.3664319132398517, 15.49193338482967, 0.0, 0.0, 0.6928203230275548, 0.5656854249492373, 0.40000000000000085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.89897948556635, 0.0, 0.0, 0.0, 14.198591479439074, -0.8280786712108227, 1.2365374626829967e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0205099118974965e-14, 0.0, 0.0 },
                  { 0.0, 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000187, 0.0, 8.763560920082684, -1.549193338482969, 0.0, 0.0, 0.0, 9.524704719832533, -1.481312159636081, 0.26186146828319085, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0382209986281152e-14, 0.0, 0.0 },
                  { 3.1176914536239817, 0.0, 3.162277660168375, 4.9193495504995415, 0.0, 0.0, 0.0, 0.0, 10.690449676496982, -2.4189726272590577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2567321880839375e-14, 0.0, 0.0 },
                  { 2.545584412271563, 0.0, 0.0, 7.66811580507228, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477959, 7.24568837309473, 4.183300132670384, -0.5916079783099738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869758, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.645751311064618, 0.0, 9.660917830792961, 0.6831300510639894, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203939, 0.0, 0.0, 7.529940238806686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.4494897427831828, 2.828427124746207, -1.0000000000000102, 9.165151389911685, 7.099295739719533, -0.4140393356054128, -2.049390153191928, -0.4780914437337612, 0.16903085094570527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749808, 2.1213203435596397, -0.4082482904638644, 3.1754264805429377, 0.0, 0.0, 7.1713716560063645, 0.0, -1.3801311186847087, -1.561440116717655, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000015, -5.692099788303114, 4.381780460041347, -0.7745966692414893, 0.0, 10.998181667893986, 0.9621404708847319, 4.762352359916273, -0.7406560798180449, 0.130930734141597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119917, 2.738612787525831, 1.5811388300841902, 2.4596747752497694, 0.0, 0.0, 9.258200997725517, 0.0, 5.345224838248493, -1.209486313629527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357761, 0.0, 0.0, 3.8340579025361405, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1845925587262895, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706654, 0.0, -3.1622776601684057, -2.2360679774998027, 0.0, 0.0, 0.0, 13.747727084867517, 0.5345224838248537, 0.377964473009228, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999852, 0.0, 3.651483716701071, -2.840187787218762, 0.0, 0.0, 0.0, 0.0, 12.344267996967348, 1.3965944975103493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1781469486646387e-14, 0.0, 0.0 },
                  { 2.204540768504859, 0.0, 0.0, 6.6407830863536175, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498063, 5.612486080160917, -1.0801234497346437, -0.7637626158259773, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.29128784747792, 1.4491376746189448, 4.183300132670377, -0.5916079783099604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870084, 7.099295739719541, 0.0, 4.3474130238568325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323098, 0.0, 3.864367132317194, -0.34156502553198975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346366, 0.0, 7.0992957397195475, 2.5099800796022165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299106, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734774, 5.796550698475765, -1.6733200530681334, -1.1832159566199132, 7.7459666924148385, -1.1999999999999982, -0.9797958971132694, 0.34641016151377413, 0.2828427124746168, 0.19999999999999873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724464, 2.449489742783177, 2.8284271247462063, -1.0000000000000087, 1.3093073414159542, 7.099295739719536, -0.41403933560541106, -2.049390153191928, -0.4780914437337615, 0.16903085094570477, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.012461179749811, 2.121320343559645, -0.40824829046386624, 3.175426480542934, 9.071147352221455, 0.0, 7.171371656006363, 0.0, -1.3801311186847076, -1.5614401167176546, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000012, 0.632455532033676, 4.381780460041345, -0.7745966692414868, 0.0, 3.142337619398289, -0.10690449676497008, 4.76235235991627, -0.7406560798180418, 0.13093073414159578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119904, 0.5477225575051666, 1.5811388300841955, 2.459674775249768, 0.0, 9.071147352221454, 1.8516401995451055, 0.0, 5.345224838248489, -1.209486313629528, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357815, -6.26099033699945, 0.0, 3.8340579025361423, 0.0, 0.0, 10.583005244258313, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.039230484541332, 0.0, 3.1622776601683658, -0.44721359549995887, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248441, 0.07559289460184576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999929, 0.0, 1.4605934866803583, 1.4200938936093854, 0.0, 0.0, 0.0, 9.071147352221438, 4.937707198786952, -0.6982972487551775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349482, 0.0, -6.260990336999395, 2.2135943621178735, 0.0, 0.0, 0.0, 0.0, 10.583005244258366, 2.993325909419165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977285, 0.0, 0.0, -4.69574275274957, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
}

void poisson3d_3_finite_element_2::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 20, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[27] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 20; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
}

double poisson3d_3_finite_element_2::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
}

void poisson3d_3_finite_element_2::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
}

void poisson3d_3_finite_element_2::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

void poisson3d_3_finite_element_2::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 6 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 6 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 7] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 9 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 9 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 10] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 10 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 10 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 11] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 12] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 12 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 12 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 13] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 13 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 13 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 14] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 14 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 14 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 15] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 15 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 15 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 16] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 16 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 16 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 17] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 17 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 17 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 18] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 18 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 18 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 19] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 19 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 19 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
}

void poisson3d_3_finite_element_2::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[60] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0 };
    std::copy_n(dof_X, 60, reference_dof_coordinates);
}

std::size_t poisson3d_3_finite_element_2::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * poisson3d_3_finite_element_2::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * poisson3d_3_finite_element_2::create() const
{
    return new poisson3d_3_finite_element_2();
}


poisson3d_3_dofmap_0::poisson3d_3_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

poisson3d_3_dofmap_0::~poisson3d_3_dofmap_0()
{
    // Do nothing
}

const char * poisson3d_3_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
}

bool poisson3d_3_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t poisson3d_3_dofmap_0::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_3_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0];
}

std::size_t poisson3d_3_dofmap_0::num_global_support_dofs() const
{
    return 0;
}

std::size_t poisson3d_3_dofmap_0::num_element_support_dofs() const
{
    return 4;
}

std::size_t poisson3d_3_dofmap_0::num_element_dofs() const
{
    return 4;
}

std::size_t poisson3d_3_dofmap_0::num_facet_dofs() const
{
    return 3;
}

std::size_t poisson3d_3_dofmap_0::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t poisson3d_3_dofmap_0::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 2, 3, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void poisson3d_3_dofmap_0::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
}

void poisson3d_3_dofmap_0::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    }
}

void poisson3d_3_dofmap_0::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
}

void poisson3d_3_dofmap_0::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
}

std::size_t poisson3d_3_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * poisson3d_3_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * poisson3d_3_dofmap_0::create() const
{
    return new poisson3d_3_dofmap_0();
}


poisson3d_3_dofmap_1::poisson3d_3_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

poisson3d_3_dofmap_1::~poisson3d_3_dofmap_1()
{
    // Do nothing
}

const char * poisson3d_3_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

bool poisson3d_3_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t poisson3d_3_dofmap_1::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_3_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 3 * num_global_entities[0];
}

std::size_t poisson3d_3_dofmap_1::num_global_support_dofs() const
{
    return 0;
}

std::size_t poisson3d_3_dofmap_1::num_element_support_dofs() const
{
    return 12;
}

std::size_t poisson3d_3_dofmap_1::num_element_dofs() const
{
    return 12;
}

std::size_t poisson3d_3_dofmap_1::num_facet_dofs() const
{
    return 9;
}

std::size_t poisson3d_3_dofmap_1::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t poisson3d_3_dofmap_1::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 3, 6, 9, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void poisson3d_3_dofmap_1::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
}

void poisson3d_3_dofmap_1::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        break;
    }
}

void poisson3d_3_dofmap_1::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    }
}

void poisson3d_3_dofmap_1::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
}

std::size_t poisson3d_3_dofmap_1::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * poisson3d_3_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_3_dofmap_0();
    case 1:
        return new poisson3d_3_dofmap_0();
    case 2:
        return new poisson3d_3_dofmap_0();
    default:
        return nullptr;
    }
}

ufc::dofmap * poisson3d_3_dofmap_1::create() const
{
    return new poisson3d_3_dofmap_1();
}


poisson3d_3_dofmap_2::poisson3d_3_dofmap_2() : ufc::dofmap()
{
    // Do nothing
}

poisson3d_3_dofmap_2::~poisson3d_3_dofmap_2()
{
    // Do nothing
}

const char * poisson3d_3_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 3)";
}

bool poisson3d_3_dofmap_2::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, true, true, false };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t poisson3d_3_dofmap_2::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_3_dofmap_2::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0] + 2 * num_global_entities[1] + num_global_entities[2];
}

std::size_t poisson3d_3_dofmap_2::num_global_support_dofs() const
{
    return 0;
}

std::size_t poisson3d_3_dofmap_2::num_element_support_dofs() const
{
    return 20;
}

std::size_t poisson3d_3_dofmap_2::num_element_dofs() const
{
    return 20;
}

std::size_t poisson3d_3_dofmap_2::num_facet_dofs() const
{
    return 10;
}

std::size_t poisson3d_3_dofmap_2::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 2, 1, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t poisson3d_3_dofmap_2::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 4, 10, 20 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void poisson3d_3_dofmap_2::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + 2 * entity_indices[1][0];
    dofs[5] = offset + 2 * entity_indices[1][0] + 1;
    dofs[6] = offset + 2 * entity_indices[1][1];
    dofs[7] = offset + 2 * entity_indices[1][1] + 1;
    dofs[8] = offset + 2 * entity_indices[1][2];
    dofs[9] = offset + 2 * entity_indices[1][2] + 1;
    dofs[10] = offset + 2 * entity_indices[1][3];
    dofs[11] = offset + 2 * entity_indices[1][3] + 1;
    dofs[12] = offset + 2 * entity_indices[1][4];
    dofs[13] = offset + 2 * entity_indices[1][4] + 1;
    dofs[14] = offset + 2 * entity_indices[1][5];
    dofs[15] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[16] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[18] = offset + entity_indices[2][2];
    dofs[19] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
}

void poisson3d_3_dofmap_2::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 7;
        dofs[7] = 8;
        dofs[8] = 9;
        dofs[9] = 16;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 17;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 18;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 8;
        dofs[4] = 9;
        dofs[5] = 12;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 19;
        break;
    }
}

void poisson3d_3_dofmap_2::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            dofs[1] = 5;
            break;
        case 1:
            dofs[0] = 6;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 8;
            dofs[1] = 9;
            break;
        case 3:
            dofs[0] = 10;
            dofs[1] = 11;
            break;
        case 4:
            dofs[0] = 12;
            dofs[1] = 13;
            break;
        case 5:
            dofs[0] = 14;
            dofs[1] = 15;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 16;
            break;
        case 1:
            dofs[0] = 17;
            break;
        case 2:
            dofs[0] = 18;
            break;
        case 3:
            dofs[0] = 19;
            break;
        }
        break;
    }
}

void poisson3d_3_dofmap_2::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 9;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 10;
            dofs[3] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 12;
            dofs[3] = 13;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 14;
            dofs[3] = 15;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 7;
            dofs[7] = 8;
            dofs[8] = 9;
            dofs[9] = 16;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 17;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 18;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 8;
            dofs[4] = 9;
            dofs[5] = 12;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 19;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            break;
        }
        break;
    }
}

std::size_t poisson3d_3_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * poisson3d_3_dofmap_2::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * poisson3d_3_dofmap_2::create() const
{
    return new poisson3d_3_dofmap_2();
}


poisson3d_3_coordinate_mapping_1::poisson3d_3_coordinate_mapping_1() : ufc::coordinate_mapping()
{
    // Do nothing
}

poisson3d_3_coordinate_mapping_1::~poisson3d_3_coordinate_mapping_1()
{
    // Do nothing
}

const char * poisson3d_3_coordinate_mapping_1::signature() const
{
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

ufc::coordinate_mapping * poisson3d_3_coordinate_mapping_1::create() const
{
    return new poisson3d_3_coordinate_mapping_1();
}

std::size_t poisson3d_3_coordinate_mapping_1::geometric_dimension() const
{
    return 3;
}

std::size_t poisson3d_3_coordinate_mapping_1::topological_dimension() const
{
    return 3;
}

ufc::shape poisson3d_3_coordinate_mapping_1::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

ufc::finite_element * poisson3d_3_coordinate_mapping_1::create_coordinate_finite_element() const
{
    return new poisson3d_3_finite_element_1();
}

ufc::dofmap * poisson3d_3_coordinate_mapping_1::create_coordinate_dofmap() const
{
    return new poisson3d_3_dofmap_1();
}

void poisson3d_3_coordinate_mapping_1::compute_physical_coordinates(
    double * x, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    poisson3d_3_finite_element_0 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
}

void poisson3d_3_coordinate_mapping_1::compute_reference_coordinates(
    double * X, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
}

void poisson3d_3_coordinate_mapping_1::compute_reference_geometry(
    double * X, double * J, double * detJ, double * K, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
}

void poisson3d_3_coordinate_mapping_1::compute_jacobians(
    double * J, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    poisson3d_3_finite_element_0 xelement;
    double dphi[12];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
}

void poisson3d_3_coordinate_mapping_1::compute_jacobian_determinants(
    double * detJ, std::size_t num_points,
    const double * J,
    int cell_orientation) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
}

void poisson3d_3_coordinate_mapping_1::compute_jacobian_inverses(
    double * K, std::size_t num_points,
    const double * J, const double * detJ) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
}

void poisson3d_3_coordinate_mapping_1::compute_geometry(
    double * x, double * J, double * detJ, double * K, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs, int cell_orientation) const
{
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
}

void poisson3d_3_coordinate_mapping_1::compute_midpoint_geometry(
    double * x, double * J,
    const double * coordinate_dofs) const
{
    const double phi_Xm[4] = { 0.25000000000000006, 0.25, 0.25, 0.25 };
    const double dphi_Xm[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
}


poisson3d_3_cell_integral_0_otherwise::poisson3d_3_cell_integral_0_otherwise() : ufc::cell_integral()
{

}

poisson3d_3_cell_integral_0_otherwise::~poisson3d_3_cell_integral_0_otherwise()
{

}

const std::vector<bool> & poisson3d_3_cell_integral_0_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({});
return enabled;
}

void poisson3d_3_cell_integral_0_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation,
                                    std::size_t local_facet) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 4
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 4
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           4
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[1][16][16] =
        { { { 0.0595238095238096, -0.01130952380952381, -0.01339285714285702, -0.01339285714285712, -0.01339285714285694, -0.01339285714285736, -0.0348214285714285, 0.01339285714285712, -0.0348214285714285, 0.01339285714285736, -0.0964285714285715, 0.04821428571428575, -0.03214285714285719, 0.03214285714285718, 0.04821428571428551, 0.04821428571428545 },
            { -0.01130952380952381, 0.05952380952380945, -0.03482142857142859, 0.01339285714285703, -0.03482142857142854, 0.01339285714285717, -0.01339285714285719, -0.01339285714285701, -0.0133928571428571, -0.01339285714285716, 0.0482142857142857, -0.09642857142857136, 0.03214285714285699, -0.03214285714285702, 0.04821428571428579, 0.04821428571428563 },
            { -0.01339285714285702, -0.03482142857142859, 0.2410714285714283, -0.07232142857142818, 0.1205357142857143, -0.02410714285714308, 0.0482142857142858, 0.07232142857142813, 0.02410714285714287, 0.02410714285714305, 0.02410714285714253, 0.02410714285714307, -0.04821428571428562, 0.04821428571428563, -0.2892857142857142, -0.1446428571428571 },
            { -0.01339285714285712, 0.01339285714285703, -0.07232142857142818, 0.1928571428571422, -0.02410714285714306, -0.02410714285714277, 0.07232142857142834, -0.1928571428571422, 0.02410714285714285, 0.02410714285714279, 0.0, 0.0, 0.09642857142857156, -0.09642857142857153, 0.0, 0.0 },
            { -0.01339285714285694, -0.03482142857142854, 0.1205357142857143, -0.02410714285714306, 0.2410714285714287, -0.07232142857142883, 0.02410714285714279, 0.02410714285714304, 0.04821428571428535, 0.0723214285714288, 0.02410714285714251, 0.02410714285714294, -0.04821428571428634, 0.04821428571428639, -0.1446428571428572, -0.289285714285714 },
            { -0.01339285714285736, 0.01339285714285717, -0.02410714285714308, -0.02410714285714277, -0.07232142857142883, 0.1928571428571436, 0.02410714285714299, 0.0241071428571428, 0.07232142857142891, -0.1928571428571436, 0.0, 0.0, 0.09642857142857197, -0.09642857142857203, 0.0, 0.0 },
            { -0.0348214285714285, -0.01339285714285719, 0.0482142857142858, 0.07232142857142834, 0.02410714285714279, 0.02410714285714299, 0.2410714285714285, -0.07232142857142838, 0.1205357142857143, -0.02410714285714298, 0.02410714285714265, 0.02410714285714313, 0.04821428571428573, -0.04821428571428574, -0.2892857142857143, -0.1446428571428572 },
            { 0.01339285714285712, -0.01339285714285701, 0.07232142857142813, -0.1928571428571422, 0.02410714285714304, 0.0241071428571428, -0.07232142857142838, 0.1928571428571422, -0.02410714285714286, -0.02410714285714281, 0.0, 0.0, -0.09642857142857152, 0.09642857142857149, 0.0, 0.0 },
            { -0.0348214285714285, -0.0133928571428571, 0.02410714285714287, 0.02410714285714285, 0.04821428571428535, 0.07232142857142891, 0.1205357142857143, -0.02410714285714286, 0.2410714285714285, -0.07232142857142891, 0.02410714285714258, 0.02410714285714305, 0.04821428571428617, -0.04821428571428619, -0.1446428571428572, -0.2892857142857138 },
            { 0.01339285714285736, -0.01339285714285716, 0.02410714285714305, 0.02410714285714279, 0.0723214285714288, -0.1928571428571436, -0.02410714285714298, -0.02410714285714281, -0.07232142857142891, 0.1928571428571436, 0.0, 0.0, -0.09642857142857192, 0.09642857142857197, 0.0, 0.0 },
            { -0.0964285714285715, 0.0482142857142857, 0.02410714285714253, 0.0, 0.02410714285714251, 0.0, 0.02410714285714265, 0.0, 0.02410714285714258, 0.0, 0.2410714285714285, -0.1928571428571428, 0.0, 0.0, -0.04821428571428519, -0.04821428571428511 },
            { 0.04821428571428575, -0.09642857142857136, 0.02410714285714307, 0.0, 0.02410714285714294, 0.0, 0.02410714285714313, 0.0, 0.02410714285714305, 0.0, -0.1928571428571428, 0.2410714285714284, 0.0, 0.0, -0.04821428571428619, -0.04821428571428599 },
            { -0.03214285714285719, 0.03214285714285699, -0.04821428571428562, 0.09642857142857156, -0.04821428571428634, 0.09642857142857197, 0.04821428571428573, -0.09642857142857152, 0.04821428571428617, -0.09642857142857192, 0.0, 0.0, 0.5785714285714298, -0.57857142857143, 0.0, 0.0 },
            { 0.03214285714285718, -0.03214285714285702, 0.04821428571428563, -0.09642857142857153, 0.04821428571428639, -0.09642857142857203, -0.04821428571428574, 0.09642857142857149, -0.04821428571428619, 0.09642857142857197, 0.0, 0.0, -0.57857142857143, 0.5785714285714302, 0.0, 0.0 },
            { 0.04821428571428551, 0.04821428571428579, -0.2892857142857142, 0.0, -0.1446428571428572, 0.0, -0.2892857142857143, 0.0, -0.1446428571428572, 0.0, -0.04821428571428519, -0.04821428571428619, 0.0, 0.0, 0.5785714285714285, 0.2892857142857144 },
            { 0.04821428571428545, 0.04821428571428563, -0.1446428571428571, 0.0, -0.289285714285714, 0.0, -0.1446428571428572, 0.0, -0.2892857142857138, 0.0, -0.04821428571428511, -0.04821428571428599, 0.0, 0.0, 0.2892857142857144, 0.5785714285714278 } } };
    alignas(32) static const double PI1[1][16][16] =
        { { { 0.05952380952380956, -0.01130952380952388, -0.01339285714285716, -0.01339285714285716, -0.01339285714285703, -0.0133928571428572, -0.03482142857142848, 0.01339285714285714, -0.09642857142857146, 0.04821428571428581, -0.03482142857142842, 0.013392857142857, -0.03214285714285701, 0.04821428571428567, 0.03214285714285695, 0.04821428571428558 },
            { -0.01130952380952382, 0.0113095238095238, 0.01339285714285712, 0.01339285714285706, 0.06160714285714279, -0.03482142857142849, -0.01339285714285718, -0.01339285714285703, 0.0, 0.0, 0.03482142857142843, -0.06160714285714277, -0.01607142857142871, 0.0, 0.01607142857142875, 0.0 },
            { -0.01339285714285701, 0.01339285714285706, -0.04821428571428556, -0.07232142857142843, 0.09642857142857177, -0.04821428571428601, 0.04821428571428571, 0.07232142857142833, 0.0, 0.0, 0.04821428571428547, -0.09642857142857128, 0.2410714285714288, 0.0, -0.2410714285714288, 0.0 },
            { -0.01339285714285717, 0.01339285714285712, -0.07232142857142849, 0.192857142857143, -0.02410714285714293, -0.02410714285714273, 0.07232142857142861, -0.1928571428571426, 0.0, 0.0, 0.02410714285714282, 0.02410714285714274, 0.09642857142857103, 0.0, -0.09642857142857086, 0.0 },
            { -0.01339285714285693, -0.03482142857142859, -0.04821428571428574, -0.02410714285714314, 0.09642857142857214, 0.0723214285714279, 0.02410714285714281, 0.02410714285714313, 0.02410714285714254, 0.02410714285714309, 0.0482142857142854, -0.0964285714285715, 0.120535714285714, 0.02410714285714313, -0.1205357142857139, -0.1205357142857139 },
            { -0.01339285714285727, 0.06160714285714292, 0.09642857142857141, -0.02410714285714291, -0.02410714285714301, 0.09642857142857202, 0.02410714285714291, 0.02410714285714285, 0.04821428571428592, -0.09642857142857175, 0.02410714285714307, 0.02410714285714279, -0.02410714285714222, -0.1205357142857146, 0.02410714285714255, -0.1205357142857147 },
            { -0.03482142857142861, -0.01339285714285706, 0.04821428571428556, 0.07232142857142869, 0.02410714285714297, 0.02410714285714292, 0.2410714285714285, -0.07232142857142856, 0.02410714285714269, 0.02410714285714328, 0.1205357142857144, -0.02410714285714304, 0.04821428571428542, -0.2892857142857141, -0.04821428571428546, -0.1446428571428574 },
            { 0.01339285714285717, -0.01339285714285712, 0.07232142857142856, -0.192857142857143, 0.02410714285714292, 0.02410714285714275, -0.07232142857142868, 0.1928571428571427, 0.0, 0.0, -0.02410714285714284, -0.02410714285714273, -0.09642857142857109, 0.0, 0.09642857142857092, 0.0 },
            { -0.03482142857142849, 0.03482142857142864, 0.0482142857142858, 0.02410714285714299, 0.02410714285714291, 0.04821428571428577, 0.1205357142857143, -0.02410714285714293, 0.1446428571428565, -0.1446428571428565, 0.1205357142857145, -0.02410714285714289, 0.02410714285714299, -0.1687500000000002, -0.02410714285714304, -0.1687500000000003 },
            { 0.01339285714285726, -0.06160714285714292, -0.09642857142857138, 0.02410714285714292, 0.02410714285714301, -0.09642857142857204, -0.0241071428571429, -0.02410714285714288, -0.04821428571428592, 0.09642857142857178, -0.02410714285714307, -0.02410714285714279, 0.02410714285714221, 0.1205357142857145, -0.02410714285714255, 0.1205357142857147 },
            { -0.0964285714285715, 0.0, 0.0, 0.0, 0.04821428571428546, 0.02410714285714274, 0.02410714285714263, 0.0, 0.1205357142857143, -0.0241071428571429, 0.1446428571428567, -0.0482142857142854, 0.02410714285714267, -0.0241071428571427, -0.02410714285714274, -0.1687499999999995 },
            { 0.0482142857142858, 0.0, 0.0, 0.0, -0.09642857142857121, 0.02410714285714285, 0.02410714285714312, 0.0, -0.02410714285714307, -0.02410714285714268, -0.1446428571428567, 0.09642857142857122, 0.02410714285714288, -0.02410714285714313, -0.02410714285714281, 0.1205357142857139 },
            { -0.03214285714285708, -0.01607142857142863, 0.2410714285714282, 0.0964285714285719, -0.02410714285714288, 0.1205357142857146, 0.04821428571428568, -0.09642857142857171, 0.02410714285714337, 0.02410714285714209, 0.02410714285714292, 0.02410714285714282, 0.2892857142857159, -0.2892857142857148, -0.2892857142857148, -0.1446428571428572 },
            { 0.03214285714285706, 0.01607142857142863, -0.2410714285714283, -0.09642857142857189, 0.0241071428571429, -0.1205357142857147, -0.04821428571428569, 0.09642857142857165, -0.02410714285714339, -0.02410714285714209, -0.02410714285714292, -0.02410714285714285, -0.2892857142857159, 0.2892857142857149, 0.2892857142857148, 0.1446428571428573 },
            { 0.0482142857142856, 0.0, 0.0, 0.0, -0.1205357142857148, 0.02410714285714297, -0.2892857142857143, 0.0, -0.02410714285714265, -0.02410714285714322, -0.1687499999999999, 0.1205357142857143, -0.2892857142857141, 0.289285714285714, 0.2892857142857141, 0.1446428571428574 },
            { 0.04821428571428544, 0.0, 0.0, 0.0, -0.1205357142857151, -0.1205357142857136, -0.1446428571428572, 0.0, -0.168749999999999, 0.1205357142857132, -0.1687499999999998, 0.1205357142857144, -0.1446428571428572, 0.1446428571428571, 0.1446428571428572, 0.2892857142857141 } } };
    alignas(32) static const double PI2[1][16][16] =
        { { { 0.05952380952380954, -0.01130952380952384, -0.0133928571428573, -0.01339285714285701, -0.01339285714285708, -0.01339285714285702, -0.09642857142857138, 0.0482142857142857, -0.0348214285714285, 0.01339285714285732, -0.03482142857142845, 0.01339285714285699, -0.03214285714285721, 0.04821428571428558, 0.04821428571428543, 0.03214285714285715 },
            { -0.01130952380952382, 0.01130952380952377, 0.01339285714285711, 0.01339285714285705, 0.06160714285714275, -0.03482142857142859, 0.0, 0.0, -0.01339285714285714, -0.01339285714285715, 0.03482142857142842, -0.06160714285714278, -0.01607142857142865, 0.0, 0.0, 0.0160714285714286 },
            { -0.01339285714285704, -0.03482142857142858, -0.02410714285714257, -0.04821428571428565, 0.09642857142857186, 0.07232142857142843, 0.02410714285714253, 0.02410714285714333, 0.024107142857143, 0.02410714285714301, 0.0482142857142854, -0.09642857142857128, 0.1205357142857143, 0.02410714285714259, -0.1205357142857144, -0.1205357142857141 },
            { -0.01339285714285715, 0.06160714285714276, -0.02410714285714303, 0.09642857142857131, -0.02410714285714265, 0.09642857142857103, 0.04821428571428565, -0.09642857142857138, 0.02410714285714287, 0.02410714285714286, 0.02410714285714283, 0.0241071428571426, -0.02410714285714279, -0.1205357142857143, -0.1205357142857137, 0.02410714285714283 },
            { -0.01339285714285701, 0.01339285714285705, -0.07232142857142823, -0.04821428571428615, 0.09642857142857189, -0.048214285714286, 0.0, 0.0, 0.04821428571428552, 0.07232142857142877, 0.04821428571428532, -0.09642857142857145, 0.2410714285714284, 0.0, 0.0, -0.2410714285714284 },
            { -0.01339285714285718, 0.01339285714285714, 0.1928571428571425, -0.07232142857142852, -0.02410714285714302, -0.02410714285714294, 0.0, 0.0, 0.07232142857142872, -0.1928571428571434, 0.02410714285714315, 0.02410714285714306, 0.09642857142857271, 0.0, 0.0, -0.0964285714285725 },
            { -0.03482142857142856, 0.0348214285714287, 0.02410714285714246, 0.04821428571428584, 0.02410714285714324, 0.04821428571428496, 0.1446428571428567, -0.1446428571428566, 0.1205357142857143, -0.02410714285714287, 0.1205357142857144, -0.02410714285714306, 0.02410714285714311, -0.1687499999999999, -0.1687499999999995, -0.02410714285714301 },
            { 0.01339285714285715, -0.06160714285714276, 0.02410714285714306, -0.09642857142857131, 0.02410714285714264, -0.09642857142857109, -0.04821428571428567, 0.09642857142857142, -0.02410714285714289, -0.02410714285714289, -0.02410714285714285, -0.02410714285714259, 0.0241071428571428, 0.1205357142857143, 0.1205357142857137, -0.02410714285714284 },
            { -0.03482142857142855, -0.01339285714285699, 0.07232142857142829, 0.0482142857142859, 0.02410714285714294, 0.02410714285714263, 0.02410714285714261, 0.02410714285714307, 0.2410714285714284, -0.0723214285714288, 0.1205357142857145, -0.02410714285714282, 0.0482142857142862, -0.2892857142857142, -0.1446428571428574, -0.04821428571428604 },
            { 0.01339285714285718, -0.01339285714285714, -0.1928571428571425, 0.07232142857142855, 0.02410714285714301, 0.02410714285714295, 0.0, 0.0, -0.07232142857142872, 0.1928571428571434, -0.02410714285714315, -0.02410714285714305, -0.09642857142857272, 0.0, 0.0, 0.09642857142857252 },
            { -0.09642857142857149, 0.0, 0.0, 0.0, 0.04821428571428548, 0.02410714285714278, 0.1205357142857143, -0.02410714285714282, 0.02410714285714257, 0.0, 0.1446428571428568, -0.04821428571428548, 0.0241071428571426, -0.02410714285714281, -0.1687499999999995, -0.02410714285714256 },
            { 0.0482142857142858, 0.0, 0.0, 0.0, -0.09642857142857117, 0.0241071428571428, -0.02410714285714302, -0.0241071428571427, 0.0241071428571431, 0.0, -0.1446428571428567, 0.09642857142857129, 0.024107142857143, -0.02410714285714297, 0.1205357142857139, -0.02410714285714291 },
            { -0.03214285714285707, -0.01607142857142876, 0.09642857142857099, 0.2410714285714285, -0.02410714285714271, 0.1205357142857146, 0.02410714285714254, 0.02410714285714217, 0.04821428571428621, -0.09642857142857159, 0.02410714285714295, 0.02410714285714299, 0.2892857142857161, -0.2892857142857148, -0.144642857142857, -0.2892857142857157 },
            { 0.03214285714285708, 0.01607142857142878, -0.09642857142857106, -0.2410714285714286, 0.02410714285714273, -0.1205357142857146, -0.02410714285714256, -0.02410714285714217, -0.04821428571428624, 0.09642857142857164, -0.02410714285714296, -0.02410714285714302, -0.2892857142857161, 0.2892857142857149, 0.144642857142857, 0.2892857142857158 },
            { 0.04821428571428558, 0.0, 0.0, 0.0, -0.1205357142857151, -0.1205357142857133, -0.1687499999999992, 0.1205357142857132, -0.1446428571428574, 0.0, -0.1687499999999998, 0.1205357142857143, -0.1446428571428576, 0.1446428571428571, 0.2892857142857139, 0.1446428571428573 },
            { 0.04821428571428558, 0.0, 0.0, 0.0, -0.1205357142857148, 0.02410714285714324, -0.02410714285714261, -0.02410714285714328, -0.2892857142857139, 0.0, -0.1687499999999998, 0.1205357142857142, -0.2892857142857145, 0.289285714285714, 0.144642857142857, 0.2892857142857144 } } };
    alignas(32) static const double PI3[1][16][16] =
        { { { 0.05952380952380951, -0.01130952380952382, -0.01339285714285712, -0.01339285714285722, -0.01339285714285706, -0.01339285714285715, -0.03482142857142859, 0.01339285714285719, -0.09642857142857135, 0.04821428571428566, -0.03482142857142853, 0.01339285714285701, -0.03214285714285692, 0.04821428571428572, 0.03214285714285688, 0.04821428571428566 },
            { -0.01130952380952382, 0.05952380952380943, -0.0348214285714285, 0.01339285714285717, 0.01339285714285707, -0.03482142857142841, -0.01339285714285703, -0.01339285714285714, 0.04821428571428574, -0.09642857142857145, -0.01339285714285715, -0.01339285714285712, 0.03214285714285701, 0.04821428571428553, -0.03214285714285695, 0.0482142857142857 },
            { -0.01339285714285712, -0.0348214285714285, 0.2410714285714277, -0.07232142857142881, -0.02410714285714277, 0.1205357142857141, 0.04821428571428531, 0.07232142857142869, 0.02410714285714296, 0.02410714285714256, 0.02410714285714305, 0.02410714285714267, -0.04821428571428492, -0.2892857142857134, 0.04821428571428524, -0.144642857142857 },
            { -0.01339285714285722, 0.01339285714285717, -0.07232142857142881, 0.1928571428571438, -0.02410714285714303, -0.02410714285714287, 0.07232142857142895, -0.1928571428571434, 0.0, 0.0, 0.02410714285714297, 0.02410714285714284, 0.0964285714285715, 0.0, -0.09642857142857132, 0.0 },
            { -0.01339285714285706, 0.01339285714285707, -0.02410714285714277, -0.02410714285714303, 0.1928571428571436, -0.07232142857142863, 0.02410714285714295, 0.02410714285714302, 0.0, 0.0, 0.07232142857142833, -0.1928571428571431, 0.09642857142857197, 0.0, -0.09642857142857192, 0.0 },
            { -0.01339285714285715, -0.03482142857142841, 0.1205357142857141, -0.02410714285714287, -0.07232142857142863, 0.2410714285714285, 0.02410714285714285, 0.02410714285714281, 0.02410714285714275, 0.02410714285714276, 0.04821428571428588, 0.07232142857142861, -0.04821428571428532, -0.1446428571428572, 0.04821428571428568, -0.2892857142857144 },
            { -0.03482142857142859, -0.01339285714285703, 0.04821428571428531, 0.07232142857142895, 0.02410714285714295, 0.02410714285714285, 0.2410714285714285, -0.07232142857142883, 0.02410714285714264, 0.02410714285714328, 0.1205357142857144, -0.02410714285714301, 0.04821428571428556, -0.2892857142857138, -0.04821428571428556, -0.1446428571428574 },
            { 0.01339285714285719, -0.01339285714285714, 0.07232142857142869, -0.1928571428571434, 0.02410714285714302, 0.02410714285714281, -0.07232142857142883, 0.1928571428571431, 0.0, 0.0, -0.0241071428571429, -0.02410714285714283, -0.09642857142857122, 0.0, 0.09642857142857107, 0.0 },
            { -0.09642857142857135, 0.04821428571428574, 0.02410714285714296, 0.0, 0.0, 0.02410714285714275, 0.02410714285714264, 0.0, 0.2410714285714279, -0.1928571428571423, 0.02410714285714258, 0.0, 0.0, -0.04821428571428567, 0.0, -0.04821428571428522 },
            { 0.04821428571428566, -0.09642857142857145, 0.02410714285714256, 0.0, 0.0, 0.02410714285714276, 0.02410714285714328, 0.0, -0.1928571428571423, 0.2410714285714282, 0.02410714285714338, 0.0, 0.0, -0.04821428571428579, 0.0, -0.04821428571428635 },
            { -0.03482142857142853, -0.01339285714285715, 0.02410714285714305, 0.02410714285714297, 0.07232142857142833, 0.04821428571428588, 0.1205357142857144, -0.0241071428571429, 0.02410714285714258, 0.02410714285714338, 0.241071428571429, -0.07232142857142834, 0.04821428571428527, -0.1446428571428574, -0.04821428571428532, -0.289285714285715 },
            { 0.01339285714285701, -0.01339285714285712, 0.02410714285714267, 0.02410714285714284, -0.1928571428571431, 0.07232142857142861, -0.02410714285714301, -0.02410714285714283, 0.0, 0.0, -0.07232142857142834, 0.1928571428571426, -0.09642857142857143, 0.0, 0.09642857142857142, 0.0 },
            { -0.03214285714285692, 0.03214285714285701, -0.04821428571428492, 0.0964285714285715, 0.09642857142857197, -0.04821428571428532, 0.04821428571428556, -0.09642857142857122, 0.0, 0.0, 0.04821428571428527, -0.09642857142857143, 0.5785714285714298, 0.0, -0.5785714285714291, 0.0 },
            { 0.04821428571428572, 0.04821428571428553, -0.2892857142857134, 0.0, 0.0, -0.1446428571428572, -0.2892857142857138, 0.0, -0.04821428571428567, -0.04821428571428579, -0.1446428571428574, 0.0, 0.0, 0.5785714285714276, 0.0, 0.2892857142857146 },
            { 0.03214285714285688, -0.03214285714285695, 0.04821428571428524, -0.09642857142857132, -0.09642857142857192, 0.04821428571428568, -0.04821428571428556, 0.09642857142857107, 0.0, 0.0, -0.04821428571428532, 0.09642857142857142, -0.5785714285714291, 0.0, 0.5785714285714283, 0.0 },
            { 0.04821428571428566, 0.0482142857142857, -0.144642857142857, 0.0, 0.0, -0.2892857142857144, -0.1446428571428574, 0.0, -0.04821428571428522, -0.04821428571428635, -0.289285714285715, 0.0, 0.0, 0.2892857142857146, 0.0, 0.5785714285714296 } } };
    alignas(32) static const double PI4[1][16][16] =
        { { { 0.05952380952380951, -0.01130952380952385, -0.01339285714285721, -0.01339285714285705, -0.01339285714285711, -0.01339285714285704, -0.09642857142857136, 0.04821428571428572, -0.0348214285714285, 0.01339285714285723, -0.03482142857142856, 0.01339285714285701, -0.03214285714285707, 0.04821428571428561, 0.04821428571428556, 0.03214285714285697 },
            { -0.01130952380952381, 0.0113095238095238, 0.06160714285714271, -0.03482142857142859, 0.01339285714285714, 0.01339285714285702, 0.0, 0.0, 0.03482142857142856, -0.06160714285714287, -0.01339285714285713, -0.01339285714285708, -0.01607142857142846, 0.0, 0.0, 0.01607142857142854 },
            { -0.0133928571428571, -0.03482142857142866, 0.09642857142857067, 0.07232142857142849, -0.02410714285714287, -0.04821428571428548, 0.02410714285714254, 0.0241071428571428, 0.04821428571428574, -0.09642857142857124, 0.02410714285714309, 0.02410714285714287, 0.1205357142857147, -0.120535714285714, 0.02410714285714265, -0.1205357142857146 },
            { -0.0133928571428572, 0.06160714285714299, -0.02410714285714317, 0.09642857142857175, -0.02410714285714275, 0.09642857142857152, 0.04821428571428585, -0.09642857142857177, 0.02410714285714301, 0.024107142857143, 0.02410714285714297, 0.0241071428571427, -0.02410714285714294, -0.1205357142857148, -0.1205357142857143, 0.02410714285714298 },
            { -0.01339285714285711, 0.0133928571428571, -0.02410714285714262, -0.02410714285714316, 0.1928571428571435, -0.07232142857142877, 0.0, 0.0, 0.02410714285714296, 0.02410714285714297, 0.07232142857142826, -0.1928571428571431, 0.09642857142857218, 0.0, 0.0, -0.0964285714285722 },
            { -0.01339285714285711, 0.0133928571428571, 0.09642857142857131, -0.04821428571428563, -0.07232142857142884, -0.04821428571428557, 0.0, 0.0, 0.04821428571428574, -0.09642857142857185, 0.04821428571428593, 0.07232142857142884, 0.2410714285714291, 0.0, 0.0, -0.241071428571429 },
            { -0.03482142857142854, 0.03482142857142879, 0.02410714285714238, 0.04821428571428588, 0.02410714285714322, 0.0482142857142851, 0.1446428571428567, -0.1446428571428567, 0.1205357142857143, -0.02410714285714279, 0.1205357142857144, -0.02410714285714303, 0.02410714285714302, -0.16875, -0.1687499999999998, -0.02410714285714293 },
            { 0.01339285714285717, -0.0616071428571429, 0.02410714285714313, -0.09642857142857156, 0.02410714285714274, -0.09642857142857129, -0.04821428571428577, 0.0964285714285716, -0.02410714285714295, -0.02410714285714295, -0.0241071428571429, -0.02410714285714269, 0.02410714285714294, 0.1205357142857146, 0.120535714285714, -0.02410714285714298 },
            { -0.09642857142857138, 0.0, 0.04821428571428572, 0.02410714285714281, 0.0, 0.0, 0.1205357142857142, -0.02410714285714288, 0.1446428571428565, -0.04821428571428587, 0.02410714285714262, 0.0, 0.02410714285714333, -0.1687499999999994, -0.02410714285714258, -0.0241071428571432 },
            { 0.04821428571428568, 0.0, -0.09642857142857141, 0.02410714285714295, 0.0, 0.0, -0.02410714285714278, -0.02410714285714281, -0.1446428571428563, 0.09642857142857171, 0.02410714285714331, 0.0, 0.02410714285714191, 0.1205357142857134, -0.02410714285714331, -0.02410714285714204 },
            { -0.03482142857142856, -0.0133928571428571, 0.02410714285714268, 0.02410714285714313, 0.07232142857142843, 0.04821428571428542, 0.02410714285714254, 0.02410714285714328, 0.1205357142857144, -0.024107142857143, 0.2410714285714289, -0.07232142857142838, 0.04821428571428558, -0.1446428571428574, -0.2892857142857146, -0.04821428571428554 },
            { 0.01339285714285707, -0.01339285714285711, 0.0241071428571424, 0.02410714285714303, -0.1928571428571429, 0.07232142857142856, 0.0, 0.0, -0.02410714285714294, -0.02410714285714274, -0.07232142857142825, 0.1928571428571426, -0.09642857142857147, 0.0, 0.0, 0.09642857142857147 },
            { -0.03214285714285696, -0.01607142857142889, -0.02410714285714195, 0.1205357142857137, 0.09642857142857231, 0.2410714285714282, 0.02410714285714219, 0.02410714285714322, 0.02410714285714323, 0.02410714285714234, 0.04821428571428518, -0.09642857142857143, 0.2892857142857164, -0.1446428571428573, -0.2892857142857136, -0.289285714285716 },
            { 0.04821428571428567, 0.0, -0.1205357142857133, -0.1205357142857147, 0.0, 0.0, -0.1687499999999992, 0.1205357142857138, -0.1687500000000002, 0.1205357142857142, -0.1446428571428574, 0.0, -0.144642857142858, 0.2892857142857145, 0.1446428571428572, 0.1446428571428578 },
            { 0.03214285714285692, 0.01607142857142897, 0.02410714285714229, -0.1205357142857136, -0.09642857142857229, -0.241071428571428, -0.02410714285714219, -0.02410714285714323, -0.02410714285714328, -0.02410714285714267, -0.04821428571428528, 0.09642857142857141, -0.2892857142857154, 0.1446428571428572, 0.2892857142857135, 0.289285714285715 },
            { 0.04821428571428565, 0.0, -0.1205357142857137, 0.02410714285714256, 0.0, 0.0, -0.02410714285714237, -0.02410714285714295, -0.1687500000000002, 0.1205357142857145, -0.289285714285715, 0.0, -0.289285714285715, 0.1446428571428574, 0.2892857142857146, 0.2892857142857149 } } };
    alignas(32) static const double PI5[1][16][16] =
        { { { 0.05952380952380949, -0.0113095238095238, -0.01339285714285712, -0.01339285714285713, -0.01339285714285716, -0.01339285714285704, -0.09642857142857129, 0.04821428571428562, -0.03482142857142855, 0.01339285714285715, -0.03482142857142858, 0.01339285714285707, -0.03214285714285706, 0.04821428571428575, 0.04821428571428559, 0.03214285714285699 },
            { -0.0113095238095238, 0.05952380952380943, 0.01339285714285703, -0.03482142857142848, 0.01339285714285711, -0.03482142857142859, 0.0482142857142858, -0.09642857142857149, -0.01339285714285698, -0.0133928571428571, -0.01339285714285708, -0.01339285714285707, 0.03214285714285686, 0.04821428571428547, 0.04821428571428579, -0.03214285714285688 },
            { -0.01339285714285712, 0.01339285714285703, 0.1928571428571415, -0.07232142857142855, -0.02410714285714263, -0.02410714285714304, 0.0, 0.0, 0.07232142857142808, -0.1928571428571423, 0.02410714285714276, 0.02410714285714266, 0.09642857142857235, 0.0, 0.0, -0.09642857142857215 },
            { -0.01339285714285713, -0.03482142857142848, -0.07232142857142855, 0.2410714285714284, -0.02410714285714289, 0.1205357142857142, 0.02410714285714282, 0.02410714285714268, 0.04821428571428597, 0.07232142857142855, 0.02410714285714312, 0.02410714285714283, -0.04821428571428612, -0.2892857142857145, -0.1446428571428572, 0.0482142857142862 },
            { -0.01339285714285716, 0.01339285714285711, -0.02410714285714263, -0.02410714285714289, 0.1928571428571433, -0.07232142857142831, 0.0, 0.0, 0.024107142857143, 0.02410714285714297, 0.07232142857142833, -0.1928571428571429, 0.09642857142857185, 0.0, 0.0, -0.09642857142857186 },
            { -0.01339285714285704, -0.03482142857142859, -0.02410714285714304, 0.1205357142857142, -0.07232142857142831, 0.2410714285714278, 0.02410714285714216, 0.0241071428571434, 0.02410714285714268, 0.024107142857143, 0.04821428571428543, 0.07232142857142836, -0.04821428571428558, -0.144642857142857, -0.2892857142857134, 0.04821428571428575 },
            { -0.09642857142857129, 0.0482142857142858, 0.0, 0.02410714285714282, 0.0, 0.02410714285714216, 0.241071428571428, -0.1928571428571424, 0.02410714285714264, 0.0, 0.02410714285714258, 0.0, 0.0, -0.04821428571428547, -0.0482142857142847, 0.0 },
            { 0.04821428571428562, -0.09642857142857149, 0.0, 0.02410714285714268, 0.0, 0.0241071428571434, -0.1928571428571424, 0.2410714285714281, 0.02410714285714304, 0.0, 0.02410714285714322, 0.0, 0.0, -0.0482142857142858, -0.04821428571428676, 0.0 },
            { -0.03482142857142855, -0.01339285714285698, 0.07232142857142808, 0.04821428571428597, 0.024107142857143, 0.02410714285714268, 0.02410714285714264, 0.02410714285714304, 0.2410714285714282, -0.07232142857142861, 0.1205357142857144, -0.02410714285714288, 0.04821428571428635, -0.2892857142857141, -0.1446428571428574, -0.04821428571428619 },
            { 0.01339285714285715, -0.0133928571428571, -0.1928571428571423, 0.07232142857142855, 0.02410714285714297, 0.024107142857143, 0.0, 0.0, -0.07232142857142861, 0.1928571428571431, -0.02410714285714308, -0.02410714285714301, -0.09642857142857246, 0.0, 0.0, 0.09642857142857225 },
            { -0.03482142857142858, -0.01339285714285708, 0.02410714285714276, 0.02410714285714312, 0.07232142857142833, 0.04821428571428543, 0.02410714285714258, 0.02410714285714322, 0.1205357142857144, -0.02410714285714308, 0.2410714285714289, -0.07232142857142829, 0.04821428571428552, -0.1446428571428574, -0.2892857142857146, -0.04821428571428552 },
            { 0.01339285714285707, -0.01339285714285707, 0.02410714285714266, 0.02410714285714283, -0.1928571428571429, 0.07232142857142836, 0.0, 0.0, -0.02410714285714288, -0.02410714285714301, -0.07232142857142829, 0.1928571428571426, -0.09642857142857104, 0.0, 0.0, 0.09642857142857104 },
            { -0.03214285714285706, 0.03214285714285686, 0.09642857142857235, -0.04821428571428612, 0.09642857142857185, -0.04821428571428558, 0.0, 0.0, 0.04821428571428635, -0.09642857142857246, 0.04821428571428552, -0.09642857142857104, 0.5785714285714318, 0.0, 0.0, -0.5785714285714315 },
            { 0.04821428571428575, 0.04821428571428547, 0.0, -0.2892857142857145, 0.0, -0.144642857142857, -0.04821428571428547, -0.0482142857142858, -0.2892857142857141, 0.0, -0.1446428571428574, 0.0, 0.0, 0.5785714285714286, 0.2892857142857144, 0.0 },
            { 0.04821428571428559, 0.04821428571428579, 0.0, -0.1446428571428572, 0.0, -0.2892857142857134, -0.0482142857142847, -0.04821428571428676, -0.1446428571428574, 0.0, -0.2892857142857146, 0.0, 0.0, 0.2892857142857144, 0.5785714285714283, 0.0 },
            { 0.03214285714285699, -0.03214285714285688, -0.09642857142857215, 0.0482142857142862, -0.09642857142857186, 0.04821428571428575, 0.0, 0.0, -0.04821428571428619, 0.09642857142857225, -0.04821428571428552, 0.09642857142857104, -0.5785714285714315, 0.0, 0.0, 0.5785714285714311 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q14[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q14[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q14[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q14[0][0][1];
    alignas(32) double sp[80];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = sp[14] * sp[14];
    sp[20] = sp[14] * sp[17];
    sp[21] = sp[18] * sp[14];
    sp[22] = sp[17] * sp[17];
    sp[23] = sp[18] * sp[17];
    sp[24] = sp[18] * sp[18];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = J_c0 * J_c8;
    sp[30] = J_c6 * (-1 * J_c2);
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] / sp[13];
    sp[33] = J_c1 * J_c6;
    sp[34] = J_c0 * J_c7;
    sp[35] = sp[33] + -1 * sp[34];
    sp[36] = sp[35] / sp[13];
    sp[37] = sp[28] * sp[28];
    sp[38] = sp[28] * sp[32];
    sp[39] = sp[28] * sp[36];
    sp[40] = sp[32] * sp[32];
    sp[41] = sp[32] * sp[36];
    sp[42] = sp[36] * sp[36];
    sp[43] = sp[37] + sp[19];
    sp[44] = sp[38] + sp[20];
    sp[45] = sp[39] + sp[21];
    sp[46] = sp[40] + sp[22];
    sp[47] = sp[41] + sp[23];
    sp[48] = sp[24] + sp[42];
    sp[49] = J_c1 * J_c5;
    sp[50] = J_c2 * J_c4;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = J_c2 * J_c3;
    sp[54] = J_c0 * J_c5;
    sp[55] = sp[53] + -1 * sp[54];
    sp[56] = sp[55] / sp[13];
    sp[57] = J_c0 * J_c4;
    sp[58] = J_c1 * J_c3;
    sp[59] = sp[57] + -1 * sp[58];
    sp[60] = sp[59] / sp[13];
    sp[61] = sp[52] * sp[52];
    sp[62] = sp[52] * sp[56];
    sp[63] = sp[60] * sp[52];
    sp[64] = sp[56] * sp[56];
    sp[65] = sp[60] * sp[56];
    sp[66] = sp[60] * sp[60];
    sp[67] = sp[43] + sp[61];
    sp[68] = sp[44] + sp[62];
    sp[69] = sp[45] + sp[63];
    sp[70] = sp[46] + sp[64];
    sp[71] = sp[47] + sp[65];
    sp[72] = sp[48] + sp[66];
    sp[73] = std::abs(sp[13]);
    sp[74] = sp[67] * sp[73];
    sp[75] = sp[68] * sp[73];
    sp[76] = sp[69] * sp[73];
    sp[77] = sp[70] * sp[73];
    sp[78] = sp[71] * sp[73];
    sp[79] = sp[72] * sp[73];
    A[0] = sp[74] * PI0[0][0][0] + sp[75] * PI1[0][0][0] + sp[76] * PI2[0][0][0] + sp[75] * PI1[0][0][0] + sp[77] * PI3[0][0][0] + sp[78] * PI4[0][0][0] + sp[76] * PI2[0][0][0] + sp[78] * PI4[0][0][0] + sp[79] * PI5[0][0][0];
    A[1] = sp[74] * PI0[0][0][1] + sp[75] * PI1[0][1][0] + sp[76] * PI2[0][1][0];
    A[2] = sp[75] * PI1[0][0][1] + sp[77] * PI3[0][0][1] + sp[78] * PI4[0][1][0];
    A[3] = sp[76] * PI2[0][0][1] + sp[78] * PI4[0][0][1] + sp[79] * PI5[0][0][1];
    A[4] = sp[75] * PI1[0][0][2] + sp[76] * PI2[0][0][2] + sp[77] * PI3[0][0][2] + sp[78] * PI4[0][0][2] + sp[78] * PI4[0][2][0] + sp[79] * PI5[0][0][2];
    A[5] = sp[75] * PI1[0][0][3] + sp[76] * PI2[0][0][3] + sp[77] * PI3[0][0][3] + sp[78] * PI4[0][0][3] + sp[78] * PI4[0][3][0] + sp[79] * PI5[0][0][3];
    A[6] = sp[74] * PI0[0][0][2] + sp[76] * PI2[0][0][4] + sp[75] * PI1[0][2][0] + sp[78] * PI4[0][0][4] + sp[76] * PI2[0][2][0] + sp[79] * PI5[0][0][4];
    A[7] = sp[74] * PI0[0][0][3] + sp[76] * PI2[0][0][5] + sp[75] * PI1[0][3][0] + sp[78] * PI4[0][0][5] + sp[76] * PI2[0][3][0] + sp[79] * PI5[0][0][5];
    A[8] = sp[74] * PI0[0][0][4] + sp[75] * PI1[0][0][4] + sp[75] * PI1[0][4][0] + sp[77] * PI3[0][0][4] + sp[76] * PI2[0][4][0] + sp[78] * PI4[0][4][0];
    A[9] = sp[74] * PI0[0][0][5] + sp[75] * PI1[0][0][5] + sp[75] * PI1[0][5][0] + sp[77] * PI3[0][0][5] + sp[76] * PI2[0][5][0] + sp[78] * PI4[0][5][0];
    A[10] = sp[74] * PI0[0][0][6] + sp[75] * PI1[0][0][6] + sp[76] * PI2[0][0][6] + sp[75] * PI1[0][6][0] + sp[77] * PI3[0][0][6] + sp[78] * PI4[0][0][6] + sp[76] * PI2[0][6][0] + sp[78] * PI4[0][6][0] + sp[79] * PI5[0][0][6];
    A[11] = sp[74] * PI0[0][0][7] + sp[75] * PI1[0][0][7] + sp[76] * PI2[0][0][7] + sp[75] * PI1[0][7][0] + sp[77] * PI3[0][0][7] + sp[78] * PI4[0][0][7] + sp[76] * PI2[0][7][0] + sp[78] * PI4[0][7][0] + sp[79] * PI5[0][0][7];
    A[12] = sp[74] * PI0[0][0][8] + sp[75] * PI1[0][0][8] + sp[76] * PI2[0][0][8] + sp[75] * PI1[0][8][0] + sp[77] * PI3[0][0][8] + sp[78] * PI4[0][0][8] + sp[76] * PI2[0][8][0] + sp[78] * PI4[0][8][0] + sp[79] * PI5[0][0][8];
    A[13] = sp[74] * PI0[0][0][9] + sp[75] * PI1[0][0][9] + sp[76] * PI2[0][0][9] + sp[75] * PI1[0][9][0] + sp[77] * PI3[0][0][9] + sp[78] * PI4[0][0][9] + sp[76] * PI2[0][9][0] + sp[78] * PI4[0][9][0] + sp[79] * PI5[0][0][9];
    A[14] = sp[74] * PI0[0][0][10] + sp[75] * PI1[0][0][10] + sp[76] * PI2[0][0][10] + sp[75] * PI1[0][10][0] + sp[77] * PI3[0][0][10] + sp[78] * PI4[0][0][10] + sp[76] * PI2[0][10][0] + sp[78] * PI4[0][10][0] + sp[79] * PI5[0][0][10];
    A[15] = sp[74] * PI0[0][0][11] + sp[75] * PI1[0][0][11] + sp[76] * PI2[0][0][11] + sp[75] * PI1[0][11][0] + sp[77] * PI3[0][0][11] + sp[78] * PI4[0][0][11] + sp[76] * PI2[0][11][0] + sp[78] * PI4[0][11][0] + sp[79] * PI5[0][0][11];
    A[16] = sp[74] * PI0[0][0][12] + sp[75] * PI1[0][0][12] + sp[76] * PI2[0][0][12] + sp[75] * PI1[0][12][0] + sp[77] * PI3[0][0][12] + sp[78] * PI4[0][0][12] + sp[76] * PI2[0][12][0] + sp[78] * PI4[0][12][0] + sp[79] * PI5[0][0][12];
    A[17] = sp[74] * PI0[0][0][13] + sp[75] * PI1[0][0][13] + sp[76] * PI2[0][0][13] + sp[75] * PI1[0][13][0] + sp[77] * PI3[0][0][13] + sp[78] * PI4[0][0][13] + sp[76] * PI2[0][13][0] + sp[78] * PI4[0][13][0] + sp[79] * PI5[0][0][13];
    A[18] = sp[74] * PI0[0][0][14] + sp[75] * PI1[0][0][14] + sp[76] * PI2[0][0][14] + sp[75] * PI1[0][14][0] + sp[77] * PI3[0][0][14] + sp[78] * PI4[0][0][14] + sp[76] * PI2[0][14][0] + sp[78] * PI4[0][14][0] + sp[79] * PI5[0][0][14];
    A[19] = sp[74] * PI0[0][0][15] + sp[75] * PI1[0][0][15] + sp[76] * PI2[0][0][15] + sp[75] * PI1[0][15][0] + sp[77] * PI3[0][0][15] + sp[78] * PI4[0][0][15] + sp[76] * PI2[0][15][0] + sp[78] * PI4[0][15][0] + sp[79] * PI5[0][0][15];
    A[20] = sp[74] * PI0[0][1][0] + sp[75] * PI1[0][1][0] + sp[76] * PI2[0][1][0];
    A[21] = sp[74] * PI0[0][1][1];
    A[22] = sp[75] * PI1[0][1][1];
    A[23] = sp[76] * PI2[0][1][1];
    A[24] = sp[75] * PI1[0][1][2] + sp[76] * PI2[0][1][2];
    A[25] = sp[75] * PI1[0][1][3] + sp[76] * PI2[0][1][3];
    A[26] = sp[74] * PI0[0][1][2] + sp[76] * PI2[0][1][4];
    A[27] = sp[74] * PI0[0][1][3] + sp[76] * PI2[0][1][5];
    A[28] = sp[74] * PI0[0][1][4] + sp[75] * PI1[0][1][4];
    A[29] = sp[74] * PI0[0][1][5] + sp[75] * PI1[0][1][5];
    A[30] = sp[74] * PI0[0][1][6] + sp[75] * PI1[0][1][6] + sp[76] * PI2[0][1][6];
    A[31] = sp[74] * PI0[0][1][7] + sp[75] * PI1[0][1][7] + sp[76] * PI2[0][1][7];
    A[32] = sp[74] * PI0[0][1][8] + sp[75] * PI1[0][1][8] + sp[76] * PI2[0][1][8];
    A[33] = sp[74] * PI0[0][1][9] + sp[75] * PI1[0][1][9] + sp[76] * PI2[0][1][9];
    A[34] = sp[74] * PI0[0][1][10] + sp[75] * PI1[0][1][10] + sp[76] * PI2[0][1][10];
    A[35] = sp[74] * PI0[0][1][11] + sp[75] * PI1[0][1][11] + sp[76] * PI2[0][1][11];
    A[36] = sp[74] * PI0[0][1][12] + sp[75] * PI1[0][1][12] + sp[76] * PI2[0][1][12];
    A[37] = sp[74] * PI0[0][1][13] + sp[75] * PI1[0][1][13] + sp[76] * PI2[0][1][13];
    A[38] = sp[74] * PI0[0][1][14] + sp[75] * PI1[0][1][14] + sp[76] * PI2[0][1][14];
    A[39] = sp[74] * PI0[0][1][15] + sp[75] * PI1[0][1][15] + sp[76] * PI2[0][1][15];
    A[40] = sp[75] * PI1[0][0][1] + sp[77] * PI3[0][1][0] + sp[78] * PI4[0][1][0];
    A[41] = sp[75] * PI1[0][1][1];
    A[42] = sp[77] * PI3[0][1][1];
    A[43] = sp[78] * PI4[0][1][1];
    A[44] = sp[77] * PI3[0][1][2] + sp[78] * PI4[0][1][2];
    A[45] = sp[77] * PI3[0][1][3] + sp[78] * PI4[0][1][3];
    A[46] = sp[75] * PI1[0][2][1] + sp[78] * PI4[0][1][4];
    A[47] = sp[75] * PI1[0][3][1] + sp[78] * PI4[0][1][5];
    A[48] = sp[75] * PI1[0][4][1] + sp[77] * PI3[0][1][4];
    A[49] = sp[75] * PI1[0][5][1] + sp[77] * PI3[0][1][5];
    A[50] = sp[75] * PI1[0][6][1] + sp[77] * PI3[0][1][6] + sp[78] * PI4[0][1][6];
    A[51] = sp[75] * PI1[0][7][1] + sp[77] * PI3[0][1][7] + sp[78] * PI4[0][1][7];
    A[52] = sp[75] * PI1[0][8][1] + sp[77] * PI3[0][1][8] + sp[78] * PI4[0][1][8];
    A[53] = sp[75] * PI1[0][9][1] + sp[77] * PI3[0][1][9] + sp[78] * PI4[0][1][9];
    A[54] = sp[75] * PI1[0][10][1] + sp[77] * PI3[0][1][10] + sp[78] * PI4[0][1][10];
    A[55] = sp[75] * PI1[0][11][1] + sp[77] * PI3[0][1][11] + sp[78] * PI4[0][1][11];
    A[56] = sp[75] * PI1[0][12][1] + sp[77] * PI3[0][1][12] + sp[78] * PI4[0][1][12];
    A[57] = sp[75] * PI1[0][13][1] + sp[77] * PI3[0][1][13] + sp[78] * PI4[0][1][13];
    A[58] = sp[75] * PI1[0][14][1] + sp[77] * PI3[0][1][14] + sp[78] * PI4[0][1][14];
    A[59] = sp[75] * PI1[0][15][1] + sp[77] * PI3[0][1][15] + sp[78] * PI4[0][1][15];
    A[60] = sp[76] * PI2[0][0][1] + sp[78] * PI4[0][0][1] + sp[79] * PI5[0][1][0];
    A[61] = sp[76] * PI2[0][1][1];
    A[62] = sp[78] * PI4[0][1][1];
    A[63] = sp[79] * PI5[0][1][1];
    A[64] = sp[78] * PI4[0][2][1] + sp[79] * PI5[0][1][2];
    A[65] = sp[78] * PI4[0][3][1] + sp[79] * PI5[0][1][3];
    A[66] = sp[76] * PI2[0][2][1] + sp[79] * PI5[0][1][4];
    A[67] = sp[76] * PI2[0][3][1] + sp[79] * PI5[0][1][5];
    A[68] = sp[76] * PI2[0][4][1] + sp[78] * PI4[0][4][1];
    A[69] = sp[76] * PI2[0][5][1] + sp[78] * PI4[0][5][1];
    A[70] = sp[76] * PI2[0][6][1] + sp[78] * PI4[0][6][1] + sp[79] * PI5[0][1][6];
    A[71] = sp[76] * PI2[0][7][1] + sp[78] * PI4[0][7][1] + sp[79] * PI5[0][1][7];
    A[72] = sp[76] * PI2[0][8][1] + sp[78] * PI4[0][8][1] + sp[79] * PI5[0][1][8];
    A[73] = sp[76] * PI2[0][9][1] + sp[78] * PI4[0][9][1] + sp[79] * PI5[0][1][9];
    A[74] = sp[76] * PI2[0][10][1] + sp[78] * PI4[0][10][1] + sp[79] * PI5[0][1][10];
    A[75] = sp[76] * PI2[0][11][1] + sp[78] * PI4[0][11][1] + sp[79] * PI5[0][1][11];
    A[76] = sp[76] * PI2[0][12][1] + sp[78] * PI4[0][12][1] + sp[79] * PI5[0][1][12];
    A[77] = sp[76] * PI2[0][13][1] + sp[78] * PI4[0][13][1] + sp[79] * PI5[0][1][13];
    A[78] = sp[76] * PI2[0][14][1] + sp[78] * PI4[0][14][1] + sp[79] * PI5[0][1][14];
    A[79] = sp[76] * PI2[0][15][1] + sp[78] * PI4[0][15][1] + sp[79] * PI5[0][1][15];
    A[80] = sp[75] * PI1[0][0][2] + sp[77] * PI3[0][2][0] + sp[78] * PI4[0][2][0] + sp[76] * PI2[0][0][2] + sp[78] * PI4[0][0][2] + sp[79] * PI5[0][2][0];
    A[81] = sp[75] * PI1[0][1][2] + sp[76] * PI2[0][1][2];
    A[82] = sp[77] * PI3[0][2][1] + sp[78] * PI4[0][1][2];
    A[83] = sp[78] * PI4[0][2][1] + sp[79] * PI5[0][2][1];
    A[84] = sp[77] * PI3[0][2][2] + sp[78] * PI4[0][2][2] + sp[78] * PI4[0][2][2] + sp[79] * PI5[0][2][2];
    A[85] = sp[77] * PI3[0][2][3] + sp[78] * PI4[0][2][3] + sp[78] * PI4[0][3][2] + sp[79] * PI5[0][2][3];
    A[86] = sp[75] * PI1[0][2][2] + sp[78] * PI4[0][2][4] + sp[76] * PI2[0][2][2] + sp[79] * PI5[0][2][4];
    A[87] = sp[75] * PI1[0][3][2] + sp[78] * PI4[0][2][5] + sp[76] * PI2[0][3][2] + sp[79] * PI5[0][2][5];
    A[88] = sp[75] * PI1[0][4][2] + sp[77] * PI3[0][2][4] + sp[76] * PI2[0][4][2] + sp[78] * PI4[0][4][2];
    A[89] = sp[75] * PI1[0][5][2] + sp[77] * PI3[0][2][5] + sp[76] * PI2[0][5][2] + sp[78] * PI4[0][5][2];
    A[90] = sp[75] * PI1[0][6][2] + sp[77] * PI3[0][2][6] + sp[78] * PI4[0][2][6] + sp[76] * PI2[0][6][2] + sp[78] * PI4[0][6][2] + sp[79] * PI5[0][2][6];
    A[91] = sp[75] * PI1[0][7][2] + sp[77] * PI3[0][2][7] + sp[78] * PI4[0][2][7] + sp[76] * PI2[0][7][2] + sp[78] * PI4[0][7][2] + sp[79] * PI5[0][2][7];
    A[92] = sp[75] * PI1[0][8][2] + sp[77] * PI3[0][2][8] + sp[78] * PI4[0][2][8] + sp[76] * PI2[0][8][2] + sp[78] * PI4[0][8][2] + sp[79] * PI5[0][2][8];
    A[93] = sp[75] * PI1[0][9][2] + sp[77] * PI3[0][2][9] + sp[78] * PI4[0][2][9] + sp[76] * PI2[0][9][2] + sp[78] * PI4[0][9][2] + sp[79] * PI5[0][2][9];
    A[94] = sp[75] * PI1[0][10][2] + sp[77] * PI3[0][2][10] + sp[78] * PI4[0][2][10] + sp[76] * PI2[0][10][2] + sp[78] * PI4[0][10][2] + sp[79] * PI5[0][2][10];
    A[95] = sp[75] * PI1[0][11][2] + sp[77] * PI3[0][2][11] + sp[78] * PI4[0][2][11] + sp[76] * PI2[0][11][2] + sp[78] * PI4[0][11][2] + sp[79] * PI5[0][2][11];
    A[96] = sp[75] * PI1[0][12][2] + sp[77] * PI3[0][2][12] + sp[78] * PI4[0][2][12] + sp[76] * PI2[0][12][2] + sp[78] * PI4[0][12][2] + sp[79] * PI5[0][2][12];
    A[97] = sp[75] * PI1[0][13][2] + sp[77] * PI3[0][2][13] + sp[78] * PI4[0][2][13] + sp[76] * PI2[0][13][2] + sp[78] * PI4[0][13][2] + sp[79] * PI5[0][2][13];
    A[98] = sp[75] * PI1[0][14][2] + sp[77] * PI3[0][2][14] + sp[78] * PI4[0][2][14] + sp[76] * PI2[0][14][2] + sp[78] * PI4[0][14][2] + sp[79] * PI5[0][2][14];
    A[99] = sp[75] * PI1[0][15][2] + sp[77] * PI3[0][2][15] + sp[78] * PI4[0][2][15] + sp[76] * PI2[0][15][2] + sp[78] * PI4[0][15][2] + sp[79] * PI5[0][2][15];
    A[100] = sp[75] * PI1[0][0][3] + sp[77] * PI3[0][3][0] + sp[78] * PI4[0][3][0] + sp[76] * PI2[0][0][3] + sp[78] * PI4[0][0][3] + sp[79] * PI5[0][3][0];
    A[101] = sp[75] * PI1[0][1][3] + sp[76] * PI2[0][1][3];
    A[102] = sp[77] * PI3[0][3][1] + sp[78] * PI4[0][1][3];
    A[103] = sp[78] * PI4[0][3][1] + sp[79] * PI5[0][3][1];
    A[104] = sp[77] * PI3[0][3][2] + sp[78] * PI4[0][3][2] + sp[78] * PI4[0][2][3] + sp[79] * PI5[0][3][2];
    A[105] = sp[77] * PI3[0][3][3] + sp[78] * PI4[0][3][3] + sp[78] * PI4[0][3][3] + sp[79] * PI5[0][3][3];
    A[106] = sp[75] * PI1[0][2][3] + sp[78] * PI4[0][3][4] + sp[76] * PI2[0][2][3] + sp[79] * PI5[0][3][4];
    A[107] = sp[75] * PI1[0][3][3] + sp[78] * PI4[0][3][5] + sp[76] * PI2[0][3][3] + sp[79] * PI5[0][3][5];
    A[108] = sp[75] * PI1[0][4][3] + sp[77] * PI3[0][3][4] + sp[76] * PI2[0][4][3] + sp[78] * PI4[0][4][3];
    A[109] = sp[75] * PI1[0][5][3] + sp[77] * PI3[0][3][5] + sp[76] * PI2[0][5][3] + sp[78] * PI4[0][5][3];
    A[110] = sp[75] * PI1[0][6][3] + sp[77] * PI3[0][3][6] + sp[78] * PI4[0][3][6] + sp[76] * PI2[0][6][3] + sp[78] * PI4[0][6][3] + sp[79] * PI5[0][3][6];
    A[111] = sp[75] * PI1[0][7][3] + sp[77] * PI3[0][3][7] + sp[78] * PI4[0][3][7] + sp[76] * PI2[0][7][3] + sp[78] * PI4[0][7][3] + sp[79] * PI5[0][3][7];
    A[112] = sp[75] * PI1[0][8][3] + sp[77] * PI3[0][3][8] + sp[78] * PI4[0][3][8] + sp[76] * PI2[0][8][3] + sp[78] * PI4[0][8][3] + sp[79] * PI5[0][3][8];
    A[113] = sp[75] * PI1[0][9][3] + sp[77] * PI3[0][3][9] + sp[78] * PI4[0][3][9] + sp[76] * PI2[0][9][3] + sp[78] * PI4[0][9][3] + sp[79] * PI5[0][3][9];
    A[114] = sp[75] * PI1[0][10][3] + sp[77] * PI3[0][3][10] + sp[78] * PI4[0][3][10] + sp[76] * PI2[0][10][3] + sp[78] * PI4[0][10][3] + sp[79] * PI5[0][3][10];
    A[115] = sp[75] * PI1[0][11][3] + sp[77] * PI3[0][3][11] + sp[78] * PI4[0][3][11] + sp[76] * PI2[0][11][3] + sp[78] * PI4[0][11][3] + sp[79] * PI5[0][3][11];
    A[116] = sp[75] * PI1[0][12][3] + sp[77] * PI3[0][3][12] + sp[78] * PI4[0][3][12] + sp[76] * PI2[0][12][3] + sp[78] * PI4[0][12][3] + sp[79] * PI5[0][3][12];
    A[117] = sp[75] * PI1[0][13][3] + sp[77] * PI3[0][3][13] + sp[78] * PI4[0][3][13] + sp[76] * PI2[0][13][3] + sp[78] * PI4[0][13][3] + sp[79] * PI5[0][3][13];
    A[118] = sp[75] * PI1[0][14][3] + sp[77] * PI3[0][3][14] + sp[78] * PI4[0][3][14] + sp[76] * PI2[0][14][3] + sp[78] * PI4[0][14][3] + sp[79] * PI5[0][3][14];
    A[119] = sp[75] * PI1[0][15][3] + sp[77] * PI3[0][3][15] + sp[78] * PI4[0][3][15] + sp[76] * PI2[0][15][3] + sp[78] * PI4[0][15][3] + sp[79] * PI5[0][3][15];
    A[120] = sp[74] * PI0[0][2][0] + sp[75] * PI1[0][2][0] + sp[76] * PI2[0][2][0] + sp[76] * PI2[0][0][4] + sp[78] * PI4[0][0][4] + sp[79] * PI5[0][4][0];
    A[121] = sp[74] * PI0[0][2][1] + sp[76] * PI2[0][1][4];
    A[122] = sp[75] * PI1[0][2][1] + sp[78] * PI4[0][1][4];
    A[123] = sp[76] * PI2[0][2][1] + sp[79] * PI5[0][4][1];
    A[124] = sp[75] * PI1[0][2][2] + sp[76] * PI2[0][2][2] + sp[78] * PI4[0][2][4] + sp[79] * PI5[0][4][2];
    A[125] = sp[75] * PI1[0][2][3] + sp[76] * PI2[0][2][3] + sp[78] * PI4[0][3][4] + sp[79] * PI5[0][4][3];
    A[126] = sp[74] * PI0[0][2][2] + sp[76] * PI2[0][2][4] + sp[76] * PI2[0][2][4] + sp[79] * PI5[0][4][4];
    A[127] = sp[74] * PI0[0][2][3] + sp[76] * PI2[0][2][5] + sp[76] * PI2[0][3][4] + sp[79] * PI5[0][4][5];
    A[128] = sp[74] * PI0[0][2][4] + sp[75] * PI1[0][2][4] + sp[76] * PI2[0][4][4] + sp[78] * PI4[0][4][4];
    A[129] = sp[74] * PI0[0][2][5] + sp[75] * PI1[0][2][5] + sp[76] * PI2[0][5][4] + sp[78] * PI4[0][5][4];
    A[130] = sp[74] * PI0[0][2][6] + sp[75] * PI1[0][2][6] + sp[76] * PI2[0][2][6] + sp[76] * PI2[0][6][4] + sp[78] * PI4[0][6][4] + sp[79] * PI5[0][4][6];
    A[131] = sp[74] * PI0[0][2][7] + sp[75] * PI1[0][2][7] + sp[76] * PI2[0][2][7] + sp[76] * PI2[0][7][4] + sp[78] * PI4[0][7][4] + sp[79] * PI5[0][4][7];
    A[132] = sp[74] * PI0[0][2][8] + sp[75] * PI1[0][2][8] + sp[76] * PI2[0][2][8] + sp[76] * PI2[0][8][4] + sp[78] * PI4[0][8][4] + sp[79] * PI5[0][4][8];
    A[133] = sp[74] * PI0[0][2][9] + sp[75] * PI1[0][2][9] + sp[76] * PI2[0][2][9] + sp[76] * PI2[0][9][4] + sp[78] * PI4[0][9][4] + sp[79] * PI5[0][4][9];
    A[134] = sp[74] * PI0[0][2][10] + sp[75] * PI1[0][2][10] + sp[76] * PI2[0][2][10] + sp[76] * PI2[0][10][4] + sp[78] * PI4[0][10][4] + sp[79] * PI5[0][4][10];
    A[135] = sp[74] * PI0[0][2][11] + sp[75] * PI1[0][2][11] + sp[76] * PI2[0][2][11] + sp[76] * PI2[0][11][4] + sp[78] * PI4[0][11][4] + sp[79] * PI5[0][4][11];
    A[136] = sp[74] * PI0[0][2][12] + sp[75] * PI1[0][2][12] + sp[76] * PI2[0][2][12] + sp[76] * PI2[0][12][4] + sp[78] * PI4[0][12][4] + sp[79] * PI5[0][4][12];
    A[137] = sp[74] * PI0[0][2][13] + sp[75] * PI1[0][2][13] + sp[76] * PI2[0][2][13] + sp[76] * PI2[0][13][4] + sp[78] * PI4[0][13][4] + sp[79] * PI5[0][4][13];
    A[138] = sp[74] * PI0[0][2][14] + sp[75] * PI1[0][2][14] + sp[76] * PI2[0][2][14] + sp[76] * PI2[0][14][4] + sp[78] * PI4[0][14][4] + sp[79] * PI5[0][4][14];
    A[139] = sp[74] * PI0[0][2][15] + sp[75] * PI1[0][2][15] + sp[76] * PI2[0][2][15] + sp[76] * PI2[0][15][4] + sp[78] * PI4[0][15][4] + sp[79] * PI5[0][4][15];
    A[140] = sp[74] * PI0[0][3][0] + sp[75] * PI1[0][3][0] + sp[76] * PI2[0][3][0] + sp[76] * PI2[0][0][5] + sp[78] * PI4[0][0][5] + sp[79] * PI5[0][5][0];
    A[141] = sp[74] * PI0[0][3][1] + sp[76] * PI2[0][1][5];
    A[142] = sp[75] * PI1[0][3][1] + sp[78] * PI4[0][1][5];
    A[143] = sp[76] * PI2[0][3][1] + sp[79] * PI5[0][5][1];
    A[144] = sp[75] * PI1[0][3][2] + sp[76] * PI2[0][3][2] + sp[78] * PI4[0][2][5] + sp[79] * PI5[0][5][2];
    A[145] = sp[75] * PI1[0][3][3] + sp[76] * PI2[0][3][3] + sp[78] * PI4[0][3][5] + sp[79] * PI5[0][5][3];
    A[146] = sp[74] * PI0[0][3][2] + sp[76] * PI2[0][3][4] + sp[76] * PI2[0][2][5] + sp[79] * PI5[0][5][4];
    A[147] = sp[74] * PI0[0][3][3] + sp[76] * PI2[0][3][5] + sp[76] * PI2[0][3][5] + sp[79] * PI5[0][5][5];
    A[148] = sp[74] * PI0[0][3][4] + sp[75] * PI1[0][3][4] + sp[76] * PI2[0][4][5] + sp[78] * PI4[0][4][5];
    A[149] = sp[74] * PI0[0][3][5] + sp[75] * PI1[0][3][5] + sp[76] * PI2[0][5][5] + sp[78] * PI4[0][5][5];
    A[150] = sp[74] * PI0[0][3][6] + sp[75] * PI1[0][3][6] + sp[76] * PI2[0][3][6] + sp[76] * PI2[0][6][5] + sp[78] * PI4[0][6][5] + sp[79] * PI5[0][5][6];
    A[151] = sp[74] * PI0[0][3][7] + sp[75] * PI1[0][3][7] + sp[76] * PI2[0][3][7] + sp[76] * PI2[0][7][5] + sp[78] * PI4[0][7][5] + sp[79] * PI5[0][5][7];
    A[152] = sp[74] * PI0[0][3][8] + sp[75] * PI1[0][3][8] + sp[76] * PI2[0][3][8] + sp[76] * PI2[0][8][5] + sp[78] * PI4[0][8][5] + sp[79] * PI5[0][5][8];
    A[153] = sp[74] * PI0[0][3][9] + sp[75] * PI1[0][3][9] + sp[76] * PI2[0][3][9] + sp[76] * PI2[0][9][5] + sp[78] * PI4[0][9][5] + sp[79] * PI5[0][5][9];
    A[154] = sp[74] * PI0[0][3][10] + sp[75] * PI1[0][3][10] + sp[76] * PI2[0][3][10] + sp[76] * PI2[0][10][5] + sp[78] * PI4[0][10][5] + sp[79] * PI5[0][5][10];
    A[155] = sp[74] * PI0[0][3][11] + sp[75] * PI1[0][3][11] + sp[76] * PI2[0][3][11] + sp[76] * PI2[0][11][5] + sp[78] * PI4[0][11][5] + sp[79] * PI5[0][5][11];
    A[156] = sp[74] * PI0[0][3][12] + sp[75] * PI1[0][3][12] + sp[76] * PI2[0][3][12] + sp[76] * PI2[0][12][5] + sp[78] * PI4[0][12][5] + sp[79] * PI5[0][5][12];
    A[157] = sp[74] * PI0[0][3][13] + sp[75] * PI1[0][3][13] + sp[76] * PI2[0][3][13] + sp[76] * PI2[0][13][5] + sp[78] * PI4[0][13][5] + sp[79] * PI5[0][5][13];
    A[158] = sp[74] * PI0[0][3][14] + sp[75] * PI1[0][3][14] + sp[76] * PI2[0][3][14] + sp[76] * PI2[0][14][5] + sp[78] * PI4[0][14][5] + sp[79] * PI5[0][5][14];
    A[159] = sp[74] * PI0[0][3][15] + sp[75] * PI1[0][3][15] + sp[76] * PI2[0][3][15] + sp[76] * PI2[0][15][5] + sp[78] * PI4[0][15][5] + sp[79] * PI5[0][5][15];
    A[160] = sp[74] * PI0[0][4][0] + sp[75] * PI1[0][4][0] + sp[76] * PI2[0][4][0] + sp[75] * PI1[0][0][4] + sp[77] * PI3[0][4][0] + sp[78] * PI4[0][4][0];
    A[161] = sp[74] * PI0[0][4][1] + sp[75] * PI1[0][1][4];
    A[162] = sp[75] * PI1[0][4][1] + sp[77] * PI3[0][4][1];
    A[163] = sp[76] * PI2[0][4][1] + sp[78] * PI4[0][4][1];
    A[164] = sp[75] * PI1[0][4][2] + sp[76] * PI2[0][4][2] + sp[77] * PI3[0][4][2] + sp[78] * PI4[0][4][2];
    A[165] = sp[75] * PI1[0][4][3] + sp[76] * PI2[0][4][3] + sp[77] * PI3[0][4][3] + sp[78] * PI4[0][4][3];
    A[166] = sp[74] * PI0[0][4][2] + sp[76] * PI2[0][4][4] + sp[75] * PI1[0][2][4] + sp[78] * PI4[0][4][4];
    A[167] = sp[74] * PI0[0][4][3] + sp[76] * PI2[0][4][5] + sp[75] * PI1[0][3][4] + sp[78] * PI4[0][4][5];
    A[168] = sp[74] * PI0[0][4][4] + sp[75] * PI1[0][4][4] + sp[75] * PI1[0][4][4] + sp[77] * PI3[0][4][4];
    A[169] = sp[74] * PI0[0][4][5] + sp[75] * PI1[0][4][5] + sp[75] * PI1[0][5][4] + sp[77] * PI3[0][4][5];
    A[170] = sp[74] * PI0[0][4][6] + sp[75] * PI1[0][4][6] + sp[76] * PI2[0][4][6] + sp[75] * PI1[0][6][4] + sp[77] * PI3[0][4][6] + sp[78] * PI4[0][4][6];
    A[171] = sp[74] * PI0[0][4][7] + sp[75] * PI1[0][4][7] + sp[76] * PI2[0][4][7] + sp[75] * PI1[0][7][4] + sp[77] * PI3[0][4][7] + sp[78] * PI4[0][4][7];
    A[172] = sp[74] * PI0[0][4][8] + sp[75] * PI1[0][4][8] + sp[76] * PI2[0][4][8] + sp[75] * PI1[0][8][4] + sp[77] * PI3[0][4][8] + sp[78] * PI4[0][4][8];
    A[173] = sp[74] * PI0[0][4][9] + sp[75] * PI1[0][4][9] + sp[76] * PI2[0][4][9] + sp[75] * PI1[0][9][4] + sp[77] * PI3[0][4][9] + sp[78] * PI4[0][4][9];
    A[174] = sp[74] * PI0[0][4][10] + sp[75] * PI1[0][4][10] + sp[76] * PI2[0][4][10] + sp[75] * PI1[0][10][4] + sp[77] * PI3[0][4][10] + sp[78] * PI4[0][4][10];
    A[175] = sp[74] * PI0[0][4][11] + sp[75] * PI1[0][4][11] + sp[76] * PI2[0][4][11] + sp[75] * PI1[0][11][4] + sp[77] * PI3[0][4][11] + sp[78] * PI4[0][4][11];
    A[176] = sp[74] * PI0[0][4][12] + sp[75] * PI1[0][4][12] + sp[76] * PI2[0][4][12] + sp[75] * PI1[0][12][4] + sp[77] * PI3[0][4][12] + sp[78] * PI4[0][4][12];
    A[177] = sp[74] * PI0[0][4][13] + sp[75] * PI1[0][4][13] + sp[76] * PI2[0][4][13] + sp[75] * PI1[0][13][4] + sp[77] * PI3[0][4][13] + sp[78] * PI4[0][4][13];
    A[178] = sp[74] * PI0[0][4][14] + sp[75] * PI1[0][4][14] + sp[76] * PI2[0][4][14] + sp[75] * PI1[0][14][4] + sp[77] * PI3[0][4][14] + sp[78] * PI4[0][4][14];
    A[179] = sp[74] * PI0[0][4][15] + sp[75] * PI1[0][4][15] + sp[76] * PI2[0][4][15] + sp[75] * PI1[0][15][4] + sp[77] * PI3[0][4][15] + sp[78] * PI4[0][4][15];
    A[180] = sp[74] * PI0[0][5][0] + sp[75] * PI1[0][5][0] + sp[76] * PI2[0][5][0] + sp[75] * PI1[0][0][5] + sp[77] * PI3[0][5][0] + sp[78] * PI4[0][5][0];
    A[181] = sp[74] * PI0[0][5][1] + sp[75] * PI1[0][1][5];
    A[182] = sp[75] * PI1[0][5][1] + sp[77] * PI3[0][5][1];
    A[183] = sp[76] * PI2[0][5][1] + sp[78] * PI4[0][5][1];
    A[184] = sp[75] * PI1[0][5][2] + sp[76] * PI2[0][5][2] + sp[77] * PI3[0][5][2] + sp[78] * PI4[0][5][2];
    A[185] = sp[75] * PI1[0][5][3] + sp[76] * PI2[0][5][3] + sp[77] * PI3[0][5][3] + sp[78] * PI4[0][5][3];
    A[186] = sp[74] * PI0[0][5][2] + sp[76] * PI2[0][5][4] + sp[75] * PI1[0][2][5] + sp[78] * PI4[0][5][4];
    A[187] = sp[74] * PI0[0][5][3] + sp[76] * PI2[0][5][5] + sp[75] * PI1[0][3][5] + sp[78] * PI4[0][5][5];
    A[188] = sp[74] * PI0[0][5][4] + sp[75] * PI1[0][5][4] + sp[75] * PI1[0][4][5] + sp[77] * PI3[0][5][4];
    A[189] = sp[74] * PI0[0][5][5] + sp[75] * PI1[0][5][5] + sp[75] * PI1[0][5][5] + sp[77] * PI3[0][5][5];
    A[190] = sp[74] * PI0[0][5][6] + sp[75] * PI1[0][5][6] + sp[76] * PI2[0][5][6] + sp[75] * PI1[0][6][5] + sp[77] * PI3[0][5][6] + sp[78] * PI4[0][5][6];
    A[191] = sp[74] * PI0[0][5][7] + sp[75] * PI1[0][5][7] + sp[76] * PI2[0][5][7] + sp[75] * PI1[0][7][5] + sp[77] * PI3[0][5][7] + sp[78] * PI4[0][5][7];
    A[192] = sp[74] * PI0[0][5][8] + sp[75] * PI1[0][5][8] + sp[76] * PI2[0][5][8] + sp[75] * PI1[0][8][5] + sp[77] * PI3[0][5][8] + sp[78] * PI4[0][5][8];
    A[193] = sp[74] * PI0[0][5][9] + sp[75] * PI1[0][5][9] + sp[76] * PI2[0][5][9] + sp[75] * PI1[0][9][5] + sp[77] * PI3[0][5][9] + sp[78] * PI4[0][5][9];
    A[194] = sp[74] * PI0[0][5][10] + sp[75] * PI1[0][5][10] + sp[76] * PI2[0][5][10] + sp[75] * PI1[0][10][5] + sp[77] * PI3[0][5][10] + sp[78] * PI4[0][5][10];
    A[195] = sp[74] * PI0[0][5][11] + sp[75] * PI1[0][5][11] + sp[76] * PI2[0][5][11] + sp[75] * PI1[0][11][5] + sp[77] * PI3[0][5][11] + sp[78] * PI4[0][5][11];
    A[196] = sp[74] * PI0[0][5][12] + sp[75] * PI1[0][5][12] + sp[76] * PI2[0][5][12] + sp[75] * PI1[0][12][5] + sp[77] * PI3[0][5][12] + sp[78] * PI4[0][5][12];
    A[197] = sp[74] * PI0[0][5][13] + sp[75] * PI1[0][5][13] + sp[76] * PI2[0][5][13] + sp[75] * PI1[0][13][5] + sp[77] * PI3[0][5][13] + sp[78] * PI4[0][5][13];
    A[198] = sp[74] * PI0[0][5][14] + sp[75] * PI1[0][5][14] + sp[76] * PI2[0][5][14] + sp[75] * PI1[0][14][5] + sp[77] * PI3[0][5][14] + sp[78] * PI4[0][5][14];
    A[199] = sp[74] * PI0[0][5][15] + sp[75] * PI1[0][5][15] + sp[76] * PI2[0][5][15] + sp[75] * PI1[0][15][5] + sp[77] * PI3[0][5][15] + sp[78] * PI4[0][5][15];
    A[200] = sp[74] * PI0[0][6][0] + sp[75] * PI1[0][6][0] + sp[76] * PI2[0][6][0] + sp[75] * PI1[0][0][6] + sp[77] * PI3[0][6][0] + sp[78] * PI4[0][6][0] + sp[76] * PI2[0][0][6] + sp[78] * PI4[0][0][6] + sp[79] * PI5[0][6][0];
    A[201] = sp[74] * PI0[0][6][1] + sp[75] * PI1[0][1][6] + sp[76] * PI2[0][1][6];
    A[202] = sp[75] * PI1[0][6][1] + sp[77] * PI3[0][6][1] + sp[78] * PI4[0][1][6];
    A[203] = sp[76] * PI2[0][6][1] + sp[78] * PI4[0][6][1] + sp[79] * PI5[0][6][1];
    A[204] = sp[75] * PI1[0][6][2] + sp[76] * PI2[0][6][2] + sp[77] * PI3[0][6][2] + sp[78] * PI4[0][6][2] + sp[78] * PI4[0][2][6] + sp[79] * PI5[0][6][2];
    A[205] = sp[75] * PI1[0][6][3] + sp[76] * PI2[0][6][3] + sp[77] * PI3[0][6][3] + sp[78] * PI4[0][6][3] + sp[78] * PI4[0][3][6] + sp[79] * PI5[0][6][3];
    A[206] = sp[74] * PI0[0][6][2] + sp[76] * PI2[0][6][4] + sp[75] * PI1[0][2][6] + sp[78] * PI4[0][6][4] + sp[76] * PI2[0][2][6] + sp[79] * PI5[0][6][4];
    A[207] = sp[74] * PI0[0][6][3] + sp[76] * PI2[0][6][5] + sp[75] * PI1[0][3][6] + sp[78] * PI4[0][6][5] + sp[76] * PI2[0][3][6] + sp[79] * PI5[0][6][5];
    A[208] = sp[74] * PI0[0][6][4] + sp[75] * PI1[0][6][4] + sp[75] * PI1[0][4][6] + sp[77] * PI3[0][6][4] + sp[76] * PI2[0][4][6] + sp[78] * PI4[0][4][6];
    A[209] = sp[74] * PI0[0][6][5] + sp[75] * PI1[0][6][5] + sp[75] * PI1[0][5][6] + sp[77] * PI3[0][6][5] + sp[76] * PI2[0][5][6] + sp[78] * PI4[0][5][6];
    A[210] = sp[74] * PI0[0][6][6] + sp[75] * PI1[0][6][6] + sp[76] * PI2[0][6][6] + sp[75] * PI1[0][6][6] + sp[77] * PI3[0][6][6] + sp[78] * PI4[0][6][6] + sp[76] * PI2[0][6][6] + sp[78] * PI4[0][6][6] + sp[79] * PI5[0][6][6];
    A[211] = sp[74] * PI0[0][6][7] + sp[75] * PI1[0][6][7] + sp[76] * PI2[0][6][7] + sp[75] * PI1[0][7][6] + sp[77] * PI3[0][6][7] + sp[78] * PI4[0][6][7] + sp[76] * PI2[0][7][6] + sp[78] * PI4[0][7][6] + sp[79] * PI5[0][6][7];
    A[212] = sp[74] * PI0[0][6][8] + sp[75] * PI1[0][6][8] + sp[76] * PI2[0][6][8] + sp[75] * PI1[0][8][6] + sp[77] * PI3[0][6][8] + sp[78] * PI4[0][6][8] + sp[76] * PI2[0][8][6] + sp[78] * PI4[0][8][6] + sp[79] * PI5[0][6][8];
    A[213] = sp[74] * PI0[0][6][9] + sp[75] * PI1[0][6][9] + sp[76] * PI2[0][6][9] + sp[75] * PI1[0][9][6] + sp[77] * PI3[0][6][9] + sp[78] * PI4[0][6][9] + sp[76] * PI2[0][9][6] + sp[78] * PI4[0][9][6] + sp[79] * PI5[0][6][9];
    A[214] = sp[74] * PI0[0][6][10] + sp[75] * PI1[0][6][10] + sp[76] * PI2[0][6][10] + sp[75] * PI1[0][10][6] + sp[77] * PI3[0][6][10] + sp[78] * PI4[0][6][10] + sp[76] * PI2[0][10][6] + sp[78] * PI4[0][10][6] + sp[79] * PI5[0][6][10];
    A[215] = sp[74] * PI0[0][6][11] + sp[75] * PI1[0][6][11] + sp[76] * PI2[0][6][11] + sp[75] * PI1[0][11][6] + sp[77] * PI3[0][6][11] + sp[78] * PI4[0][6][11] + sp[76] * PI2[0][11][6] + sp[78] * PI4[0][11][6] + sp[79] * PI5[0][6][11];
    A[216] = sp[74] * PI0[0][6][12] + sp[75] * PI1[0][6][12] + sp[76] * PI2[0][6][12] + sp[75] * PI1[0][12][6] + sp[77] * PI3[0][6][12] + sp[78] * PI4[0][6][12] + sp[76] * PI2[0][12][6] + sp[78] * PI4[0][12][6] + sp[79] * PI5[0][6][12];
    A[217] = sp[74] * PI0[0][6][13] + sp[75] * PI1[0][6][13] + sp[76] * PI2[0][6][13] + sp[75] * PI1[0][13][6] + sp[77] * PI3[0][6][13] + sp[78] * PI4[0][6][13] + sp[76] * PI2[0][13][6] + sp[78] * PI4[0][13][6] + sp[79] * PI5[0][6][13];
    A[218] = sp[74] * PI0[0][6][14] + sp[75] * PI1[0][6][14] + sp[76] * PI2[0][6][14] + sp[75] * PI1[0][14][6] + sp[77] * PI3[0][6][14] + sp[78] * PI4[0][6][14] + sp[76] * PI2[0][14][6] + sp[78] * PI4[0][14][6] + sp[79] * PI5[0][6][14];
    A[219] = sp[74] * PI0[0][6][15] + sp[75] * PI1[0][6][15] + sp[76] * PI2[0][6][15] + sp[75] * PI1[0][15][6] + sp[77] * PI3[0][6][15] + sp[78] * PI4[0][6][15] + sp[76] * PI2[0][15][6] + sp[78] * PI4[0][15][6] + sp[79] * PI5[0][6][15];
    A[220] = sp[74] * PI0[0][7][0] + sp[75] * PI1[0][7][0] + sp[76] * PI2[0][7][0] + sp[75] * PI1[0][0][7] + sp[77] * PI3[0][7][0] + sp[78] * PI4[0][7][0] + sp[76] * PI2[0][0][7] + sp[78] * PI4[0][0][7] + sp[79] * PI5[0][7][0];
    A[221] = sp[74] * PI0[0][7][1] + sp[75] * PI1[0][1][7] + sp[76] * PI2[0][1][7];
    A[222] = sp[75] * PI1[0][7][1] + sp[77] * PI3[0][7][1] + sp[78] * PI4[0][1][7];
    A[223] = sp[76] * PI2[0][7][1] + sp[78] * PI4[0][7][1] + sp[79] * PI5[0][7][1];
    A[224] = sp[75] * PI1[0][7][2] + sp[76] * PI2[0][7][2] + sp[77] * PI3[0][7][2] + sp[78] * PI4[0][7][2] + sp[78] * PI4[0][2][7] + sp[79] * PI5[0][7][2];
    A[225] = sp[75] * PI1[0][7][3] + sp[76] * PI2[0][7][3] + sp[77] * PI3[0][7][3] + sp[78] * PI4[0][7][3] + sp[78] * PI4[0][3][7] + sp[79] * PI5[0][7][3];
    A[226] = sp[74] * PI0[0][7][2] + sp[76] * PI2[0][7][4] + sp[75] * PI1[0][2][7] + sp[78] * PI4[0][7][4] + sp[76] * PI2[0][2][7] + sp[79] * PI5[0][7][4];
    A[227] = sp[74] * PI0[0][7][3] + sp[76] * PI2[0][7][5] + sp[75] * PI1[0][3][7] + sp[78] * PI4[0][7][5] + sp[76] * PI2[0][3][7] + sp[79] * PI5[0][7][5];
    A[228] = sp[74] * PI0[0][7][4] + sp[75] * PI1[0][7][4] + sp[75] * PI1[0][4][7] + sp[77] * PI3[0][7][4] + sp[76] * PI2[0][4][7] + sp[78] * PI4[0][4][7];
    A[229] = sp[74] * PI0[0][7][5] + sp[75] * PI1[0][7][5] + sp[75] * PI1[0][5][7] + sp[77] * PI3[0][7][5] + sp[76] * PI2[0][5][7] + sp[78] * PI4[0][5][7];
    A[230] = sp[74] * PI0[0][7][6] + sp[75] * PI1[0][7][6] + sp[76] * PI2[0][7][6] + sp[75] * PI1[0][6][7] + sp[77] * PI3[0][7][6] + sp[78] * PI4[0][7][6] + sp[76] * PI2[0][6][7] + sp[78] * PI4[0][6][7] + sp[79] * PI5[0][7][6];
    A[231] = sp[74] * PI0[0][7][7] + sp[75] * PI1[0][7][7] + sp[76] * PI2[0][7][7] + sp[75] * PI1[0][7][7] + sp[77] * PI3[0][7][7] + sp[78] * PI4[0][7][7] + sp[76] * PI2[0][7][7] + sp[78] * PI4[0][7][7] + sp[79] * PI5[0][7][7];
    A[232] = sp[74] * PI0[0][7][8] + sp[75] * PI1[0][7][8] + sp[76] * PI2[0][7][8] + sp[75] * PI1[0][8][7] + sp[77] * PI3[0][7][8] + sp[78] * PI4[0][7][8] + sp[76] * PI2[0][8][7] + sp[78] * PI4[0][8][7] + sp[79] * PI5[0][7][8];
    A[233] = sp[74] * PI0[0][7][9] + sp[75] * PI1[0][7][9] + sp[76] * PI2[0][7][9] + sp[75] * PI1[0][9][7] + sp[77] * PI3[0][7][9] + sp[78] * PI4[0][7][9] + sp[76] * PI2[0][9][7] + sp[78] * PI4[0][9][7] + sp[79] * PI5[0][7][9];
    A[234] = sp[74] * PI0[0][7][10] + sp[75] * PI1[0][7][10] + sp[76] * PI2[0][7][10] + sp[75] * PI1[0][10][7] + sp[77] * PI3[0][7][10] + sp[78] * PI4[0][7][10] + sp[76] * PI2[0][10][7] + sp[78] * PI4[0][10][7] + sp[79] * PI5[0][7][10];
    A[235] = sp[74] * PI0[0][7][11] + sp[75] * PI1[0][7][11] + sp[76] * PI2[0][7][11] + sp[75] * PI1[0][11][7] + sp[77] * PI3[0][7][11] + sp[78] * PI4[0][7][11] + sp[76] * PI2[0][11][7] + sp[78] * PI4[0][11][7] + sp[79] * PI5[0][7][11];
    A[236] = sp[74] * PI0[0][7][12] + sp[75] * PI1[0][7][12] + sp[76] * PI2[0][7][12] + sp[75] * PI1[0][12][7] + sp[77] * PI3[0][7][12] + sp[78] * PI4[0][7][12] + sp[76] * PI2[0][12][7] + sp[78] * PI4[0][12][7] + sp[79] * PI5[0][7][12];
    A[237] = sp[74] * PI0[0][7][13] + sp[75] * PI1[0][7][13] + sp[76] * PI2[0][7][13] + sp[75] * PI1[0][13][7] + sp[77] * PI3[0][7][13] + sp[78] * PI4[0][7][13] + sp[76] * PI2[0][13][7] + sp[78] * PI4[0][13][7] + sp[79] * PI5[0][7][13];
    A[238] = sp[74] * PI0[0][7][14] + sp[75] * PI1[0][7][14] + sp[76] * PI2[0][7][14] + sp[75] * PI1[0][14][7] + sp[77] * PI3[0][7][14] + sp[78] * PI4[0][7][14] + sp[76] * PI2[0][14][7] + sp[78] * PI4[0][14][7] + sp[79] * PI5[0][7][14];
    A[239] = sp[74] * PI0[0][7][15] + sp[75] * PI1[0][7][15] + sp[76] * PI2[0][7][15] + sp[75] * PI1[0][15][7] + sp[77] * PI3[0][7][15] + sp[78] * PI4[0][7][15] + sp[76] * PI2[0][15][7] + sp[78] * PI4[0][15][7] + sp[79] * PI5[0][7][15];
    A[240] = sp[74] * PI0[0][8][0] + sp[75] * PI1[0][8][0] + sp[76] * PI2[0][8][0] + sp[75] * PI1[0][0][8] + sp[77] * PI3[0][8][0] + sp[78] * PI4[0][8][0] + sp[76] * PI2[0][0][8] + sp[78] * PI4[0][0][8] + sp[79] * PI5[0][8][0];
    A[241] = sp[74] * PI0[0][8][1] + sp[75] * PI1[0][1][8] + sp[76] * PI2[0][1][8];
    A[242] = sp[75] * PI1[0][8][1] + sp[77] * PI3[0][8][1] + sp[78] * PI4[0][1][8];
    A[243] = sp[76] * PI2[0][8][1] + sp[78] * PI4[0][8][1] + sp[79] * PI5[0][8][1];
    A[244] = sp[75] * PI1[0][8][2] + sp[76] * PI2[0][8][2] + sp[77] * PI3[0][8][2] + sp[78] * PI4[0][8][2] + sp[78] * PI4[0][2][8] + sp[79] * PI5[0][8][2];
    A[245] = sp[75] * PI1[0][8][3] + sp[76] * PI2[0][8][3] + sp[77] * PI3[0][8][3] + sp[78] * PI4[0][8][3] + sp[78] * PI4[0][3][8] + sp[79] * PI5[0][8][3];
    A[246] = sp[74] * PI0[0][8][2] + sp[76] * PI2[0][8][4] + sp[75] * PI1[0][2][8] + sp[78] * PI4[0][8][4] + sp[76] * PI2[0][2][8] + sp[79] * PI5[0][8][4];
    A[247] = sp[74] * PI0[0][8][3] + sp[76] * PI2[0][8][5] + sp[75] * PI1[0][3][8] + sp[78] * PI4[0][8][5] + sp[76] * PI2[0][3][8] + sp[79] * PI5[0][8][5];
    A[248] = sp[74] * PI0[0][8][4] + sp[75] * PI1[0][8][4] + sp[75] * PI1[0][4][8] + sp[77] * PI3[0][8][4] + sp[76] * PI2[0][4][8] + sp[78] * PI4[0][4][8];
    A[249] = sp[74] * PI0[0][8][5] + sp[75] * PI1[0][8][5] + sp[75] * PI1[0][5][8] + sp[77] * PI3[0][8][5] + sp[76] * PI2[0][5][8] + sp[78] * PI4[0][5][8];
    A[250] = sp[74] * PI0[0][8][6] + sp[75] * PI1[0][8][6] + sp[76] * PI2[0][8][6] + sp[75] * PI1[0][6][8] + sp[77] * PI3[0][8][6] + sp[78] * PI4[0][8][6] + sp[76] * PI2[0][6][8] + sp[78] * PI4[0][6][8] + sp[79] * PI5[0][8][6];
    A[251] = sp[74] * PI0[0][8][7] + sp[75] * PI1[0][8][7] + sp[76] * PI2[0][8][7] + sp[75] * PI1[0][7][8] + sp[77] * PI3[0][8][7] + sp[78] * PI4[0][8][7] + sp[76] * PI2[0][7][8] + sp[78] * PI4[0][7][8] + sp[79] * PI5[0][8][7];
    A[252] = sp[74] * PI0[0][8][8] + sp[75] * PI1[0][8][8] + sp[76] * PI2[0][8][8] + sp[75] * PI1[0][8][8] + sp[77] * PI3[0][8][8] + sp[78] * PI4[0][8][8] + sp[76] * PI2[0][8][8] + sp[78] * PI4[0][8][8] + sp[79] * PI5[0][8][8];
    A[253] = sp[74] * PI0[0][8][9] + sp[75] * PI1[0][8][9] + sp[76] * PI2[0][8][9] + sp[75] * PI1[0][9][8] + sp[77] * PI3[0][8][9] + sp[78] * PI4[0][8][9] + sp[76] * PI2[0][9][8] + sp[78] * PI4[0][9][8] + sp[79] * PI5[0][8][9];
    A[254] = sp[74] * PI0[0][8][10] + sp[75] * PI1[0][8][10] + sp[76] * PI2[0][8][10] + sp[75] * PI1[0][10][8] + sp[77] * PI3[0][8][10] + sp[78] * PI4[0][8][10] + sp[76] * PI2[0][10][8] + sp[78] * PI4[0][10][8] + sp[79] * PI5[0][8][10];
    A[255] = sp[74] * PI0[0][8][11] + sp[75] * PI1[0][8][11] + sp[76] * PI2[0][8][11] + sp[75] * PI1[0][11][8] + sp[77] * PI3[0][8][11] + sp[78] * PI4[0][8][11] + sp[76] * PI2[0][11][8] + sp[78] * PI4[0][11][8] + sp[79] * PI5[0][8][11];
    A[256] = sp[74] * PI0[0][8][12] + sp[75] * PI1[0][8][12] + sp[76] * PI2[0][8][12] + sp[75] * PI1[0][12][8] + sp[77] * PI3[0][8][12] + sp[78] * PI4[0][8][12] + sp[76] * PI2[0][12][8] + sp[78] * PI4[0][12][8] + sp[79] * PI5[0][8][12];
    A[257] = sp[74] * PI0[0][8][13] + sp[75] * PI1[0][8][13] + sp[76] * PI2[0][8][13] + sp[75] * PI1[0][13][8] + sp[77] * PI3[0][8][13] + sp[78] * PI4[0][8][13] + sp[76] * PI2[0][13][8] + sp[78] * PI4[0][13][8] + sp[79] * PI5[0][8][13];
    A[258] = sp[74] * PI0[0][8][14] + sp[75] * PI1[0][8][14] + sp[76] * PI2[0][8][14] + sp[75] * PI1[0][14][8] + sp[77] * PI3[0][8][14] + sp[78] * PI4[0][8][14] + sp[76] * PI2[0][14][8] + sp[78] * PI4[0][14][8] + sp[79] * PI5[0][8][14];
    A[259] = sp[74] * PI0[0][8][15] + sp[75] * PI1[0][8][15] + sp[76] * PI2[0][8][15] + sp[75] * PI1[0][15][8] + sp[77] * PI3[0][8][15] + sp[78] * PI4[0][8][15] + sp[76] * PI2[0][15][8] + sp[78] * PI4[0][15][8] + sp[79] * PI5[0][8][15];
    A[260] = sp[74] * PI0[0][9][0] + sp[75] * PI1[0][9][0] + sp[76] * PI2[0][9][0] + sp[75] * PI1[0][0][9] + sp[77] * PI3[0][9][0] + sp[78] * PI4[0][9][0] + sp[76] * PI2[0][0][9] + sp[78] * PI4[0][0][9] + sp[79] * PI5[0][9][0];
    A[261] = sp[74] * PI0[0][9][1] + sp[75] * PI1[0][1][9] + sp[76] * PI2[0][1][9];
    A[262] = sp[75] * PI1[0][9][1] + sp[77] * PI3[0][9][1] + sp[78] * PI4[0][1][9];
    A[263] = sp[76] * PI2[0][9][1] + sp[78] * PI4[0][9][1] + sp[79] * PI5[0][9][1];
    A[264] = sp[75] * PI1[0][9][2] + sp[76] * PI2[0][9][2] + sp[77] * PI3[0][9][2] + sp[78] * PI4[0][9][2] + sp[78] * PI4[0][2][9] + sp[79] * PI5[0][9][2];
    A[265] = sp[75] * PI1[0][9][3] + sp[76] * PI2[0][9][3] + sp[77] * PI3[0][9][3] + sp[78] * PI4[0][9][3] + sp[78] * PI4[0][3][9] + sp[79] * PI5[0][9][3];
    A[266] = sp[74] * PI0[0][9][2] + sp[76] * PI2[0][9][4] + sp[75] * PI1[0][2][9] + sp[78] * PI4[0][9][4] + sp[76] * PI2[0][2][9] + sp[79] * PI5[0][9][4];
    A[267] = sp[74] * PI0[0][9][3] + sp[76] * PI2[0][9][5] + sp[75] * PI1[0][3][9] + sp[78] * PI4[0][9][5] + sp[76] * PI2[0][3][9] + sp[79] * PI5[0][9][5];
    A[268] = sp[74] * PI0[0][9][4] + sp[75] * PI1[0][9][4] + sp[75] * PI1[0][4][9] + sp[77] * PI3[0][9][4] + sp[76] * PI2[0][4][9] + sp[78] * PI4[0][4][9];
    A[269] = sp[74] * PI0[0][9][5] + sp[75] * PI1[0][9][5] + sp[75] * PI1[0][5][9] + sp[77] * PI3[0][9][5] + sp[76] * PI2[0][5][9] + sp[78] * PI4[0][5][9];
    A[270] = sp[74] * PI0[0][9][6] + sp[75] * PI1[0][9][6] + sp[76] * PI2[0][9][6] + sp[75] * PI1[0][6][9] + sp[77] * PI3[0][9][6] + sp[78] * PI4[0][9][6] + sp[76] * PI2[0][6][9] + sp[78] * PI4[0][6][9] + sp[79] * PI5[0][9][6];
    A[271] = sp[74] * PI0[0][9][7] + sp[75] * PI1[0][9][7] + sp[76] * PI2[0][9][7] + sp[75] * PI1[0][7][9] + sp[77] * PI3[0][9][7] + sp[78] * PI4[0][9][7] + sp[76] * PI2[0][7][9] + sp[78] * PI4[0][7][9] + sp[79] * PI5[0][9][7];
    A[272] = sp[74] * PI0[0][9][8] + sp[75] * PI1[0][9][8] + sp[76] * PI2[0][9][8] + sp[75] * PI1[0][8][9] + sp[77] * PI3[0][9][8] + sp[78] * PI4[0][9][8] + sp[76] * PI2[0][8][9] + sp[78] * PI4[0][8][9] + sp[79] * PI5[0][9][8];
    A[273] = sp[74] * PI0[0][9][9] + sp[75] * PI1[0][9][9] + sp[76] * PI2[0][9][9] + sp[75] * PI1[0][9][9] + sp[77] * PI3[0][9][9] + sp[78] * PI4[0][9][9] + sp[76] * PI2[0][9][9] + sp[78] * PI4[0][9][9] + sp[79] * PI5[0][9][9];
    A[274] = sp[74] * PI0[0][9][10] + sp[75] * PI1[0][9][10] + sp[76] * PI2[0][9][10] + sp[75] * PI1[0][10][9] + sp[77] * PI3[0][9][10] + sp[78] * PI4[0][9][10] + sp[76] * PI2[0][10][9] + sp[78] * PI4[0][10][9] + sp[79] * PI5[0][9][10];
    A[275] = sp[74] * PI0[0][9][11] + sp[75] * PI1[0][9][11] + sp[76] * PI2[0][9][11] + sp[75] * PI1[0][11][9] + sp[77] * PI3[0][9][11] + sp[78] * PI4[0][9][11] + sp[76] * PI2[0][11][9] + sp[78] * PI4[0][11][9] + sp[79] * PI5[0][9][11];
    A[276] = sp[74] * PI0[0][9][12] + sp[75] * PI1[0][9][12] + sp[76] * PI2[0][9][12] + sp[75] * PI1[0][12][9] + sp[77] * PI3[0][9][12] + sp[78] * PI4[0][9][12] + sp[76] * PI2[0][12][9] + sp[78] * PI4[0][12][9] + sp[79] * PI5[0][9][12];
    A[277] = sp[74] * PI0[0][9][13] + sp[75] * PI1[0][9][13] + sp[76] * PI2[0][9][13] + sp[75] * PI1[0][13][9] + sp[77] * PI3[0][9][13] + sp[78] * PI4[0][9][13] + sp[76] * PI2[0][13][9] + sp[78] * PI4[0][13][9] + sp[79] * PI5[0][9][13];
    A[278] = sp[74] * PI0[0][9][14] + sp[75] * PI1[0][9][14] + sp[76] * PI2[0][9][14] + sp[75] * PI1[0][14][9] + sp[77] * PI3[0][9][14] + sp[78] * PI4[0][9][14] + sp[76] * PI2[0][14][9] + sp[78] * PI4[0][14][9] + sp[79] * PI5[0][9][14];
    A[279] = sp[74] * PI0[0][9][15] + sp[75] * PI1[0][9][15] + sp[76] * PI2[0][9][15] + sp[75] * PI1[0][15][9] + sp[77] * PI3[0][9][15] + sp[78] * PI4[0][9][15] + sp[76] * PI2[0][15][9] + sp[78] * PI4[0][15][9] + sp[79] * PI5[0][9][15];
    A[280] = sp[74] * PI0[0][10][0] + sp[75] * PI1[0][10][0] + sp[76] * PI2[0][10][0] + sp[75] * PI1[0][0][10] + sp[77] * PI3[0][10][0] + sp[78] * PI4[0][10][0] + sp[76] * PI2[0][0][10] + sp[78] * PI4[0][0][10] + sp[79] * PI5[0][10][0];
    A[281] = sp[74] * PI0[0][10][1] + sp[75] * PI1[0][1][10] + sp[76] * PI2[0][1][10];
    A[282] = sp[75] * PI1[0][10][1] + sp[77] * PI3[0][10][1] + sp[78] * PI4[0][1][10];
    A[283] = sp[76] * PI2[0][10][1] + sp[78] * PI4[0][10][1] + sp[79] * PI5[0][10][1];
    A[284] = sp[75] * PI1[0][10][2] + sp[76] * PI2[0][10][2] + sp[77] * PI3[0][10][2] + sp[78] * PI4[0][10][2] + sp[78] * PI4[0][2][10] + sp[79] * PI5[0][10][2];
    A[285] = sp[75] * PI1[0][10][3] + sp[76] * PI2[0][10][3] + sp[77] * PI3[0][10][3] + sp[78] * PI4[0][10][3] + sp[78] * PI4[0][3][10] + sp[79] * PI5[0][10][3];
    A[286] = sp[74] * PI0[0][10][2] + sp[76] * PI2[0][10][4] + sp[75] * PI1[0][2][10] + sp[78] * PI4[0][10][4] + sp[76] * PI2[0][2][10] + sp[79] * PI5[0][10][4];
    A[287] = sp[74] * PI0[0][10][3] + sp[76] * PI2[0][10][5] + sp[75] * PI1[0][3][10] + sp[78] * PI4[0][10][5] + sp[76] * PI2[0][3][10] + sp[79] * PI5[0][10][5];
    A[288] = sp[74] * PI0[0][10][4] + sp[75] * PI1[0][10][4] + sp[75] * PI1[0][4][10] + sp[77] * PI3[0][10][4] + sp[76] * PI2[0][4][10] + sp[78] * PI4[0][4][10];
    A[289] = sp[74] * PI0[0][10][5] + sp[75] * PI1[0][10][5] + sp[75] * PI1[0][5][10] + sp[77] * PI3[0][10][5] + sp[76] * PI2[0][5][10] + sp[78] * PI4[0][5][10];
    A[290] = sp[74] * PI0[0][10][6] + sp[75] * PI1[0][10][6] + sp[76] * PI2[0][10][6] + sp[75] * PI1[0][6][10] + sp[77] * PI3[0][10][6] + sp[78] * PI4[0][10][6] + sp[76] * PI2[0][6][10] + sp[78] * PI4[0][6][10] + sp[79] * PI5[0][10][6];
    A[291] = sp[74] * PI0[0][10][7] + sp[75] * PI1[0][10][7] + sp[76] * PI2[0][10][7] + sp[75] * PI1[0][7][10] + sp[77] * PI3[0][10][7] + sp[78] * PI4[0][10][7] + sp[76] * PI2[0][7][10] + sp[78] * PI4[0][7][10] + sp[79] * PI5[0][10][7];
    A[292] = sp[74] * PI0[0][10][8] + sp[75] * PI1[0][10][8] + sp[76] * PI2[0][10][8] + sp[75] * PI1[0][8][10] + sp[77] * PI3[0][10][8] + sp[78] * PI4[0][10][8] + sp[76] * PI2[0][8][10] + sp[78] * PI4[0][8][10] + sp[79] * PI5[0][10][8];
    A[293] = sp[74] * PI0[0][10][9] + sp[75] * PI1[0][10][9] + sp[76] * PI2[0][10][9] + sp[75] * PI1[0][9][10] + sp[77] * PI3[0][10][9] + sp[78] * PI4[0][10][9] + sp[76] * PI2[0][9][10] + sp[78] * PI4[0][9][10] + sp[79] * PI5[0][10][9];
    A[294] = sp[74] * PI0[0][10][10] + sp[75] * PI1[0][10][10] + sp[76] * PI2[0][10][10] + sp[75] * PI1[0][10][10] + sp[77] * PI3[0][10][10] + sp[78] * PI4[0][10][10] + sp[76] * PI2[0][10][10] + sp[78] * PI4[0][10][10] + sp[79] * PI5[0][10][10];
    A[295] = sp[74] * PI0[0][10][11] + sp[75] * PI1[0][10][11] + sp[76] * PI2[0][10][11] + sp[75] * PI1[0][11][10] + sp[77] * PI3[0][10][11] + sp[78] * PI4[0][10][11] + sp[76] * PI2[0][11][10] + sp[78] * PI4[0][11][10] + sp[79] * PI5[0][10][11];
    A[296] = sp[74] * PI0[0][10][12] + sp[75] * PI1[0][10][12] + sp[76] * PI2[0][10][12] + sp[75] * PI1[0][12][10] + sp[77] * PI3[0][10][12] + sp[78] * PI4[0][10][12] + sp[76] * PI2[0][12][10] + sp[78] * PI4[0][12][10] + sp[79] * PI5[0][10][12];
    A[297] = sp[74] * PI0[0][10][13] + sp[75] * PI1[0][10][13] + sp[76] * PI2[0][10][13] + sp[75] * PI1[0][13][10] + sp[77] * PI3[0][10][13] + sp[78] * PI4[0][10][13] + sp[76] * PI2[0][13][10] + sp[78] * PI4[0][13][10] + sp[79] * PI5[0][10][13];
    A[298] = sp[74] * PI0[0][10][14] + sp[75] * PI1[0][10][14] + sp[76] * PI2[0][10][14] + sp[75] * PI1[0][14][10] + sp[77] * PI3[0][10][14] + sp[78] * PI4[0][10][14] + sp[76] * PI2[0][14][10] + sp[78] * PI4[0][14][10] + sp[79] * PI5[0][10][14];
    A[299] = sp[74] * PI0[0][10][15] + sp[75] * PI1[0][10][15] + sp[76] * PI2[0][10][15] + sp[75] * PI1[0][15][10] + sp[77] * PI3[0][10][15] + sp[78] * PI4[0][10][15] + sp[76] * PI2[0][15][10] + sp[78] * PI4[0][15][10] + sp[79] * PI5[0][10][15];
    A[300] = sp[74] * PI0[0][11][0] + sp[75] * PI1[0][11][0] + sp[76] * PI2[0][11][0] + sp[75] * PI1[0][0][11] + sp[77] * PI3[0][11][0] + sp[78] * PI4[0][11][0] + sp[76] * PI2[0][0][11] + sp[78] * PI4[0][0][11] + sp[79] * PI5[0][11][0];
    A[301] = sp[74] * PI0[0][11][1] + sp[75] * PI1[0][1][11] + sp[76] * PI2[0][1][11];
    A[302] = sp[75] * PI1[0][11][1] + sp[77] * PI3[0][11][1] + sp[78] * PI4[0][1][11];
    A[303] = sp[76] * PI2[0][11][1] + sp[78] * PI4[0][11][1] + sp[79] * PI5[0][11][1];
    A[304] = sp[75] * PI1[0][11][2] + sp[76] * PI2[0][11][2] + sp[77] * PI3[0][11][2] + sp[78] * PI4[0][11][2] + sp[78] * PI4[0][2][11] + sp[79] * PI5[0][11][2];
    A[305] = sp[75] * PI1[0][11][3] + sp[76] * PI2[0][11][3] + sp[77] * PI3[0][11][3] + sp[78] * PI4[0][11][3] + sp[78] * PI4[0][3][11] + sp[79] * PI5[0][11][3];
    A[306] = sp[74] * PI0[0][11][2] + sp[76] * PI2[0][11][4] + sp[75] * PI1[0][2][11] + sp[78] * PI4[0][11][4] + sp[76] * PI2[0][2][11] + sp[79] * PI5[0][11][4];
    A[307] = sp[74] * PI0[0][11][3] + sp[76] * PI2[0][11][5] + sp[75] * PI1[0][3][11] + sp[78] * PI4[0][11][5] + sp[76] * PI2[0][3][11] + sp[79] * PI5[0][11][5];
    A[308] = sp[74] * PI0[0][11][4] + sp[75] * PI1[0][11][4] + sp[75] * PI1[0][4][11] + sp[77] * PI3[0][11][4] + sp[76] * PI2[0][4][11] + sp[78] * PI4[0][4][11];
    A[309] = sp[74] * PI0[0][11][5] + sp[75] * PI1[0][11][5] + sp[75] * PI1[0][5][11] + sp[77] * PI3[0][11][5] + sp[76] * PI2[0][5][11] + sp[78] * PI4[0][5][11];
    A[310] = sp[74] * PI0[0][11][6] + sp[75] * PI1[0][11][6] + sp[76] * PI2[0][11][6] + sp[75] * PI1[0][6][11] + sp[77] * PI3[0][11][6] + sp[78] * PI4[0][11][6] + sp[76] * PI2[0][6][11] + sp[78] * PI4[0][6][11] + sp[79] * PI5[0][11][6];
    A[311] = sp[74] * PI0[0][11][7] + sp[75] * PI1[0][11][7] + sp[76] * PI2[0][11][7] + sp[75] * PI1[0][7][11] + sp[77] * PI3[0][11][7] + sp[78] * PI4[0][11][7] + sp[76] * PI2[0][7][11] + sp[78] * PI4[0][7][11] + sp[79] * PI5[0][11][7];
    A[312] = sp[74] * PI0[0][11][8] + sp[75] * PI1[0][11][8] + sp[76] * PI2[0][11][8] + sp[75] * PI1[0][8][11] + sp[77] * PI3[0][11][8] + sp[78] * PI4[0][11][8] + sp[76] * PI2[0][8][11] + sp[78] * PI4[0][8][11] + sp[79] * PI5[0][11][8];
    A[313] = sp[74] * PI0[0][11][9] + sp[75] * PI1[0][11][9] + sp[76] * PI2[0][11][9] + sp[75] * PI1[0][9][11] + sp[77] * PI3[0][11][9] + sp[78] * PI4[0][11][9] + sp[76] * PI2[0][9][11] + sp[78] * PI4[0][9][11] + sp[79] * PI5[0][11][9];
    A[314] = sp[74] * PI0[0][11][10] + sp[75] * PI1[0][11][10] + sp[76] * PI2[0][11][10] + sp[75] * PI1[0][10][11] + sp[77] * PI3[0][11][10] + sp[78] * PI4[0][11][10] + sp[76] * PI2[0][10][11] + sp[78] * PI4[0][10][11] + sp[79] * PI5[0][11][10];
    A[315] = sp[74] * PI0[0][11][11] + sp[75] * PI1[0][11][11] + sp[76] * PI2[0][11][11] + sp[75] * PI1[0][11][11] + sp[77] * PI3[0][11][11] + sp[78] * PI4[0][11][11] + sp[76] * PI2[0][11][11] + sp[78] * PI4[0][11][11] + sp[79] * PI5[0][11][11];
    A[316] = sp[74] * PI0[0][11][12] + sp[75] * PI1[0][11][12] + sp[76] * PI2[0][11][12] + sp[75] * PI1[0][12][11] + sp[77] * PI3[0][11][12] + sp[78] * PI4[0][11][12] + sp[76] * PI2[0][12][11] + sp[78] * PI4[0][12][11] + sp[79] * PI5[0][11][12];
    A[317] = sp[74] * PI0[0][11][13] + sp[75] * PI1[0][11][13] + sp[76] * PI2[0][11][13] + sp[75] * PI1[0][13][11] + sp[77] * PI3[0][11][13] + sp[78] * PI4[0][11][13] + sp[76] * PI2[0][13][11] + sp[78] * PI4[0][13][11] + sp[79] * PI5[0][11][13];
    A[318] = sp[74] * PI0[0][11][14] + sp[75] * PI1[0][11][14] + sp[76] * PI2[0][11][14] + sp[75] * PI1[0][14][11] + sp[77] * PI3[0][11][14] + sp[78] * PI4[0][11][14] + sp[76] * PI2[0][14][11] + sp[78] * PI4[0][14][11] + sp[79] * PI5[0][11][14];
    A[319] = sp[74] * PI0[0][11][15] + sp[75] * PI1[0][11][15] + sp[76] * PI2[0][11][15] + sp[75] * PI1[0][15][11] + sp[77] * PI3[0][11][15] + sp[78] * PI4[0][11][15] + sp[76] * PI2[0][15][11] + sp[78] * PI4[0][15][11] + sp[79] * PI5[0][11][15];
    A[320] = sp[74] * PI0[0][12][0] + sp[75] * PI1[0][12][0] + sp[76] * PI2[0][12][0] + sp[75] * PI1[0][0][12] + sp[77] * PI3[0][12][0] + sp[78] * PI4[0][12][0] + sp[76] * PI2[0][0][12] + sp[78] * PI4[0][0][12] + sp[79] * PI5[0][12][0];
    A[321] = sp[74] * PI0[0][12][1] + sp[75] * PI1[0][1][12] + sp[76] * PI2[0][1][12];
    A[322] = sp[75] * PI1[0][12][1] + sp[77] * PI3[0][12][1] + sp[78] * PI4[0][1][12];
    A[323] = sp[76] * PI2[0][12][1] + sp[78] * PI4[0][12][1] + sp[79] * PI5[0][12][1];
    A[324] = sp[75] * PI1[0][12][2] + sp[76] * PI2[0][12][2] + sp[77] * PI3[0][12][2] + sp[78] * PI4[0][12][2] + sp[78] * PI4[0][2][12] + sp[79] * PI5[0][12][2];
    A[325] = sp[75] * PI1[0][12][3] + sp[76] * PI2[0][12][3] + sp[77] * PI3[0][12][3] + sp[78] * PI4[0][12][3] + sp[78] * PI4[0][3][12] + sp[79] * PI5[0][12][3];
    A[326] = sp[74] * PI0[0][12][2] + sp[76] * PI2[0][12][4] + sp[75] * PI1[0][2][12] + sp[78] * PI4[0][12][4] + sp[76] * PI2[0][2][12] + sp[79] * PI5[0][12][4];
    A[327] = sp[74] * PI0[0][12][3] + sp[76] * PI2[0][12][5] + sp[75] * PI1[0][3][12] + sp[78] * PI4[0][12][5] + sp[76] * PI2[0][3][12] + sp[79] * PI5[0][12][5];
    A[328] = sp[74] * PI0[0][12][4] + sp[75] * PI1[0][12][4] + sp[75] * PI1[0][4][12] + sp[77] * PI3[0][12][4] + sp[76] * PI2[0][4][12] + sp[78] * PI4[0][4][12];
    A[329] = sp[74] * PI0[0][12][5] + sp[75] * PI1[0][12][5] + sp[75] * PI1[0][5][12] + sp[77] * PI3[0][12][5] + sp[76] * PI2[0][5][12] + sp[78] * PI4[0][5][12];
    A[330] = sp[74] * PI0[0][12][6] + sp[75] * PI1[0][12][6] + sp[76] * PI2[0][12][6] + sp[75] * PI1[0][6][12] + sp[77] * PI3[0][12][6] + sp[78] * PI4[0][12][6] + sp[76] * PI2[0][6][12] + sp[78] * PI4[0][6][12] + sp[79] * PI5[0][12][6];
    A[331] = sp[74] * PI0[0][12][7] + sp[75] * PI1[0][12][7] + sp[76] * PI2[0][12][7] + sp[75] * PI1[0][7][12] + sp[77] * PI3[0][12][7] + sp[78] * PI4[0][12][7] + sp[76] * PI2[0][7][12] + sp[78] * PI4[0][7][12] + sp[79] * PI5[0][12][7];
    A[332] = sp[74] * PI0[0][12][8] + sp[75] * PI1[0][12][8] + sp[76] * PI2[0][12][8] + sp[75] * PI1[0][8][12] + sp[77] * PI3[0][12][8] + sp[78] * PI4[0][12][8] + sp[76] * PI2[0][8][12] + sp[78] * PI4[0][8][12] + sp[79] * PI5[0][12][8];
    A[333] = sp[74] * PI0[0][12][9] + sp[75] * PI1[0][12][9] + sp[76] * PI2[0][12][9] + sp[75] * PI1[0][9][12] + sp[77] * PI3[0][12][9] + sp[78] * PI4[0][12][9] + sp[76] * PI2[0][9][12] + sp[78] * PI4[0][9][12] + sp[79] * PI5[0][12][9];
    A[334] = sp[74] * PI0[0][12][10] + sp[75] * PI1[0][12][10] + sp[76] * PI2[0][12][10] + sp[75] * PI1[0][10][12] + sp[77] * PI3[0][12][10] + sp[78] * PI4[0][12][10] + sp[76] * PI2[0][10][12] + sp[78] * PI4[0][10][12] + sp[79] * PI5[0][12][10];
    A[335] = sp[74] * PI0[0][12][11] + sp[75] * PI1[0][12][11] + sp[76] * PI2[0][12][11] + sp[75] * PI1[0][11][12] + sp[77] * PI3[0][12][11] + sp[78] * PI4[0][12][11] + sp[76] * PI2[0][11][12] + sp[78] * PI4[0][11][12] + sp[79] * PI5[0][12][11];
    A[336] = sp[74] * PI0[0][12][12] + sp[75] * PI1[0][12][12] + sp[76] * PI2[0][12][12] + sp[75] * PI1[0][12][12] + sp[77] * PI3[0][12][12] + sp[78] * PI4[0][12][12] + sp[76] * PI2[0][12][12] + sp[78] * PI4[0][12][12] + sp[79] * PI5[0][12][12];
    A[337] = sp[74] * PI0[0][12][13] + sp[75] * PI1[0][12][13] + sp[76] * PI2[0][12][13] + sp[75] * PI1[0][13][12] + sp[77] * PI3[0][12][13] + sp[78] * PI4[0][12][13] + sp[76] * PI2[0][13][12] + sp[78] * PI4[0][13][12] + sp[79] * PI5[0][12][13];
    A[338] = sp[74] * PI0[0][12][14] + sp[75] * PI1[0][12][14] + sp[76] * PI2[0][12][14] + sp[75] * PI1[0][14][12] + sp[77] * PI3[0][12][14] + sp[78] * PI4[0][12][14] + sp[76] * PI2[0][14][12] + sp[78] * PI4[0][14][12] + sp[79] * PI5[0][12][14];
    A[339] = sp[74] * PI0[0][12][15] + sp[75] * PI1[0][12][15] + sp[76] * PI2[0][12][15] + sp[75] * PI1[0][15][12] + sp[77] * PI3[0][12][15] + sp[78] * PI4[0][12][15] + sp[76] * PI2[0][15][12] + sp[78] * PI4[0][15][12] + sp[79] * PI5[0][12][15];
    A[340] = sp[74] * PI0[0][13][0] + sp[75] * PI1[0][13][0] + sp[76] * PI2[0][13][0] + sp[75] * PI1[0][0][13] + sp[77] * PI3[0][13][0] + sp[78] * PI4[0][13][0] + sp[76] * PI2[0][0][13] + sp[78] * PI4[0][0][13] + sp[79] * PI5[0][13][0];
    A[341] = sp[74] * PI0[0][13][1] + sp[75] * PI1[0][1][13] + sp[76] * PI2[0][1][13];
    A[342] = sp[75] * PI1[0][13][1] + sp[77] * PI3[0][13][1] + sp[78] * PI4[0][1][13];
    A[343] = sp[76] * PI2[0][13][1] + sp[78] * PI4[0][13][1] + sp[79] * PI5[0][13][1];
    A[344] = sp[75] * PI1[0][13][2] + sp[76] * PI2[0][13][2] + sp[77] * PI3[0][13][2] + sp[78] * PI4[0][13][2] + sp[78] * PI4[0][2][13] + sp[79] * PI5[0][13][2];
    A[345] = sp[75] * PI1[0][13][3] + sp[76] * PI2[0][13][3] + sp[77] * PI3[0][13][3] + sp[78] * PI4[0][13][3] + sp[78] * PI4[0][3][13] + sp[79] * PI5[0][13][3];
    A[346] = sp[74] * PI0[0][13][2] + sp[76] * PI2[0][13][4] + sp[75] * PI1[0][2][13] + sp[78] * PI4[0][13][4] + sp[76] * PI2[0][2][13] + sp[79] * PI5[0][13][4];
    A[347] = sp[74] * PI0[0][13][3] + sp[76] * PI2[0][13][5] + sp[75] * PI1[0][3][13] + sp[78] * PI4[0][13][5] + sp[76] * PI2[0][3][13] + sp[79] * PI5[0][13][5];
    A[348] = sp[74] * PI0[0][13][4] + sp[75] * PI1[0][13][4] + sp[75] * PI1[0][4][13] + sp[77] * PI3[0][13][4] + sp[76] * PI2[0][4][13] + sp[78] * PI4[0][4][13];
    A[349] = sp[74] * PI0[0][13][5] + sp[75] * PI1[0][13][5] + sp[75] * PI1[0][5][13] + sp[77] * PI3[0][13][5] + sp[76] * PI2[0][5][13] + sp[78] * PI4[0][5][13];
    A[350] = sp[74] * PI0[0][13][6] + sp[75] * PI1[0][13][6] + sp[76] * PI2[0][13][6] + sp[75] * PI1[0][6][13] + sp[77] * PI3[0][13][6] + sp[78] * PI4[0][13][6] + sp[76] * PI2[0][6][13] + sp[78] * PI4[0][6][13] + sp[79] * PI5[0][13][6];
    A[351] = sp[74] * PI0[0][13][7] + sp[75] * PI1[0][13][7] + sp[76] * PI2[0][13][7] + sp[75] * PI1[0][7][13] + sp[77] * PI3[0][13][7] + sp[78] * PI4[0][13][7] + sp[76] * PI2[0][7][13] + sp[78] * PI4[0][7][13] + sp[79] * PI5[0][13][7];
    A[352] = sp[74] * PI0[0][13][8] + sp[75] * PI1[0][13][8] + sp[76] * PI2[0][13][8] + sp[75] * PI1[0][8][13] + sp[77] * PI3[0][13][8] + sp[78] * PI4[0][13][8] + sp[76] * PI2[0][8][13] + sp[78] * PI4[0][8][13] + sp[79] * PI5[0][13][8];
    A[353] = sp[74] * PI0[0][13][9] + sp[75] * PI1[0][13][9] + sp[76] * PI2[0][13][9] + sp[75] * PI1[0][9][13] + sp[77] * PI3[0][13][9] + sp[78] * PI4[0][13][9] + sp[76] * PI2[0][9][13] + sp[78] * PI4[0][9][13] + sp[79] * PI5[0][13][9];
    A[354] = sp[74] * PI0[0][13][10] + sp[75] * PI1[0][13][10] + sp[76] * PI2[0][13][10] + sp[75] * PI1[0][10][13] + sp[77] * PI3[0][13][10] + sp[78] * PI4[0][13][10] + sp[76] * PI2[0][10][13] + sp[78] * PI4[0][10][13] + sp[79] * PI5[0][13][10];
    A[355] = sp[74] * PI0[0][13][11] + sp[75] * PI1[0][13][11] + sp[76] * PI2[0][13][11] + sp[75] * PI1[0][11][13] + sp[77] * PI3[0][13][11] + sp[78] * PI4[0][13][11] + sp[76] * PI2[0][11][13] + sp[78] * PI4[0][11][13] + sp[79] * PI5[0][13][11];
    A[356] = sp[74] * PI0[0][13][12] + sp[75] * PI1[0][13][12] + sp[76] * PI2[0][13][12] + sp[75] * PI1[0][12][13] + sp[77] * PI3[0][13][12] + sp[78] * PI4[0][13][12] + sp[76] * PI2[0][12][13] + sp[78] * PI4[0][12][13] + sp[79] * PI5[0][13][12];
    A[357] = sp[74] * PI0[0][13][13] + sp[75] * PI1[0][13][13] + sp[76] * PI2[0][13][13] + sp[75] * PI1[0][13][13] + sp[77] * PI3[0][13][13] + sp[78] * PI4[0][13][13] + sp[76] * PI2[0][13][13] + sp[78] * PI4[0][13][13] + sp[79] * PI5[0][13][13];
    A[358] = sp[74] * PI0[0][13][14] + sp[75] * PI1[0][13][14] + sp[76] * PI2[0][13][14] + sp[75] * PI1[0][14][13] + sp[77] * PI3[0][13][14] + sp[78] * PI4[0][13][14] + sp[76] * PI2[0][14][13] + sp[78] * PI4[0][14][13] + sp[79] * PI5[0][13][14];
    A[359] = sp[74] * PI0[0][13][15] + sp[75] * PI1[0][13][15] + sp[76] * PI2[0][13][15] + sp[75] * PI1[0][15][13] + sp[77] * PI3[0][13][15] + sp[78] * PI4[0][13][15] + sp[76] * PI2[0][15][13] + sp[78] * PI4[0][15][13] + sp[79] * PI5[0][13][15];
    A[360] = sp[74] * PI0[0][14][0] + sp[75] * PI1[0][14][0] + sp[76] * PI2[0][14][0] + sp[75] * PI1[0][0][14] + sp[77] * PI3[0][14][0] + sp[78] * PI4[0][14][0] + sp[76] * PI2[0][0][14] + sp[78] * PI4[0][0][14] + sp[79] * PI5[0][14][0];
    A[361] = sp[74] * PI0[0][14][1] + sp[75] * PI1[0][1][14] + sp[76] * PI2[0][1][14];
    A[362] = sp[75] * PI1[0][14][1] + sp[77] * PI3[0][14][1] + sp[78] * PI4[0][1][14];
    A[363] = sp[76] * PI2[0][14][1] + sp[78] * PI4[0][14][1] + sp[79] * PI5[0][14][1];
    A[364] = sp[75] * PI1[0][14][2] + sp[76] * PI2[0][14][2] + sp[77] * PI3[0][14][2] + sp[78] * PI4[0][14][2] + sp[78] * PI4[0][2][14] + sp[79] * PI5[0][14][2];
    A[365] = sp[75] * PI1[0][14][3] + sp[76] * PI2[0][14][3] + sp[77] * PI3[0][14][3] + sp[78] * PI4[0][14][3] + sp[78] * PI4[0][3][14] + sp[79] * PI5[0][14][3];
    A[366] = sp[74] * PI0[0][14][2] + sp[76] * PI2[0][14][4] + sp[75] * PI1[0][2][14] + sp[78] * PI4[0][14][4] + sp[76] * PI2[0][2][14] + sp[79] * PI5[0][14][4];
    A[367] = sp[74] * PI0[0][14][3] + sp[76] * PI2[0][14][5] + sp[75] * PI1[0][3][14] + sp[78] * PI4[0][14][5] + sp[76] * PI2[0][3][14] + sp[79] * PI5[0][14][5];
    A[368] = sp[74] * PI0[0][14][4] + sp[75] * PI1[0][14][4] + sp[75] * PI1[0][4][14] + sp[77] * PI3[0][14][4] + sp[76] * PI2[0][4][14] + sp[78] * PI4[0][4][14];
    A[369] = sp[74] * PI0[0][14][5] + sp[75] * PI1[0][14][5] + sp[75] * PI1[0][5][14] + sp[77] * PI3[0][14][5] + sp[76] * PI2[0][5][14] + sp[78] * PI4[0][5][14];
    A[370] = sp[74] * PI0[0][14][6] + sp[75] * PI1[0][14][6] + sp[76] * PI2[0][14][6] + sp[75] * PI1[0][6][14] + sp[77] * PI3[0][14][6] + sp[78] * PI4[0][14][6] + sp[76] * PI2[0][6][14] + sp[78] * PI4[0][6][14] + sp[79] * PI5[0][14][6];
    A[371] = sp[74] * PI0[0][14][7] + sp[75] * PI1[0][14][7] + sp[76] * PI2[0][14][7] + sp[75] * PI1[0][7][14] + sp[77] * PI3[0][14][7] + sp[78] * PI4[0][14][7] + sp[76] * PI2[0][7][14] + sp[78] * PI4[0][7][14] + sp[79] * PI5[0][14][7];
    A[372] = sp[74] * PI0[0][14][8] + sp[75] * PI1[0][14][8] + sp[76] * PI2[0][14][8] + sp[75] * PI1[0][8][14] + sp[77] * PI3[0][14][8] + sp[78] * PI4[0][14][8] + sp[76] * PI2[0][8][14] + sp[78] * PI4[0][8][14] + sp[79] * PI5[0][14][8];
    A[373] = sp[74] * PI0[0][14][9] + sp[75] * PI1[0][14][9] + sp[76] * PI2[0][14][9] + sp[75] * PI1[0][9][14] + sp[77] * PI3[0][14][9] + sp[78] * PI4[0][14][9] + sp[76] * PI2[0][9][14] + sp[78] * PI4[0][9][14] + sp[79] * PI5[0][14][9];
    A[374] = sp[74] * PI0[0][14][10] + sp[75] * PI1[0][14][10] + sp[76] * PI2[0][14][10] + sp[75] * PI1[0][10][14] + sp[77] * PI3[0][14][10] + sp[78] * PI4[0][14][10] + sp[76] * PI2[0][10][14] + sp[78] * PI4[0][10][14] + sp[79] * PI5[0][14][10];
    A[375] = sp[74] * PI0[0][14][11] + sp[75] * PI1[0][14][11] + sp[76] * PI2[0][14][11] + sp[75] * PI1[0][11][14] + sp[77] * PI3[0][14][11] + sp[78] * PI4[0][14][11] + sp[76] * PI2[0][11][14] + sp[78] * PI4[0][11][14] + sp[79] * PI5[0][14][11];
    A[376] = sp[74] * PI0[0][14][12] + sp[75] * PI1[0][14][12] + sp[76] * PI2[0][14][12] + sp[75] * PI1[0][12][14] + sp[77] * PI3[0][14][12] + sp[78] * PI4[0][14][12] + sp[76] * PI2[0][12][14] + sp[78] * PI4[0][12][14] + sp[79] * PI5[0][14][12];
    A[377] = sp[74] * PI0[0][14][13] + sp[75] * PI1[0][14][13] + sp[76] * PI2[0][14][13] + sp[75] * PI1[0][13][14] + sp[77] * PI3[0][14][13] + sp[78] * PI4[0][14][13] + sp[76] * PI2[0][13][14] + sp[78] * PI4[0][13][14] + sp[79] * PI5[0][14][13];
    A[378] = sp[74] * PI0[0][14][14] + sp[75] * PI1[0][14][14] + sp[76] * PI2[0][14][14] + sp[75] * PI1[0][14][14] + sp[77] * PI3[0][14][14] + sp[78] * PI4[0][14][14] + sp[76] * PI2[0][14][14] + sp[78] * PI4[0][14][14] + sp[79] * PI5[0][14][14];
    A[379] = sp[74] * PI0[0][14][15] + sp[75] * PI1[0][14][15] + sp[76] * PI2[0][14][15] + sp[75] * PI1[0][15][14] + sp[77] * PI3[0][14][15] + sp[78] * PI4[0][14][15] + sp[76] * PI2[0][15][14] + sp[78] * PI4[0][15][14] + sp[79] * PI5[0][14][15];
    A[380] = sp[74] * PI0[0][15][0] + sp[75] * PI1[0][15][0] + sp[76] * PI2[0][15][0] + sp[75] * PI1[0][0][15] + sp[77] * PI3[0][15][0] + sp[78] * PI4[0][15][0] + sp[76] * PI2[0][0][15] + sp[78] * PI4[0][0][15] + sp[79] * PI5[0][15][0];
    A[381] = sp[74] * PI0[0][15][1] + sp[75] * PI1[0][1][15] + sp[76] * PI2[0][1][15];
    A[382] = sp[75] * PI1[0][15][1] + sp[77] * PI3[0][15][1] + sp[78] * PI4[0][1][15];
    A[383] = sp[76] * PI2[0][15][1] + sp[78] * PI4[0][15][1] + sp[79] * PI5[0][15][1];
    A[384] = sp[75] * PI1[0][15][2] + sp[76] * PI2[0][15][2] + sp[77] * PI3[0][15][2] + sp[78] * PI4[0][15][2] + sp[78] * PI4[0][2][15] + sp[79] * PI5[0][15][2];
    A[385] = sp[75] * PI1[0][15][3] + sp[76] * PI2[0][15][3] + sp[77] * PI3[0][15][3] + sp[78] * PI4[0][15][3] + sp[78] * PI4[0][3][15] + sp[79] * PI5[0][15][3];
    A[386] = sp[74] * PI0[0][15][2] + sp[76] * PI2[0][15][4] + sp[75] * PI1[0][2][15] + sp[78] * PI4[0][15][4] + sp[76] * PI2[0][2][15] + sp[79] * PI5[0][15][4];
    A[387] = sp[74] * PI0[0][15][3] + sp[76] * PI2[0][15][5] + sp[75] * PI1[0][3][15] + sp[78] * PI4[0][15][5] + sp[76] * PI2[0][3][15] + sp[79] * PI5[0][15][5];
    A[388] = sp[74] * PI0[0][15][4] + sp[75] * PI1[0][15][4] + sp[75] * PI1[0][4][15] + sp[77] * PI3[0][15][4] + sp[76] * PI2[0][4][15] + sp[78] * PI4[0][4][15];
    A[389] = sp[74] * PI0[0][15][5] + sp[75] * PI1[0][15][5] + sp[75] * PI1[0][5][15] + sp[77] * PI3[0][15][5] + sp[76] * PI2[0][5][15] + sp[78] * PI4[0][5][15];
    A[390] = sp[74] * PI0[0][15][6] + sp[75] * PI1[0][15][6] + sp[76] * PI2[0][15][6] + sp[75] * PI1[0][6][15] + sp[77] * PI3[0][15][6] + sp[78] * PI4[0][15][6] + sp[76] * PI2[0][6][15] + sp[78] * PI4[0][6][15] + sp[79] * PI5[0][15][6];
    A[391] = sp[74] * PI0[0][15][7] + sp[75] * PI1[0][15][7] + sp[76] * PI2[0][15][7] + sp[75] * PI1[0][7][15] + sp[77] * PI3[0][15][7] + sp[78] * PI4[0][15][7] + sp[76] * PI2[0][7][15] + sp[78] * PI4[0][7][15] + sp[79] * PI5[0][15][7];
    A[392] = sp[74] * PI0[0][15][8] + sp[75] * PI1[0][15][8] + sp[76] * PI2[0][15][8] + sp[75] * PI1[0][8][15] + sp[77] * PI3[0][15][8] + sp[78] * PI4[0][15][8] + sp[76] * PI2[0][8][15] + sp[78] * PI4[0][8][15] + sp[79] * PI5[0][15][8];
    A[393] = sp[74] * PI0[0][15][9] + sp[75] * PI1[0][15][9] + sp[76] * PI2[0][15][9] + sp[75] * PI1[0][9][15] + sp[77] * PI3[0][15][9] + sp[78] * PI4[0][15][9] + sp[76] * PI2[0][9][15] + sp[78] * PI4[0][9][15] + sp[79] * PI5[0][15][9];
    A[394] = sp[74] * PI0[0][15][10] + sp[75] * PI1[0][15][10] + sp[76] * PI2[0][15][10] + sp[75] * PI1[0][10][15] + sp[77] * PI3[0][15][10] + sp[78] * PI4[0][15][10] + sp[76] * PI2[0][10][15] + sp[78] * PI4[0][10][15] + sp[79] * PI5[0][15][10];
    A[395] = sp[74] * PI0[0][15][11] + sp[75] * PI1[0][15][11] + sp[76] * PI2[0][15][11] + sp[75] * PI1[0][11][15] + sp[77] * PI3[0][15][11] + sp[78] * PI4[0][15][11] + sp[76] * PI2[0][11][15] + sp[78] * PI4[0][11][15] + sp[79] * PI5[0][15][11];
    A[396] = sp[74] * PI0[0][15][12] + sp[75] * PI1[0][15][12] + sp[76] * PI2[0][15][12] + sp[75] * PI1[0][12][15] + sp[77] * PI3[0][15][12] + sp[78] * PI4[0][15][12] + sp[76] * PI2[0][12][15] + sp[78] * PI4[0][12][15] + sp[79] * PI5[0][15][12];
    A[397] = sp[74] * PI0[0][15][13] + sp[75] * PI1[0][15][13] + sp[76] * PI2[0][15][13] + sp[75] * PI1[0][13][15] + sp[77] * PI3[0][15][13] + sp[78] * PI4[0][15][13] + sp[76] * PI2[0][13][15] + sp[78] * PI4[0][13][15] + sp[79] * PI5[0][15][13];
    A[398] = sp[74] * PI0[0][15][14] + sp[75] * PI1[0][15][14] + sp[76] * PI2[0][15][14] + sp[75] * PI1[0][14][15] + sp[77] * PI3[0][15][14] + sp[78] * PI4[0][15][14] + sp[76] * PI2[0][14][15] + sp[78] * PI4[0][14][15] + sp[79] * PI5[0][15][14];
    A[399] = sp[74] * PI0[0][15][15] + sp[75] * PI1[0][15][15] + sp[76] * PI2[0][15][15] + sp[75] * PI1[0][15][15] + sp[77] * PI3[0][15][15] + sp[78] * PI4[0][15][15] + sp[76] * PI2[0][15][15] + sp[78] * PI4[0][15][15] + sp[79] * PI5[0][15][15];
}


poisson3d_3_cell_integral_1_otherwise::poisson3d_3_cell_integral_1_otherwise() : ufc::cell_integral()
{

}

poisson3d_3_cell_integral_1_otherwise::~poisson3d_3_cell_integral_1_otherwise()
{

}

const std::vector<bool> & poisson3d_3_cell_integral_1_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true});
return enabled;
}

void poisson3d_3_cell_integral_1_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation,
                                    std::size_t local_facet) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights24[24] = { 0.006653791709694649, 0.006653791709694649, 0.006653791709694649, 0.006653791709694649, 0.001679535175886783, 0.001679535175886783, 0.001679535175886783, 0.001679535175886783, 0.009226196923942399, 0.009226196923942399, 0.009226196923942399, 0.009226196923942399, 0.008035714285714283, 0.008035714285714283, 0.008035714285714283, 0.008035714285714283, 0.008035714285714283, 0.008035714285714283, 0.008035714285714283, 0.008035714285714283, 0.008035714285714283, 0.008035714285714283, 0.008035714285714283, 0.008035714285714283 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE11_C0_Q24[1][24][20] =
        { { { 0.05183342742053295, -0.01137528241650893, 0.05183342742053267, 0.05183342742053268, -0.07381880034180845, -0.0738188003418084, 0.02358804473394377, -0.1225222228796846, 0.02358804473394363, -0.1225222228796846, -0.07381880034180859, -0.07381880034180845, -0.07381880034180878, -0.07381880034180847, -0.1225222228796846, 0.02358804473394377, 0.4429128020508512, 0.2668519304904314, 0.442912802050851, 0.4429128020508511 },
            { -0.01137528241650873, 0.05183342742053276, 0.05183342742053267, 0.05183342742053269, -0.07381880034180842, -0.07381880034180845, -0.07381880034180842, -0.07381880034180847, -0.07381880034180857, -0.07381880034180843, 0.02358804473394371, -0.1225222228796846, 0.02358804473394348, -0.1225222228796846, 0.02358804473394379, -0.1225222228796846, 0.2668519304904314, 0.4429128020508512, 0.442912802050851, 0.4429128020508512 },
            { 0.05183342742053295, 0.05183342742053274, 0.05183342742053264, -0.011375282416509, -0.1225222228796845, 0.02358804473394378, -0.1225222228796846, 0.02358804473394378, -0.07381880034180859, -0.07381880034180846, -0.1225222228796847, 0.02358804473394379, -0.07381880034180875, -0.07381880034180849, -0.0738188003418085, -0.07381880034180847, 0.4429128020508512, 0.4429128020508512, 0.4429128020508509, 0.2668519304904314 },
            { 0.05183342742053301, 0.05183342742053275, -0.01137528241650902, 0.05183342742053269, 0.02358804473394373, -0.1225222228796845, -0.07381880034180845, -0.0738188003418085, -0.1225222228796847, 0.02358804473394373, -0.07381880034180854, -0.07381880034180849, -0.1225222228796849, 0.02358804473394377, -0.07381880034180846, -0.07381880034180846, 0.4429128020508512, 0.4429128020508512, 0.2668519304904312, 0.4429128020508511 },
            { 0.03353209363244267, 0.4547080149710236, 0.0335320936324424, 0.0335320936324424, -0.006536256580629197, -0.006536256580629081, 0.2625713032082068, -0.1410900364750473, 0.2625713032082069, -0.1410900364750472, -0.006536256580629243, -0.006536256580629043, -0.006536256580629357, -0.006536256580629007, -0.1410900364750476, 0.2625713032082078, 0.03921753948377506, 0.001816824964619327, 0.03921753948377481, 0.03921753948377493 },
            { 0.4547080149710245, 0.03353209363244245, 0.03353209363244244, 0.03353209363244242, -0.006536256580629121, -0.006536256580629116, -0.006536256580629166, -0.006536256580629042, -0.006536256580629317, -0.006536256580628908, 0.262571303208207, -0.1410900364750472, 0.2625713032082069, -0.1410900364750473, 0.262571303208207, -0.1410900364750471, 0.001816824964619208, 0.03921753948377504, 0.03921753948377467, 0.03921753948377481 },
            { 0.03353209363244262, 0.03353209363244237, 0.03353209363244244, 0.454708014971024, -0.1410900364750473, 0.2625713032082073, -0.1410900364750473, 0.2625713032082069, -0.006536256580629161, -0.006536256580629184, -0.1410900364750476, 0.2625713032082074, -0.006536256580629229, -0.006536256580629176, -0.006536256580629146, -0.006536256580629174, 0.039217539483775, 0.03921753948377502, 0.03921753948377475, 0.001816824964619197 },
            { 0.03353209363244277, 0.03353209363244241, 0.4547080149710238, 0.0335320936324424, 0.2625713032082069, -0.1410900364750471, -0.006536256580629187, -0.006536256580629139, -0.1410900364750473, 0.262571303208207, -0.006536256580629363, -0.006536256580629133, -0.1410900364750478, 0.2625713032082078, -0.006536256580629092, -0.006536256580629105, 0.03921753948377507, 0.0392175394837753, 0.001816824964618978, 0.03921753948377495 },
            { 0.005491739535993497, 0.02825140445644191, 0.005491739535992995, 0.005491739535993056, -0.01542301302648352, -0.01542301302648353, -0.04311242233496348, -0.001578308372243667, -0.04311242233496363, -0.001578308372243577, -0.01542301302648386, -0.01542301302648354, -0.01542301302648406, -0.01542301302648363, -0.001578308372243603, -0.04311242233496347, 0.0925380781589021, 0.9042694127393969, 0.09253807815890176, 0.092538078158902 },
            { 0.02825140445644197, 0.005491739535993066, 0.005491739535993015, 0.005491739535993074, -0.01542301302648356, -0.01542301302648338, -0.01542301302648347, -0.0154230130264835, -0.01542301302648362, -0.01542301302648359, -0.04311242233496339, -0.001578308372243628, -0.04311242233496351, -0.001578308372243553, -0.0431124223349633, -0.001578308372243615, 0.9042694127393973, 0.0925380781589013, 0.09253807815890117, 0.09253807815890112 },
            { 0.005491739535993414, 0.005491739535993106, 0.00549173953599308, 0.02825140445644192, -0.001578308372243676, -0.04311242233496339, -0.001578308372243622, -0.04311242233496349, -0.01542301302648354, -0.01542301302648353, -0.001578308372243781, -0.04311242233496341, -0.01542301302648411, -0.0154230130264835, -0.01542301302648379, -0.01542301302648347, 0.092538078158902, 0.0925380781589019, 0.09253807815890178, 0.9042694127393963 },
            { 0.005491739535993355, 0.005491739535993106, 0.02825140445644189, 0.005491739535993002, -0.04311242233496337, -0.001578308372243659, -0.01542301302648347, -0.01542301302648348, -0.001578308372243803, -0.04311242233496346, -0.01542301302648392, -0.01542301302648342, -0.001578308372244014, -0.04311242233496334, -0.01542301302648386, -0.01542301302648349, 0.09253807815890205, 0.0925380781589019, 0.9042694127393963, 0.09253807815890194 },
            { -0.04658474953124555, 0.03066949906249119, 0.04658474953124562, 0.0465847495312456, -0.01475424859373678, -0.01475424859373685, -0.01475424859373671, -0.06249999999999999, -0.01475424859373684, -0.06249999999999999, 0.1397542485937368, -0.1397542485937368, 0.1397542485937365, -0.1397542485937369, 0.5920084971874739, -0.1397542485937368, 0.02950849718747379, 0.06598300562505269, 0.2795084971874734, 0.2795084971874738 },
            { -0.0465847495312455, 0.0465847495312456, 0.03066949906249115, 0.04658474953124561, -0.01475424859373679, -0.06250000000000001, -0.01475424859373682, -0.01475424859373686, -0.06250000000000014, -0.01475424859373669, 0.1397542485937369, -0.1397542485937368, 0.5920084971874734, -0.1397542485937368, 0.139754248593737, -0.1397542485937368, 0.02950849718747382, 0.2795084971874739, 0.06598300562505244, 0.2795084971874737 },
            { -0.04658474953124549, 0.04658474953124563, 0.0465847495312456, 0.03066949906249119, -0.06249999999999988, -0.01475424859373682, -0.06249999999999994, -0.01475424859373678, -0.01475424859373697, -0.01475424859373669, 0.5920084971874738, -0.1397542485937367, 0.1397542485937366, -0.1397542485937369, 0.139754248593737, -0.1397542485937369, 0.02950849718747376, 0.2795084971874738, 0.2795084971874734, 0.06598300562505267 },
            { 0.03066949906249129, -0.04658474953124579, 0.04658474953124562, 0.0465847495312456, -0.01475424859373686, -0.01475424859373684, 0.1397542485937368, -0.1397542485937369, 0.1397542485937368, -0.1397542485937369, -0.01475424859373684, -0.06249999999999999, -0.01475424859373702, -0.06249999999999997, -0.1397542485937367, 0.5920084971874738, 0.0659830056250527, 0.02950849718747382, 0.2795084971874736, 0.2795084971874738 },
            { 0.03066949906249151, 0.04658474953124558, -0.04658474953124579, 0.04658474953124561, 0.1397542485937367, -0.1397542485937368, -0.01475424859373681, -0.01475424859373689, -0.1397542485937369, 0.1397542485937368, -0.01475424859373687, -0.06250000000000004, -0.1397542485937369, 0.5920084971874738, -0.01475424859373671, -0.06249999999999998, 0.0659830056250526, 0.2795084971874742, 0.02950849718747359, 0.2795084971874737 },
            { 0.03066949906249136, 0.04658474953124561, 0.04658474953124559, -0.04658474953124585, -0.1397542485937368, 0.1397542485937369, -0.1397542485937369, 0.1397542485937369, -0.01475424859373686, -0.01475424859373682, -0.1397542485937369, 0.5920084971874741, -0.01475424859373696, -0.06250000000000008, -0.01475424859373675, -0.06249999999999998, 0.06598300562505263, 0.2795084971874739, 0.2795084971874735, 0.02950849718747378 },
            { 0.04658474953124579, 0.04658474953124554, 0.03066949906249117, -0.04658474953124566, -0.1397542485937368, 0.5920084971874738, -0.1397542485937369, 0.1397542485937369, -0.06250000000000006, -0.01475424859373683, -0.139754248593737, 0.1397542485937369, -0.06250000000000018, -0.01475424859373683, -0.01475424859373687, -0.01475424859373689, 0.2795084971874739, 0.2795084971874739, 0.06598300562505253, 0.02950849718747368 },
            { 0.04658474953124583, 0.03066949906249121, -0.04658474953124574, 0.04658474953124559, 0.1397542485937368, -0.1397542485937368, -0.01475424859373673, -0.06250000000000001, -0.1397542485937368, 0.5920084971874736, -0.01475424859373699, -0.01475424859373685, -0.1397542485937372, 0.1397542485937371, -0.06250000000000001, -0.01475424859373682, 0.2795084971874737, 0.06598300562505277, 0.02950849718747362, 0.2795084971874737 },
            { 0.04658474953124579, -0.04658474953124579, 0.04658474953124557, 0.03066949906249115, -0.06250000000000001, -0.01475424859373677, 0.5920084971874736, -0.1397542485937368, 0.1397542485937367, -0.1397542485937368, -0.06250000000000014, -0.01475424859373676, -0.01475424859373709, -0.01475424859373676, -0.139754248593737, 0.1397542485937369, 0.2795084971874738, 0.0295084971874739, 0.2795084971874739, 0.06598300562505255 },
            { 0.04658474953124599, 0.04658474953124559, -0.04658474953124579, 0.03066949906249123, 0.5920084971874734, -0.1397542485937366, -0.06249999999999996, -0.01475424859373684, -0.1397542485937368, 0.1397542485937368, -0.06250000000000025, -0.01475424859373691, -0.1397542485937371, 0.1397542485937369, -0.0147542485937368, -0.01475424859373678, 0.2795084971874737, 0.2795084971874743, 0.02950849718747357, 0.06598300562505256 },
            { 0.04658474953124574, 0.03066949906249122, 0.04658474953124558, -0.04658474953124576, -0.1397542485937368, 0.1397542485937369, -0.1397542485937369, 0.5920084971874738, -0.01475424859373693, -0.06250000000000008, -0.1397542485937371, 0.1397542485937369, -0.01475424859373701, -0.01475424859373683, -0.06250000000000001, -0.01475424859373688, 0.279508497187474, 0.06598300562505259, 0.2795084971874736, 0.02950849718747368 },
            { 0.04658474953124583, -0.04658474953124579, 0.03066949906249114, 0.0465847495312456, -0.01475424859373684, -0.06249999999999992, 0.1397542485937368, -0.1397542485937369, 0.5920084971874734, -0.1397542485937368, -0.01475424859373694, -0.01475424859373677, -0.06250000000000028, -0.01475424859373676, -0.139754248593737, 0.1397542485937371, 0.2795084971874737, 0.02950849718747395, 0.06598300562505251, 0.279508497187474 } } };
    alignas(32) static const double FE8_C0_D001_Q24[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q24[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q24[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q24[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q24[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q24[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q24[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q24[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q24[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q24[0][0][1];
    alignas(32) double sp[15];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = std::abs(sp[13]);
    alignas(32) double BF0[20] = {};
    for (int iq = 0; iq < 24; ++iq)
    {
        // Quadrature loop body setup (num_points=24)
        // Unstructured varying computations for num_points=24
        double w0 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w0 += w[0][ic] * FE11_C0_Q24[0][iq][ic];
        alignas(32) double sv24[1];
        sv24[0] = sp[14] * w0;
        const double fw0 = sv24[0] * weights24[iq];
        for (int i = 0; i < 20; ++i)
            BF0[i] += fw0 * FE11_C0_Q24[0][iq][i];
    }
    std::fill(A, A + 20, 0.0);
    for (int i = 0; i < 20; ++i)
        A[i] += BF0[i];
}


poisson3d_3_form_0::poisson3d_3_form_0() : ufc::form()
{
    // Do nothing
}

poisson3d_3_form_0::~poisson3d_3_form_0()
{
    // Do nothing
}

const char * poisson3d_3_form_0::signature() const
{
    return "765e84e92b8c397110f584eb2afa6ad52781b070100b2ce9f549af0941445e6d5b72d9f0e9845036b3378bb1806a87cdbf632c77891b19508e472b83a07fe53c";
}

std::size_t poisson3d_3_form_0::rank() const
{
    return 2;
}

std::size_t poisson3d_3_form_0::num_coefficients() const
{
    return 0;
}

std::size_t poisson3d_3_form_0::original_coefficient_position(std::size_t i) const
{
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
}

ufc::finite_element * poisson3d_3_form_0::create_coordinate_finite_element() const
{
    return new poisson3d_3_finite_element_1();
}

ufc::dofmap * poisson3d_3_form_0::create_coordinate_dofmap() const
{
    return new poisson3d_3_dofmap_1();
}

ufc::coordinate_mapping * poisson3d_3_form_0::create_coordinate_mapping() const
{
    return new poisson3d_3_coordinate_mapping_1();
}

ufc::finite_element * poisson3d_3_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_3_finite_element_2();
    case 1:
        return new poisson3d_3_finite_element_2();
    default:
        return nullptr;
    }
}

ufc::dofmap * poisson3d_3_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_3_dofmap_2();
    case 1:
        return new poisson3d_3_dofmap_2();
    default:
        return nullptr;
    }
}

std::size_t poisson3d_3_form_0::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_0::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_0::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_0::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_0::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_0::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_0::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_0::max_overlap_subdomain_id() const
{
    return 0;
}

bool poisson3d_3_form_0::has_cell_integrals() const
{
    return true;
}

bool poisson3d_3_form_0::has_exterior_facet_integrals() const
{
    return false;
}

bool poisson3d_3_form_0::has_interior_facet_integrals() const
{
    return false;
}

bool poisson3d_3_form_0::has_vertex_integrals() const
{
    return false;
}

bool poisson3d_3_form_0::has_custom_integrals() const
{
    return false;
}

bool poisson3d_3_form_0::has_cutcell_integrals() const
{
    return false;
}

bool poisson3d_3_form_0::has_interface_integrals() const
{
    return false;
}

bool poisson3d_3_form_0::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * poisson3d_3_form_0::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * poisson3d_3_form_0::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson3d_3_form_0::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * poisson3d_3_form_0::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * poisson3d_3_form_0::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * poisson3d_3_form_0::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * poisson3d_3_form_0::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * poisson3d_3_form_0::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * poisson3d_3_form_0::create_default_cell_integral() const
{
    return new poisson3d_3_cell_integral_0_otherwise();
}

ufc::exterior_facet_integral * poisson3d_3_form_0::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson3d_3_form_0::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * poisson3d_3_form_0::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * poisson3d_3_form_0::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * poisson3d_3_form_0::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * poisson3d_3_form_0::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * poisson3d_3_form_0::create_default_overlap_integral() const
{
    return nullptr;
}


poisson3d_3_form_1::poisson3d_3_form_1() : ufc::form()
{
    // Do nothing
}

poisson3d_3_form_1::~poisson3d_3_form_1()
{
    // Do nothing
}

const char * poisson3d_3_form_1::signature() const
{
    return "2b45fdc182cd00969d3cc546793c65bd8adc5bb31034a5b00ef8bf9b7ffcc962d2dd656803a5633a172b607874c71ada3ccbb714dc740bf5cd5d9412ea94cc55";
}

std::size_t poisson3d_3_form_1::rank() const
{
    return 1;
}

std::size_t poisson3d_3_form_1::num_coefficients() const
{
    return 1;
}

std::size_t poisson3d_3_form_1::original_coefficient_position(std::size_t i) const
{
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
}

ufc::finite_element * poisson3d_3_form_1::create_coordinate_finite_element() const
{
    return new poisson3d_3_finite_element_1();
}

ufc::dofmap * poisson3d_3_form_1::create_coordinate_dofmap() const
{
    return new poisson3d_3_dofmap_1();
}

ufc::coordinate_mapping * poisson3d_3_form_1::create_coordinate_mapping() const
{
    return new poisson3d_3_coordinate_mapping_1();
}

ufc::finite_element * poisson3d_3_form_1::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_3_finite_element_2();
    case 1:
        return new poisson3d_3_finite_element_2();
    default:
        return nullptr;
    }
}

ufc::dofmap * poisson3d_3_form_1::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_3_dofmap_2();
    case 1:
        return new poisson3d_3_dofmap_2();
    default:
        return nullptr;
    }
}

std::size_t poisson3d_3_form_1::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_1::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_1::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_1::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_1::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_1::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_1::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_3_form_1::max_overlap_subdomain_id() const
{
    return 0;
}

bool poisson3d_3_form_1::has_cell_integrals() const
{
    return true;
}

bool poisson3d_3_form_1::has_exterior_facet_integrals() const
{
    return false;
}

bool poisson3d_3_form_1::has_interior_facet_integrals() const
{
    return false;
}

bool poisson3d_3_form_1::has_vertex_integrals() const
{
    return false;
}

bool poisson3d_3_form_1::has_custom_integrals() const
{
    return false;
}

bool poisson3d_3_form_1::has_cutcell_integrals() const
{
    return false;
}

bool poisson3d_3_form_1::has_interface_integrals() const
{
    return false;
}

bool poisson3d_3_form_1::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * poisson3d_3_form_1::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * poisson3d_3_form_1::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson3d_3_form_1::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * poisson3d_3_form_1::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * poisson3d_3_form_1::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * poisson3d_3_form_1::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * poisson3d_3_form_1::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * poisson3d_3_form_1::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * poisson3d_3_form_1::create_default_cell_integral() const
{
    return new poisson3d_3_cell_integral_1_otherwise();
}

ufc::exterior_facet_integral * poisson3d_3_form_1::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson3d_3_form_1::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * poisson3d_3_form_1::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * poisson3d_3_form_1::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * poisson3d_3_form_1::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * poisson3d_3_form_1::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * poisson3d_3_form_1::create_default_overlap_integral() const
{
    return nullptr;
}

