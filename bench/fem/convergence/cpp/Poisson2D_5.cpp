// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  evaluate_basis:                 False
//  evaluate_basis_derivatives:     False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          True

#include "Poisson2D_5.h"

poisson2d_5_finite_element_0::poisson2d_5_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

poisson2d_5_finite_element_0::~poisson2d_5_finite_element_0()
{
    // Do nothing
}

const char * poisson2d_5_finite_element_0::signature() const
{
    return "FiniteElement('Lagrange', triangle, 1)";
}

ufc::shape poisson2d_5_finite_element_0::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t poisson2d_5_finite_element_0::topological_dimension() const
{
    return 2;
}

std::size_t poisson2d_5_finite_element_0::geometric_dimension() const
{
    return 2;
}

std::size_t poisson2d_5_finite_element_0::space_dimension() const
{
    return 3;
}

std::size_t poisson2d_5_finite_element_0::value_rank() const
{
    return 0;
}

std::size_t poisson2d_5_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson2d_5_finite_element_0::value_size() const
{
    return 1;
}

std::size_t poisson2d_5_finite_element_0::reference_value_rank() const
{
    return 0;
}

std::size_t poisson2d_5_finite_element_0::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson2d_5_finite_element_0::reference_value_size() const
{
    return 1;
}

std::size_t poisson2d_5_finite_element_0::degree() const
{
    return 1;
}

const char * poisson2d_5_finite_element_0::family() const
{
    return "Lagrange";
}

void poisson2d_5_finite_element_0::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[3 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
    }
}

void poisson2d_5_finite_element_0::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[3] = {};
    const std::size_t num_components[3] = { 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 3; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[3 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void poisson2d_5_finite_element_0::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 3 * num_derivatives, 0.0);
    const std::size_t reference_offsets[3] = {};
    const std::size_t physical_offsets[3] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[3 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void poisson2d_5_finite_element_0::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[3];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[3];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
}

void poisson2d_5_finite_element_0::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
}

void poisson2d_5_finite_element_0::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
}

void poisson2d_5_finite_element_0::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
}

double poisson2d_5_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
}

void poisson2d_5_finite_element_0::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
}

void poisson2d_5_finite_element_0::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void poisson2d_5_finite_element_0::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
}

void poisson2d_5_finite_element_0::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 6, reference_dof_coordinates);
}

std::size_t poisson2d_5_finite_element_0::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * poisson2d_5_finite_element_0::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * poisson2d_5_finite_element_0::create() const
{
    return new poisson2d_5_finite_element_0();
}


poisson2d_5_finite_element_1::poisson2d_5_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

poisson2d_5_finite_element_1::~poisson2d_5_finite_element_1()
{
    // Do nothing
}

const char * poisson2d_5_finite_element_1::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

ufc::shape poisson2d_5_finite_element_1::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t poisson2d_5_finite_element_1::topological_dimension() const
{
    return 2;
}

std::size_t poisson2d_5_finite_element_1::geometric_dimension() const
{
    return 2;
}

std::size_t poisson2d_5_finite_element_1::space_dimension() const
{
    return 6;
}

std::size_t poisson2d_5_finite_element_1::value_rank() const
{
    return 1;
}

std::size_t poisson2d_5_finite_element_1::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t poisson2d_5_finite_element_1::value_size() const
{
    return 2;
}

std::size_t poisson2d_5_finite_element_1::reference_value_rank() const
{
    return 1;
}

std::size_t poisson2d_5_finite_element_1::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 2 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t poisson2d_5_finite_element_1::reference_value_size() const
{
    return 2;
}

std::size_t poisson2d_5_finite_element_1::degree() const
{
    return 1;
}

const char * poisson2d_5_finite_element_1::family() const
{
    return "Lagrange";
}

void poisson2d_5_finite_element_1::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    for (std::size_t k = 0; k < num_points * 6 * 2; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 3 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 4 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 3; ++r)
            reference_values[6 * 2 * ip + 2 * 5 + 1] += coefficients2[0][r] * basisvalues1[r];
    }
}

void poisson2d_5_finite_element_1::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 6 * num_derivatives * 2, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][3][3] =
        { { { 0.0, 0.0, 0.0 },
            { 4.8989794855663495, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0 },
            { 2.449489742783182, 0.0, 0.0 },
            { 4.242640687119285, 0.0, 0.0 } } };
    static const double coefficients0[1][3] = { { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients1[1][3] = { { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 } };
    static const double coefficients2[1][3] = { { 0.4714045207910316, 0.0, 0.3333333333333333 } };
    const std::size_t reference_offset[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t num_components[6] = { 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[3] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = (0.5 + 1.5 * Y[1]) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.5);
        basisvalues1[2] *= std::sqrt(1.0);
        basisvalues1[1] *= std::sqrt(3.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 6; ++i)
        {
            double derivatives[2] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[3] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[3][3] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 9, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[3][3];
                        std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 9, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 3; ++s)
                        for (std::size_t t = 0; t < 3; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 3; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * i + 2 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void poisson2d_5_finite_element_1::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    std::fill_n(values, num_points * 6 * num_derivatives * 2, 0.0);
    const std::size_t reference_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    const std::size_t physical_offsets[6] = { 0, 0, 0, 1, 1, 1 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[2][2];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 6; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[6 * (num_derivatives * 2) * ip + num_derivatives * 2 * d + 2 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void poisson2d_5_finite_element_1::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[12];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[12];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 2; ++k)
        values[k] = physical_values[2 * i + k];
}

void poisson2d_5_finite_element_1::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2; ++s)
            values[r * 2 + s] = dof_values[s];
    }
}

void poisson2d_5_finite_element_1::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, 2 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][2][1] =
        { { { 0 },
            { 1 } } };
    // Declare transformation matrix
    double transform[2][2] =
        { { 1.0, 1.0 },
          { 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, -0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910317, 0.2886751345948129, -0.16666666666666666 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[3] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_1;
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[1] *= std::sqrt(3.0);
            // Table(s) of coefficients
            static const double coefficients0[3] = { 0.4714045207910316, 0.0, 0.3333333333333333 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 4.8989794855663495, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0 } };
            static const double dmats1[3][3] =
                { { 0.0, 0.0, 0.0 },
                  { 2.449489742783182, 0.0, 0.0 },
                  { 4.242640687119285, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[2] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[3][3] =
                { { 1.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 9, 0.0);
                for (std::size_t t = 0; t < 3; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 9, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 9, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 3; ++t)
                            for (std::size_t u = 0; u < 3; ++u)
                                for (std::size_t tu = 0; tu < 3; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 3; ++s)
                    for (std::size_t t = 0; t < 3; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
}

void poisson2d_5_finite_element_1::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, 2 * num_derivatives * 6, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 6; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 2 * num_derivatives; ++s)
            values[2 * num_derivatives * r + s] = dof_values[s];
    }
}

double poisson2d_5_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    }
    return 0.0;
}

void poisson2d_5_finite_element_1::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[2];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[3] = vals[1];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
}

void poisson2d_5_finite_element_1::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[5] = dof_values[5];
}

void poisson2d_5_finite_element_1::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = coordinate_dofs[0];
    dof_coordinates[2 * 3 + 1] = coordinate_dofs[1];
    dof_coordinates[2 * 4] = coordinate_dofs[2];
    dof_coordinates[2 * 4 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 5] = coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = coordinate_dofs[5];
}

void poisson2d_5_finite_element_1::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[12] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
}

std::size_t poisson2d_5_finite_element_1::num_sub_elements() const
{
    return 2;
}

ufc::finite_element * poisson2d_5_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson2d_5_finite_element_0();
    case 1:
        return new poisson2d_5_finite_element_0();
    default:
        return nullptr;
    }
}

ufc::finite_element * poisson2d_5_finite_element_1::create() const
{
    return new poisson2d_5_finite_element_1();
}


poisson2d_5_finite_element_2::poisson2d_5_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

poisson2d_5_finite_element_2::~poisson2d_5_finite_element_2()
{
    // Do nothing
}

const char * poisson2d_5_finite_element_2::signature() const
{
    return "FiniteElement('Lagrange', triangle, 5)";
}

ufc::shape poisson2d_5_finite_element_2::cell_shape() const
{
    return ufc::shape::triangle;
}

std::size_t poisson2d_5_finite_element_2::topological_dimension() const
{
    return 2;
}

std::size_t poisson2d_5_finite_element_2::geometric_dimension() const
{
    return 2;
}

std::size_t poisson2d_5_finite_element_2::space_dimension() const
{
    return 21;
}

std::size_t poisson2d_5_finite_element_2::value_rank() const
{
    return 0;
}

std::size_t poisson2d_5_finite_element_2::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson2d_5_finite_element_2::value_size() const
{
    return 1;
}

std::size_t poisson2d_5_finite_element_2::reference_value_rank() const
{
    return 0;
}

std::size_t poisson2d_5_finite_element_2::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson2d_5_finite_element_2::reference_value_size() const
{
    return 1;
}

std::size_t poisson2d_5_finite_element_2::degree() const
{
    return 5;
}

const char * poisson2d_5_finite_element_2::family() const
{
    return "Lagrange";
}

void poisson2d_5_finite_element_2::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][21] = { { 0.015432886097325004, -0.00945067404923504, -0.005456349206349188, 0.030187530726695642, 0.023383160753523376, 0.013500274155551023, -0.023199760582675723, -0.019607376365131313, -0.015187808424994918, -0.00876868528257127, 0.021389865125597804, 0.01886408789984837, 0.01594306415012959, 0.012349444388193683, 0.007129955041865959, -0.01798917575600382, -0.016271821710115254, -0.01435039787431558, -0.012128299820524878, -0.009394540644540659, -0.005423940570038444 } };
    static const double coefficients1[1][21] = { { 0.015432886097325368, 0.009450674049234945, -0.005456349206349199, 0.03018753072669567, -0.023383160753523386, 0.013500274155551025, 0.023199760582675723, -0.019607376365131317, 0.015187808424994896, -0.008768685282571293, 0.021389865125597814, -0.018864087899848392, 0.01594306415012959, -0.012349444388193683, 0.007129955041865947, 0.017989175756003836, -0.016271821710115254, 0.014350397874315577, -0.012128299820524862, 0.009394540644540653, -0.005423940570038421 } };
    static const double coefficients2[1][21] = { { 0.01543288609732543, 0.0, 0.010912698412698445, 0.0, 0.0, 0.040500822466653104, 0.0, 0.0, 0.0, 0.03507474113028508, 0.0, 0.0, 0.0, 0.0, 0.035649775209329666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.032543643420230535 } };
    static const double coefficients3[1][21] = { { 0.03507474113028499, 0.1260089873231327, -0.08432539682539666, 0.10188291620259785, -0.028644371923066164, 0.0020250411233326106, 0.07733253527558571, -0.026143168486841766, 0.0, 0.00584579018838084, 0.035649775209329694, 0.012576058599898918, -0.03852907169614649, 0.044252175724360666, -0.029708146007774636, 0.0, 0.03254364342023054, -0.05166143234753607, 0.05821583913851933, -0.052609427609427585, 0.03254364342023046 } };
    static const double coefficients4[1][21] = { { 0.03507474113028519, -0.032934167141273264, 0.12152777777777765, -0.011320324022510835, 0.07541069343011296, -0.02227545235665922, 0.0, 0.1045726739473671, -0.1012520561666327, 0.05845790188380847, 0.0, 0.056592263699545155, -0.00930012075424223, -0.040135694261629495, 0.04159140441088457, 0.0, 0.0, 0.051661432347536104, -0.10187771849240887, 0.11837121212121207, -0.08135910855057625 } };
    static const double coefficients5[1][21] = { { 0.03507474113028512, 0.08877905925038893, -0.08928571428571415, 0.030187530726695628, 0.04325884739401834, -0.05940120628442456, 0.0, 0.026143168486841707, 0.10125205616663269, -0.11691580376761695, 0.0, 0.0, 0.07440096603393805, -0.03087361097048418, -0.011883258403109855, 0.0, 0.0, 0.0, 0.06791847899493926, -0.131523569023569, 0.10847881140076837 } };
    static const double coefficients6[1][21] = { { 0.035074741130285046, -0.010023442173431017, 0.15128968253968247, 0.0, 0.05027379562007528, 0.09315189167330205, 0.0, 0.0, 0.05062602808331636, 0.06430369207218942, 0.0, 0.0, 0.0, 0.07203842559779652, -0.02376651680621974, 0.0, 0.0, 0.0, 0.0, 0.06576178451178455, -0.08135910855057636 } };
    static const double coefficients7[1][21] = { { 0.03507474113028509, -0.12600898732313257, -0.0843253968253968, 0.10188291620259787, 0.028644371923066222, 0.002025041123332701, -0.07733253527558573, -0.026143168486841756, 0.0, 0.005845790188380818, 0.03564977520932965, -0.012576058599898954, -0.03852907169614654, -0.044252175724360715, -0.029708146007774733, 0.0, 0.03254364342023051, 0.051661432347536035, 0.058215839138519326, 0.0526094276094276, 0.03254364342023053 } };
    static const double coefficients8[1][21] = { { 0.035074741130284956, 0.032934167141273174, 0.12152777777777762, -0.011320324022510805, -0.075410693430113, -0.022275452356659304, 0.0, 0.1045726739473671, 0.10125205616663266, 0.05845790188380848, 0.0, -0.05659226369954512, -0.00930012075424217, 0.0401356942616295, 0.04159140441088465, 0.0, 0.0, -0.0516614323475361, -0.10187771849240881, -0.11837121212121204, -0.08135910855057628 } };
    static const double coefficients9[1][21] = { { 0.03507474113028544, -0.08877905925038893, -0.08928571428571402, 0.0301875307266956, -0.04325884739401824, -0.059401206284424475, 0.0, 0.026143168486841672, -0.10125205616663267, -0.11691580376761704, 0.0, 0.0, 0.07440096603393799, 0.030873610970484144, -0.011883258403109935, 0.0, 0.0, 0.0, 0.06791847899493922, 0.13152356902356901, 0.10847881140076843 } };
    static const double coefficients10[1][21] = { { 0.03507474113028509, 0.010023442173431096, 0.15128968253968256, 0.0, -0.05027379562007534, 0.09315189167330205, 0.0, 0.0, -0.050626028083316385, 0.06430369207218938, 0.0, 0.0, 0.0, -0.07203842559779643, -0.02376651680621974, 0.0, 0.0, 0.0, 0.0, -0.06576178451178452, -0.08135910855057636 } };
    static const double coefficients11[1][21] = { { 0.03507474113028485, -0.13603242949656366, -0.06696428571428575, 0.03697972514020223, 0.07891816754314142, 0.06007621999220212, -0.007733253527558555, -0.04575054485197311, -0.055688630891647946, -0.03799763622447555, -0.06416959537679345, -0.012576058599898958, 0.017271652829307028, 0.027786249873435753, 0.0202015392852868, 0.08994587878001908, 0.04881546513034578, 0.02009055702404178, 0.0024256599641049857, -0.005636724386724412, -0.005423940570038398 } };
    static const double coefficients12[1][21] = { { 0.035074741130285185, 0.12171322639166211, -0.03224206349206348, -0.06716725586689788, -0.03215184603609473, 0.02767556201887957, 0.1391985634960543, 0.06535792121710446, -0.010125205616663344, -0.029228950941904218, 0.04277973025119566, -0.05659226369954509, -0.033214716979436634, 0.00926208329114535, 0.020201539285286844, -0.17989175756003817, -0.03254364342023054, 0.011480318299452511, 0.009702639856419913, -0.0018789081289081369, -0.005423940570038449 } };
    static const double coefficients13[1][21] = { { 0.03507474113028542, -0.12171322639166224, -0.032242063492063586, -0.06716725586689787, 0.03215184603609466, 0.027675562018879697, -0.13919856349605433, 0.06535792121710435, 0.010125205616663304, -0.029228950941904284, 0.042779730251195566, 0.05659226369954512, -0.03321471697943665, -0.009262083291145333, 0.02020153928528673, 0.1798917575600382, -0.032543643420230514, -0.011480318299452494, 0.009702639856419877, 0.0018789081289081737, -0.005423940570038359 } };
    static const double coefficients14[1][21] = { { 0.035074741130285206, 0.13603242949656363, -0.06696428571428562, 0.03697972514020214, -0.07891816754314143, 0.06007621999220198, 0.0077332535275586416, -0.045750544851973086, 0.05568863089164797, -0.03799763622447549, -0.06416959537679337, 0.012576058599898899, 0.01727165282930707, -0.02778624987343577, 0.02020153928528686, -0.08994587878001918, 0.0488154651303458, -0.020090557024041795, 0.002425659964104978, 0.005636724386724379, -0.005423940570038459 } };
    static const double coefficients15[1][21] = { { 0.28059792904228065, -0.2147880465735217, -0.12400793650793669, 0.09056259218008696, 0.11691580376761697, 0.0, 0.15466507055117154, 0.07842950546052534, 0.10125205616663276, 0.08184106263733197, -0.14259910083731858, 0.025152117199797923, -0.03188612830025915, -0.10702851803101192, -0.09506606722487917, 0.0, -0.13017457368092206, -0.10332286469507211, -0.029107919569259677, 0.026304713804713796, 0.03254364342023055 } };
    static const double coefficients16[1][21] = { { 0.035074741130285275, 0.0, -0.1240079365079363, -0.3848910167653697, 0.0, 0.10125205616663269, 0.0, -0.10457267394736702, 0.0, 0.04676632150704685, 0.21389865125597782, 0.0, 0.14083039999281133, 0.0, -0.09506606722487909, 0.0, 0.195261860521383, 0.0, -0.05821583913851942, 0.0, 0.03254364342023045 } };
    static const double coefficients17[1][21] = { { 0.280597929042281, 0.2147880465735214, -0.12400793650793657, 0.09056259218008701, -0.11691580376761686, 0.0, -0.1546650705511713, 0.07842950546052532, -0.10125205616663263, 0.08184106263733192, -0.1425991008373186, -0.025152117199797815, -0.03188612830025918, 0.10702851803101186, -0.09506606722487916, 0.0, -0.13017457368092206, 0.10332286469507206, -0.029107919569259677, -0.026304713804713786, 0.03254364342023054 } };
    static const double coefficients18[1][21] = { { 0.03507474113028535, -0.10739402328676076, 0.062003968253968506, 0.011320324022510805, -0.3069039848899945, -0.2531301404165818, 0.0, -0.1045726739473671, 0.0, 0.04676632150704672, 0.0, 0.16977679109863542, 0.009300120754242176, 0.12658180497898516, 0.1723072468450934, 0.0, 0.0, 0.15498429704260824, 0.10187771849240883, -0.03945707070707068, -0.08135910855057632 } };
    static const double coefficients19[1][21] = { { 0.035074741130285136, 0.10739402328676095, 0.062003968253968256, 0.011320324022510932, 0.30690398488999454, -0.2531301404165818, 0.0, -0.10457267394736713, 0.0, 0.046766321507046675, 0.0, -0.16977679109863544, 0.009300120754242344, -0.12658180497898522, 0.1723072468450935, 0.0, 0.0, -0.15498429704260824, 0.101877718492409, 0.03945707070707061, -0.08135910855057629 } };
    static const double coefficients20[1][21] = { { 0.2805979290422806, 0.0, 0.24801587301587294, -0.060375061453391256, 0.0, 0.13500274155551029, 0.0, -0.05228633697368343, 0.0, -0.21044844678171049, 0.0, 0.0, -0.14880193206787615, 0.0, -0.14259910083731872, 0.0, 0.0, 0.0, -0.13583695798987852, 0.0, 0.10847881140076841 } };
    for (std::size_t k = 0; k < num_points * 21; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues5[21] = {};
        basisvalues5[0] = 1.0;
        const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues5[1] = tmp1_5;
        const double tmp2_5 = (1.0 - Y[1]) / 2.0;
        const double tmp3_5 = tmp2_5 * tmp2_5;
        basisvalues5[3] = 1.5 * tmp1_5 * basisvalues5[1] - 0.5 * tmp3_5 * basisvalues5[0];
        basisvalues5[6] = 1.6666666666666667 * tmp1_5 * basisvalues5[3] - 0.6666666666666666 * tmp3_5 * basisvalues5[1];
        basisvalues5[10] = 1.75 * tmp1_5 * basisvalues5[6] - 0.75 * tmp3_5 * basisvalues5[3];
        basisvalues5[15] = 1.8 * tmp1_5 * basisvalues5[10] - 0.8 * tmp3_5 * basisvalues5[6];
        basisvalues5[2] = (0.5 + 1.5 * Y[1]) * basisvalues5[0];
        basisvalues5[4] = (1.5 + 2.5 * Y[1]) * basisvalues5[1];
        basisvalues5[7] = (2.5 + 3.5 * Y[1]) * basisvalues5[3];
        basisvalues5[11] = (3.5 + 4.5 * Y[1]) * basisvalues5[6];
        basisvalues5[16] = (4.5 + 5.5 * Y[1]) * basisvalues5[10];
        basisvalues5[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues5[2] - 0.5555555555555556 * basisvalues5[0];
        basisvalues5[9] = (0.05 + 1.75 * Y[1]) * basisvalues5[5] - 0.7 * basisvalues5[2];
        basisvalues5[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues5[9] - 0.7714285714285715 * basisvalues5[5];
        basisvalues5[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues5[14] - 0.8148148148148148 * basisvalues5[9];
        basisvalues5[8] = (0.54 + 2.1 * Y[1]) * basisvalues5[4] - 0.56 * basisvalues5[1];
        basisvalues5[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues5[8] - 0.7142857142857143 * basisvalues5[4];
        basisvalues5[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues5[13] - 0.7857142857142857 * basisvalues5[8];
        basisvalues5[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues5[7] - 0.5510204081632653 * basisvalues5[3];
        basisvalues5[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues5[12] - 0.7129629629629629 * basisvalues5[7];
        basisvalues5[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues5[11] - 0.5432098765432098 * basisvalues5[6];
        basisvalues5[0] *= std::sqrt(0.5);
        basisvalues5[2] *= std::sqrt(1.0);
        basisvalues5[5] *= std::sqrt(1.5);
        basisvalues5[9] *= std::sqrt(2.0);
        basisvalues5[14] *= std::sqrt(2.5);
        basisvalues5[20] *= std::sqrt(3.0);
        basisvalues5[1] *= std::sqrt(3.0);
        basisvalues5[4] *= std::sqrt(4.5);
        basisvalues5[8] *= std::sqrt(6.0);
        basisvalues5[13] *= std::sqrt(7.5);
        basisvalues5[19] *= std::sqrt(9.0);
        basisvalues5[3] *= std::sqrt(7.5);
        basisvalues5[7] *= std::sqrt(10.0);
        basisvalues5[12] *= std::sqrt(12.5);
        basisvalues5[18] *= std::sqrt(15.0);
        basisvalues5[6] *= std::sqrt(14.0);
        basisvalues5[11] *= std::sqrt(17.5);
        basisvalues5[17] *= std::sqrt(21.0);
        basisvalues5[10] *= std::sqrt(22.5);
        basisvalues5[16] *= std::sqrt(27.0);
        basisvalues5[15] *= std::sqrt(33.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip] += coefficients0[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 1] += coefficients1[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 2] += coefficients2[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 3] += coefficients3[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 4] += coefficients4[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 5] += coefficients5[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 6] += coefficients6[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 7] += coefficients7[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 8] += coefficients8[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 9] += coefficients9[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 10] += coefficients10[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 11] += coefficients11[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 12] += coefficients12[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 13] += coefficients13[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 14] += coefficients14[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 15] += coefficients15[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 16] += coefficients16[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 17] += coefficients17[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 18] += coefficients18[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 19] += coefficients19[0][r] * basisvalues5[r];
        for (std::size_t r = 0; r < 21; ++r)
            reference_values[21 * ip + 20] += coefficients20[0][r] * basisvalues5[r];
    }
}

void poisson2d_5_finite_element_2::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(2, order);
    std::fill_n(reference_values, num_points * 21 * num_derivatives, 0.0);
    if (order > 5)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[2][21][21] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.291502622129184, 0.0, -2.993325909419147, 13.662601021279462, 0.0, 0.6110100926607885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 10.954451150103303, 0.0, 0.0, -3.833259389999625, 0.0, 17.748239349298817, 0.0, 0.5532833351724707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.732863826479678, 0.0, 3.3466401061363347, 4.364357804719831, 0.0, -5.074680379332347, 0.0, 17.00840128541521, 0.0, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 2.449489742783197, 0.0, 0.0, 9.142857142857078, 0.0, 0.0, 0.0, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.416025603090638, 0.0, -4.3768096354575485, 15.73213272255225, 0.0, 2.010178182781472, 0.0, -4.036867138796672, 0.0, -0.5158119621991054, 21.79908254950194, 0.0, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 6.857142857142835, 0.0, 0.0, 9.972922524188638, 0.0, 4.320493798938582, 0.0, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 0.0, 1.490788039793666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.320493798938577, 0.0, 5.9355266144190235, 1.7928429140015785, 0.0, -0.32071349029490387, 0.0, 9.200874124564734, 0.0, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 0.0, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, 0.0, 0.0, 0.0, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 0.0, 11.337638238025077, 0.0, 0.0, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, 0.0, 0.0, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 0.0, 12.727922061357848, 0.0, 0.0, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][21] = { { 0.015432886097325004, -0.00945067404923504, -0.005456349206349188, 0.030187530726695642, 0.023383160753523376, 0.013500274155551023, -0.023199760582675723, -0.019607376365131313, -0.015187808424994918, -0.00876868528257127, 0.021389865125597804, 0.01886408789984837, 0.01594306415012959, 0.012349444388193683, 0.007129955041865959, -0.01798917575600382, -0.016271821710115254, -0.01435039787431558, -0.012128299820524878, -0.009394540644540659, -0.005423940570038444 } };
    static const double coefficients1[1][21] = { { 0.015432886097325368, 0.009450674049234945, -0.005456349206349199, 0.03018753072669567, -0.023383160753523386, 0.013500274155551025, 0.023199760582675723, -0.019607376365131317, 0.015187808424994896, -0.008768685282571293, 0.021389865125597814, -0.018864087899848392, 0.01594306415012959, -0.012349444388193683, 0.007129955041865947, 0.017989175756003836, -0.016271821710115254, 0.014350397874315577, -0.012128299820524862, 0.009394540644540653, -0.005423940570038421 } };
    static const double coefficients2[1][21] = { { 0.01543288609732543, 0.0, 0.010912698412698445, 0.0, 0.0, 0.040500822466653104, 0.0, 0.0, 0.0, 0.03507474113028508, 0.0, 0.0, 0.0, 0.0, 0.035649775209329666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.032543643420230535 } };
    static const double coefficients3[1][21] = { { 0.03507474113028499, 0.1260089873231327, -0.08432539682539666, 0.10188291620259785, -0.028644371923066164, 0.0020250411233326106, 0.07733253527558571, -0.026143168486841766, 0.0, 0.00584579018838084, 0.035649775209329694, 0.012576058599898918, -0.03852907169614649, 0.044252175724360666, -0.029708146007774636, 0.0, 0.03254364342023054, -0.05166143234753607, 0.05821583913851933, -0.052609427609427585, 0.03254364342023046 } };
    static const double coefficients4[1][21] = { { 0.03507474113028519, -0.032934167141273264, 0.12152777777777765, -0.011320324022510835, 0.07541069343011296, -0.02227545235665922, 0.0, 0.1045726739473671, -0.1012520561666327, 0.05845790188380847, 0.0, 0.056592263699545155, -0.00930012075424223, -0.040135694261629495, 0.04159140441088457, 0.0, 0.0, 0.051661432347536104, -0.10187771849240887, 0.11837121212121207, -0.08135910855057625 } };
    static const double coefficients5[1][21] = { { 0.03507474113028512, 0.08877905925038893, -0.08928571428571415, 0.030187530726695628, 0.04325884739401834, -0.05940120628442456, 0.0, 0.026143168486841707, 0.10125205616663269, -0.11691580376761695, 0.0, 0.0, 0.07440096603393805, -0.03087361097048418, -0.011883258403109855, 0.0, 0.0, 0.0, 0.06791847899493926, -0.131523569023569, 0.10847881140076837 } };
    static const double coefficients6[1][21] = { { 0.035074741130285046, -0.010023442173431017, 0.15128968253968247, 0.0, 0.05027379562007528, 0.09315189167330205, 0.0, 0.0, 0.05062602808331636, 0.06430369207218942, 0.0, 0.0, 0.0, 0.07203842559779652, -0.02376651680621974, 0.0, 0.0, 0.0, 0.0, 0.06576178451178455, -0.08135910855057636 } };
    static const double coefficients7[1][21] = { { 0.03507474113028509, -0.12600898732313257, -0.0843253968253968, 0.10188291620259787, 0.028644371923066222, 0.002025041123332701, -0.07733253527558573, -0.026143168486841756, 0.0, 0.005845790188380818, 0.03564977520932965, -0.012576058599898954, -0.03852907169614654, -0.044252175724360715, -0.029708146007774733, 0.0, 0.03254364342023051, 0.051661432347536035, 0.058215839138519326, 0.0526094276094276, 0.03254364342023053 } };
    static const double coefficients8[1][21] = { { 0.035074741130284956, 0.032934167141273174, 0.12152777777777762, -0.011320324022510805, -0.075410693430113, -0.022275452356659304, 0.0, 0.1045726739473671, 0.10125205616663266, 0.05845790188380848, 0.0, -0.05659226369954512, -0.00930012075424217, 0.0401356942616295, 0.04159140441088465, 0.0, 0.0, -0.0516614323475361, -0.10187771849240881, -0.11837121212121204, -0.08135910855057628 } };
    static const double coefficients9[1][21] = { { 0.03507474113028544, -0.08877905925038893, -0.08928571428571402, 0.0301875307266956, -0.04325884739401824, -0.059401206284424475, 0.0, 0.026143168486841672, -0.10125205616663267, -0.11691580376761704, 0.0, 0.0, 0.07440096603393799, 0.030873610970484144, -0.011883258403109935, 0.0, 0.0, 0.0, 0.06791847899493922, 0.13152356902356901, 0.10847881140076843 } };
    static const double coefficients10[1][21] = { { 0.03507474113028509, 0.010023442173431096, 0.15128968253968256, 0.0, -0.05027379562007534, 0.09315189167330205, 0.0, 0.0, -0.050626028083316385, 0.06430369207218938, 0.0, 0.0, 0.0, -0.07203842559779643, -0.02376651680621974, 0.0, 0.0, 0.0, 0.0, -0.06576178451178452, -0.08135910855057636 } };
    static const double coefficients11[1][21] = { { 0.03507474113028485, -0.13603242949656366, -0.06696428571428575, 0.03697972514020223, 0.07891816754314142, 0.06007621999220212, -0.007733253527558555, -0.04575054485197311, -0.055688630891647946, -0.03799763622447555, -0.06416959537679345, -0.012576058599898958, 0.017271652829307028, 0.027786249873435753, 0.0202015392852868, 0.08994587878001908, 0.04881546513034578, 0.02009055702404178, 0.0024256599641049857, -0.005636724386724412, -0.005423940570038398 } };
    static const double coefficients12[1][21] = { { 0.035074741130285185, 0.12171322639166211, -0.03224206349206348, -0.06716725586689788, -0.03215184603609473, 0.02767556201887957, 0.1391985634960543, 0.06535792121710446, -0.010125205616663344, -0.029228950941904218, 0.04277973025119566, -0.05659226369954509, -0.033214716979436634, 0.00926208329114535, 0.020201539285286844, -0.17989175756003817, -0.03254364342023054, 0.011480318299452511, 0.009702639856419913, -0.0018789081289081369, -0.005423940570038449 } };
    static const double coefficients13[1][21] = { { 0.03507474113028542, -0.12171322639166224, -0.032242063492063586, -0.06716725586689787, 0.03215184603609466, 0.027675562018879697, -0.13919856349605433, 0.06535792121710435, 0.010125205616663304, -0.029228950941904284, 0.042779730251195566, 0.05659226369954512, -0.03321471697943665, -0.009262083291145333, 0.02020153928528673, 0.1798917575600382, -0.032543643420230514, -0.011480318299452494, 0.009702639856419877, 0.0018789081289081737, -0.005423940570038359 } };
    static const double coefficients14[1][21] = { { 0.035074741130285206, 0.13603242949656363, -0.06696428571428562, 0.03697972514020214, -0.07891816754314143, 0.06007621999220198, 0.0077332535275586416, -0.045750544851973086, 0.05568863089164797, -0.03799763622447549, -0.06416959537679337, 0.012576058599898899, 0.01727165282930707, -0.02778624987343577, 0.02020153928528686, -0.08994587878001918, 0.0488154651303458, -0.020090557024041795, 0.002425659964104978, 0.005636724386724379, -0.005423940570038459 } };
    static const double coefficients15[1][21] = { { 0.28059792904228065, -0.2147880465735217, -0.12400793650793669, 0.09056259218008696, 0.11691580376761697, 0.0, 0.15466507055117154, 0.07842950546052534, 0.10125205616663276, 0.08184106263733197, -0.14259910083731858, 0.025152117199797923, -0.03188612830025915, -0.10702851803101192, -0.09506606722487917, 0.0, -0.13017457368092206, -0.10332286469507211, -0.029107919569259677, 0.026304713804713796, 0.03254364342023055 } };
    static const double coefficients16[1][21] = { { 0.035074741130285275, 0.0, -0.1240079365079363, -0.3848910167653697, 0.0, 0.10125205616663269, 0.0, -0.10457267394736702, 0.0, 0.04676632150704685, 0.21389865125597782, 0.0, 0.14083039999281133, 0.0, -0.09506606722487909, 0.0, 0.195261860521383, 0.0, -0.05821583913851942, 0.0, 0.03254364342023045 } };
    static const double coefficients17[1][21] = { { 0.280597929042281, 0.2147880465735214, -0.12400793650793657, 0.09056259218008701, -0.11691580376761686, 0.0, -0.1546650705511713, 0.07842950546052532, -0.10125205616663263, 0.08184106263733192, -0.1425991008373186, -0.025152117199797815, -0.03188612830025918, 0.10702851803101186, -0.09506606722487916, 0.0, -0.13017457368092206, 0.10332286469507206, -0.029107919569259677, -0.026304713804713786, 0.03254364342023054 } };
    static const double coefficients18[1][21] = { { 0.03507474113028535, -0.10739402328676076, 0.062003968253968506, 0.011320324022510805, -0.3069039848899945, -0.2531301404165818, 0.0, -0.1045726739473671, 0.0, 0.04676632150704672, 0.0, 0.16977679109863542, 0.009300120754242176, 0.12658180497898516, 0.1723072468450934, 0.0, 0.0, 0.15498429704260824, 0.10187771849240883, -0.03945707070707068, -0.08135910855057632 } };
    static const double coefficients19[1][21] = { { 0.035074741130285136, 0.10739402328676095, 0.062003968253968256, 0.011320324022510932, 0.30690398488999454, -0.2531301404165818, 0.0, -0.10457267394736713, 0.0, 0.046766321507046675, 0.0, -0.16977679109863544, 0.009300120754242344, -0.12658180497898522, 0.1723072468450935, 0.0, 0.0, -0.15498429704260824, 0.101877718492409, 0.03945707070707061, -0.08135910855057629 } };
    static const double coefficients20[1][21] = { { 0.2805979290422806, 0.0, 0.24801587301587294, -0.060375061453391256, 0.0, 0.13500274155551029, 0.0, -0.05228633697368343, 0.0, -0.21044844678171049, 0.0, 0.0, -0.14880193206787615, 0.0, -0.14259910083731872, 0.0, 0.0, 0.0, -0.13583695798987852, 0.0, 0.10847881140076841 } };
    const std::size_t reference_offset[21] = {};
    const std::size_t num_components[21] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[5][32][5] =
        { { { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 0, 0, 1, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 0, 1, 1, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 0, 1, 0 },
            { 0, 1, 1, 0, 0 },
            { 0, 1, 1, 1, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 0, 1, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 0, 1, 1, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 0, 1, 0 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 1, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 0, 1, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 0, 1, 1, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 0, 1, 0 },
            { 0, 1, 1, 0, 0 },
            { 0, 1, 1, 1, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 0, 1, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 0, 1, 1, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 0, 1, 0 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 1, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 1 },
            { 0, 0, 0, 1, 0 },
            { 0, 0, 0, 1, 1 },
            { 0, 0, 1, 0, 0 },
            { 0, 0, 1, 0, 1 },
            { 0, 0, 1, 1, 0 },
            { 0, 0, 1, 1, 1 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 0, 0, 1 },
            { 0, 1, 0, 1, 0 },
            { 0, 1, 0, 1, 1 },
            { 0, 1, 1, 0, 0 },
            { 0, 1, 1, 0, 1 },
            { 0, 1, 1, 1, 0 },
            { 0, 1, 1, 1, 1 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 1 },
            { 1, 0, 0, 1, 0 },
            { 1, 0, 0, 1, 1 },
            { 1, 0, 1, 0, 0 },
            { 1, 0, 1, 0, 1 },
            { 1, 0, 1, 1, 0 },
            { 1, 0, 1, 1, 1 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 0, 0, 1 },
            { 1, 1, 0, 1, 0 },
            { 1, 1, 0, 1, 1 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 0, 1 },
            { 1, 1, 1, 1, 0 },
            { 1, 1, 1, 1, 1 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[2] = { 2.0 * X[ip * 2] - 1.0, 2.0 * X[ip * 2 + 1] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues5[21] = {};
        basisvalues5[0] = 1.0;
        const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
        basisvalues5[1] = tmp1_5;
        const double tmp2_5 = (1.0 - Y[1]) / 2.0;
        const double tmp3_5 = tmp2_5 * tmp2_5;
        basisvalues5[3] = 1.5 * tmp1_5 * basisvalues5[1] - 0.5 * tmp3_5 * basisvalues5[0];
        basisvalues5[6] = 1.6666666666666667 * tmp1_5 * basisvalues5[3] - 0.6666666666666666 * tmp3_5 * basisvalues5[1];
        basisvalues5[10] = 1.75 * tmp1_5 * basisvalues5[6] - 0.75 * tmp3_5 * basisvalues5[3];
        basisvalues5[15] = 1.8 * tmp1_5 * basisvalues5[10] - 0.8 * tmp3_5 * basisvalues5[6];
        basisvalues5[2] = (0.5 + 1.5 * Y[1]) * basisvalues5[0];
        basisvalues5[4] = (1.5 + 2.5 * Y[1]) * basisvalues5[1];
        basisvalues5[7] = (2.5 + 3.5 * Y[1]) * basisvalues5[3];
        basisvalues5[11] = (3.5 + 4.5 * Y[1]) * basisvalues5[6];
        basisvalues5[16] = (4.5 + 5.5 * Y[1]) * basisvalues5[10];
        basisvalues5[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues5[2] - 0.5555555555555556 * basisvalues5[0];
        basisvalues5[9] = (0.05 + 1.75 * Y[1]) * basisvalues5[5] - 0.7 * basisvalues5[2];
        basisvalues5[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues5[9] - 0.7714285714285715 * basisvalues5[5];
        basisvalues5[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues5[14] - 0.8148148148148148 * basisvalues5[9];
        basisvalues5[8] = (0.54 + 2.1 * Y[1]) * basisvalues5[4] - 0.56 * basisvalues5[1];
        basisvalues5[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues5[8] - 0.7142857142857143 * basisvalues5[4];
        basisvalues5[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues5[13] - 0.7857142857142857 * basisvalues5[8];
        basisvalues5[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues5[7] - 0.5510204081632653 * basisvalues5[3];
        basisvalues5[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues5[12] - 0.7129629629629629 * basisvalues5[7];
        basisvalues5[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues5[11] - 0.5432098765432098 * basisvalues5[6];
        basisvalues5[0] *= std::sqrt(0.5);
        basisvalues5[2] *= std::sqrt(1.0);
        basisvalues5[5] *= std::sqrt(1.5);
        basisvalues5[9] *= std::sqrt(2.0);
        basisvalues5[14] *= std::sqrt(2.5);
        basisvalues5[20] *= std::sqrt(3.0);
        basisvalues5[1] *= std::sqrt(3.0);
        basisvalues5[4] *= std::sqrt(4.5);
        basisvalues5[8] *= std::sqrt(6.0);
        basisvalues5[13] *= std::sqrt(7.5);
        basisvalues5[19] *= std::sqrt(9.0);
        basisvalues5[3] *= std::sqrt(7.5);
        basisvalues5[7] *= std::sqrt(10.0);
        basisvalues5[12] *= std::sqrt(12.5);
        basisvalues5[18] *= std::sqrt(15.0);
        basisvalues5[6] *= std::sqrt(14.0);
        basisvalues5[11] *= std::sqrt(17.5);
        basisvalues5[17] *= std::sqrt(21.0);
        basisvalues5[10] *= std::sqrt(22.5);
        basisvalues5[16] *= std::sqrt(27.0);
        basisvalues5[15] *= std::sqrt(33.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 21; ++i)
        {
            double derivatives[32] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[21] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[21][21] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 441, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[21][21];
                        std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 441, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 21; ++s)
                        for (std::size_t t = 0; t < 21; ++t)
                            aux[s] += dmats[s][t] * basisvalues5[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 21; ++s)
                        derivatives[r] += coefficients20[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[21 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void poisson2d_5_finite_element_2::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(2, order);
    // Precomputed combinations
    const std::size_t combinations[5][32][5] =
        { { { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 0, 0, 1, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 0, 1, 1, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 0, 1, 0 },
            { 0, 1, 1, 0, 0 },
            { 0, 1, 1, 1, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 0, 1, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 0, 1, 1, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 0, 1, 0 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 1, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 0, 1, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 0, 1, 1, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 0, 1, 0 },
            { 0, 1, 1, 0, 0 },
            { 0, 1, 1, 1, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 0, 1, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 0, 1, 1, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 0, 1, 0 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 1, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 1 },
            { 0, 0, 0, 1, 0 },
            { 0, 0, 0, 1, 1 },
            { 0, 0, 1, 0, 0 },
            { 0, 0, 1, 0, 1 },
            { 0, 0, 1, 1, 0 },
            { 0, 0, 1, 1, 1 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 0, 0, 1 },
            { 0, 1, 0, 1, 0 },
            { 0, 1, 0, 1, 1 },
            { 0, 1, 1, 0, 0 },
            { 0, 1, 1, 0, 1 },
            { 0, 1, 1, 1, 0 },
            { 0, 1, 1, 1, 1 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 1 },
            { 1, 0, 0, 1, 0 },
            { 1, 0, 0, 1, 1 },
            { 1, 0, 1, 0, 0 },
            { 1, 0, 1, 0, 1 },
            { 1, 0, 1, 1, 0 },
            { 1, 0, 1, 1, 1 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 0, 0, 1 },
            { 1, 1, 0, 1, 0 },
            { 1, 1, 0, 1, 1 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 0, 1 },
            { 1, 1, 1, 1, 0 },
            { 1, 1, 1, 1, 1 } } };
    std::fill_n(values, num_points * 21 * num_derivatives, 0.0);
    const std::size_t reference_offsets[21] = {};
    const std::size_t physical_offsets[21] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[32][32];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[2 * 2 * ip + 2 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 21; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[21 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[21 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void poisson2d_5_finite_element_2::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    double X[2] = {};
    double J[4];
    double detJ;
    double K[4];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_triangle_2d(J, coordinate_dofs);
        compute_jacobian_inverse_triangle_2d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
        const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
        // Get coordinates and map to the reference (FIAT) element
        double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 2; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[21];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[21];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
}

void poisson2d_5_finite_element_2::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 21; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
}

void poisson2d_5_finite_element_2::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    std::size_t num_derivatives = std::pow(2, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 5)
        return;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[2] + coordinate_dofs[4];
    const double C1 = coordinate_dofs[3] + coordinate_dofs[5];
    // Get coordinates and map to the reference (FIAT) element
    double Y[2] = { (J[1] * (C1 - 2.0 * x[1]) + J[3] * (2.0 * x[0] - C0)) / detJ, (J[0] * (2.0 * x[1] - C1) + J[2] * (C0 - 2.0 * x[0])) / detJ };
    // Precomputed combinations
    const std::size_t combinations[5][32][5] =
        { { { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 1, 0, 0, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 1, 0, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 1, 0, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 0, 0, 1, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 0, 1, 1, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 0, 1, 0 },
            { 0, 1, 1, 0, 0 },
            { 0, 1, 1, 1, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 0, 1, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 0, 1, 1, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 0, 1, 0 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 1, 0 },
            { 0, 0, 0, 0, 0 },
            { 0, 0, 0, 1, 0 },
            { 0, 0, 1, 0, 0 },
            { 0, 0, 1, 1, 0 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 0, 1, 0 },
            { 0, 1, 1, 0, 0 },
            { 0, 1, 1, 1, 0 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 0, 1, 0 },
            { 1, 0, 1, 0, 0 },
            { 1, 0, 1, 1, 0 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 0, 1, 0 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 1, 0 } },
          { { 0, 0, 0, 0, 0 },
            { 0, 0, 0, 0, 1 },
            { 0, 0, 0, 1, 0 },
            { 0, 0, 0, 1, 1 },
            { 0, 0, 1, 0, 0 },
            { 0, 0, 1, 0, 1 },
            { 0, 0, 1, 1, 0 },
            { 0, 0, 1, 1, 1 },
            { 0, 1, 0, 0, 0 },
            { 0, 1, 0, 0, 1 },
            { 0, 1, 0, 1, 0 },
            { 0, 1, 0, 1, 1 },
            { 0, 1, 1, 0, 0 },
            { 0, 1, 1, 0, 1 },
            { 0, 1, 1, 1, 0 },
            { 0, 1, 1, 1, 1 },
            { 1, 0, 0, 0, 0 },
            { 1, 0, 0, 0, 1 },
            { 1, 0, 0, 1, 0 },
            { 1, 0, 0, 1, 1 },
            { 1, 0, 1, 0, 0 },
            { 1, 0, 1, 0, 1 },
            { 1, 0, 1, 1, 0 },
            { 1, 0, 1, 1, 1 },
            { 1, 1, 0, 0, 0 },
            { 1, 1, 0, 0, 1 },
            { 1, 1, 0, 1, 0 },
            { 1, 1, 0, 1, 1 },
            { 1, 1, 1, 0, 0 },
            { 1, 1, 1, 0, 1 },
            { 1, 1, 1, 1, 0 },
            { 1, 1, 1, 1, 1 } } };
    // Declare transformation matrix
    double transform[32][32] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[2 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.015432886097325004, -0.00945067404923504, -0.005456349206349188, 0.030187530726695642, 0.023383160753523376, 0.013500274155551023, -0.023199760582675723, -0.019607376365131313, -0.015187808424994918, -0.00876868528257127, 0.021389865125597804, 0.01886408789984837, 0.01594306415012959, 0.012349444388193683, 0.007129955041865959, -0.01798917575600382, -0.016271821710115254, -0.01435039787431558, -0.012128299820524878, -0.009394540644540659, -0.005423940570038444 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.015432886097325368, 0.009450674049234945, -0.005456349206349199, 0.03018753072669567, -0.023383160753523386, 0.013500274155551025, 0.023199760582675723, -0.019607376365131317, 0.015187808424994896, -0.008768685282571293, 0.021389865125597814, -0.018864087899848392, 0.01594306415012959, -0.012349444388193683, 0.007129955041865947, 0.017989175756003836, -0.016271821710115254, 0.014350397874315577, -0.012128299820524862, 0.009394540644540653, -0.005423940570038421 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.01543288609732543, 0.0, 0.010912698412698445, 0.0, 0.0, 0.040500822466653104, 0.0, 0.0, 0.0, 0.03507474113028508, 0.0, 0.0, 0.0, 0.0, 0.035649775209329666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.032543643420230535 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.03507474113028499, 0.1260089873231327, -0.08432539682539666, 0.10188291620259785, -0.028644371923066164, 0.0020250411233326106, 0.07733253527558571, -0.026143168486841766, 0.0, 0.00584579018838084, 0.035649775209329694, 0.012576058599898918, -0.03852907169614649, 0.044252175724360666, -0.029708146007774636, 0.0, 0.03254364342023054, -0.05166143234753607, 0.05821583913851933, -0.052609427609427585, 0.03254364342023046 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.03507474113028519, -0.032934167141273264, 0.12152777777777765, -0.011320324022510835, 0.07541069343011296, -0.02227545235665922, 0.0, 0.1045726739473671, -0.1012520561666327, 0.05845790188380847, 0.0, 0.056592263699545155, -0.00930012075424223, -0.040135694261629495, 0.04159140441088457, 0.0, 0.0, 0.051661432347536104, -0.10187771849240887, 0.11837121212121207, -0.08135910855057625 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.03507474113028512, 0.08877905925038893, -0.08928571428571415, 0.030187530726695628, 0.04325884739401834, -0.05940120628442456, 0.0, 0.026143168486841707, 0.10125205616663269, -0.11691580376761695, 0.0, 0.0, 0.07440096603393805, -0.03087361097048418, -0.011883258403109855, 0.0, 0.0, 0.0, 0.06791847899493926, -0.131523569023569, 0.10847881140076837 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.035074741130285046, -0.010023442173431017, 0.15128968253968247, 0.0, 0.05027379562007528, 0.09315189167330205, 0.0, 0.0, 0.05062602808331636, 0.06430369207218942, 0.0, 0.0, 0.0, 0.07203842559779652, -0.02376651680621974, 0.0, 0.0, 0.0, 0.0, 0.06576178451178455, -0.08135910855057636 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.03507474113028509, -0.12600898732313257, -0.0843253968253968, 0.10188291620259787, 0.028644371923066222, 0.002025041123332701, -0.07733253527558573, -0.026143168486841756, 0.0, 0.005845790188380818, 0.03564977520932965, -0.012576058599898954, -0.03852907169614654, -0.044252175724360715, -0.029708146007774733, 0.0, 0.03254364342023051, 0.051661432347536035, 0.058215839138519326, 0.0526094276094276, 0.03254364342023053 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.035074741130284956, 0.032934167141273174, 0.12152777777777762, -0.011320324022510805, -0.075410693430113, -0.022275452356659304, 0.0, 0.1045726739473671, 0.10125205616663266, 0.05845790188380848, 0.0, -0.05659226369954512, -0.00930012075424217, 0.0401356942616295, 0.04159140441088465, 0.0, 0.0, -0.0516614323475361, -0.10187771849240881, -0.11837121212121204, -0.08135910855057628 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.03507474113028544, -0.08877905925038893, -0.08928571428571402, 0.0301875307266956, -0.04325884739401824, -0.059401206284424475, 0.0, 0.026143168486841672, -0.10125205616663267, -0.11691580376761704, 0.0, 0.0, 0.07440096603393799, 0.030873610970484144, -0.011883258403109935, 0.0, 0.0, 0.0, 0.06791847899493922, 0.13152356902356901, 0.10847881140076843 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.03507474113028509, 0.010023442173431096, 0.15128968253968256, 0.0, -0.05027379562007534, 0.09315189167330205, 0.0, 0.0, -0.050626028083316385, 0.06430369207218938, 0.0, 0.0, 0.0, -0.07203842559779643, -0.02376651680621974, 0.0, 0.0, 0.0, 0.0, -0.06576178451178452, -0.08135910855057636 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.03507474113028485, -0.13603242949656366, -0.06696428571428575, 0.03697972514020223, 0.07891816754314142, 0.06007621999220212, -0.007733253527558555, -0.04575054485197311, -0.055688630891647946, -0.03799763622447555, -0.06416959537679345, -0.012576058599898958, 0.017271652829307028, 0.027786249873435753, 0.0202015392852868, 0.08994587878001908, 0.04881546513034578, 0.02009055702404178, 0.0024256599641049857, -0.005636724386724412, -0.005423940570038398 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.035074741130285185, 0.12171322639166211, -0.03224206349206348, -0.06716725586689788, -0.03215184603609473, 0.02767556201887957, 0.1391985634960543, 0.06535792121710446, -0.010125205616663344, -0.029228950941904218, 0.04277973025119566, -0.05659226369954509, -0.033214716979436634, 0.00926208329114535, 0.020201539285286844, -0.17989175756003817, -0.03254364342023054, 0.011480318299452511, 0.009702639856419913, -0.0018789081289081369, -0.005423940570038449 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.03507474113028542, -0.12171322639166224, -0.032242063492063586, -0.06716725586689787, 0.03215184603609466, 0.027675562018879697, -0.13919856349605433, 0.06535792121710435, 0.010125205616663304, -0.029228950941904284, 0.042779730251195566, 0.05659226369954512, -0.03321471697943665, -0.009262083291145333, 0.02020153928528673, 0.1798917575600382, -0.032543643420230514, -0.011480318299452494, 0.009702639856419877, 0.0018789081289081737, -0.005423940570038359 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.035074741130285206, 0.13603242949656363, -0.06696428571428562, 0.03697972514020214, -0.07891816754314143, 0.06007621999220198, 0.0077332535275586416, -0.045750544851973086, 0.05568863089164797, -0.03799763622447549, -0.06416959537679337, 0.012576058599898899, 0.01727165282930707, -0.02778624987343577, 0.02020153928528686, -0.08994587878001918, 0.0488154651303458, -0.020090557024041795, 0.002425659964104978, 0.005636724386724379, -0.005423940570038459 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.28059792904228065, -0.2147880465735217, -0.12400793650793669, 0.09056259218008696, 0.11691580376761697, 0.0, 0.15466507055117154, 0.07842950546052534, 0.10125205616663276, 0.08184106263733197, -0.14259910083731858, 0.025152117199797923, -0.03188612830025915, -0.10702851803101192, -0.09506606722487917, 0.0, -0.13017457368092206, -0.10332286469507211, -0.029107919569259677, 0.026304713804713796, 0.03254364342023055 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.035074741130285275, 0.0, -0.1240079365079363, -0.3848910167653697, 0.0, 0.10125205616663269, 0.0, -0.10457267394736702, 0.0, 0.04676632150704685, 0.21389865125597782, 0.0, 0.14083039999281133, 0.0, -0.09506606722487909, 0.0, 0.195261860521383, 0.0, -0.05821583913851942, 0.0, 0.03254364342023045 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.280597929042281, 0.2147880465735214, -0.12400793650793657, 0.09056259218008701, -0.11691580376761686, 0.0, -0.1546650705511713, 0.07842950546052532, -0.10125205616663263, 0.08184106263733192, -0.1425991008373186, -0.025152117199797815, -0.03188612830025918, 0.10702851803101186, -0.09506606722487916, 0.0, -0.13017457368092206, 0.10332286469507206, -0.029107919569259677, -0.026304713804713786, 0.03254364342023054 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.03507474113028535, -0.10739402328676076, 0.062003968253968506, 0.011320324022510805, -0.3069039848899945, -0.2531301404165818, 0.0, -0.1045726739473671, 0.0, 0.04676632150704672, 0.0, 0.16977679109863542, 0.009300120754242176, 0.12658180497898516, 0.1723072468450934, 0.0, 0.0, 0.15498429704260824, 0.10187771849240883, -0.03945707070707068, -0.08135910855057632 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.035074741130285136, 0.10739402328676095, 0.062003968253968256, 0.011320324022510932, 0.30690398488999454, -0.2531301404165818, 0.0, -0.10457267394736713, 0.0, 0.046766321507046675, 0.0, -0.16977679109863544, 0.009300120754242344, -0.12658180497898522, 0.1723072468450935, 0.0, 0.0, -0.15498429704260824, 0.101877718492409, 0.03945707070707061, -0.08135910855057629 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 20:
        {
            double basisvalues[21] = {};
            basisvalues[0] = 1.0;
            const double tmp1_5 = (1.0 + 2.0 * Y[0] + Y[1]) / 2.0;
            basisvalues[1] = tmp1_5;
            const double tmp2_5 = (1.0 - Y[1]) / 2.0;
            const double tmp3_5 = tmp2_5 * tmp2_5;
            basisvalues[3] = 1.5 * tmp1_5 * basisvalues[1] - 0.5 * tmp3_5 * basisvalues[0];
            basisvalues[6] = 1.6666666666666667 * tmp1_5 * basisvalues[3] - 0.6666666666666666 * tmp3_5 * basisvalues[1];
            basisvalues[10] = 1.75 * tmp1_5 * basisvalues[6] - 0.75 * tmp3_5 * basisvalues[3];
            basisvalues[15] = 1.8 * tmp1_5 * basisvalues[10] - 0.8 * tmp3_5 * basisvalues[6];
            basisvalues[2] = (0.5 + 1.5 * Y[1]) * basisvalues[0];
            basisvalues[4] = (1.5 + 2.5 * Y[1]) * basisvalues[1];
            basisvalues[7] = (2.5 + 3.5 * Y[1]) * basisvalues[3];
            basisvalues[11] = (3.5 + 4.5 * Y[1]) * basisvalues[6];
            basisvalues[16] = (4.5 + 5.5 * Y[1]) * basisvalues[10];
            basisvalues[5] = (0.1111111111111111 + 1.6666666666666667 * Y[1]) * basisvalues[2] - 0.5555555555555556 * basisvalues[0];
            basisvalues[9] = (0.05 + 1.75 * Y[1]) * basisvalues[5] - 0.7 * basisvalues[2];
            basisvalues[14] = (0.02857142857142857 + 1.8 * Y[1]) * basisvalues[9] - 0.7714285714285715 * basisvalues[5];
            basisvalues[20] = (0.018518518518518517 + 1.8333333333333333 * Y[1]) * basisvalues[14] - 0.8148148148148148 * basisvalues[9];
            basisvalues[8] = (0.54 + 2.1 * Y[1]) * basisvalues[4] - 0.56 * basisvalues[1];
            basisvalues[13] = (0.2857142857142857 + 2.0 * Y[1]) * basisvalues[8] - 0.7142857142857143 * basisvalues[4];
            basisvalues[19] = (0.17857142857142858 + 1.9642857142857142 * Y[1]) * basisvalues[13] - 0.7857142857142857 * basisvalues[8];
            basisvalues[12] = (1.0204081632653061 + 2.5714285714285716 * Y[1]) * basisvalues[7] - 0.5510204081632653 * basisvalues[3];
            basisvalues[18] = (0.5787037037037037 + 2.2916666666666665 * Y[1]) * basisvalues[12] - 0.7129629629629629 * basisvalues[7];
            basisvalues[17] = (1.5123456790123457 + 3.0555555555555554 * Y[1]) * basisvalues[11] - 0.5432098765432098 * basisvalues[6];
            basisvalues[0] *= std::sqrt(0.5);
            basisvalues[2] *= std::sqrt(1.0);
            basisvalues[5] *= std::sqrt(1.5);
            basisvalues[9] *= std::sqrt(2.0);
            basisvalues[14] *= std::sqrt(2.5);
            basisvalues[20] *= std::sqrt(3.0);
            basisvalues[1] *= std::sqrt(3.0);
            basisvalues[4] *= std::sqrt(4.5);
            basisvalues[8] *= std::sqrt(6.0);
            basisvalues[13] *= std::sqrt(7.5);
            basisvalues[19] *= std::sqrt(9.0);
            basisvalues[3] *= std::sqrt(7.5);
            basisvalues[7] *= std::sqrt(10.0);
            basisvalues[12] *= std::sqrt(12.5);
            basisvalues[18] *= std::sqrt(15.0);
            basisvalues[6] *= std::sqrt(14.0);
            basisvalues[11] *= std::sqrt(17.5);
            basisvalues[17] *= std::sqrt(21.0);
            basisvalues[10] *= std::sqrt(22.5);
            basisvalues[16] *= std::sqrt(27.0);
            basisvalues[15] *= std::sqrt(33.0);
            // Table(s) of coefficients
            static const double coefficients0[21] = { 0.2805979290422806, 0.0, 0.24801587301587294, -0.060375061453391256, 0.0, 0.13500274155551029, 0.0, -0.05228633697368343, 0.0, -0.21044844678171049, 0.0, 0.0, -0.14880193206787615, 0.0, -0.14259910083731872, 0.0, 0.0, 0.0, -0.13583695798987852, 0.0, 0.10847881140076841 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.898979485566344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 9.48683298050514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1842305580800067e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.9999999999999956, 0.0, 7.071067811865483, 0.0, 0.0, 1.0218295433799966e-14, 0.0, 0.0, 0.0, 1.790412448958143e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.291502622129184, -2.4452714485134194e-14, -2.993325909419147, 13.662601021279462, 1.2844233841938298e-14, 0.6110100926607885, 0.0, 0.0, 0.0, 2.2749839776893284e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1102230246251565e-14 },
                  { 0.0, 4.381780460041366, 0.0, 0.0, 12.521980673998849, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.4641016151377566, 0.0, 7.83836717690618, 0.0, 0.0, 8.400000000000011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -4.33735703856419e-14, 10.954451150103303, 4.25891852353893e-14, -8.056338184498822e-14, -3.833259389999625, -1.3196318345671438e-14, 17.748239349298817, 0.0, 0.5532833351724707, 1.4019769013134651e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.732863826479678, -3.325756508375737e-14, 3.3466401061363347, 4.364357804719831, -3.7668636565021085e-14, -5.074680379332347, 0.0, 17.00840128541521, 1.2021008925515323e-14, 1.521277658511355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2683353387407585e-14, 1.509903313490213e-14 },
                  { -1.1012230251941957e-14, 2.449489742783197, -1.811534069887382e-14, 0.0, 9.142857142857078, 0.0, 0.0, -1.0431479148599409e-14, 14.846149779161838, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3124479064556726e-14, 0.0 },
                  { 3.0983866769659008, 0.0, 7.668115805072281, 0.0, 0.0, 10.733126291998948, 0.0, 0.0, 0.0, 9.29516003089781, 0.0, 0.0, 0.0, 0.0, 1.3716605490477405e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 1.2434497875801753e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.416025603090638, -9.797456411632823e-14, -4.3768096354575485, 15.73213272255225, 3.691007635648218e-14, 2.010178182781472, -9.735444597417334e-14, -4.036867138796672, -1.2223102072884117e-14, -0.5158119621991054, 21.79908254950194, 1.1887794293433015e-14, 0.45133546692422183, 0.0, 0.05766953055423772, 0.0, -1.749858525403129e-14, 0.0, 0.0, 0.0, 0.0 },
                  { -4.051448058112635e-14, 6.857142857142835, 0.0, -3.4021102635187065e-14, 9.972922524188638, 4.2464967002705255e-14, 4.320493798938582, -9.986798481548907e-14, -7.273098320775947, 0.0, 0.0, 21.254019227744518, 2.3633345586214267e-14, 1.490788039793666, 0.0, 0.0, 0.0, -1.7848174892191427e-14, 0.0, -1.992442234388949e-14, 0.0 },
                  { 4.320493798938577, 1.2101116663102033e-14, 5.9355266144190235, 1.7928429140015785, -4.384274482249372e-14, -0.32071349029490387, 0.0, 9.200874124564734, -7.835542529180581e-14, -5.966396198534185, 0.0, 0.0, 19.802263245135123, 2.8789220625322875e-14, 2.530240384255302, 0.0, 0.0, 0.0, 0.0, -2.2028353017262762e-14, 1.4210854715202004e-14 },
                  { 0.0, 1.5333037559997782, 0.0, 0.0, 6.337932451131084, -1.2347446326268035e-14, 0.0, 2.1468485730613947e-14, 13.552618543578633, 0.0, 0.0, 0.0, 0.0, 16.667516985111444, 0.0, 0.0, 0.0, 0.0, 0.0, 1.7946781366291722e-14, 0.0 },
                  { 2.828427124746232, 0.0, 7.314285714285827, 0.0, 1.1525409968873845e-14, 11.337638238025077, 0.0, 1.3721783110922702e-14, 0.0, 12.929952570268394, 0.0, 0.0, 0.0, 0.0, 9.938586931957785, 0.0, 1.0236969674415348e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[21][21] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.242640687119279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.5819888974716165, 4.743416490252566, -0.912870929175265, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.4743807309977476e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9999999999999165, 6.123724356957936, 3.53553390593275, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8707479324888974e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.309401076758485, 0.0, 8.16496580927727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.645751311064559, 5.18459255872623, -1.4966629547095547, 6.831300510639722, -1.058300524425826, 0.3055050463303953, 0.0, 0.0, 0.0, 1.1590649947374896e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2360679774998267, 2.1908902300206807, 2.529822128134696, 8.08290376865478, 6.260990336999429, -1.8073922282301178, 0.0, -1.1543846628217519e-14, 0.0, 2.1161259252422333e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7320508075688699, -5.091168824543119, 3.9191835884530812, 0.0, 9.699484522385712, 4.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.00000000000001, 0.0, -2.8284271247462764, 0.0, 0.0, 12.124355652982127, 0.0, 0.0, 0.0, -1.0498904905795806e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.683281572999706, 5.477225575051612, -1.8973665961009996, 7.423074889580853, -1.916629694999796, 0.6639400022069809, 8.874119674649402, -1.0714285714285814, 0.2766416675862318, -0.0958314847499763, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0536046826244181e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3664319132398326, 2.8982753492378306, 1.6733200530681624, 2.182178902359862, 5.7470489321539056, -2.53734018966617, 10.062305898749031, 8.504200642707614, -2.19577516413421, 0.7606388292556799, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.67406256304407e-14, 0.0 },
                  { 2.0000000000000013, 1.2247448713915987, 3.535533905932726, -7.377111135633121, 4.571428571428543, 1.6495721976846507, 0.0, 11.499778169998963, 7.423074889580923, -2.5714285714285823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5491933384828787, 6.640783086353598, 3.834057902536134, 0.0, -6.196773353931904, 5.366563145999466, 0.0, 0.0, 13.416407864998735, 4.647580015448919, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.5796048141477238e-14, 1.354472090042691e-14 },
                  { -3.577708763999695, 0.0, 8.854377448471451, 0.0, 0.0, -3.0983866769660082, 0.0, 0.0, 0.0, 16.09968943799848, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7080128015453293, 5.6856424977520525, -2.1884048177287783, 7.866066361276141, -2.6112980586329613, 1.0050890913907389, 9.552971226757572, -2.018433569398346, 0.6700593942604794, -0.2579059810995465, 10.899541274750995, -1.0680546525064754, 0.22566773346211247, -0.0749149177264374, 0.02883476527712118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.4494897427831526, 3.4285714285713578, 0.9897433186108068, 3.0493391723051957, 4.986461262094336, -2.727411870290945, 2.1602468994692257, 8.346248495316772, -3.636549160387967, 1.516350793151488, 12.049896265113649, 10.627009613872273, -2.2453655975512334, 0.7453940198968332, -0.28690229202651113, 0.0, 0.0, -1.1759187179840315e-14, 0.0, 0.0, 0.0 },
                  { 2.160246899469267, 1.8142294704442532, 2.9677633072095158, 0.8964214570008295, 5.416047583669382, -0.16035674514746168, -9.525793444156808, 4.600437062282291, 5.345224838248438, -2.983198099267073, 0.0, 13.388773627904035, 9.90113162256759, -3.2868786756695654, 1.2651201921276494, 0.0, 0.0, -1.0757648306087012e-14, 0.0, -1.8215907264740336e-14, 1.199040866595169e-14 },
                  { 1.8257418583504996, 0.76665187799989, 3.8360977905292315, 8.636804255921462, 3.168966225565537, 3.6592070067662403, 0.0, -8.748177652797155, 6.776309271789312, 0.5216405309573429, 0.0, 0.0, 15.06237033139204, 8.33375849255572, -3.2076651393589146, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3766765505351941e-14 },
                  { 1.414213562373067, -6.7302545665533415, 3.657142857143013, 0.0, 9.455027817008709, 5.668819119012514, -1.2368041357164054e-14, 3.83638580137456e-14, -6.99854212223757, 6.464976285134211, 0.0, 0.0, 0.0, 17.214137521590956, 4.969293465978888, 0.0, 1.5151890144332958e-14, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 5.715476066494121, 0.0, -4.618802153517007, 0.0, 1.4377347918362535e-14, 12.727922061357848, 0.0, 2.571980628014454e-14, 0.0, -3.2659863237109494, 0.0, 0.0, 0.0, 0.0, 20.083160441856077, 0.0, 1.1093113991085254e-14, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[32] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[21][21] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 441, 0.0);
                for (std::size_t t = 0; t < 21; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 441, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 441, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 21; ++t)
                            for (std::size_t u = 0; u < 21; ++u)
                                for (std::size_t tu = 0; tu < 21; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 21; ++s)
                    for (std::size_t t = 0; t < 21; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
}

void poisson2d_5_finite_element_2::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(2, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 21, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 5)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[32] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 21; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
}

double poisson2d_5_finite_element_2::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[2];
            y[1] = coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[4];
            y[1] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.8 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.8 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.6 * coordinate_dofs[2] + 0.4 * coordinate_dofs[4];
            y[1] = 0.6 * coordinate_dofs[3] + 0.4 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.3999999999999999 * coordinate_dofs[2] + 0.6000000000000001 * coordinate_dofs[4];
            y[1] = 0.3999999999999999 * coordinate_dofs[3] + 0.6000000000000001 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.19999999999999996 * coordinate_dofs[2] + 0.8 * coordinate_dofs[4];
            y[1] = 0.19999999999999996 * coordinate_dofs[3] + 0.8 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.8 * coordinate_dofs[0] + 0.2 * coordinate_dofs[4];
            y[1] = 0.8 * coordinate_dofs[1] + 0.2 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.6 * coordinate_dofs[0] + 0.4 * coordinate_dofs[4];
            y[1] = 0.6 * coordinate_dofs[1] + 0.4 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.3999999999999999 * coordinate_dofs[0] + 0.6000000000000001 * coordinate_dofs[4];
            y[1] = 0.3999999999999999 * coordinate_dofs[1] + 0.6000000000000001 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.19999999999999996 * coordinate_dofs[0] + 0.8 * coordinate_dofs[4];
            y[1] = 0.19999999999999996 * coordinate_dofs[1] + 0.8 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.8 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2];
            y[1] = 0.8 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.6 * coordinate_dofs[0] + 0.4 * coordinate_dofs[2];
            y[1] = 0.6 * coordinate_dofs[1] + 0.4 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.3999999999999999 * coordinate_dofs[0] + 0.6000000000000001 * coordinate_dofs[2];
            y[1] = 0.3999999999999999 * coordinate_dofs[1] + 0.6000000000000001 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.19999999999999996 * coordinate_dofs[0] + 0.8 * coordinate_dofs[2];
            y[1] = 0.19999999999999996 * coordinate_dofs[1] + 0.8 * coordinate_dofs[3];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.6000000000000001 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
            y[1] = 0.6000000000000001 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.39999999999999997 * coordinate_dofs[0] + 0.4 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
            y[1] = 0.39999999999999997 * coordinate_dofs[1] + 0.4 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.1999999999999999 * coordinate_dofs[0] + 0.6000000000000001 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
            y[1] = 0.1999999999999999 * coordinate_dofs[1] + 0.6000000000000001 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.4 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2] + 0.4 * coordinate_dofs[4];
            y[1] = 0.4 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3] + 0.4 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.19999999999999996 * coordinate_dofs[0] + 0.4 * coordinate_dofs[2] + 0.4 * coordinate_dofs[4];
            y[1] = 0.19999999999999996 * coordinate_dofs[1] + 0.4 * coordinate_dofs[3] + 0.4 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 20:
        {
            y[0] = 0.19999999999999996 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2] + 0.6000000000000001 * coordinate_dofs[4];
            y[1] = 0.19999999999999996 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3] + 0.6000000000000001 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
}

void poisson2d_5_finite_element_2::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[2];
    y[1] = coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[4];
    y[1] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.8 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.8 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.6 * coordinate_dofs[2] + 0.4 * coordinate_dofs[4];
    y[1] = 0.6 * coordinate_dofs[3] + 0.4 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.3999999999999999 * coordinate_dofs[2] + 0.6000000000000001 * coordinate_dofs[4];
    y[1] = 0.3999999999999999 * coordinate_dofs[3] + 0.6000000000000001 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.19999999999999996 * coordinate_dofs[2] + 0.8 * coordinate_dofs[4];
    y[1] = 0.19999999999999996 * coordinate_dofs[3] + 0.8 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.8 * coordinate_dofs[0] + 0.2 * coordinate_dofs[4];
    y[1] = 0.8 * coordinate_dofs[1] + 0.2 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.6 * coordinate_dofs[0] + 0.4 * coordinate_dofs[4];
    y[1] = 0.6 * coordinate_dofs[1] + 0.4 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.3999999999999999 * coordinate_dofs[0] + 0.6000000000000001 * coordinate_dofs[4];
    y[1] = 0.3999999999999999 * coordinate_dofs[1] + 0.6000000000000001 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.19999999999999996 * coordinate_dofs[0] + 0.8 * coordinate_dofs[4];
    y[1] = 0.19999999999999996 * coordinate_dofs[1] + 0.8 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.8 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2];
    y[1] = 0.8 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6 * coordinate_dofs[0] + 0.4 * coordinate_dofs[2];
    y[1] = 0.6 * coordinate_dofs[1] + 0.4 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.3999999999999999 * coordinate_dofs[0] + 0.6000000000000001 * coordinate_dofs[2];
    y[1] = 0.3999999999999999 * coordinate_dofs[1] + 0.6000000000000001 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.19999999999999996 * coordinate_dofs[0] + 0.8 * coordinate_dofs[2];
    y[1] = 0.19999999999999996 * coordinate_dofs[1] + 0.8 * coordinate_dofs[3];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.6000000000000001 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
    y[1] = 0.6000000000000001 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.39999999999999997 * coordinate_dofs[0] + 0.4 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
    y[1] = 0.39999999999999997 * coordinate_dofs[1] + 0.4 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.1999999999999999 * coordinate_dofs[0] + 0.6000000000000001 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
    y[1] = 0.1999999999999999 * coordinate_dofs[1] + 0.6000000000000001 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.4 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2] + 0.4 * coordinate_dofs[4];
    y[1] = 0.4 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3] + 0.4 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.19999999999999996 * coordinate_dofs[0] + 0.4 * coordinate_dofs[2] + 0.4 * coordinate_dofs[4];
    y[1] = 0.19999999999999996 * coordinate_dofs[1] + 0.4 * coordinate_dofs[3] + 0.4 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.19999999999999996 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2] + 0.6000000000000001 * coordinate_dofs[4];
    y[1] = 0.19999999999999996 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3] + 0.6000000000000001 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
}

void poisson2d_5_finite_element_2::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

void poisson2d_5_finite_element_2::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[2 + 1] = coordinate_dofs[3];
    dof_coordinates[2 * 2] = coordinate_dofs[4];
    dof_coordinates[2 * 2 + 1] = coordinate_dofs[5];
    dof_coordinates[2 * 3] = 0.8 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
    dof_coordinates[2 * 3 + 1] = 0.8 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
    dof_coordinates[2 * 4] = 0.6 * coordinate_dofs[2] + 0.4 * coordinate_dofs[4];
    dof_coordinates[2 * 4 + 1] = 0.6 * coordinate_dofs[3] + 0.4 * coordinate_dofs[5];
    dof_coordinates[2 * 5] = 0.3999999999999999 * coordinate_dofs[2] + 0.6000000000000001 * coordinate_dofs[4];
    dof_coordinates[2 * 5 + 1] = 0.3999999999999999 * coordinate_dofs[3] + 0.6000000000000001 * coordinate_dofs[5];
    dof_coordinates[2 * 6] = 0.19999999999999996 * coordinate_dofs[2] + 0.8 * coordinate_dofs[4];
    dof_coordinates[2 * 6 + 1] = 0.19999999999999996 * coordinate_dofs[3] + 0.8 * coordinate_dofs[5];
    dof_coordinates[2 * 7] = 0.8 * coordinate_dofs[0] + 0.2 * coordinate_dofs[4];
    dof_coordinates[2 * 7 + 1] = 0.8 * coordinate_dofs[1] + 0.2 * coordinate_dofs[5];
    dof_coordinates[2 * 8] = 0.6 * coordinate_dofs[0] + 0.4 * coordinate_dofs[4];
    dof_coordinates[2 * 8 + 1] = 0.6 * coordinate_dofs[1] + 0.4 * coordinate_dofs[5];
    dof_coordinates[2 * 9] = 0.3999999999999999 * coordinate_dofs[0] + 0.6000000000000001 * coordinate_dofs[4];
    dof_coordinates[2 * 9 + 1] = 0.3999999999999999 * coordinate_dofs[1] + 0.6000000000000001 * coordinate_dofs[5];
    dof_coordinates[2 * 10] = 0.19999999999999996 * coordinate_dofs[0] + 0.8 * coordinate_dofs[4];
    dof_coordinates[2 * 10 + 1] = 0.19999999999999996 * coordinate_dofs[1] + 0.8 * coordinate_dofs[5];
    dof_coordinates[2 * 11] = 0.8 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2];
    dof_coordinates[2 * 11 + 1] = 0.8 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3];
    dof_coordinates[2 * 12] = 0.6 * coordinate_dofs[0] + 0.4 * coordinate_dofs[2];
    dof_coordinates[2 * 12 + 1] = 0.6 * coordinate_dofs[1] + 0.4 * coordinate_dofs[3];
    dof_coordinates[2 * 13] = 0.3999999999999999 * coordinate_dofs[0] + 0.6000000000000001 * coordinate_dofs[2];
    dof_coordinates[2 * 13 + 1] = 0.3999999999999999 * coordinate_dofs[1] + 0.6000000000000001 * coordinate_dofs[3];
    dof_coordinates[2 * 14] = 0.19999999999999996 * coordinate_dofs[0] + 0.8 * coordinate_dofs[2];
    dof_coordinates[2 * 14 + 1] = 0.19999999999999996 * coordinate_dofs[1] + 0.8 * coordinate_dofs[3];
    dof_coordinates[2 * 15] = 0.6000000000000001 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
    dof_coordinates[2 * 15 + 1] = 0.6000000000000001 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
    dof_coordinates[2 * 16] = 0.39999999999999997 * coordinate_dofs[0] + 0.4 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
    dof_coordinates[2 * 16 + 1] = 0.39999999999999997 * coordinate_dofs[1] + 0.4 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
    dof_coordinates[2 * 17] = 0.1999999999999999 * coordinate_dofs[0] + 0.6000000000000001 * coordinate_dofs[2] + 0.2 * coordinate_dofs[4];
    dof_coordinates[2 * 17 + 1] = 0.1999999999999999 * coordinate_dofs[1] + 0.6000000000000001 * coordinate_dofs[3] + 0.2 * coordinate_dofs[5];
    dof_coordinates[2 * 18] = 0.4 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2] + 0.4 * coordinate_dofs[4];
    dof_coordinates[2 * 18 + 1] = 0.4 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3] + 0.4 * coordinate_dofs[5];
    dof_coordinates[2 * 19] = 0.19999999999999996 * coordinate_dofs[0] + 0.4 * coordinate_dofs[2] + 0.4 * coordinate_dofs[4];
    dof_coordinates[2 * 19 + 1] = 0.19999999999999996 * coordinate_dofs[1] + 0.4 * coordinate_dofs[3] + 0.4 * coordinate_dofs[5];
    dof_coordinates[2 * 20] = 0.19999999999999996 * coordinate_dofs[0] + 0.2 * coordinate_dofs[2] + 0.6000000000000001 * coordinate_dofs[4];
    dof_coordinates[2 * 20 + 1] = 0.19999999999999996 * coordinate_dofs[1] + 0.2 * coordinate_dofs[3] + 0.6000000000000001 * coordinate_dofs[5];
}

void poisson2d_5_finite_element_2::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[42] = { 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.8, 0.2, 0.6, 0.4, 0.3999999999999999, 0.6000000000000001, 0.19999999999999996, 0.8, 0.0, 0.2, 0.0, 0.4, 0.0, 0.6000000000000001, 0.0, 0.8, 0.2, 0.0, 0.4, 0.0, 0.6000000000000001, 0.0, 0.8, 0.0, 0.2, 0.2, 0.4, 0.2, 0.6000000000000001, 0.2, 0.2, 0.4, 0.4, 0.4, 0.2, 0.6000000000000001 };
    std::copy_n(dof_X, 42, reference_dof_coordinates);
}

std::size_t poisson2d_5_finite_element_2::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * poisson2d_5_finite_element_2::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * poisson2d_5_finite_element_2::create() const
{
    return new poisson2d_5_finite_element_2();
}


poisson2d_5_dofmap_0::poisson2d_5_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

poisson2d_5_dofmap_0::~poisson2d_5_dofmap_0()
{
    // Do nothing
}

const char * poisson2d_5_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 1)";
}

bool poisson2d_5_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
}

std::size_t poisson2d_5_dofmap_0::topological_dimension() const
{
    return 2;
}

std::size_t poisson2d_5_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0];
}

std::size_t poisson2d_5_dofmap_0::num_global_support_dofs() const
{
    return 0;
}

std::size_t poisson2d_5_dofmap_0::num_element_support_dofs() const
{
    return 3;
}

std::size_t poisson2d_5_dofmap_0::num_element_dofs() const
{
    return 3;
}

std::size_t poisson2d_5_dofmap_0::num_facet_dofs() const
{
    return 2;
}

std::size_t poisson2d_5_dofmap_0::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 1, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

std::size_t poisson2d_5_dofmap_0::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 1, 2, 3 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

void poisson2d_5_dofmap_0::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
}

void poisson2d_5_dofmap_0::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        break;
    }
}

void poisson2d_5_dofmap_0::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    }
}

void poisson2d_5_dofmap_0::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
}

std::size_t poisson2d_5_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * poisson2d_5_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * poisson2d_5_dofmap_0::create() const
{
    return new poisson2d_5_dofmap_0();
}


poisson2d_5_dofmap_1::poisson2d_5_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

poisson2d_5_dofmap_1::~poisson2d_5_dofmap_1()
{
    // Do nothing
}

const char * poisson2d_5_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

bool poisson2d_5_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[3] = { true, false, false };
    if (d >= 3)
        return false;
    return return_values[d];
}

std::size_t poisson2d_5_dofmap_1::topological_dimension() const
{
    return 2;
}

std::size_t poisson2d_5_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 2 * num_global_entities[0];
}

std::size_t poisson2d_5_dofmap_1::num_global_support_dofs() const
{
    return 0;
}

std::size_t poisson2d_5_dofmap_1::num_element_support_dofs() const
{
    return 6;
}

std::size_t poisson2d_5_dofmap_1::num_element_dofs() const
{
    return 6;
}

std::size_t poisson2d_5_dofmap_1::num_facet_dofs() const
{
    return 4;
}

std::size_t poisson2d_5_dofmap_1::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 2, 0, 0 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

std::size_t poisson2d_5_dofmap_1::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 2, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

void poisson2d_5_dofmap_1::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + entity_indices[0][0];
    dofs[4] = offset + entity_indices[0][1];
    dofs[5] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
}

void poisson2d_5_dofmap_1::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        break;
    }
}

void poisson2d_5_dofmap_1::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    }
}

void poisson2d_5_dofmap_1::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 4;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 5;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            break;
        }
        break;
    }
}

std::size_t poisson2d_5_dofmap_1::num_sub_dofmaps() const
{
    return 2;
}

ufc::dofmap * poisson2d_5_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson2d_5_dofmap_0();
    case 1:
        return new poisson2d_5_dofmap_0();
    default:
        return nullptr;
    }
}

ufc::dofmap * poisson2d_5_dofmap_1::create() const
{
    return new poisson2d_5_dofmap_1();
}


poisson2d_5_dofmap_2::poisson2d_5_dofmap_2() : ufc::dofmap()
{
    // Do nothing
}

poisson2d_5_dofmap_2::~poisson2d_5_dofmap_2()
{
    // Do nothing
}

const char * poisson2d_5_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', triangle, 5)";
}

bool poisson2d_5_dofmap_2::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[3] = { true, true, true };
    if (d >= 3)
        return false;
    return return_values[d];
}

std::size_t poisson2d_5_dofmap_2::topological_dimension() const
{
    return 2;
}

std::size_t poisson2d_5_dofmap_2::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0] + 4 * num_global_entities[1] + 6 * num_global_entities[2];
}

std::size_t poisson2d_5_dofmap_2::num_global_support_dofs() const
{
    return 0;
}

std::size_t poisson2d_5_dofmap_2::num_element_support_dofs() const
{
    return 21;
}

std::size_t poisson2d_5_dofmap_2::num_element_dofs() const
{
    return 21;
}

std::size_t poisson2d_5_dofmap_2::num_facet_dofs() const
{
    return 6;
}

std::size_t poisson2d_5_dofmap_2::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 1, 4, 6 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

std::size_t poisson2d_5_dofmap_2::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[3] = { 1, 6, 21 };
    if (d >= 3)
        return 0;
    return return_values[d];
}

void poisson2d_5_dofmap_2::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 4 * entity_indices[1][0];
    dofs[4] = offset + 4 * entity_indices[1][0] + 1;
    dofs[5] = offset + 4 * entity_indices[1][0] + 2;
    dofs[6] = offset + 4 * entity_indices[1][0] + 3;
    dofs[7] = offset + 4 * entity_indices[1][1];
    dofs[8] = offset + 4 * entity_indices[1][1] + 1;
    dofs[9] = offset + 4 * entity_indices[1][1] + 2;
    dofs[10] = offset + 4 * entity_indices[1][1] + 3;
    dofs[11] = offset + 4 * entity_indices[1][2];
    dofs[12] = offset + 4 * entity_indices[1][2] + 1;
    dofs[13] = offset + 4 * entity_indices[1][2] + 2;
    dofs[14] = offset + 4 * entity_indices[1][2] + 3;
    offset += 4 * num_global_entities[1];
    dofs[15] = offset + 6 * entity_indices[2][0];
    dofs[16] = offset + 6 * entity_indices[2][0] + 1;
    dofs[17] = offset + 6 * entity_indices[2][0] + 2;
    dofs[18] = offset + 6 * entity_indices[2][0] + 3;
    dofs[19] = offset + 6 * entity_indices[2][0] + 4;
    dofs[20] = offset + 6 * entity_indices[2][0] + 5;
    offset += 6 * num_global_entities[2];
}

void poisson2d_5_dofmap_2::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 7;
        dofs[3] = 8;
        dofs[4] = 9;
        dofs[5] = 10;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 11;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        break;
    }
}

void poisson2d_5_dofmap_2::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            dofs[3] = 6;
            break;
        case 1:
            dofs[0] = 7;
            dofs[1] = 8;
            dofs[2] = 9;
            dofs[3] = 10;
            break;
        case 2:
            dofs[0] = 11;
            dofs[1] = 12;
            dofs[2] = 13;
            dofs[3] = 14;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 15;
            dofs[1] = 16;
            dofs[2] = 17;
            dofs[3] = 18;
            dofs[4] = 19;
            dofs[5] = 20;
            break;
        }
        break;
    }
}

void poisson2d_5_dofmap_2::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 7;
            dofs[3] = 8;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 11;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            break;
        }
        break;
    }
}

std::size_t poisson2d_5_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * poisson2d_5_dofmap_2::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * poisson2d_5_dofmap_2::create() const
{
    return new poisson2d_5_dofmap_2();
}


poisson2d_5_coordinate_mapping_1::poisson2d_5_coordinate_mapping_1() : ufc::coordinate_mapping()
{
    // Do nothing
}

poisson2d_5_coordinate_mapping_1::~poisson2d_5_coordinate_mapping_1()
{
    // Do nothing
}

const char * poisson2d_5_coordinate_mapping_1::signature() const
{
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', triangle, 1), dim=2)";
}

ufc::coordinate_mapping * poisson2d_5_coordinate_mapping_1::create() const
{
    return new poisson2d_5_coordinate_mapping_1();
}

std::size_t poisson2d_5_coordinate_mapping_1::geometric_dimension() const
{
    return 2;
}

std::size_t poisson2d_5_coordinate_mapping_1::topological_dimension() const
{
    return 2;
}

ufc::shape poisson2d_5_coordinate_mapping_1::cell_shape() const
{
    return ufc::shape::triangle;
}

ufc::finite_element * poisson2d_5_coordinate_mapping_1::create_coordinate_finite_element() const
{
    return new poisson2d_5_finite_element_1();
}

ufc::dofmap * poisson2d_5_coordinate_mapping_1::create_coordinate_dofmap() const
{
    return new poisson2d_5_dofmap_1();
}

void poisson2d_5_coordinate_mapping_1::compute_physical_coordinates(
    double * x, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    poisson2d_5_finite_element_0 xelement;
    double phi[3];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[2 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t d = 0; d < 3; ++d)
                x[2 * ip + i] += coordinate_dofs[2 * d + i] * phi[d];
    }
}

void poisson2d_5_coordinate_mapping_1::compute_reference_coordinates(
    double * X, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double J[4];
    double detJ[1];
    double K[4];
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
}

void poisson2d_5_coordinate_mapping_1::compute_reference_geometry(
    double * X, double * J, double * detJ, double * K, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[3] = { 1.0, 0.0, 0.0 };
    const double dphi_X0[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    double x0[2] = {};
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t k = 0; k < 3; ++k)
            x0[i] += coordinate_dofs[2 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 2; ++i)
    {
        for (std::size_t j = 0; j < 2; ++j)
        {
            J[2 * i + j] = 0.0;
            for (std::size_t k = 0; k < 3; ++k)
                J[2 * i + j] += coordinate_dofs[2 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t i = 0; i < 2; ++i)
                X[2 * ip + j] += K[2 * j + i] * (x[2 * ip + i] - x0[i]);
}

void poisson2d_5_coordinate_mapping_1::compute_jacobians(
    double * J, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    poisson2d_5_finite_element_0 xelement;
    double dphi[6];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[2 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 2; ++i)
            for (std::size_t j = 0; j < 2; ++j)
                for (std::size_t d = 0; d < 3; ++d)
                    J[2 * 2 * ip + 2 * i + j] += coordinate_dofs[2 * d + i] * dphi[2 * d + j];
    }
}

void poisson2d_5_coordinate_mapping_1::compute_jacobian_determinants(
    double * detJ, std::size_t num_points,
    const double * J,
    int cell_orientation) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[2 * 2 * ip] * J[2 * 2 * ip + 2 + 1] - J[2 * 2 * ip + 1] * J[2 * 2 * ip + 2];
}

void poisson2d_5_coordinate_mapping_1::compute_jacobian_inverses(
    double * K, std::size_t num_points,
    const double * J, const double * detJ) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[2 * 2 * ip] = J[2 * 2 * ip + 2 + 1] / detJ[ip];
        K[2 * 2 * ip + 1] = -J[2 * 2 * ip + 1] / detJ[ip];
        K[2 * 2 * ip + 2] = -J[2 * 2 * ip + 2] / detJ[ip];
        K[2 * 2 * ip + 2 + 1] = J[2 * 2 * ip] / detJ[ip];
    }
}

void poisson2d_5_coordinate_mapping_1::compute_geometry(
    double * x, double * J, double * detJ, double * K, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs, int cell_orientation) const
{
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
}

void poisson2d_5_coordinate_mapping_1::compute_midpoint_geometry(
    double * x, double * J,
    const double * coordinate_dofs) const
{
    const double phi_Xm[3] = { 0.3333333333333333, 0.3333333333333333, 0.3333333333333333 };
    const double dphi_Xm[2][3] =
        { { -1.0, 1.0, 0.0 },
          { -1.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t d = 0; d < 3; ++d)
            x[i] += coordinate_dofs[2 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 2; ++i)
        for (std::size_t j = 0; j < 2; ++j)
            for (std::size_t d = 0; d < 3; ++d)
                J[2 * i + j] += coordinate_dofs[2 * d + i] * dphi_Xm[j][d];
}


poisson2d_5_cell_integral_0_otherwise::poisson2d_5_cell_integral_0_otherwise() : ufc::cell_integral()
{

}

poisson2d_5_cell_integral_0_otherwise::~poisson2d_5_cell_integral_0_otherwise()
{

}

const std::vector<bool> & poisson2d_5_cell_integral_0_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({});
return enabled;
}

void poisson2d_5_cell_integral_0_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation,
                                    std::size_t local_facet) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 8
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 8
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           8
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q25[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[1][20][20] =
        { { { 0.3424065806878318, -0.04099840167548474, -0.04081927910052838, -0.03797743055555707, -0.03797743055555185, -0.04081927910053106, 0.2022879464285729, -0.01584545855379406, -0.06966834766313651, 0.04081927910053097, -0.6480275848765452, 0.5942046957671971, -0.4499593529541453, 0.2023740630511466, -0.2152915564373929, -0.05382288910934493, 0.1076457782186937, -0.05382288910934242, 0.1076457782186933, 0.1076457782186885 },
            { -0.04099840167548474, 0.3424065806878288, 0.202287946428568, -0.01584545855379109, -0.06966834766313812, 0.0408192791005311, -0.0408192791005297, -0.03797743055555641, -0.03797743055555314, -0.04081927910053112, 0.2023740630511459, -0.4499593529541419, 0.5942046957671894, -0.6480275848765376, 0.1076457782186988, -0.05382288910935334, -0.2152915564373838, 0.1076457782186959, -0.05382288910934824, 0.1076457782186912 },
            { -0.04081927910052838, 0.202287946428568, 1.989293981481467, -0.9063774526014088, 0.8181079144620745, -0.3401606591710832, 0.1420924272486692, 0.1313278494268227, 0.1722332451498998, 0.3401606591710825, 0.1980682319223946, -0.3595368992504286, 0.2863377700617133, -0.2863377700617191, -0.6674038249558943, 1.356336805555536, -2.820319389329778, -0.419818535052924, 1.194868138227512, -0.9903411596119739 },
            { -0.03797743055555707, -0.01584545855379109, -0.9063774526014088, 3.07436342592593, -1.804143242945325, 0.8956128747795647, 0.131327849426823, -0.2971023478836218, -0.2195973875661042, -0.8956128747795644, 0.1119516093474385, -0.1119516093474367, 0.1033399470899479, -0.04951705798060248, -0.3444664902998228, 0.3875248015872845, 0.7319912918871258, 1.033399470899478, -3.810660548941789, 2.023740630511429 },
            { -0.03797743055555185, -0.06966834766313812, 0.8181079144620745, -1.804143242945325, 3.694403108465596, -1.395089285714304, 0.1722332451498913, -0.2195973875660973, 0.2669615299823262, 1.395089285714304, 0.07104621362433383, -0.01722332451498833, -0.01722332451499247, 0.0710462136243367, -0.516699735449719, 0.04305831128747632, -0.5166997354497245, 1.011870315255696, 1.01187031525573, -3.961364638447926 },
            { -0.04081927910053106, 0.0408192791005311, -0.3401606591710832, 0.8956128747795647, -1.395089285714304, 2.561969521604953, 0.3401606591710879, -0.8956128747795653, 1.395089285714305, -2.561969521604951, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.2022879464285729, -0.0408192791005297, 0.1420924272486692, 0.131327849426823, 0.1722332451498913, 0.3401606591710879, 1.989293981481482, -0.9063774526014057, 0.8181079144620709, -0.340160659171088, -0.2863377700617354, 0.2863377700617378, -0.3595368992504479, 0.1980682319224027, -2.820319389329806, 1.356336805555556, -0.6674038249559022, 1.194868138227501, -0.4198185350529174, -0.9903411596119635 },
            { -0.01584545855379406, -0.03797743055555641, 0.1313278494268227, -0.2971023478836218, -0.2195973875660973, -0.8956128747795653, -0.9063774526014057, 3.074363425925928, -1.804143242945316, 0.8956128747795641, -0.04951705798059251, 0.1033399470899418, -0.1119516093474393, 0.1119516093474413, 0.7319912918871081, 0.3875248015873111, -0.3444664902998347, -3.810660548941788, 1.033399470899479, 2.023740630511414 },
            { -0.06966834766313651, -0.03797743055555314, 0.1722332451498998, -0.2195973875661042, 0.2669615299823262, 1.395089285714305, 0.8181079144620709, -1.804143242945316, 3.694403108465598, -1.395089285714303, 0.07104621362433147, -0.01722332451498608, -0.01722332451499419, 0.07104621362433854, -0.5166997354497175, 0.04305831128748108, -0.5166997354497355, 1.011870315255698, 1.011870315255723, -3.961364638447925 },
            { 0.04081927910053097, -0.04081927910053112, 0.3401606591710825, -0.8956128747795644, 1.395089285714304, -2.561969521604951, -0.340160659171088, 0.8956128747795641, -1.395089285714303, 2.56196952160495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.6480275848765452, 0.2023740630511459, 0.1980682319223946, 0.1119516093474385, 0.07104621362433383, 0.0, -0.2863377700617354, -0.04951705798059251, 0.07104621362433147, 0.0, 1.989293981481483, -2.568428268298059, 1.963458994708991, -0.9386711860670178, 0.5037822420635027, 0.04951705798058824, -0.4650297619047516, 0.2109857253086299, -0.273420276675475, -0.142092427248666 },
            { 0.5942046957671971, -0.4499593529541419, -0.3595368992504286, -0.1119516093474367, -0.01722332451498833, 0.0, 0.2863377700617378, 0.1033399470899418, -0.01722332451498608, 0.0, -2.568428268298059, 4.417782738095227, -3.95705880731921, 1.963458994708986, -0.611428020282206, 0.004305831128772339, 0.6803213183421262, -0.3186315035273263, 0.3272431657848194, 0.03444664902997575 },
            { -0.4499593529541453, 0.5942046957671894, 0.2863377700617133, 0.1033399470899479, -0.01722332451499247, 0.0, -0.3595368992504479, -0.1119516093474393, -0.01722332451499419, 0.0, 1.963458994708991, -3.95705880731921, 4.417782738095216, -2.568428268298045, 0.6803213183421712, 0.00430583112871826, -0.6114280202821557, 0.3272431657848281, -0.3186315035273353, 0.03444664902998548 },
            { 0.2023740630511466, -0.6480275848765376, -0.2863377700617191, -0.04951705798060248, 0.0710462136243367, 0.0, 0.1980682319224027, 0.1119516093474413, 0.07104621362433854, 0.0, -0.9386711860670178, 1.963458994708986, -2.568428268298045, 1.989293981481467, -0.4650297619047746, 0.04951705798062073, 0.5037822420634704, -0.2734202766754862, 0.2109857253086465, -0.1420924272486749 },
            { -0.2152915564373929, 0.1076457782186988, -0.6674038249558943, -0.3444664902998228, -0.516699735449719, 0.0, -2.820319389329806, 0.7319912918871081, -0.5166997354497175, 0.0, 0.5037822420635027, -0.611428020282206, 0.6803213183421712, -0.4650297619047746, 7.061563051146377, -6.329571759259239, 2.755731922398567, -1.808449074074045, 1.420924272486758, 1.033399470899439 },
            { -0.05382288910934493, -0.05382288910935334, 1.356336805555536, 0.3875248015872845, 0.04305831128747632, 0.0, 1.356336805555556, 0.3875248015873111, 0.04305831128748108, 0.0, 0.04951705798058824, 0.004305831128772339, 0.00430583112871826, 0.04951705798062073, -6.329571759259239, 9.946469907407371, -6.329571759259222, -0.3875248015873289, -0.3875248015872654, -0.08611662257495872 },
            { 0.1076457782186937, -0.2152915564373838, -2.820319389329778, 0.7319912918871258, -0.5166997354497245, 0.0, -0.6674038249559022, -0.3444664902998347, -0.5166997354497355, 0.0, -0.4650297619047516, 0.6803213183421262, -0.6114280202821557, 0.5037822420634704, 2.755731922398567, -6.329571759259222, 7.061563051146337, 1.4209242724868, -1.808449074074094, 1.03339947089946 },
            { -0.05382288910934242, 0.1076457782186959, -0.419818535052924, 1.033399470899478, 1.011870315255696, 0.0, 1.194868138227501, -3.810660548941788, 1.011870315255698, 0.0, 0.2109857253086299, -0.3186315035273263, 0.3272431657848281, -0.2734202766754862, -1.808449074074045, -0.3875248015873289, 1.4209242724868, 8.654720568783057, -5.877459490740744, -2.023740630511398 },
            { 0.1076457782186933, -0.05382288910934824, 1.194868138227512, -3.810660548941789, 1.01187031525573, 0.0, -0.4198185350529174, 1.033399470899479, 1.011870315255723, 0.0, -0.273420276675475, 0.3272431657848194, -0.3186315035273353, 0.2109857253086465, 1.420924272486758, -0.3875248015872654, -1.808449074074094, -5.877459490740744, 8.654720568783057, -2.023740630511452 },
            { 0.1076457782186885, 0.1076457782186912, -0.9903411596119739, 2.023740630511429, -3.961364638447926, 0.0, -0.9903411596119635, 2.023740630511414, -3.961364638447925, 0.0, -0.142092427248666, 0.03444664902997575, 0.03444664902998548, -0.1420924272486749, 1.033399470899439, -0.08611662257495872, 1.03339947089946, -2.023740630511398, -2.023740630511452, 7.922729276895855 } } };
    alignas(32) static const double PI1[1][20][20] =
        { { { 0.3424065806878321, -0.0409984016754857, -0.04081927910052867, -0.03797743055555574, -0.03797743055555576, -0.04081927910052824, -0.6480275848765444, 0.5942046957671953, -0.449959352954143, 0.2023740630511446, 0.2022879464285715, -0.01584545855379035, -0.06966834766314084, 0.04081927910052915, -0.2152915564373919, -0.05382288910934674, 0.107645778218695, -0.05382288910934544, 0.1076457782186945, 0.107645778218695 },
            { -0.04099840167548541, 0.04099840167548541, 0.850315531305109, -0.6100501543209882, 0.3802910052910072, -0.161554783950616, 0.0, 0.0, 0.0, 0.0, 0.1615547839506166, -0.3802910052910023, 0.6100501543209832, -0.85031553130511, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.04081927910052943, -0.1615547839506181, 1.280984760802456, 0.7965787588183341, -0.4822530864197525, 0.3293960813491964, 0.07104621362433484, 0.03014081790124817, 0.03014081790122604, 0.07104621362434677, 0.2691144455467279, -0.6630979938271514, 0.8654720568782975, -1.280984760802456, -0.2626556988535983, 0.5726755401234302, -1.662050815696619, -0.07319912918872562, 0.5726755401234642, -0.2626556988536097 },
            { -0.03797743055555507, 0.3802910052910112, -0.5296172288359792, 1.175491898148153, 0.6996975584215183, -0.4822530864197365, 0.1011870315255771, -0.1485511739418094, -0.06243455136682623, -0.2325148809523955, 0.1420924272486795, -0.1571628361992936, 0.1334807649911847, 0.5296172288359791, -0.4478064373897722, 0.8590133101851726, -1.308972663139336, 0.3746073082010674, -1.401548032407403, 0.4133597883597613 },
            { -0.03797743055555396, -0.6100501543209891, 0.2325148809523763, -0.3509252369929469, 1.17549189814814, 0.7965787588183226, 0.1420924272486651, -0.1571628361992731, 0.1334807649911673, 0.5296172288359887, 0.1011870315255672, -0.1485511739417988, -0.0624345513668443, -0.2325148809523804, -0.447806437389753, 0.3746073082010608, 0.4133597883597994, 0.859013310185147, -1.401548032407403, -1.308972663139294 },
            { -0.0408192791005302, 0.8503155313051132, -0.07104621362434423, 0.2325148809523975, -0.5296172288359888, 1.280984760802477, 0.2691144455467435, -0.663097993827175, 0.865472056878323, -1.280984760802475, 0.07104621362433901, 0.03014081790123628, 0.03014081790123644, 0.07104621362434209, -0.2626556988536138, -0.0731991291887141, -0.2626556988536253, 0.5726755401234425, 0.5726755401234477, -1.662050815696634 },
            { 0.2022879464285735, 0.1615547839506196, 0.07104621362432925, 0.1011870315255861, 0.1420924272486579, 0.2691144455467447, 0.708309220679011, -1.702956211419752, 1.300361000881831, -0.6695567405202867, 0.9946469907407355, -0.579134286816571, 0.3035610945767135, -0.07104621362433183, -1.158268573633146, 0.7836612654320918, -0.4047481261022987, 0.6221925981040308, -0.3466194058641784, -0.7276854607583612 },
            { -0.0158454585537939, -0.3802910052910105, 0.03014081790124984, -0.1485511739418225, -0.1571628361992613, -0.6630979938271712, -0.3767602237654262, 1.898871527777777, -2.503840801366846, 1.377865961199298, -0.5791342868165751, -0.03014081790123885, 0.04521122685185606, -0.03014081790124356, 2.040963955026447, -0.4714885085978809, 0.1033399470899529, -2.409112516534365, 0.6587921626983955, 1.610380842151659 },
            { -0.06966834766313747, 0.6100501543209893, 0.03014081790122596, -0.0624345513668188, 0.1334807649911548, 0.8654720568783199, 0.5855930335096942, -1.453218005952375, 2.518911210317458, -2.191668044532631, 0.3035610945767185, 0.04521122685185459, 0.1313278494268089, -0.03014081790123529, -0.9300595238095176, -0.3315489969135825, -0.06889329805997493, 2.413418347663112, 0.1528570050705623, -2.652391975308627 },
            { 0.04081927910053009, -0.8503155313051128, 0.07104621362434387, -0.2325148809523976, 0.5296172288359889, -1.280984760802477, -0.2691144455467434, 0.6630979938271744, -0.8654720568783221, 1.280984760802474, -0.07104621362433912, -0.03014081790123598, -0.03014081790123702, -0.07104621362434174, 0.2626556988536136, 0.07319912918871346, 0.2626556988536259, -0.572675540123441, -0.5726755401234475, 1.662050815696632 },
            { -0.648027584876546, 0.0, 0.2691144455467349, 0.1420924272486703, 0.101187031525573, 0.07104621362433396, 0.9946469907407434, -0.5791342868165796, 0.3035610945767197, -0.0710462136243358, 0.7083092206790091, -0.3767602237654306, 0.5855930335096978, -0.2691144455467371, -1.15826857363315, 0.6221925981040446, -0.7276854607583652, 0.7836612654320926, -0.3466194058641876, -0.4047481261022895 },
            { 0.5942046957671978, 0.0, -0.6630979938271497, -0.1571628361992822, -0.1485511739418003, 0.03014081790123665, -0.5791342868165794, -0.03014081790123437, 0.04521122685185074, -0.03014081790123599, -1.702956211419746, 1.898871527777767, -1.453218005952367, 0.6630979938271533, 2.040963955026441, -2.409112516534367, 1.610380842151644, -0.471488508597875, 0.6587921626984029, 0.1033399470899466 },
            { -0.4499593529541462, 0.0, 0.8654720568782874, 0.1334807649911786, -0.06243455136683971, 0.03014081790123287, 0.3035610945767202, 0.04521122685185174, 0.1313278494268081, -0.03014081790123303, 1.300361000881826, -2.503840801366827, 2.518911210317439, -0.8654720568782912, -0.9300595238095101, 2.413418347663113, -2.652391975308611, -0.3315489969135858, 0.1528570050705503, -0.068893298059966 },
            { 0.2023740630511476, 0.0, -1.280984760802453, 0.5296172288359768, -0.2325148809523849, 0.07104621362433985, -0.07104621362433974, -0.03014081790123427, -0.03014081790123613, -0.07104621362434019, -0.669556740520279, 1.377865961199283, -2.191668044532612, 1.280984760802456, 0.2626556988536088, -0.5726755401234375, 1.662050815696629, 0.07319912918871276, -0.5726755401234592, 0.2626556988536207 },
            { -0.2152915564373939, 0.0, -0.2626556988536006, -0.4478064373897698, -0.4478064373897505, -0.2626556988536055, -1.15826857363315, 2.040963955026443, -0.93005952380951, 0.2626556988536103, -1.158268573633145, 2.040963955026433, -0.9300595238095057, 0.2626556988535992, 3.100198412698382, -3.057140101410902, 1.377865961199276, -3.057140101410891, 1.463982583774223, 1.377865961199258 },
            { -0.05382288910934455, 0.0, 0.572675540123444, 0.8590133101851563, 0.3746073082010593, -0.07319912918871797, 0.7836612654320956, -0.4714885085978815, -0.3315489969135813, 0.07319912918870969, 0.6221925981040444, -2.409112516534361, 2.413418347663109, -0.5726755401234395, -3.057140101410902, 4.973234953703658, -3.272431657848278, 2.551204943783042, -2.938729745370346, -0.0430583112874708 },
            { 0.1076457782186948, 0.0, -1.662050815696628, -1.308972663139306, 0.4133597883597862, -0.2626556988536189, -0.4047481261022928, 0.1033399470899447, -0.06889329805996754, 0.2626556988536203, -0.7276854607583642, 1.610380842151651, -2.652391975308616, 1.662050815696628, 1.377865961199268, -3.272431657848274, 3.961364638447919, -0.0430583112874591, 1.248691027336833, -0.3444664902998151 },
            { -0.05382288910934095, 0.0, -0.07319912918872977, 0.3746073082010759, 0.8590133101851517, 0.5726755401234469, 0.6221925981040356, -2.409112516534375, 2.413418347663131, -0.5726755401234506, 0.7836612654320947, -0.4714885085978802, -0.3315489969135897, 0.07319912918871979, -3.057140101410908, 2.551204943783067, -0.04305831128747162, 4.973234953703647, -2.938729745370344, -3.272431657848282 },
            { 0.1076457782186897, 0.0, 0.5726755401234602, -1.401548032407407, -1.401548032407407, 0.5726755401234613, -0.3466194058641859, 0.6587921626984062, 0.1528570050705428, -0.5726755401234526, -0.3466194058641977, 0.6587921626984115, 0.15285700507055, -0.5726755401234565, 1.463982583774231, -2.938729745370356, 1.248691027336854, -2.938729745370348, 3.68148561507935, 1.248691027336859 },
            { 0.1076457782186915, 0.0, -0.2626556988536021, 0.4133597883597656, -1.308972663139296, -1.662050815696643, -0.7276854607583602, 1.610380842151649, -2.652391975308626, 1.662050815696643, -0.4047481261022869, 0.103339947089946, -0.06889329805996486, 0.2626556988536156, 1.377865961199273, -0.04305831128748144, -0.3444664902998241, -3.272431657848262, 1.248691027336843, 3.961364638447924 } } };
    alignas(32) static const double PI2[1][20][20] =
        { { { 0.3424065806878325, -0.04099840167548547, -0.04081927910053077, -0.03797743055555346, -0.03797743055555733, -0.04081927910052806, -0.6480275848765445, 0.5942046957671953, -0.4499593529541437, 0.2023740630511447, 0.2022879464285718, -0.01584545855379071, -0.06966834766314178, 0.04081927910053124, -0.2152915564373917, -0.05382288910934432, 0.1076457782186936, -0.05382288910934614, 0.107645778218694, 0.1076457782186951 },
            { -0.04099840167548547, 0.3424065806878282, 0.04081927910052779, -0.06966834766313419, -0.01584545855379255, 0.2022879464285712, 0.2023740630511476, -0.4499593529541469, 0.5942046957671977, -0.6480275848765418, -0.04081927910052952, -0.03797743055555607, -0.03797743055555539, -0.04081927910052868, 0.1076457782186964, 0.1076457782186966, 0.1076457782186927, -0.05382288910935369, -0.05382288910935388, -0.2152915564373811 },
            { -0.04081927910053077, 0.04081927910052779, 2.561969521604921, -1.395089285714293, 0.8956128747795425, -0.3401606591710848, 0.0, 0.0, 0.0, 0.0, 0.3401606591710661, -0.8956128747795324, 1.395089285714274, -2.561969521604923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.03797743055555346, -0.06966834766313419, -1.395089285714293, 3.694403108465611, -1.804143242945327, 0.8181079144620942, 0.07104621362433979, -0.01722332451499985, -0.01722332451497442, 0.07104621362432532, 0.1722332451499128, -0.2195973875661306, 0.2669615299823592, 1.395089285714294, -0.5166997354497447, 1.011870315255713, -3.961364638447966, 0.04305831128749717, 1.011870315255736, -0.5166997354497584 },
            { -0.03797743055555733, -0.01584545855379255, 0.8956128747795425, -1.804143242945327, 3.074363425925922, -0.9063774526014255, 0.1119516093474359, -0.1119516093474244, 0.1033399470899326, -0.04951705798058993, 0.131327849426798, -0.2971023478836018, -0.2195973875661318, -0.8956128747795455, -0.344466490299794, 1.033399470899473, 2.023740630511464, 0.3875248015872604, -3.810660548941793, 0.7319912918871493 },
            { -0.04081927910052806, 0.2022879464285712, -0.3401606591710848, 0.8181079144620942, -0.9063774526014255, 1.989293981481485, 0.1980682319223996, -0.3595368992504486, 0.2863377700617424, -0.2863377700617358, 0.1420924272486807, 0.1313278494268139, 0.1722332451499127, 0.340160659171082, -0.6674038249559114, -0.4198185350529152, -0.9903411596119981, 1.356336805555545, 1.194868138227512, -2.820319389329792 },
            { -0.6480275848765445, 0.2023740630511476, 0.0, 0.07104621362433979, 0.1119516093474359, 0.1980682319223996, 1.989293981481481, -2.568428268298054, 1.963458994708988, -0.9386711860670166, -0.2863377700617261, -0.04951705798059621, 0.07104621362434396, 0.0, 0.5037822420634938, 0.2109857253086308, -0.1420924272486809, 0.04951705798058935, -0.2734202766754738, -0.4650297619047558 },
            { 0.5942046957671953, -0.4499593529541469, 0.0, -0.01722332451499985, -0.1119516093474244, -0.3595368992504486, -2.568428268298054, 4.417782738095228, -3.957058807319215, 1.963458994708994, 0.2863377700617228, 0.1033399470899379, -0.01722332451499655, 0.0, -0.6114280202821826, -0.3186315035273289, 0.03444664902998829, 0.004305831128759791, 0.3272431657848249, 0.6803213183421429 },
            { -0.4499593529541437, 0.5942046957671977, 0.0, -0.01722332451497442, 0.1033399470899326, 0.2863377700617424, 1.963458994708988, -3.957058807319215, 4.417782738095235, -2.568428268298061, -0.359536899250434, -0.1119516093474377, -0.01722332451498506, 0.0, 0.6803213183421434, 0.3272431657848331, 0.03444664902997267, 0.004305831128740834, -0.3186315035273408, -0.6114280202821868 },
            { 0.2023740630511447, -0.6480275848765418, 0.0, 0.07104621362432532, -0.04951705798058993, -0.2863377700617358, -0.9386711860670166, 1.963458994708994, -2.568428268298061, 1.989293981481483, 0.1980682319223925, 0.1119516093474405, 0.07104621362433484, 0.0, -0.4650297619047584, -0.2734202766754892, -0.1420924272486696, 0.0495170579806089, 0.2109857253086494, 0.503782242063487 },
            { 0.2022879464285718, -0.04081927910052952, 0.3401606591710661, 0.1722332451499128, 0.131327849426798, 0.1420924272486807, -0.2863377700617261, 0.2863377700617228, -0.359536899250434, 0.1980682319223925, 1.989293981481477, -0.9063774526013982, 0.8181079144620739, -0.3401606591710691, -2.820319389329798, 1.194868138227495, -0.9903411596119859, 1.356336805555544, -0.4198185350528919, -0.6674038249559043 },
            { -0.01584545855379071, -0.03797743055555607, -0.8956128747795324, -0.2195973875661306, -0.2971023478836018, 0.1313278494268139, -0.04951705798059621, 0.1033399470899379, -0.1119516093474377, 0.1119516093474405, -0.9063774526013982, 3.074363425925913, -1.804143242945306, 0.895612874779533, 0.7319912918870995, -3.810660548941776, 2.02374063051143, 0.3875248015873195, 1.033399470899474, -0.3444664902998315 },
            { -0.06966834766314178, -0.03797743055555539, 1.395089285714274, 0.2669615299823592, -0.2195973875661318, 0.1722332451499127, 0.07104621362434396, -0.01722332451499655, -0.01722332451498506, 0.07104621362433484, 0.8181079144620739, -1.804143242945306, 3.694403108465586, -1.395089285714277, -0.5166997354497216, 1.011870315255694, -3.961364638447944, 0.04305831128747176, 1.011870315255748, -0.5166997354497401 },
            { 0.04081927910053124, -0.04081927910052868, -2.561969521604923, 1.395089285714294, -0.8956128747795455, 0.340160659171082, 0.0, 0.0, 0.0, 0.0, -0.3401606591710691, 0.895612874779533, -1.395089285714277, 2.561969521604925, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.2152915564373917, 0.1076457782186964, 0.0, -0.5166997354497447, -0.344466490299794, -0.6674038249559114, 0.5037822420634938, -0.6114280202821826, 0.6803213183421434, -0.4650297619047584, -2.820319389329798, 0.7319912918870995, -0.5166997354497216, 0.0, 7.061563051146369, -1.808449074074032, 1.033399470899462, -6.329571759259229, 1.42092427248673, 2.755731922398572 },
            { -0.05382288910934432, 0.1076457782186966, 0.0, 1.011870315255713, 1.033399470899473, -0.4198185350529152, 0.2109857253086308, -0.3186315035273289, 0.3272431657848331, -0.2734202766754892, 1.194868138227495, -3.810660548941776, 1.011870315255694, 0.0, -1.808449074074032, 8.654720568783048, -2.02374063051141, -0.3875248015873388, -5.877459490740745, 1.420924272486786 },
            { 0.1076457782186936, 0.1076457782186927, 0.0, -3.961364638447966, 2.023740630511464, -0.9903411596119981, -0.1420924272486809, 0.03444664902998829, 0.03444664902997267, -0.1420924272486696, -0.9903411596119859, 2.02374063051143, -3.961364638447944, 0.0, 1.033399470899462, -2.02374063051141, 7.922729276895906, -0.08611662257495575, -2.023740630511479, 1.03339947089948 },
            { -0.05382288910934614, -0.05382288910935369, 0.0, 0.04305831128749717, 0.3875248015872604, 1.356336805555545, 0.04951705798058935, 0.004305831128759791, 0.004305831128740834, 0.0495170579806089, 1.356336805555544, 0.3875248015873195, 0.04305831128747176, 0.0, -6.329571759259229, -0.3875248015873388, -0.08611662257495575, 9.946469907407357, -0.3875248015872482, -6.329571759259215 },
            { 0.107645778218694, -0.05382288910935388, 0.0, 1.011870315255736, -3.810660548941793, 1.194868138227512, -0.2734202766754738, 0.3272431657848249, -0.3186315035273408, 0.2109857253086494, -0.4198185350528919, 1.033399470899474, 1.011870315255748, 0.0, 1.42092427248673, -5.877459490740745, -2.023740630511479, -0.3875248015872482, 8.654720568783047, -1.808449074074088 },
            { 0.1076457782186951, -0.2152915564373811, 0.0, -0.5166997354497584, 0.7319912918871493, -2.820319389329792, -0.4650297619047558, 0.6803213183421429, -0.6114280202821868, 0.503782242063487, -0.6674038249559043, -0.3444664902998315, -0.5166997354497401, 0.0, 2.755731922398572, 1.420924272486786, 1.03339947089948, -6.329571759259215, -1.808449074074088, 7.061563051146332 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q25[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q25[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q25[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q25[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q25[0][0][1];
    alignas(32) double sp[20];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = sp[3] * sp[3];
    sp[6] = sp[3] * sp[4];
    sp[7] = sp[4] * sp[4];
    sp[8] = J_c3 / sp[2];
    sp[9] = -1 * J_c2 / sp[2];
    sp[10] = sp[9] * sp[9];
    sp[11] = sp[8] * sp[9];
    sp[12] = sp[8] * sp[8];
    sp[13] = sp[5] + sp[10];
    sp[14] = sp[6] + sp[11];
    sp[15] = sp[12] + sp[7];
    sp[16] = std::abs(sp[2]);
    sp[17] = sp[13] * sp[16];
    sp[18] = sp[14] * sp[16];
    sp[19] = sp[15] * sp[16];
    A[0] = sp[19] * PI0[0][0][0] + sp[18] * PI1[0][0][0] + sp[18] * PI1[0][0][0] + sp[17] * PI2[0][0][0];
    A[1] = sp[19] * PI0[0][0][1] + sp[18] * PI1[0][1][0];
    A[2] = sp[18] * PI1[0][0][1] + sp[17] * PI2[0][0][1];
    A[3] = sp[19] * PI0[0][0][2] + sp[18] * PI1[0][0][2] + sp[18] * PI1[0][2][0] + sp[17] * PI2[0][0][2];
    A[4] = sp[19] * PI0[0][0][3] + sp[18] * PI1[0][0][3] + sp[18] * PI1[0][3][0] + sp[17] * PI2[0][0][3];
    A[5] = sp[19] * PI0[0][0][4] + sp[18] * PI1[0][0][4] + sp[18] * PI1[0][4][0] + sp[17] * PI2[0][0][4];
    A[6] = sp[19] * PI0[0][0][5] + sp[18] * PI1[0][0][5] + sp[18] * PI1[0][5][0] + sp[17] * PI2[0][0][5];
    A[7] = sp[19] * PI0[0][0][6] + sp[18] * PI1[0][0][6] + sp[18] * PI1[0][6][0] + sp[17] * PI2[0][0][6];
    A[8] = sp[19] * PI0[0][0][7] + sp[18] * PI1[0][0][7] + sp[18] * PI1[0][7][0] + sp[17] * PI2[0][0][7];
    A[9] = sp[19] * PI0[0][0][8] + sp[18] * PI1[0][0][8] + sp[18] * PI1[0][8][0] + sp[17] * PI2[0][0][8];
    A[10] = sp[19] * PI0[0][0][9] + sp[18] * PI1[0][0][9] + sp[18] * PI1[0][9][0] + sp[17] * PI2[0][0][9];
    A[11] = sp[19] * PI0[0][0][10] + sp[18] * PI1[0][0][10] + sp[18] * PI1[0][10][0] + sp[17] * PI2[0][0][10];
    A[12] = sp[19] * PI0[0][0][11] + sp[18] * PI1[0][0][11] + sp[18] * PI1[0][11][0] + sp[17] * PI2[0][0][11];
    A[13] = sp[19] * PI0[0][0][12] + sp[18] * PI1[0][0][12] + sp[18] * PI1[0][12][0] + sp[17] * PI2[0][0][12];
    A[14] = sp[19] * PI0[0][0][13] + sp[18] * PI1[0][0][13] + sp[18] * PI1[0][13][0] + sp[17] * PI2[0][0][13];
    A[15] = sp[19] * PI0[0][0][14] + sp[18] * PI1[0][0][14] + sp[18] * PI1[0][14][0] + sp[17] * PI2[0][0][14];
    A[16] = sp[19] * PI0[0][0][15] + sp[18] * PI1[0][0][15] + sp[18] * PI1[0][15][0] + sp[17] * PI2[0][0][15];
    A[17] = sp[19] * PI0[0][0][16] + sp[18] * PI1[0][0][16] + sp[18] * PI1[0][16][0] + sp[17] * PI2[0][0][16];
    A[18] = sp[19] * PI0[0][0][17] + sp[18] * PI1[0][0][17] + sp[18] * PI1[0][17][0] + sp[17] * PI2[0][0][17];
    A[19] = sp[19] * PI0[0][0][18] + sp[18] * PI1[0][0][18] + sp[18] * PI1[0][18][0] + sp[17] * PI2[0][0][18];
    A[20] = sp[19] * PI0[0][0][19] + sp[18] * PI1[0][0][19] + sp[18] * PI1[0][19][0] + sp[17] * PI2[0][0][19];
    A[21] = sp[19] * PI0[0][1][0] + sp[18] * PI1[0][1][0];
    A[22] = sp[19] * PI0[0][1][1];
    A[23] = sp[18] * PI1[0][1][1];
    A[24] = sp[19] * PI0[0][1][2] + sp[18] * PI1[0][1][2];
    A[25] = sp[19] * PI0[0][1][3] + sp[18] * PI1[0][1][3];
    A[26] = sp[19] * PI0[0][1][4] + sp[18] * PI1[0][1][4];
    A[27] = sp[19] * PI0[0][1][5] + sp[18] * PI1[0][1][5];
    A[28] = sp[19] * PI0[0][1][6] + sp[18] * PI1[0][1][6];
    A[29] = sp[19] * PI0[0][1][7] + sp[18] * PI1[0][1][7];
    A[30] = sp[19] * PI0[0][1][8] + sp[18] * PI1[0][1][8];
    A[31] = sp[19] * PI0[0][1][9] + sp[18] * PI1[0][1][9];
    A[32] = sp[19] * PI0[0][1][10] + sp[18] * PI1[0][1][10];
    A[33] = sp[19] * PI0[0][1][11] + sp[18] * PI1[0][1][11];
    A[34] = sp[19] * PI0[0][1][12] + sp[18] * PI1[0][1][12];
    A[35] = sp[19] * PI0[0][1][13] + sp[18] * PI1[0][1][13];
    A[36] = sp[19] * PI0[0][1][14] + sp[18] * PI1[0][1][14];
    A[37] = sp[19] * PI0[0][1][15] + sp[18] * PI1[0][1][15];
    A[38] = sp[19] * PI0[0][1][16] + sp[18] * PI1[0][1][16];
    A[39] = sp[19] * PI0[0][1][17] + sp[18] * PI1[0][1][17];
    A[40] = sp[19] * PI0[0][1][18] + sp[18] * PI1[0][1][18];
    A[41] = sp[19] * PI0[0][1][19] + sp[18] * PI1[0][1][19];
    A[42] = sp[18] * PI1[0][0][1] + sp[17] * PI2[0][1][0];
    A[43] = sp[18] * PI1[0][1][1];
    A[44] = sp[17] * PI2[0][1][1];
    A[45] = sp[18] * PI1[0][2][1] + sp[17] * PI2[0][1][2];
    A[46] = sp[18] * PI1[0][3][1] + sp[17] * PI2[0][1][3];
    A[47] = sp[18] * PI1[0][4][1] + sp[17] * PI2[0][1][4];
    A[48] = sp[18] * PI1[0][5][1] + sp[17] * PI2[0][1][5];
    A[49] = sp[18] * PI1[0][6][1] + sp[17] * PI2[0][1][6];
    A[50] = sp[18] * PI1[0][7][1] + sp[17] * PI2[0][1][7];
    A[51] = sp[18] * PI1[0][8][1] + sp[17] * PI2[0][1][8];
    A[52] = sp[18] * PI1[0][9][1] + sp[17] * PI2[0][1][9];
    A[53] = sp[18] * PI1[0][10][1] + sp[17] * PI2[0][1][10];
    A[54] = sp[18] * PI1[0][11][1] + sp[17] * PI2[0][1][11];
    A[55] = sp[18] * PI1[0][12][1] + sp[17] * PI2[0][1][12];
    A[56] = sp[18] * PI1[0][13][1] + sp[17] * PI2[0][1][13];
    A[57] = sp[18] * PI1[0][14][1] + sp[17] * PI2[0][1][14];
    A[58] = sp[18] * PI1[0][15][1] + sp[17] * PI2[0][1][15];
    A[59] = sp[18] * PI1[0][16][1] + sp[17] * PI2[0][1][16];
    A[60] = sp[18] * PI1[0][17][1] + sp[17] * PI2[0][1][17];
    A[61] = sp[18] * PI1[0][18][1] + sp[17] * PI2[0][1][18];
    A[62] = sp[18] * PI1[0][19][1] + sp[17] * PI2[0][1][19];
    A[63] = sp[19] * PI0[0][2][0] + sp[18] * PI1[0][2][0] + sp[18] * PI1[0][0][2] + sp[17] * PI2[0][2][0];
    A[64] = sp[19] * PI0[0][2][1] + sp[18] * PI1[0][1][2];
    A[65] = sp[18] * PI1[0][2][1] + sp[17] * PI2[0][2][1];
    A[66] = sp[19] * PI0[0][2][2] + sp[18] * PI1[0][2][2] + sp[18] * PI1[0][2][2] + sp[17] * PI2[0][2][2];
    A[67] = sp[19] * PI0[0][2][3] + sp[18] * PI1[0][2][3] + sp[18] * PI1[0][3][2] + sp[17] * PI2[0][2][3];
    A[68] = sp[19] * PI0[0][2][4] + sp[18] * PI1[0][2][4] + sp[18] * PI1[0][4][2] + sp[17] * PI2[0][2][4];
    A[69] = sp[19] * PI0[0][2][5] + sp[18] * PI1[0][2][5] + sp[18] * PI1[0][5][2] + sp[17] * PI2[0][2][5];
    A[70] = sp[19] * PI0[0][2][6] + sp[18] * PI1[0][2][6] + sp[18] * PI1[0][6][2] + sp[17] * PI2[0][2][6];
    A[71] = sp[19] * PI0[0][2][7] + sp[18] * PI1[0][2][7] + sp[18] * PI1[0][7][2] + sp[17] * PI2[0][2][7];
    A[72] = sp[19] * PI0[0][2][8] + sp[18] * PI1[0][2][8] + sp[18] * PI1[0][8][2] + sp[17] * PI2[0][2][8];
    A[73] = sp[19] * PI0[0][2][9] + sp[18] * PI1[0][2][9] + sp[18] * PI1[0][9][2] + sp[17] * PI2[0][2][9];
    A[74] = sp[19] * PI0[0][2][10] + sp[18] * PI1[0][2][10] + sp[18] * PI1[0][10][2] + sp[17] * PI2[0][2][10];
    A[75] = sp[19] * PI0[0][2][11] + sp[18] * PI1[0][2][11] + sp[18] * PI1[0][11][2] + sp[17] * PI2[0][2][11];
    A[76] = sp[19] * PI0[0][2][12] + sp[18] * PI1[0][2][12] + sp[18] * PI1[0][12][2] + sp[17] * PI2[0][2][12];
    A[77] = sp[19] * PI0[0][2][13] + sp[18] * PI1[0][2][13] + sp[18] * PI1[0][13][2] + sp[17] * PI2[0][2][13];
    A[78] = sp[19] * PI0[0][2][14] + sp[18] * PI1[0][2][14] + sp[18] * PI1[0][14][2] + sp[17] * PI2[0][2][14];
    A[79] = sp[19] * PI0[0][2][15] + sp[18] * PI1[0][2][15] + sp[18] * PI1[0][15][2] + sp[17] * PI2[0][2][15];
    A[80] = sp[19] * PI0[0][2][16] + sp[18] * PI1[0][2][16] + sp[18] * PI1[0][16][2] + sp[17] * PI2[0][2][16];
    A[81] = sp[19] * PI0[0][2][17] + sp[18] * PI1[0][2][17] + sp[18] * PI1[0][17][2] + sp[17] * PI2[0][2][17];
    A[82] = sp[19] * PI0[0][2][18] + sp[18] * PI1[0][2][18] + sp[18] * PI1[0][18][2] + sp[17] * PI2[0][2][18];
    A[83] = sp[19] * PI0[0][2][19] + sp[18] * PI1[0][2][19] + sp[18] * PI1[0][19][2] + sp[17] * PI2[0][2][19];
    A[84] = sp[19] * PI0[0][3][0] + sp[18] * PI1[0][3][0] + sp[18] * PI1[0][0][3] + sp[17] * PI2[0][3][0];
    A[85] = sp[19] * PI0[0][3][1] + sp[18] * PI1[0][1][3];
    A[86] = sp[18] * PI1[0][3][1] + sp[17] * PI2[0][3][1];
    A[87] = sp[19] * PI0[0][3][2] + sp[18] * PI1[0][3][2] + sp[18] * PI1[0][2][3] + sp[17] * PI2[0][3][2];
    A[88] = sp[19] * PI0[0][3][3] + sp[18] * PI1[0][3][3] + sp[18] * PI1[0][3][3] + sp[17] * PI2[0][3][3];
    A[89] = sp[19] * PI0[0][3][4] + sp[18] * PI1[0][3][4] + sp[18] * PI1[0][4][3] + sp[17] * PI2[0][3][4];
    A[90] = sp[19] * PI0[0][3][5] + sp[18] * PI1[0][3][5] + sp[18] * PI1[0][5][3] + sp[17] * PI2[0][3][5];
    A[91] = sp[19] * PI0[0][3][6] + sp[18] * PI1[0][3][6] + sp[18] * PI1[0][6][3] + sp[17] * PI2[0][3][6];
    A[92] = sp[19] * PI0[0][3][7] + sp[18] * PI1[0][3][7] + sp[18] * PI1[0][7][3] + sp[17] * PI2[0][3][7];
    A[93] = sp[19] * PI0[0][3][8] + sp[18] * PI1[0][3][8] + sp[18] * PI1[0][8][3] + sp[17] * PI2[0][3][8];
    A[94] = sp[19] * PI0[0][3][9] + sp[18] * PI1[0][3][9] + sp[18] * PI1[0][9][3] + sp[17] * PI2[0][3][9];
    A[95] = sp[19] * PI0[0][3][10] + sp[18] * PI1[0][3][10] + sp[18] * PI1[0][10][3] + sp[17] * PI2[0][3][10];
    A[96] = sp[19] * PI0[0][3][11] + sp[18] * PI1[0][3][11] + sp[18] * PI1[0][11][3] + sp[17] * PI2[0][3][11];
    A[97] = sp[19] * PI0[0][3][12] + sp[18] * PI1[0][3][12] + sp[18] * PI1[0][12][3] + sp[17] * PI2[0][3][12];
    A[98] = sp[19] * PI0[0][3][13] + sp[18] * PI1[0][3][13] + sp[18] * PI1[0][13][3] + sp[17] * PI2[0][3][13];
    A[99] = sp[19] * PI0[0][3][14] + sp[18] * PI1[0][3][14] + sp[18] * PI1[0][14][3] + sp[17] * PI2[0][3][14];
    A[100] = sp[19] * PI0[0][3][15] + sp[18] * PI1[0][3][15] + sp[18] * PI1[0][15][3] + sp[17] * PI2[0][3][15];
    A[101] = sp[19] * PI0[0][3][16] + sp[18] * PI1[0][3][16] + sp[18] * PI1[0][16][3] + sp[17] * PI2[0][3][16];
    A[102] = sp[19] * PI0[0][3][17] + sp[18] * PI1[0][3][17] + sp[18] * PI1[0][17][3] + sp[17] * PI2[0][3][17];
    A[103] = sp[19] * PI0[0][3][18] + sp[18] * PI1[0][3][18] + sp[18] * PI1[0][18][3] + sp[17] * PI2[0][3][18];
    A[104] = sp[19] * PI0[0][3][19] + sp[18] * PI1[0][3][19] + sp[18] * PI1[0][19][3] + sp[17] * PI2[0][3][19];
    A[105] = sp[19] * PI0[0][4][0] + sp[18] * PI1[0][4][0] + sp[18] * PI1[0][0][4] + sp[17] * PI2[0][4][0];
    A[106] = sp[19] * PI0[0][4][1] + sp[18] * PI1[0][1][4];
    A[107] = sp[18] * PI1[0][4][1] + sp[17] * PI2[0][4][1];
    A[108] = sp[19] * PI0[0][4][2] + sp[18] * PI1[0][4][2] + sp[18] * PI1[0][2][4] + sp[17] * PI2[0][4][2];
    A[109] = sp[19] * PI0[0][4][3] + sp[18] * PI1[0][4][3] + sp[18] * PI1[0][3][4] + sp[17] * PI2[0][4][3];
    A[110] = sp[19] * PI0[0][4][4] + sp[18] * PI1[0][4][4] + sp[18] * PI1[0][4][4] + sp[17] * PI2[0][4][4];
    A[111] = sp[19] * PI0[0][4][5] + sp[18] * PI1[0][4][5] + sp[18] * PI1[0][5][4] + sp[17] * PI2[0][4][5];
    A[112] = sp[19] * PI0[0][4][6] + sp[18] * PI1[0][4][6] + sp[18] * PI1[0][6][4] + sp[17] * PI2[0][4][6];
    A[113] = sp[19] * PI0[0][4][7] + sp[18] * PI1[0][4][7] + sp[18] * PI1[0][7][4] + sp[17] * PI2[0][4][7];
    A[114] = sp[19] * PI0[0][4][8] + sp[18] * PI1[0][4][8] + sp[18] * PI1[0][8][4] + sp[17] * PI2[0][4][8];
    A[115] = sp[19] * PI0[0][4][9] + sp[18] * PI1[0][4][9] + sp[18] * PI1[0][9][4] + sp[17] * PI2[0][4][9];
    A[116] = sp[19] * PI0[0][4][10] + sp[18] * PI1[0][4][10] + sp[18] * PI1[0][10][4] + sp[17] * PI2[0][4][10];
    A[117] = sp[19] * PI0[0][4][11] + sp[18] * PI1[0][4][11] + sp[18] * PI1[0][11][4] + sp[17] * PI2[0][4][11];
    A[118] = sp[19] * PI0[0][4][12] + sp[18] * PI1[0][4][12] + sp[18] * PI1[0][12][4] + sp[17] * PI2[0][4][12];
    A[119] = sp[19] * PI0[0][4][13] + sp[18] * PI1[0][4][13] + sp[18] * PI1[0][13][4] + sp[17] * PI2[0][4][13];
    A[120] = sp[19] * PI0[0][4][14] + sp[18] * PI1[0][4][14] + sp[18] * PI1[0][14][4] + sp[17] * PI2[0][4][14];
    A[121] = sp[19] * PI0[0][4][15] + sp[18] * PI1[0][4][15] + sp[18] * PI1[0][15][4] + sp[17] * PI2[0][4][15];
    A[122] = sp[19] * PI0[0][4][16] + sp[18] * PI1[0][4][16] + sp[18] * PI1[0][16][4] + sp[17] * PI2[0][4][16];
    A[123] = sp[19] * PI0[0][4][17] + sp[18] * PI1[0][4][17] + sp[18] * PI1[0][17][4] + sp[17] * PI2[0][4][17];
    A[124] = sp[19] * PI0[0][4][18] + sp[18] * PI1[0][4][18] + sp[18] * PI1[0][18][4] + sp[17] * PI2[0][4][18];
    A[125] = sp[19] * PI0[0][4][19] + sp[18] * PI1[0][4][19] + sp[18] * PI1[0][19][4] + sp[17] * PI2[0][4][19];
    A[126] = sp[19] * PI0[0][5][0] + sp[18] * PI1[0][5][0] + sp[18] * PI1[0][0][5] + sp[17] * PI2[0][5][0];
    A[127] = sp[19] * PI0[0][5][1] + sp[18] * PI1[0][1][5];
    A[128] = sp[18] * PI1[0][5][1] + sp[17] * PI2[0][5][1];
    A[129] = sp[19] * PI0[0][5][2] + sp[18] * PI1[0][5][2] + sp[18] * PI1[0][2][5] + sp[17] * PI2[0][5][2];
    A[130] = sp[19] * PI0[0][5][3] + sp[18] * PI1[0][5][3] + sp[18] * PI1[0][3][5] + sp[17] * PI2[0][5][3];
    A[131] = sp[19] * PI0[0][5][4] + sp[18] * PI1[0][5][4] + sp[18] * PI1[0][4][5] + sp[17] * PI2[0][5][4];
    A[132] = sp[19] * PI0[0][5][5] + sp[18] * PI1[0][5][5] + sp[18] * PI1[0][5][5] + sp[17] * PI2[0][5][5];
    A[133] = sp[19] * PI0[0][5][6] + sp[18] * PI1[0][5][6] + sp[18] * PI1[0][6][5] + sp[17] * PI2[0][5][6];
    A[134] = sp[19] * PI0[0][5][7] + sp[18] * PI1[0][5][7] + sp[18] * PI1[0][7][5] + sp[17] * PI2[0][5][7];
    A[135] = sp[19] * PI0[0][5][8] + sp[18] * PI1[0][5][8] + sp[18] * PI1[0][8][5] + sp[17] * PI2[0][5][8];
    A[136] = sp[19] * PI0[0][5][9] + sp[18] * PI1[0][5][9] + sp[18] * PI1[0][9][5] + sp[17] * PI2[0][5][9];
    A[137] = sp[19] * PI0[0][5][10] + sp[18] * PI1[0][5][10] + sp[18] * PI1[0][10][5] + sp[17] * PI2[0][5][10];
    A[138] = sp[19] * PI0[0][5][11] + sp[18] * PI1[0][5][11] + sp[18] * PI1[0][11][5] + sp[17] * PI2[0][5][11];
    A[139] = sp[19] * PI0[0][5][12] + sp[18] * PI1[0][5][12] + sp[18] * PI1[0][12][5] + sp[17] * PI2[0][5][12];
    A[140] = sp[19] * PI0[0][5][13] + sp[18] * PI1[0][5][13] + sp[18] * PI1[0][13][5] + sp[17] * PI2[0][5][13];
    A[141] = sp[19] * PI0[0][5][14] + sp[18] * PI1[0][5][14] + sp[18] * PI1[0][14][5] + sp[17] * PI2[0][5][14];
    A[142] = sp[19] * PI0[0][5][15] + sp[18] * PI1[0][5][15] + sp[18] * PI1[0][15][5] + sp[17] * PI2[0][5][15];
    A[143] = sp[19] * PI0[0][5][16] + sp[18] * PI1[0][5][16] + sp[18] * PI1[0][16][5] + sp[17] * PI2[0][5][16];
    A[144] = sp[19] * PI0[0][5][17] + sp[18] * PI1[0][5][17] + sp[18] * PI1[0][17][5] + sp[17] * PI2[0][5][17];
    A[145] = sp[19] * PI0[0][5][18] + sp[18] * PI1[0][5][18] + sp[18] * PI1[0][18][5] + sp[17] * PI2[0][5][18];
    A[146] = sp[19] * PI0[0][5][19] + sp[18] * PI1[0][5][19] + sp[18] * PI1[0][19][5] + sp[17] * PI2[0][5][19];
    A[147] = sp[19] * PI0[0][6][0] + sp[18] * PI1[0][6][0] + sp[18] * PI1[0][0][6] + sp[17] * PI2[0][6][0];
    A[148] = sp[19] * PI0[0][6][1] + sp[18] * PI1[0][1][6];
    A[149] = sp[18] * PI1[0][6][1] + sp[17] * PI2[0][6][1];
    A[150] = sp[19] * PI0[0][6][2] + sp[18] * PI1[0][6][2] + sp[18] * PI1[0][2][6] + sp[17] * PI2[0][6][2];
    A[151] = sp[19] * PI0[0][6][3] + sp[18] * PI1[0][6][3] + sp[18] * PI1[0][3][6] + sp[17] * PI2[0][6][3];
    A[152] = sp[19] * PI0[0][6][4] + sp[18] * PI1[0][6][4] + sp[18] * PI1[0][4][6] + sp[17] * PI2[0][6][4];
    A[153] = sp[19] * PI0[0][6][5] + sp[18] * PI1[0][6][5] + sp[18] * PI1[0][5][6] + sp[17] * PI2[0][6][5];
    A[154] = sp[19] * PI0[0][6][6] + sp[18] * PI1[0][6][6] + sp[18] * PI1[0][6][6] + sp[17] * PI2[0][6][6];
    A[155] = sp[19] * PI0[0][6][7] + sp[18] * PI1[0][6][7] + sp[18] * PI1[0][7][6] + sp[17] * PI2[0][6][7];
    A[156] = sp[19] * PI0[0][6][8] + sp[18] * PI1[0][6][8] + sp[18] * PI1[0][8][6] + sp[17] * PI2[0][6][8];
    A[157] = sp[19] * PI0[0][6][9] + sp[18] * PI1[0][6][9] + sp[18] * PI1[0][9][6] + sp[17] * PI2[0][6][9];
    A[158] = sp[19] * PI0[0][6][10] + sp[18] * PI1[0][6][10] + sp[18] * PI1[0][10][6] + sp[17] * PI2[0][6][10];
    A[159] = sp[19] * PI0[0][6][11] + sp[18] * PI1[0][6][11] + sp[18] * PI1[0][11][6] + sp[17] * PI2[0][6][11];
    A[160] = sp[19] * PI0[0][6][12] + sp[18] * PI1[0][6][12] + sp[18] * PI1[0][12][6] + sp[17] * PI2[0][6][12];
    A[161] = sp[19] * PI0[0][6][13] + sp[18] * PI1[0][6][13] + sp[18] * PI1[0][13][6] + sp[17] * PI2[0][6][13];
    A[162] = sp[19] * PI0[0][6][14] + sp[18] * PI1[0][6][14] + sp[18] * PI1[0][14][6] + sp[17] * PI2[0][6][14];
    A[163] = sp[19] * PI0[0][6][15] + sp[18] * PI1[0][6][15] + sp[18] * PI1[0][15][6] + sp[17] * PI2[0][6][15];
    A[164] = sp[19] * PI0[0][6][16] + sp[18] * PI1[0][6][16] + sp[18] * PI1[0][16][6] + sp[17] * PI2[0][6][16];
    A[165] = sp[19] * PI0[0][6][17] + sp[18] * PI1[0][6][17] + sp[18] * PI1[0][17][6] + sp[17] * PI2[0][6][17];
    A[166] = sp[19] * PI0[0][6][18] + sp[18] * PI1[0][6][18] + sp[18] * PI1[0][18][6] + sp[17] * PI2[0][6][18];
    A[167] = sp[19] * PI0[0][6][19] + sp[18] * PI1[0][6][19] + sp[18] * PI1[0][19][6] + sp[17] * PI2[0][6][19];
    A[168] = sp[19] * PI0[0][7][0] + sp[18] * PI1[0][7][0] + sp[18] * PI1[0][0][7] + sp[17] * PI2[0][7][0];
    A[169] = sp[19] * PI0[0][7][1] + sp[18] * PI1[0][1][7];
    A[170] = sp[18] * PI1[0][7][1] + sp[17] * PI2[0][7][1];
    A[171] = sp[19] * PI0[0][7][2] + sp[18] * PI1[0][7][2] + sp[18] * PI1[0][2][7] + sp[17] * PI2[0][7][2];
    A[172] = sp[19] * PI0[0][7][3] + sp[18] * PI1[0][7][3] + sp[18] * PI1[0][3][7] + sp[17] * PI2[0][7][3];
    A[173] = sp[19] * PI0[0][7][4] + sp[18] * PI1[0][7][4] + sp[18] * PI1[0][4][7] + sp[17] * PI2[0][7][4];
    A[174] = sp[19] * PI0[0][7][5] + sp[18] * PI1[0][7][5] + sp[18] * PI1[0][5][7] + sp[17] * PI2[0][7][5];
    A[175] = sp[19] * PI0[0][7][6] + sp[18] * PI1[0][7][6] + sp[18] * PI1[0][6][7] + sp[17] * PI2[0][7][6];
    A[176] = sp[19] * PI0[0][7][7] + sp[18] * PI1[0][7][7] + sp[18] * PI1[0][7][7] + sp[17] * PI2[0][7][7];
    A[177] = sp[19] * PI0[0][7][8] + sp[18] * PI1[0][7][8] + sp[18] * PI1[0][8][7] + sp[17] * PI2[0][7][8];
    A[178] = sp[19] * PI0[0][7][9] + sp[18] * PI1[0][7][9] + sp[18] * PI1[0][9][7] + sp[17] * PI2[0][7][9];
    A[179] = sp[19] * PI0[0][7][10] + sp[18] * PI1[0][7][10] + sp[18] * PI1[0][10][7] + sp[17] * PI2[0][7][10];
    A[180] = sp[19] * PI0[0][7][11] + sp[18] * PI1[0][7][11] + sp[18] * PI1[0][11][7] + sp[17] * PI2[0][7][11];
    A[181] = sp[19] * PI0[0][7][12] + sp[18] * PI1[0][7][12] + sp[18] * PI1[0][12][7] + sp[17] * PI2[0][7][12];
    A[182] = sp[19] * PI0[0][7][13] + sp[18] * PI1[0][7][13] + sp[18] * PI1[0][13][7] + sp[17] * PI2[0][7][13];
    A[183] = sp[19] * PI0[0][7][14] + sp[18] * PI1[0][7][14] + sp[18] * PI1[0][14][7] + sp[17] * PI2[0][7][14];
    A[184] = sp[19] * PI0[0][7][15] + sp[18] * PI1[0][7][15] + sp[18] * PI1[0][15][7] + sp[17] * PI2[0][7][15];
    A[185] = sp[19] * PI0[0][7][16] + sp[18] * PI1[0][7][16] + sp[18] * PI1[0][16][7] + sp[17] * PI2[0][7][16];
    A[186] = sp[19] * PI0[0][7][17] + sp[18] * PI1[0][7][17] + sp[18] * PI1[0][17][7] + sp[17] * PI2[0][7][17];
    A[187] = sp[19] * PI0[0][7][18] + sp[18] * PI1[0][7][18] + sp[18] * PI1[0][18][7] + sp[17] * PI2[0][7][18];
    A[188] = sp[19] * PI0[0][7][19] + sp[18] * PI1[0][7][19] + sp[18] * PI1[0][19][7] + sp[17] * PI2[0][7][19];
    A[189] = sp[19] * PI0[0][8][0] + sp[18] * PI1[0][8][0] + sp[18] * PI1[0][0][8] + sp[17] * PI2[0][8][0];
    A[190] = sp[19] * PI0[0][8][1] + sp[18] * PI1[0][1][8];
    A[191] = sp[18] * PI1[0][8][1] + sp[17] * PI2[0][8][1];
    A[192] = sp[19] * PI0[0][8][2] + sp[18] * PI1[0][8][2] + sp[18] * PI1[0][2][8] + sp[17] * PI2[0][8][2];
    A[193] = sp[19] * PI0[0][8][3] + sp[18] * PI1[0][8][3] + sp[18] * PI1[0][3][8] + sp[17] * PI2[0][8][3];
    A[194] = sp[19] * PI0[0][8][4] + sp[18] * PI1[0][8][4] + sp[18] * PI1[0][4][8] + sp[17] * PI2[0][8][4];
    A[195] = sp[19] * PI0[0][8][5] + sp[18] * PI1[0][8][5] + sp[18] * PI1[0][5][8] + sp[17] * PI2[0][8][5];
    A[196] = sp[19] * PI0[0][8][6] + sp[18] * PI1[0][8][6] + sp[18] * PI1[0][6][8] + sp[17] * PI2[0][8][6];
    A[197] = sp[19] * PI0[0][8][7] + sp[18] * PI1[0][8][7] + sp[18] * PI1[0][7][8] + sp[17] * PI2[0][8][7];
    A[198] = sp[19] * PI0[0][8][8] + sp[18] * PI1[0][8][8] + sp[18] * PI1[0][8][8] + sp[17] * PI2[0][8][8];
    A[199] = sp[19] * PI0[0][8][9] + sp[18] * PI1[0][8][9] + sp[18] * PI1[0][9][8] + sp[17] * PI2[0][8][9];
    A[200] = sp[19] * PI0[0][8][10] + sp[18] * PI1[0][8][10] + sp[18] * PI1[0][10][8] + sp[17] * PI2[0][8][10];
    A[201] = sp[19] * PI0[0][8][11] + sp[18] * PI1[0][8][11] + sp[18] * PI1[0][11][8] + sp[17] * PI2[0][8][11];
    A[202] = sp[19] * PI0[0][8][12] + sp[18] * PI1[0][8][12] + sp[18] * PI1[0][12][8] + sp[17] * PI2[0][8][12];
    A[203] = sp[19] * PI0[0][8][13] + sp[18] * PI1[0][8][13] + sp[18] * PI1[0][13][8] + sp[17] * PI2[0][8][13];
    A[204] = sp[19] * PI0[0][8][14] + sp[18] * PI1[0][8][14] + sp[18] * PI1[0][14][8] + sp[17] * PI2[0][8][14];
    A[205] = sp[19] * PI0[0][8][15] + sp[18] * PI1[0][8][15] + sp[18] * PI1[0][15][8] + sp[17] * PI2[0][8][15];
    A[206] = sp[19] * PI0[0][8][16] + sp[18] * PI1[0][8][16] + sp[18] * PI1[0][16][8] + sp[17] * PI2[0][8][16];
    A[207] = sp[19] * PI0[0][8][17] + sp[18] * PI1[0][8][17] + sp[18] * PI1[0][17][8] + sp[17] * PI2[0][8][17];
    A[208] = sp[19] * PI0[0][8][18] + sp[18] * PI1[0][8][18] + sp[18] * PI1[0][18][8] + sp[17] * PI2[0][8][18];
    A[209] = sp[19] * PI0[0][8][19] + sp[18] * PI1[0][8][19] + sp[18] * PI1[0][19][8] + sp[17] * PI2[0][8][19];
    A[210] = sp[19] * PI0[0][9][0] + sp[18] * PI1[0][9][0] + sp[18] * PI1[0][0][9] + sp[17] * PI2[0][9][0];
    A[211] = sp[19] * PI0[0][9][1] + sp[18] * PI1[0][1][9];
    A[212] = sp[18] * PI1[0][9][1] + sp[17] * PI2[0][9][1];
    A[213] = sp[19] * PI0[0][9][2] + sp[18] * PI1[0][9][2] + sp[18] * PI1[0][2][9] + sp[17] * PI2[0][9][2];
    A[214] = sp[19] * PI0[0][9][3] + sp[18] * PI1[0][9][3] + sp[18] * PI1[0][3][9] + sp[17] * PI2[0][9][3];
    A[215] = sp[19] * PI0[0][9][4] + sp[18] * PI1[0][9][4] + sp[18] * PI1[0][4][9] + sp[17] * PI2[0][9][4];
    A[216] = sp[19] * PI0[0][9][5] + sp[18] * PI1[0][9][5] + sp[18] * PI1[0][5][9] + sp[17] * PI2[0][9][5];
    A[217] = sp[19] * PI0[0][9][6] + sp[18] * PI1[0][9][6] + sp[18] * PI1[0][6][9] + sp[17] * PI2[0][9][6];
    A[218] = sp[19] * PI0[0][9][7] + sp[18] * PI1[0][9][7] + sp[18] * PI1[0][7][9] + sp[17] * PI2[0][9][7];
    A[219] = sp[19] * PI0[0][9][8] + sp[18] * PI1[0][9][8] + sp[18] * PI1[0][8][9] + sp[17] * PI2[0][9][8];
    A[220] = sp[19] * PI0[0][9][9] + sp[18] * PI1[0][9][9] + sp[18] * PI1[0][9][9] + sp[17] * PI2[0][9][9];
    A[221] = sp[19] * PI0[0][9][10] + sp[18] * PI1[0][9][10] + sp[18] * PI1[0][10][9] + sp[17] * PI2[0][9][10];
    A[222] = sp[19] * PI0[0][9][11] + sp[18] * PI1[0][9][11] + sp[18] * PI1[0][11][9] + sp[17] * PI2[0][9][11];
    A[223] = sp[19] * PI0[0][9][12] + sp[18] * PI1[0][9][12] + sp[18] * PI1[0][12][9] + sp[17] * PI2[0][9][12];
    A[224] = sp[19] * PI0[0][9][13] + sp[18] * PI1[0][9][13] + sp[18] * PI1[0][13][9] + sp[17] * PI2[0][9][13];
    A[225] = sp[19] * PI0[0][9][14] + sp[18] * PI1[0][9][14] + sp[18] * PI1[0][14][9] + sp[17] * PI2[0][9][14];
    A[226] = sp[19] * PI0[0][9][15] + sp[18] * PI1[0][9][15] + sp[18] * PI1[0][15][9] + sp[17] * PI2[0][9][15];
    A[227] = sp[19] * PI0[0][9][16] + sp[18] * PI1[0][9][16] + sp[18] * PI1[0][16][9] + sp[17] * PI2[0][9][16];
    A[228] = sp[19] * PI0[0][9][17] + sp[18] * PI1[0][9][17] + sp[18] * PI1[0][17][9] + sp[17] * PI2[0][9][17];
    A[229] = sp[19] * PI0[0][9][18] + sp[18] * PI1[0][9][18] + sp[18] * PI1[0][18][9] + sp[17] * PI2[0][9][18];
    A[230] = sp[19] * PI0[0][9][19] + sp[18] * PI1[0][9][19] + sp[18] * PI1[0][19][9] + sp[17] * PI2[0][9][19];
    A[231] = sp[19] * PI0[0][10][0] + sp[18] * PI1[0][10][0] + sp[18] * PI1[0][0][10] + sp[17] * PI2[0][10][0];
    A[232] = sp[19] * PI0[0][10][1] + sp[18] * PI1[0][1][10];
    A[233] = sp[18] * PI1[0][10][1] + sp[17] * PI2[0][10][1];
    A[234] = sp[19] * PI0[0][10][2] + sp[18] * PI1[0][10][2] + sp[18] * PI1[0][2][10] + sp[17] * PI2[0][10][2];
    A[235] = sp[19] * PI0[0][10][3] + sp[18] * PI1[0][10][3] + sp[18] * PI1[0][3][10] + sp[17] * PI2[0][10][3];
    A[236] = sp[19] * PI0[0][10][4] + sp[18] * PI1[0][10][4] + sp[18] * PI1[0][4][10] + sp[17] * PI2[0][10][4];
    A[237] = sp[19] * PI0[0][10][5] + sp[18] * PI1[0][10][5] + sp[18] * PI1[0][5][10] + sp[17] * PI2[0][10][5];
    A[238] = sp[19] * PI0[0][10][6] + sp[18] * PI1[0][10][6] + sp[18] * PI1[0][6][10] + sp[17] * PI2[0][10][6];
    A[239] = sp[19] * PI0[0][10][7] + sp[18] * PI1[0][10][7] + sp[18] * PI1[0][7][10] + sp[17] * PI2[0][10][7];
    A[240] = sp[19] * PI0[0][10][8] + sp[18] * PI1[0][10][8] + sp[18] * PI1[0][8][10] + sp[17] * PI2[0][10][8];
    A[241] = sp[19] * PI0[0][10][9] + sp[18] * PI1[0][10][9] + sp[18] * PI1[0][9][10] + sp[17] * PI2[0][10][9];
    A[242] = sp[19] * PI0[0][10][10] + sp[18] * PI1[0][10][10] + sp[18] * PI1[0][10][10] + sp[17] * PI2[0][10][10];
    A[243] = sp[19] * PI0[0][10][11] + sp[18] * PI1[0][10][11] + sp[18] * PI1[0][11][10] + sp[17] * PI2[0][10][11];
    A[244] = sp[19] * PI0[0][10][12] + sp[18] * PI1[0][10][12] + sp[18] * PI1[0][12][10] + sp[17] * PI2[0][10][12];
    A[245] = sp[19] * PI0[0][10][13] + sp[18] * PI1[0][10][13] + sp[18] * PI1[0][13][10] + sp[17] * PI2[0][10][13];
    A[246] = sp[19] * PI0[0][10][14] + sp[18] * PI1[0][10][14] + sp[18] * PI1[0][14][10] + sp[17] * PI2[0][10][14];
    A[247] = sp[19] * PI0[0][10][15] + sp[18] * PI1[0][10][15] + sp[18] * PI1[0][15][10] + sp[17] * PI2[0][10][15];
    A[248] = sp[19] * PI0[0][10][16] + sp[18] * PI1[0][10][16] + sp[18] * PI1[0][16][10] + sp[17] * PI2[0][10][16];
    A[249] = sp[19] * PI0[0][10][17] + sp[18] * PI1[0][10][17] + sp[18] * PI1[0][17][10] + sp[17] * PI2[0][10][17];
    A[250] = sp[19] * PI0[0][10][18] + sp[18] * PI1[0][10][18] + sp[18] * PI1[0][18][10] + sp[17] * PI2[0][10][18];
    A[251] = sp[19] * PI0[0][10][19] + sp[18] * PI1[0][10][19] + sp[18] * PI1[0][19][10] + sp[17] * PI2[0][10][19];
    A[252] = sp[19] * PI0[0][11][0] + sp[18] * PI1[0][11][0] + sp[18] * PI1[0][0][11] + sp[17] * PI2[0][11][0];
    A[253] = sp[19] * PI0[0][11][1] + sp[18] * PI1[0][1][11];
    A[254] = sp[18] * PI1[0][11][1] + sp[17] * PI2[0][11][1];
    A[255] = sp[19] * PI0[0][11][2] + sp[18] * PI1[0][11][2] + sp[18] * PI1[0][2][11] + sp[17] * PI2[0][11][2];
    A[256] = sp[19] * PI0[0][11][3] + sp[18] * PI1[0][11][3] + sp[18] * PI1[0][3][11] + sp[17] * PI2[0][11][3];
    A[257] = sp[19] * PI0[0][11][4] + sp[18] * PI1[0][11][4] + sp[18] * PI1[0][4][11] + sp[17] * PI2[0][11][4];
    A[258] = sp[19] * PI0[0][11][5] + sp[18] * PI1[0][11][5] + sp[18] * PI1[0][5][11] + sp[17] * PI2[0][11][5];
    A[259] = sp[19] * PI0[0][11][6] + sp[18] * PI1[0][11][6] + sp[18] * PI1[0][6][11] + sp[17] * PI2[0][11][6];
    A[260] = sp[19] * PI0[0][11][7] + sp[18] * PI1[0][11][7] + sp[18] * PI1[0][7][11] + sp[17] * PI2[0][11][7];
    A[261] = sp[19] * PI0[0][11][8] + sp[18] * PI1[0][11][8] + sp[18] * PI1[0][8][11] + sp[17] * PI2[0][11][8];
    A[262] = sp[19] * PI0[0][11][9] + sp[18] * PI1[0][11][9] + sp[18] * PI1[0][9][11] + sp[17] * PI2[0][11][9];
    A[263] = sp[19] * PI0[0][11][10] + sp[18] * PI1[0][11][10] + sp[18] * PI1[0][10][11] + sp[17] * PI2[0][11][10];
    A[264] = sp[19] * PI0[0][11][11] + sp[18] * PI1[0][11][11] + sp[18] * PI1[0][11][11] + sp[17] * PI2[0][11][11];
    A[265] = sp[19] * PI0[0][11][12] + sp[18] * PI1[0][11][12] + sp[18] * PI1[0][12][11] + sp[17] * PI2[0][11][12];
    A[266] = sp[19] * PI0[0][11][13] + sp[18] * PI1[0][11][13] + sp[18] * PI1[0][13][11] + sp[17] * PI2[0][11][13];
    A[267] = sp[19] * PI0[0][11][14] + sp[18] * PI1[0][11][14] + sp[18] * PI1[0][14][11] + sp[17] * PI2[0][11][14];
    A[268] = sp[19] * PI0[0][11][15] + sp[18] * PI1[0][11][15] + sp[18] * PI1[0][15][11] + sp[17] * PI2[0][11][15];
    A[269] = sp[19] * PI0[0][11][16] + sp[18] * PI1[0][11][16] + sp[18] * PI1[0][16][11] + sp[17] * PI2[0][11][16];
    A[270] = sp[19] * PI0[0][11][17] + sp[18] * PI1[0][11][17] + sp[18] * PI1[0][17][11] + sp[17] * PI2[0][11][17];
    A[271] = sp[19] * PI0[0][11][18] + sp[18] * PI1[0][11][18] + sp[18] * PI1[0][18][11] + sp[17] * PI2[0][11][18];
    A[272] = sp[19] * PI0[0][11][19] + sp[18] * PI1[0][11][19] + sp[18] * PI1[0][19][11] + sp[17] * PI2[0][11][19];
    A[273] = sp[19] * PI0[0][12][0] + sp[18] * PI1[0][12][0] + sp[18] * PI1[0][0][12] + sp[17] * PI2[0][12][0];
    A[274] = sp[19] * PI0[0][12][1] + sp[18] * PI1[0][1][12];
    A[275] = sp[18] * PI1[0][12][1] + sp[17] * PI2[0][12][1];
    A[276] = sp[19] * PI0[0][12][2] + sp[18] * PI1[0][12][2] + sp[18] * PI1[0][2][12] + sp[17] * PI2[0][12][2];
    A[277] = sp[19] * PI0[0][12][3] + sp[18] * PI1[0][12][3] + sp[18] * PI1[0][3][12] + sp[17] * PI2[0][12][3];
    A[278] = sp[19] * PI0[0][12][4] + sp[18] * PI1[0][12][4] + sp[18] * PI1[0][4][12] + sp[17] * PI2[0][12][4];
    A[279] = sp[19] * PI0[0][12][5] + sp[18] * PI1[0][12][5] + sp[18] * PI1[0][5][12] + sp[17] * PI2[0][12][5];
    A[280] = sp[19] * PI0[0][12][6] + sp[18] * PI1[0][12][6] + sp[18] * PI1[0][6][12] + sp[17] * PI2[0][12][6];
    A[281] = sp[19] * PI0[0][12][7] + sp[18] * PI1[0][12][7] + sp[18] * PI1[0][7][12] + sp[17] * PI2[0][12][7];
    A[282] = sp[19] * PI0[0][12][8] + sp[18] * PI1[0][12][8] + sp[18] * PI1[0][8][12] + sp[17] * PI2[0][12][8];
    A[283] = sp[19] * PI0[0][12][9] + sp[18] * PI1[0][12][9] + sp[18] * PI1[0][9][12] + sp[17] * PI2[0][12][9];
    A[284] = sp[19] * PI0[0][12][10] + sp[18] * PI1[0][12][10] + sp[18] * PI1[0][10][12] + sp[17] * PI2[0][12][10];
    A[285] = sp[19] * PI0[0][12][11] + sp[18] * PI1[0][12][11] + sp[18] * PI1[0][11][12] + sp[17] * PI2[0][12][11];
    A[286] = sp[19] * PI0[0][12][12] + sp[18] * PI1[0][12][12] + sp[18] * PI1[0][12][12] + sp[17] * PI2[0][12][12];
    A[287] = sp[19] * PI0[0][12][13] + sp[18] * PI1[0][12][13] + sp[18] * PI1[0][13][12] + sp[17] * PI2[0][12][13];
    A[288] = sp[19] * PI0[0][12][14] + sp[18] * PI1[0][12][14] + sp[18] * PI1[0][14][12] + sp[17] * PI2[0][12][14];
    A[289] = sp[19] * PI0[0][12][15] + sp[18] * PI1[0][12][15] + sp[18] * PI1[0][15][12] + sp[17] * PI2[0][12][15];
    A[290] = sp[19] * PI0[0][12][16] + sp[18] * PI1[0][12][16] + sp[18] * PI1[0][16][12] + sp[17] * PI2[0][12][16];
    A[291] = sp[19] * PI0[0][12][17] + sp[18] * PI1[0][12][17] + sp[18] * PI1[0][17][12] + sp[17] * PI2[0][12][17];
    A[292] = sp[19] * PI0[0][12][18] + sp[18] * PI1[0][12][18] + sp[18] * PI1[0][18][12] + sp[17] * PI2[0][12][18];
    A[293] = sp[19] * PI0[0][12][19] + sp[18] * PI1[0][12][19] + sp[18] * PI1[0][19][12] + sp[17] * PI2[0][12][19];
    A[294] = sp[19] * PI0[0][13][0] + sp[18] * PI1[0][13][0] + sp[18] * PI1[0][0][13] + sp[17] * PI2[0][13][0];
    A[295] = sp[19] * PI0[0][13][1] + sp[18] * PI1[0][1][13];
    A[296] = sp[18] * PI1[0][13][1] + sp[17] * PI2[0][13][1];
    A[297] = sp[19] * PI0[0][13][2] + sp[18] * PI1[0][13][2] + sp[18] * PI1[0][2][13] + sp[17] * PI2[0][13][2];
    A[298] = sp[19] * PI0[0][13][3] + sp[18] * PI1[0][13][3] + sp[18] * PI1[0][3][13] + sp[17] * PI2[0][13][3];
    A[299] = sp[19] * PI0[0][13][4] + sp[18] * PI1[0][13][4] + sp[18] * PI1[0][4][13] + sp[17] * PI2[0][13][4];
    A[300] = sp[19] * PI0[0][13][5] + sp[18] * PI1[0][13][5] + sp[18] * PI1[0][5][13] + sp[17] * PI2[0][13][5];
    A[301] = sp[19] * PI0[0][13][6] + sp[18] * PI1[0][13][6] + sp[18] * PI1[0][6][13] + sp[17] * PI2[0][13][6];
    A[302] = sp[19] * PI0[0][13][7] + sp[18] * PI1[0][13][7] + sp[18] * PI1[0][7][13] + sp[17] * PI2[0][13][7];
    A[303] = sp[19] * PI0[0][13][8] + sp[18] * PI1[0][13][8] + sp[18] * PI1[0][8][13] + sp[17] * PI2[0][13][8];
    A[304] = sp[19] * PI0[0][13][9] + sp[18] * PI1[0][13][9] + sp[18] * PI1[0][9][13] + sp[17] * PI2[0][13][9];
    A[305] = sp[19] * PI0[0][13][10] + sp[18] * PI1[0][13][10] + sp[18] * PI1[0][10][13] + sp[17] * PI2[0][13][10];
    A[306] = sp[19] * PI0[0][13][11] + sp[18] * PI1[0][13][11] + sp[18] * PI1[0][11][13] + sp[17] * PI2[0][13][11];
    A[307] = sp[19] * PI0[0][13][12] + sp[18] * PI1[0][13][12] + sp[18] * PI1[0][12][13] + sp[17] * PI2[0][13][12];
    A[308] = sp[19] * PI0[0][13][13] + sp[18] * PI1[0][13][13] + sp[18] * PI1[0][13][13] + sp[17] * PI2[0][13][13];
    A[309] = sp[19] * PI0[0][13][14] + sp[18] * PI1[0][13][14] + sp[18] * PI1[0][14][13] + sp[17] * PI2[0][13][14];
    A[310] = sp[19] * PI0[0][13][15] + sp[18] * PI1[0][13][15] + sp[18] * PI1[0][15][13] + sp[17] * PI2[0][13][15];
    A[311] = sp[19] * PI0[0][13][16] + sp[18] * PI1[0][13][16] + sp[18] * PI1[0][16][13] + sp[17] * PI2[0][13][16];
    A[312] = sp[19] * PI0[0][13][17] + sp[18] * PI1[0][13][17] + sp[18] * PI1[0][17][13] + sp[17] * PI2[0][13][17];
    A[313] = sp[19] * PI0[0][13][18] + sp[18] * PI1[0][13][18] + sp[18] * PI1[0][18][13] + sp[17] * PI2[0][13][18];
    A[314] = sp[19] * PI0[0][13][19] + sp[18] * PI1[0][13][19] + sp[18] * PI1[0][19][13] + sp[17] * PI2[0][13][19];
    A[315] = sp[19] * PI0[0][14][0] + sp[18] * PI1[0][14][0] + sp[18] * PI1[0][0][14] + sp[17] * PI2[0][14][0];
    A[316] = sp[19] * PI0[0][14][1] + sp[18] * PI1[0][1][14];
    A[317] = sp[18] * PI1[0][14][1] + sp[17] * PI2[0][14][1];
    A[318] = sp[19] * PI0[0][14][2] + sp[18] * PI1[0][14][2] + sp[18] * PI1[0][2][14] + sp[17] * PI2[0][14][2];
    A[319] = sp[19] * PI0[0][14][3] + sp[18] * PI1[0][14][3] + sp[18] * PI1[0][3][14] + sp[17] * PI2[0][14][3];
    A[320] = sp[19] * PI0[0][14][4] + sp[18] * PI1[0][14][4] + sp[18] * PI1[0][4][14] + sp[17] * PI2[0][14][4];
    A[321] = sp[19] * PI0[0][14][5] + sp[18] * PI1[0][14][5] + sp[18] * PI1[0][5][14] + sp[17] * PI2[0][14][5];
    A[322] = sp[19] * PI0[0][14][6] + sp[18] * PI1[0][14][6] + sp[18] * PI1[0][6][14] + sp[17] * PI2[0][14][6];
    A[323] = sp[19] * PI0[0][14][7] + sp[18] * PI1[0][14][7] + sp[18] * PI1[0][7][14] + sp[17] * PI2[0][14][7];
    A[324] = sp[19] * PI0[0][14][8] + sp[18] * PI1[0][14][8] + sp[18] * PI1[0][8][14] + sp[17] * PI2[0][14][8];
    A[325] = sp[19] * PI0[0][14][9] + sp[18] * PI1[0][14][9] + sp[18] * PI1[0][9][14] + sp[17] * PI2[0][14][9];
    A[326] = sp[19] * PI0[0][14][10] + sp[18] * PI1[0][14][10] + sp[18] * PI1[0][10][14] + sp[17] * PI2[0][14][10];
    A[327] = sp[19] * PI0[0][14][11] + sp[18] * PI1[0][14][11] + sp[18] * PI1[0][11][14] + sp[17] * PI2[0][14][11];
    A[328] = sp[19] * PI0[0][14][12] + sp[18] * PI1[0][14][12] + sp[18] * PI1[0][12][14] + sp[17] * PI2[0][14][12];
    A[329] = sp[19] * PI0[0][14][13] + sp[18] * PI1[0][14][13] + sp[18] * PI1[0][13][14] + sp[17] * PI2[0][14][13];
    A[330] = sp[19] * PI0[0][14][14] + sp[18] * PI1[0][14][14] + sp[18] * PI1[0][14][14] + sp[17] * PI2[0][14][14];
    A[331] = sp[19] * PI0[0][14][15] + sp[18] * PI1[0][14][15] + sp[18] * PI1[0][15][14] + sp[17] * PI2[0][14][15];
    A[332] = sp[19] * PI0[0][14][16] + sp[18] * PI1[0][14][16] + sp[18] * PI1[0][16][14] + sp[17] * PI2[0][14][16];
    A[333] = sp[19] * PI0[0][14][17] + sp[18] * PI1[0][14][17] + sp[18] * PI1[0][17][14] + sp[17] * PI2[0][14][17];
    A[334] = sp[19] * PI0[0][14][18] + sp[18] * PI1[0][14][18] + sp[18] * PI1[0][18][14] + sp[17] * PI2[0][14][18];
    A[335] = sp[19] * PI0[0][14][19] + sp[18] * PI1[0][14][19] + sp[18] * PI1[0][19][14] + sp[17] * PI2[0][14][19];
    A[336] = sp[19] * PI0[0][15][0] + sp[18] * PI1[0][15][0] + sp[18] * PI1[0][0][15] + sp[17] * PI2[0][15][0];
    A[337] = sp[19] * PI0[0][15][1] + sp[18] * PI1[0][1][15];
    A[338] = sp[18] * PI1[0][15][1] + sp[17] * PI2[0][15][1];
    A[339] = sp[19] * PI0[0][15][2] + sp[18] * PI1[0][15][2] + sp[18] * PI1[0][2][15] + sp[17] * PI2[0][15][2];
    A[340] = sp[19] * PI0[0][15][3] + sp[18] * PI1[0][15][3] + sp[18] * PI1[0][3][15] + sp[17] * PI2[0][15][3];
    A[341] = sp[19] * PI0[0][15][4] + sp[18] * PI1[0][15][4] + sp[18] * PI1[0][4][15] + sp[17] * PI2[0][15][4];
    A[342] = sp[19] * PI0[0][15][5] + sp[18] * PI1[0][15][5] + sp[18] * PI1[0][5][15] + sp[17] * PI2[0][15][5];
    A[343] = sp[19] * PI0[0][15][6] + sp[18] * PI1[0][15][6] + sp[18] * PI1[0][6][15] + sp[17] * PI2[0][15][6];
    A[344] = sp[19] * PI0[0][15][7] + sp[18] * PI1[0][15][7] + sp[18] * PI1[0][7][15] + sp[17] * PI2[0][15][7];
    A[345] = sp[19] * PI0[0][15][8] + sp[18] * PI1[0][15][8] + sp[18] * PI1[0][8][15] + sp[17] * PI2[0][15][8];
    A[346] = sp[19] * PI0[0][15][9] + sp[18] * PI1[0][15][9] + sp[18] * PI1[0][9][15] + sp[17] * PI2[0][15][9];
    A[347] = sp[19] * PI0[0][15][10] + sp[18] * PI1[0][15][10] + sp[18] * PI1[0][10][15] + sp[17] * PI2[0][15][10];
    A[348] = sp[19] * PI0[0][15][11] + sp[18] * PI1[0][15][11] + sp[18] * PI1[0][11][15] + sp[17] * PI2[0][15][11];
    A[349] = sp[19] * PI0[0][15][12] + sp[18] * PI1[0][15][12] + sp[18] * PI1[0][12][15] + sp[17] * PI2[0][15][12];
    A[350] = sp[19] * PI0[0][15][13] + sp[18] * PI1[0][15][13] + sp[18] * PI1[0][13][15] + sp[17] * PI2[0][15][13];
    A[351] = sp[19] * PI0[0][15][14] + sp[18] * PI1[0][15][14] + sp[18] * PI1[0][14][15] + sp[17] * PI2[0][15][14];
    A[352] = sp[19] * PI0[0][15][15] + sp[18] * PI1[0][15][15] + sp[18] * PI1[0][15][15] + sp[17] * PI2[0][15][15];
    A[353] = sp[19] * PI0[0][15][16] + sp[18] * PI1[0][15][16] + sp[18] * PI1[0][16][15] + sp[17] * PI2[0][15][16];
    A[354] = sp[19] * PI0[0][15][17] + sp[18] * PI1[0][15][17] + sp[18] * PI1[0][17][15] + sp[17] * PI2[0][15][17];
    A[355] = sp[19] * PI0[0][15][18] + sp[18] * PI1[0][15][18] + sp[18] * PI1[0][18][15] + sp[17] * PI2[0][15][18];
    A[356] = sp[19] * PI0[0][15][19] + sp[18] * PI1[0][15][19] + sp[18] * PI1[0][19][15] + sp[17] * PI2[0][15][19];
    A[357] = sp[19] * PI0[0][16][0] + sp[18] * PI1[0][16][0] + sp[18] * PI1[0][0][16] + sp[17] * PI2[0][16][0];
    A[358] = sp[19] * PI0[0][16][1] + sp[18] * PI1[0][1][16];
    A[359] = sp[18] * PI1[0][16][1] + sp[17] * PI2[0][16][1];
    A[360] = sp[19] * PI0[0][16][2] + sp[18] * PI1[0][16][2] + sp[18] * PI1[0][2][16] + sp[17] * PI2[0][16][2];
    A[361] = sp[19] * PI0[0][16][3] + sp[18] * PI1[0][16][3] + sp[18] * PI1[0][3][16] + sp[17] * PI2[0][16][3];
    A[362] = sp[19] * PI0[0][16][4] + sp[18] * PI1[0][16][4] + sp[18] * PI1[0][4][16] + sp[17] * PI2[0][16][4];
    A[363] = sp[19] * PI0[0][16][5] + sp[18] * PI1[0][16][5] + sp[18] * PI1[0][5][16] + sp[17] * PI2[0][16][5];
    A[364] = sp[19] * PI0[0][16][6] + sp[18] * PI1[0][16][6] + sp[18] * PI1[0][6][16] + sp[17] * PI2[0][16][6];
    A[365] = sp[19] * PI0[0][16][7] + sp[18] * PI1[0][16][7] + sp[18] * PI1[0][7][16] + sp[17] * PI2[0][16][7];
    A[366] = sp[19] * PI0[0][16][8] + sp[18] * PI1[0][16][8] + sp[18] * PI1[0][8][16] + sp[17] * PI2[0][16][8];
    A[367] = sp[19] * PI0[0][16][9] + sp[18] * PI1[0][16][9] + sp[18] * PI1[0][9][16] + sp[17] * PI2[0][16][9];
    A[368] = sp[19] * PI0[0][16][10] + sp[18] * PI1[0][16][10] + sp[18] * PI1[0][10][16] + sp[17] * PI2[0][16][10];
    A[369] = sp[19] * PI0[0][16][11] + sp[18] * PI1[0][16][11] + sp[18] * PI1[0][11][16] + sp[17] * PI2[0][16][11];
    A[370] = sp[19] * PI0[0][16][12] + sp[18] * PI1[0][16][12] + sp[18] * PI1[0][12][16] + sp[17] * PI2[0][16][12];
    A[371] = sp[19] * PI0[0][16][13] + sp[18] * PI1[0][16][13] + sp[18] * PI1[0][13][16] + sp[17] * PI2[0][16][13];
    A[372] = sp[19] * PI0[0][16][14] + sp[18] * PI1[0][16][14] + sp[18] * PI1[0][14][16] + sp[17] * PI2[0][16][14];
    A[373] = sp[19] * PI0[0][16][15] + sp[18] * PI1[0][16][15] + sp[18] * PI1[0][15][16] + sp[17] * PI2[0][16][15];
    A[374] = sp[19] * PI0[0][16][16] + sp[18] * PI1[0][16][16] + sp[18] * PI1[0][16][16] + sp[17] * PI2[0][16][16];
    A[375] = sp[19] * PI0[0][16][17] + sp[18] * PI1[0][16][17] + sp[18] * PI1[0][17][16] + sp[17] * PI2[0][16][17];
    A[376] = sp[19] * PI0[0][16][18] + sp[18] * PI1[0][16][18] + sp[18] * PI1[0][18][16] + sp[17] * PI2[0][16][18];
    A[377] = sp[19] * PI0[0][16][19] + sp[18] * PI1[0][16][19] + sp[18] * PI1[0][19][16] + sp[17] * PI2[0][16][19];
    A[378] = sp[19] * PI0[0][17][0] + sp[18] * PI1[0][17][0] + sp[18] * PI1[0][0][17] + sp[17] * PI2[0][17][0];
    A[379] = sp[19] * PI0[0][17][1] + sp[18] * PI1[0][1][17];
    A[380] = sp[18] * PI1[0][17][1] + sp[17] * PI2[0][17][1];
    A[381] = sp[19] * PI0[0][17][2] + sp[18] * PI1[0][17][2] + sp[18] * PI1[0][2][17] + sp[17] * PI2[0][17][2];
    A[382] = sp[19] * PI0[0][17][3] + sp[18] * PI1[0][17][3] + sp[18] * PI1[0][3][17] + sp[17] * PI2[0][17][3];
    A[383] = sp[19] * PI0[0][17][4] + sp[18] * PI1[0][17][4] + sp[18] * PI1[0][4][17] + sp[17] * PI2[0][17][4];
    A[384] = sp[19] * PI0[0][17][5] + sp[18] * PI1[0][17][5] + sp[18] * PI1[0][5][17] + sp[17] * PI2[0][17][5];
    A[385] = sp[19] * PI0[0][17][6] + sp[18] * PI1[0][17][6] + sp[18] * PI1[0][6][17] + sp[17] * PI2[0][17][6];
    A[386] = sp[19] * PI0[0][17][7] + sp[18] * PI1[0][17][7] + sp[18] * PI1[0][7][17] + sp[17] * PI2[0][17][7];
    A[387] = sp[19] * PI0[0][17][8] + sp[18] * PI1[0][17][8] + sp[18] * PI1[0][8][17] + sp[17] * PI2[0][17][8];
    A[388] = sp[19] * PI0[0][17][9] + sp[18] * PI1[0][17][9] + sp[18] * PI1[0][9][17] + sp[17] * PI2[0][17][9];
    A[389] = sp[19] * PI0[0][17][10] + sp[18] * PI1[0][17][10] + sp[18] * PI1[0][10][17] + sp[17] * PI2[0][17][10];
    A[390] = sp[19] * PI0[0][17][11] + sp[18] * PI1[0][17][11] + sp[18] * PI1[0][11][17] + sp[17] * PI2[0][17][11];
    A[391] = sp[19] * PI0[0][17][12] + sp[18] * PI1[0][17][12] + sp[18] * PI1[0][12][17] + sp[17] * PI2[0][17][12];
    A[392] = sp[19] * PI0[0][17][13] + sp[18] * PI1[0][17][13] + sp[18] * PI1[0][13][17] + sp[17] * PI2[0][17][13];
    A[393] = sp[19] * PI0[0][17][14] + sp[18] * PI1[0][17][14] + sp[18] * PI1[0][14][17] + sp[17] * PI2[0][17][14];
    A[394] = sp[19] * PI0[0][17][15] + sp[18] * PI1[0][17][15] + sp[18] * PI1[0][15][17] + sp[17] * PI2[0][17][15];
    A[395] = sp[19] * PI0[0][17][16] + sp[18] * PI1[0][17][16] + sp[18] * PI1[0][16][17] + sp[17] * PI2[0][17][16];
    A[396] = sp[19] * PI0[0][17][17] + sp[18] * PI1[0][17][17] + sp[18] * PI1[0][17][17] + sp[17] * PI2[0][17][17];
    A[397] = sp[19] * PI0[0][17][18] + sp[18] * PI1[0][17][18] + sp[18] * PI1[0][18][17] + sp[17] * PI2[0][17][18];
    A[398] = sp[19] * PI0[0][17][19] + sp[18] * PI1[0][17][19] + sp[18] * PI1[0][19][17] + sp[17] * PI2[0][17][19];
    A[399] = sp[19] * PI0[0][18][0] + sp[18] * PI1[0][18][0] + sp[18] * PI1[0][0][18] + sp[17] * PI2[0][18][0];
    A[400] = sp[19] * PI0[0][18][1] + sp[18] * PI1[0][1][18];
    A[401] = sp[18] * PI1[0][18][1] + sp[17] * PI2[0][18][1];
    A[402] = sp[19] * PI0[0][18][2] + sp[18] * PI1[0][18][2] + sp[18] * PI1[0][2][18] + sp[17] * PI2[0][18][2];
    A[403] = sp[19] * PI0[0][18][3] + sp[18] * PI1[0][18][3] + sp[18] * PI1[0][3][18] + sp[17] * PI2[0][18][3];
    A[404] = sp[19] * PI0[0][18][4] + sp[18] * PI1[0][18][4] + sp[18] * PI1[0][4][18] + sp[17] * PI2[0][18][4];
    A[405] = sp[19] * PI0[0][18][5] + sp[18] * PI1[0][18][5] + sp[18] * PI1[0][5][18] + sp[17] * PI2[0][18][5];
    A[406] = sp[19] * PI0[0][18][6] + sp[18] * PI1[0][18][6] + sp[18] * PI1[0][6][18] + sp[17] * PI2[0][18][6];
    A[407] = sp[19] * PI0[0][18][7] + sp[18] * PI1[0][18][7] + sp[18] * PI1[0][7][18] + sp[17] * PI2[0][18][7];
    A[408] = sp[19] * PI0[0][18][8] + sp[18] * PI1[0][18][8] + sp[18] * PI1[0][8][18] + sp[17] * PI2[0][18][8];
    A[409] = sp[19] * PI0[0][18][9] + sp[18] * PI1[0][18][9] + sp[18] * PI1[0][9][18] + sp[17] * PI2[0][18][9];
    A[410] = sp[19] * PI0[0][18][10] + sp[18] * PI1[0][18][10] + sp[18] * PI1[0][10][18] + sp[17] * PI2[0][18][10];
    A[411] = sp[19] * PI0[0][18][11] + sp[18] * PI1[0][18][11] + sp[18] * PI1[0][11][18] + sp[17] * PI2[0][18][11];
    A[412] = sp[19] * PI0[0][18][12] + sp[18] * PI1[0][18][12] + sp[18] * PI1[0][12][18] + sp[17] * PI2[0][18][12];
    A[413] = sp[19] * PI0[0][18][13] + sp[18] * PI1[0][18][13] + sp[18] * PI1[0][13][18] + sp[17] * PI2[0][18][13];
    A[414] = sp[19] * PI0[0][18][14] + sp[18] * PI1[0][18][14] + sp[18] * PI1[0][14][18] + sp[17] * PI2[0][18][14];
    A[415] = sp[19] * PI0[0][18][15] + sp[18] * PI1[0][18][15] + sp[18] * PI1[0][15][18] + sp[17] * PI2[0][18][15];
    A[416] = sp[19] * PI0[0][18][16] + sp[18] * PI1[0][18][16] + sp[18] * PI1[0][16][18] + sp[17] * PI2[0][18][16];
    A[417] = sp[19] * PI0[0][18][17] + sp[18] * PI1[0][18][17] + sp[18] * PI1[0][17][18] + sp[17] * PI2[0][18][17];
    A[418] = sp[19] * PI0[0][18][18] + sp[18] * PI1[0][18][18] + sp[18] * PI1[0][18][18] + sp[17] * PI2[0][18][18];
    A[419] = sp[19] * PI0[0][18][19] + sp[18] * PI1[0][18][19] + sp[18] * PI1[0][19][18] + sp[17] * PI2[0][18][19];
    A[420] = sp[19] * PI0[0][19][0] + sp[18] * PI1[0][19][0] + sp[18] * PI1[0][0][19] + sp[17] * PI2[0][19][0];
    A[421] = sp[19] * PI0[0][19][1] + sp[18] * PI1[0][1][19];
    A[422] = sp[18] * PI1[0][19][1] + sp[17] * PI2[0][19][1];
    A[423] = sp[19] * PI0[0][19][2] + sp[18] * PI1[0][19][2] + sp[18] * PI1[0][2][19] + sp[17] * PI2[0][19][2];
    A[424] = sp[19] * PI0[0][19][3] + sp[18] * PI1[0][19][3] + sp[18] * PI1[0][3][19] + sp[17] * PI2[0][19][3];
    A[425] = sp[19] * PI0[0][19][4] + sp[18] * PI1[0][19][4] + sp[18] * PI1[0][4][19] + sp[17] * PI2[0][19][4];
    A[426] = sp[19] * PI0[0][19][5] + sp[18] * PI1[0][19][5] + sp[18] * PI1[0][5][19] + sp[17] * PI2[0][19][5];
    A[427] = sp[19] * PI0[0][19][6] + sp[18] * PI1[0][19][6] + sp[18] * PI1[0][6][19] + sp[17] * PI2[0][19][6];
    A[428] = sp[19] * PI0[0][19][7] + sp[18] * PI1[0][19][7] + sp[18] * PI1[0][7][19] + sp[17] * PI2[0][19][7];
    A[429] = sp[19] * PI0[0][19][8] + sp[18] * PI1[0][19][8] + sp[18] * PI1[0][8][19] + sp[17] * PI2[0][19][8];
    A[430] = sp[19] * PI0[0][19][9] + sp[18] * PI1[0][19][9] + sp[18] * PI1[0][9][19] + sp[17] * PI2[0][19][9];
    A[431] = sp[19] * PI0[0][19][10] + sp[18] * PI1[0][19][10] + sp[18] * PI1[0][10][19] + sp[17] * PI2[0][19][10];
    A[432] = sp[19] * PI0[0][19][11] + sp[18] * PI1[0][19][11] + sp[18] * PI1[0][11][19] + sp[17] * PI2[0][19][11];
    A[433] = sp[19] * PI0[0][19][12] + sp[18] * PI1[0][19][12] + sp[18] * PI1[0][12][19] + sp[17] * PI2[0][19][12];
    A[434] = sp[19] * PI0[0][19][13] + sp[18] * PI1[0][19][13] + sp[18] * PI1[0][13][19] + sp[17] * PI2[0][19][13];
    A[435] = sp[19] * PI0[0][19][14] + sp[18] * PI1[0][19][14] + sp[18] * PI1[0][14][19] + sp[17] * PI2[0][19][14];
    A[436] = sp[19] * PI0[0][19][15] + sp[18] * PI1[0][19][15] + sp[18] * PI1[0][15][19] + sp[17] * PI2[0][19][15];
    A[437] = sp[19] * PI0[0][19][16] + sp[18] * PI1[0][19][16] + sp[18] * PI1[0][16][19] + sp[17] * PI2[0][19][16];
    A[438] = sp[19] * PI0[0][19][17] + sp[18] * PI1[0][19][17] + sp[18] * PI1[0][17][19] + sp[17] * PI2[0][19][17];
    A[439] = sp[19] * PI0[0][19][18] + sp[18] * PI1[0][19][18] + sp[18] * PI1[0][18][19] + sp[17] * PI2[0][19][18];
    A[440] = sp[19] * PI0[0][19][19] + sp[18] * PI1[0][19][19] + sp[18] * PI1[0][19][19] + sp[17] * PI2[0][19][19];
}


poisson2d_5_cell_integral_1_otherwise::poisson2d_5_cell_integral_1_otherwise() : ufc::cell_integral()
{

}

poisson2d_5_cell_integral_1_otherwise::~poisson2d_5_cell_integral_1_otherwise()
{

}

const std::vector<bool> & poisson2d_5_cell_integral_1_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true});
return enabled;
}

void poisson2d_5_cell_integral_1_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation,
                                    std::size_t local_facet) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 10
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 10
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           10
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights36[36] = { 0.006194265352658847, 0.0116108747669975, 0.0120606064042651, 0.008451535796943108, 0.003765298212691667, 0.0007485425612363173, 0.01304339433008284, 0.02444926225805782, 0.02539627158904766, 0.01779657599702627, 0.007928667333796482, 0.001576221754023589, 0.01691750568001268, 0.03171111159070401, 0.03293939890078672, 0.02308246365135824, 0.01028361722876633, 0.00204438659154486, 0.01691750568001267, 0.03171111159070399, 0.0329393989007867, 0.02308246365135823, 0.01028361722876633, 0.002044386591544859, 0.01304339433008284, 0.02444926225805782, 0.02539627158904766, 0.01779657599702627, 0.007928667333796482, 0.001576221754023589, 0.006194265352658863, 0.01161087476699754, 0.01206060640426513, 0.008451535796943131, 0.003765298212691677, 0.0007485425612363194 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE3_C0_D01_Q36[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE6_C0_Q36[1][36][21] =
        { { { 0.4517815279380191, 0.02281003826121968, 0.02124449224936848, -0.004357972855004335, -0.002622715352798151, -0.002647419070325484, -0.00451739239390452, 0.4801969592095868, -0.4851124131039362, 0.3343009094065306, -0.129270846816877, 0.5368536656756279, -0.5313582551132939, 0.3627530462854969, -0.1394228048643139, 0.1863065897219219, -0.08687834876741939, 0.02882370237569973, -0.08867537437438054, 0.02009559840230967, 0.02969701318647261 },
            { 0.02920934794485384, 0.02097874476723386, 0.01486040611232547, -0.02013980491870955, -0.003661146405198217, -0.002484469289199141, -0.003278497456177551, 0.9339408288389819, -0.4345973312998703, 0.2587328334320645, -0.09381831496836869, 0.1814247231924391, -0.2784257890218427, 0.244262845439317, -0.1119554253657896, 0.481548528406007, -0.2922957093194944, 0.1160868103533368, -0.08862926418909615, 0.02435409576296994, 0.02388658798421658 },
            { -0.01145342574273687, 0.01756244561894011, -0.009225149941974679, -0.0380541113043156, 0.01804955741855211, 0.003012073388412678, 0.002230188242368088, 0.1210890151180061, 0.8165384919044405, -0.2138335213478526, 0.06381963254752331, 0.008044295419533465, -0.07033361747421218, 0.1103730614258671, -0.07234318513433054, 0.2668873939477342, -0.2954931589373586, 0.1688226579069239, 0.2279000405878061, -0.09186433621179085, -0.02172834743153548 },
            { 0.004308696537154313, 0.0127065651041046, 0.008258082231334674, -0.04520959215968423, 0.05542791457881902, -0.02283787871342347, -0.002549602413917301, -0.03221787320114248, 0.1331500641722879, 0.7994546703194026, -0.07296006951669327, -0.0008593541337169777, -0.001832831504814593, 0.02670839447900035, -0.03450791099004548, 0.01106385098730638, -0.1162395212869164, 0.1317972213590018, 0.2252412629710414, -0.1841291929200167, 0.1052271041009183 },
            { -0.005137687664160823, 0.00717650050039725, -0.02192197449425873, -0.03484189961886375, 0.06698046930884452, -0.06305697350011345, 0.0277599480687051, 0.03424529507291702, -0.1034071665224598, 0.2156829179850728, 0.7943857166971465, 0.0003468841681156339, 0.0003536838425270066, 0.0007836017484648116, -0.01009946036163076, -0.002830947835340031, -0.00461061074759047, 0.05247376093989309, 0.01365455158614963, -0.1142372110686422, 0.1463006018948277 },
            { 0.03026079123944912, 0.002403861228280081, 0.3837817694217622, -0.01396962830299615, 0.03399027560947063, -0.04505541666845981, 0.03728655684111471, -0.1922788169116356, 0.5280430226581622, -0.8446859064540999, 1.067001570251125, -0.000511673580091847, -0.0003818292819522502, -0.0004607897884411905, -0.001063798025859688, 0.003583547634621946, 0.003223330700029768, 0.006601024381606567, -0.01186223419465192, -0.01810635511332649, 0.03220069835589442 },
            { 0.006670795867502689, 0.0099331034441598, 0.02124449224936847, -0.0022908787081557, -0.001795416038869119, -0.002825186099193283, -0.02266309982290943, 0.1563427754899151, -0.2587595940143053, 0.2361031586343127, -0.111125139387872, 0.8768914391417175, -0.3024585553276389, 0.1753837086394727, -0.06300327358245825, 0.4985558140265617, -0.06547871757281491, 0.01696193644927879, -0.314194635183775, 0.01843474080814408, 0.1280725309875584 },
            { -0.02860689769333545, 0.01598866389248395, 0.01486040611232541, -0.01805414394677763, -0.004114198223826526, -0.004053582874827631, -0.01644774432674098, 0.22924912760186, -0.2212237768041462, 0.181174276948877, -0.0806490680978051, 0.2234170404121626, -0.2312382266572353, 0.1922075842235976, -0.08627371722146211, 1.229748503528526, -0.3339433936006327, 0.1121405597771465, -0.3113534134367246, 0.03415774233350247, 0.1030142580530328 },
            { 0.009314972911752824, 0.02474524022661065, -0.009225149941974689, -0.06062897167784295, 0.03405962618782216, 0.007460427682362544, 0.01118852965460037, -0.06295725917869378, 0.349891088888984, -0.1463036798509595, 0.05486129113529113, -0.02098266141639597, -0.07464785802270814, 0.1425003301317839, -0.09908044971798215, 0.5737408545821595, -0.5007547394871127, 0.2738519124924799, 0.7822676302687143, -0.1955945916465123, -0.09370654322237827 },
            { -0.005378243146524746, 0.03020821420140968, 0.008258082231334722, -0.1163507598836089, 0.1589049660983037, -0.07752309903702749, -0.01279098404055134, 0.03466151229350936, -0.1065164806726171, 0.5055603622023512, -0.0627186878900593, 0.004638251621316802, 0.004977065239698811, 0.04842123760436103, -0.07634296602857946, -0.04440309495001159, -0.2495217160137674, 0.3248081442524439, 0.7145927762133989, -0.5372912128369539, 0.4538066325415739 },
            { 0.002150195791906248, 0.0252317271161174, -0.02192197449425869, -0.127538846705594, 0.2588633505058131, -0.2648341698021578, 0.1392676170900616, -0.01359474460160598, 0.03790410706875969, -0.06718113147189901, 0.6828780476757901, -0.0006908537429153098, -0.0005444923073761645, -0.0009432989298298137, -0.03177975569418932, 0.005205938032869675, 0.006031577576267166, 0.1743316735090793, -0.02133735100151836, -0.412439463269163, 0.6309418476538439 },
            { 0.02978621033932816, 0.01084770982531243, 0.3837817694217622, -0.06383265156405085, 0.1579336294892865, -0.2146983692659687, 0.1870612260477991, -0.1867267990320254, 0.5033748205395158, -0.7817122796378333, 0.9172269010444403, -0.002492870392594483, -0.001734495372692566, -0.001981410509767935, -0.004178582098201427, 0.0171382651071722, 0.01421471923696302, 0.02636592375356744, -0.05507438745257132, -0.07416935361657698, 0.1388700241371369 },
            { -0.0002897904330767742, -0.004931690347245284, 0.02124449224936851, 0.001679321618684082, 0.002487373799347227, 0.03026013516340812, -0.05093189923140036, 0.0002136227307525289, -0.06321144081787639, 0.1164852982047432, -0.08285633997938112, 0.002692687997377839, 0.7913869870761817, -0.1198766292861129, 0.03443565317563139, 0.2737055307222308, 0.3460136935900012, -0.01752123897688319, -0.3483683113304329, -0.1472225260798439, 0.2146050701545267 },
            { 0.01132680651836222, -0.01042054752557152, 0.01486040611232542, 0.01621946041072187, 0.006109488668735105, 0.02033663400871712, -0.03696382503626397, -0.03078701743194054, -0.04415948647242981, 0.08718220827873703, -0.06013298738828213, -0.06742900945326229, 0.2315750989998843, -0.1373477344363757, 0.05778983285317438, 0.5516696272752986, 0.8062026123675274, -0.1241640292614853, -0.3367096158808734, -0.1277740324466269, 0.1726161098396279 },
            { 0.001762403266264455, -0.009676914462510143, -0.00922514994197474, 0.02977532205215179, -0.02346838399212069, -0.0100196696260987, 0.02514453315603327, -0.007626102047062619, 0.01103193234922113, -0.06551051252610714, 0.04090528763385811, -0.005711996487402241, 0.003161009023221649, -0.04396579457272605, 0.03628086734621336, 0.04065416481224512, 0.3011414193549588, -0.1406930074413036, 0.7871938033099535, 0.1958664020319545, -0.1570196132387694 },
            { -0.01137465071039956, 0.008864991262991216, 0.008258082231334681, -0.03918269564681597, 0.06506493813760479, -0.04450162141981994, -0.02874580773655969, 0.06032772143553775, -0.1324707158449499, 0.1659232512261961, -0.04676386419405118, 0.018142380857984, 0.003553211975064032, 0.00650698295870743, -0.01916935685266512, -0.1241043132890955, -0.04700967951431514, 0.09916305271325415, 0.5270640729734316, -0.2299682464639552, 0.7604222659005218 },
            { 0.01640432936068233, 0.02921063549287818, -0.02192197449425869, -0.1577604739730723, 0.3506889921035666, -0.4148212066619232, 0.3129829676987976, -0.09602090098289973, 0.2391608999412584, -0.3434915974661169, 0.5091626970670542, -0.01096607969947048, -0.005381242817728353, -0.006533858295128835, -0.02931026180751995, 0.07381990170921755, 0.04830439573377744, 0.1760926753239933, -0.2451770778979167, -0.4816821708430172, 1.057239350507828 },
            { 0.02708397628164626, 0.02050776367294924, 0.3837817694217622, -0.1230889379840108, 0.3127602365513168, -0.4428064482638278, 0.4203918965020755, -0.166314342085297, 0.4358720837868659, -0.6474320941789257, 0.6838962305901642, -0.004989916850370672, -0.003097604048907257, -0.003249815226445794, -0.006007842037487631, 0.03335070223881428, 0.02428123470626886, 0.03893080062585128, -0.1025103048492699, -0.1140573065292591, 0.2326979176760883 },
            { -0.004931690347245588, -0.0002897904330765528, 0.02124449224936849, 0.0002136227307523302, -0.06321144081787614, 0.1164852982047429, -0.08285633997938102, 0.001679321618684319, 0.002487373799347028, 0.03026013516340821, -0.05093189923140035, 0.03443565317563094, -0.119876629286113, 0.7913869870761818, 0.002692687997377632, -0.01752123897688352, 0.3460136935900011, 0.2737055307222306, -0.1472225260798436, -0.3483683113304329, 0.2146050701545265 },
            { -0.01042054752557177, 0.01132680651836246, 0.01486040611232542, -0.03078701743194067, -0.04415948647242954, 0.08718220827873671, -0.06013298738828193, 0.01621946041072206, 0.006109488668734827, 0.02033663400871722, -0.03696382503626395, 0.05778983285317393, -0.1373477344363759, 0.2315750989998846, -0.06742900945326218, -0.1241640292614857, 0.8062026123675281, 0.5516696272752978, -0.1277740324466266, -0.3367096158808733, 0.1726161098396276 },
            { -0.009676914462510374, 0.001762403266264679, -0.009225149941974813, -0.007626102047062344, 0.0110319323492211, -0.06551051252610714, 0.04090528763385813, 0.02977532205215176, -0.02346838399212075, -0.0100196696260986, 0.02514453315603326, 0.03628086734621284, -0.04396579457272608, 0.003161009023221598, -0.005711996487401757, -0.140693007441304, 0.3011414193549591, 0.04065416481224501, 0.1958664020319546, 0.7871938033099535, -0.1570196132387695 },
            { 0.008864991262990948, -0.0113746507103993, 0.008258082231334573, 0.06032772143553784, -0.1324707158449498, 0.1659232512261959, -0.04676386419405133, -0.03918269564681593, 0.06506493813760457, -0.04450162141981942, -0.02874580773655966, -0.01916935685266541, 0.006506982958707099, 0.003553211975064195, 0.01814238085798433, 0.09916305271325399, -0.04700967951431533, -0.1241043132890952, -0.229968246463955, 0.5270640729734316, 0.7604222659005218 },
            { 0.02921063549287794, 0.01640432936068254, -0.02192197449425873, -0.09602090098289978, 0.2391608999412589, -0.3434915974661175, 0.509162697067054, -0.1577604739730722, 0.3506889921035661, -0.4148212066619226, 0.3129829676987977, -0.02931026180752022, -0.006533858295129178, -0.005381242817728107, -0.01096607969947022, 0.1760926753239929, 0.0483043957337774, 0.07381990170921801, -0.4816821708430164, -0.2451770778979177, 1.057239350507828 },
            { 0.02050776367294907, 0.0270839762816464, 0.3837817694217622, -0.1663143420852968, 0.4358720837868659, -0.6474320941789252, 0.6838962305901634, -0.1230889379840112, 0.3127602365513169, -0.4428064482638283, 0.4203918965020765, -0.006007842037488054, -0.003249815226445764, -0.003097604048907232, -0.004989916850370342, 0.03893080062585098, 0.02428123470626889, 0.03335070223881466, -0.1140573065292587, -0.1025103048492706, 0.2326979176760884 },
            { 0.009933103444159409, 0.006670795867502946, 0.02124449224936846, 0.1563427754899152, -0.2587595940143055, 0.2361031586343124, -0.111125139387872, -0.00229087870815534, -0.001795416038869411, -0.002825186099193114, -0.02266309982290931, -0.0630032735824583, 0.1753837086394725, -0.3024585553276392, 0.8768914391417179, 0.01696193644927824, -0.06547871757281458, 0.4985558140265618, 0.01843474080814372, -0.3141946351837744, 0.1280725309875584 },
            { 0.01598866389248362, -0.02860689769333529, 0.01486040611232537, 0.2292491276018601, -0.2212237768041463, 0.1811742769488767, -0.08064906809780495, -0.01805414394677723, -0.004114198223826878, -0.004053582874827481, -0.01644774432674078, -0.08627371722146225, 0.1922075842235974, -0.2312382266572354, 0.2234170404121629, 0.1121405597771459, -0.3339433936006324, 1.229748503528525, 0.03415774233350283, -0.3113534134367245, 0.1030142580530325 },
            { 0.02474524022661039, 0.009314972911752985, -0.009225149941974795, -0.06295725917869349, 0.3498910888889842, -0.1463036798509595, 0.0548612911352911, -0.06062897167784277, 0.03405962618782205, 0.007460427682362756, 0.01118852965460044, -0.09908044971798262, 0.1425003301317839, -0.07464785802270842, -0.02098266141639562, 0.2738519124924795, -0.5007547394871126, 0.5737408545821594, -0.1955945916465119, 0.7822676302687139, -0.09370654322237834 },
            { 0.03020821420140934, -0.005378243146524499, 0.008258082231334576, 0.03466151229350944, -0.1065164806726169, 0.5055603622023515, -0.06271868789005963, -0.1163507598836088, 0.1589049660983034, -0.07752309903702692, -0.01279098404055137, -0.07634296602857976, 0.04842123760436075, 0.004977065239698671, 0.004638251621317139, 0.3248081442524435, -0.2495217160137678, -0.04440309495001106, -0.5372912128369534, 0.7145927762133987, 0.4538066325415736 },
            { 0.02523172711611708, 0.002150195791906427, -0.02192197449425877, -0.01359474460160602, 0.03790410706875991, -0.06718113147189937, 0.68287804767579, -0.127538846705594, 0.2588633505058126, -0.2648341698021572, 0.1392676170900618, -0.03177975569418966, -0.0009432989298300965, -0.0005444923073761177, -0.0006908537429150658, 0.174331673509079, 0.006031577576267013, 0.005205938032870189, -0.4124394632691625, -0.02133735100151894, 0.630941847653844 },
            { 0.01084770982531225, 0.02978621033932828, 0.3837817694217622, -0.1867267990320252, 0.5033748205395158, -0.7817122796378332, 0.9172269010444396, -0.06383265156405131, 0.157933629489287, -0.2146983692659694, 0.1870612260478004, -0.004178582098201915, -0.00198141050976784, -0.001734495372692564, -0.002492870392594207, 0.0263659237535673, 0.01421471923696306, 0.01713826510717264, -0.07416935361657696, -0.0550743874525723, 0.1388700241371374 },
            { 0.02281003826121924, 0.4517815279380186, 0.0212444922493684, 0.4801969592095866, -0.485112413103936, 0.3343009094065302, -0.1292708468168769, -0.004357972855004127, -0.002622715352798381, -0.002647419070325301, -0.0045173923939045, -0.1394228048643139, 0.3627530462854969, -0.5313582551132949, 0.5368536656756298, 0.02882370237569967, -0.08687834876741891, 0.1863065897219221, 0.02009559840230917, -0.08867537437438017, 0.02969701318647278 },
            { 0.02097874476723346, 0.02920934794485389, 0.01486040611232531, 0.9339408288389811, -0.4345973312998699, 0.2587328334320643, -0.09381831496836845, -0.02013980491870921, -0.003661146405198481, -0.00248446928919905, -0.003278497456177434, -0.1119554253657899, 0.2442628454393171, -0.2784257890218434, 0.1814247231924397, 0.1160868103533368, -0.2922957093194951, 0.4815485284060085, 0.02435409576296994, -0.08862926418909604, 0.0238865879842167 },
            { 0.01756244561893977, -0.01145342574273675, -0.009225149941974693, 0.1210890151180062, 0.8165384919044404, -0.2138335213478524, 0.06381963254752332, -0.03805411130431548, 0.01804955741855204, 0.003012073388412696, 0.002230188242368199, -0.07234318513433123, 0.1103730614258673, -0.07033361747421246, 0.00804429541953381, 0.1688226579069239, -0.2954931589373589, 0.2668873939477346, -0.09186433621179042, 0.2279000405878062, -0.02172834743153548 },
            { 0.01270656510410419, 0.004308696537154497, 0.008258082231334674, -0.03221787320114234, 0.1331500641722878, 0.7994546703194028, -0.07296006951669357, -0.04520959215968427, 0.05542791457881886, -0.02283787871342326, -0.002549602413917315, -0.03450791099004587, 0.02670839447900013, -0.001832831504814892, -0.0008593541337166271, 0.1317972213590018, -0.1162395212869166, 0.01106385098730679, -0.1841291929200164, 0.2252412629710419, 0.1052271041009182 },
            { 0.007176500500396856, -0.005137687664160649, -0.02192197449425877, 0.03424529507291699, -0.1034071665224598, 0.2156829179850725, 0.7943857166971466, -0.03484189961886389, 0.06698046930884427, -0.06305697350011312, 0.02775994806870545, -0.01009946036163114, 0.0007836017484646477, 0.0003536838425269017, 0.0003468841681159101, 0.05247376093989294, -0.004610610747590546, -0.00283094783533951, -0.1142372110686424, 0.01365455158614956, 0.1463006018948277 },
            { 0.002403861228279926, 0.03026079123944924, 0.3837817694217622, -0.1922788169116355, 0.5280430226581621, -0.8446859064540996, 1.067001570251123, -0.01396962830299707, 0.0339902756094719, -0.04505541666846142, 0.03728655684111668, -0.001063798025860288, -0.0004607897884410797, -0.0003818292819522639, -0.0005116735800916115, 0.006601024381606633, 0.003223330700029824, 0.003583547634622428, -0.01810635511332755, -0.01186223419465331, 0.03220069835589598 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE3_C0_D01_Q36[0][0][0] + coordinate_dofs[2] * FE3_C0_D01_Q36[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE3_C0_D01_Q36[0][0][0] + coordinate_dofs[5] * FE3_C0_D01_Q36[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE3_C0_D01_Q36[0][0][0] + coordinate_dofs[4] * FE3_C0_D01_Q36[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE3_C0_D01_Q36[0][0][0] + coordinate_dofs[3] * FE3_C0_D01_Q36[0][0][1];
    alignas(32) double sp[4];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = std::abs(sp[2]);
    alignas(32) double BF0[21] = {};
    for (int iq = 0; iq < 36; ++iq)
    {
        // Quadrature loop body setup (num_points=36)
        // Unstructured varying computations for num_points=36
        double w0 = 0.0;
        for (int ic = 0; ic < 21; ++ic)
            w0 += w[0][ic] * FE6_C0_Q36[0][iq][ic];
        alignas(32) double sv36[1];
        sv36[0] = sp[3] * w0;
        const double fw0 = sv36[0] * weights36[iq];
        for (int i = 0; i < 21; ++i)
            BF0[i] += fw0 * FE6_C0_Q36[0][iq][i];
    }
    std::fill(A, A + 21, 0.0);
    for (int i = 0; i < 21; ++i)
        A[i] += BF0[i];
}


poisson2d_5_form_0::poisson2d_5_form_0() : ufc::form()
{
    // Do nothing
}

poisson2d_5_form_0::~poisson2d_5_form_0()
{
    // Do nothing
}

const char * poisson2d_5_form_0::signature() const
{
    return "58d2d6e56f8e4aa9a5b97200c677dd057a3ab6a52bf87dae93228d0c8ecc7b47a07215d80741692be146080abf622b3dc676904d0cdb97e34a053746cadd6103";
}

std::size_t poisson2d_5_form_0::rank() const
{
    return 2;
}

std::size_t poisson2d_5_form_0::num_coefficients() const
{
    return 0;
}

std::size_t poisson2d_5_form_0::original_coefficient_position(std::size_t i) const
{
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
}

ufc::finite_element * poisson2d_5_form_0::create_coordinate_finite_element() const
{
    return new poisson2d_5_finite_element_1();
}

ufc::dofmap * poisson2d_5_form_0::create_coordinate_dofmap() const
{
    return new poisson2d_5_dofmap_1();
}

ufc::coordinate_mapping * poisson2d_5_form_0::create_coordinate_mapping() const
{
    return new poisson2d_5_coordinate_mapping_1();
}

ufc::finite_element * poisson2d_5_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson2d_5_finite_element_2();
    case 1:
        return new poisson2d_5_finite_element_2();
    default:
        return nullptr;
    }
}

ufc::dofmap * poisson2d_5_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson2d_5_dofmap_2();
    case 1:
        return new poisson2d_5_dofmap_2();
    default:
        return nullptr;
    }
}

std::size_t poisson2d_5_form_0::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_0::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_0::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_0::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_0::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_0::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_0::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_0::max_overlap_subdomain_id() const
{
    return 0;
}

bool poisson2d_5_form_0::has_cell_integrals() const
{
    return true;
}

bool poisson2d_5_form_0::has_exterior_facet_integrals() const
{
    return false;
}

bool poisson2d_5_form_0::has_interior_facet_integrals() const
{
    return false;
}

bool poisson2d_5_form_0::has_vertex_integrals() const
{
    return false;
}

bool poisson2d_5_form_0::has_custom_integrals() const
{
    return false;
}

bool poisson2d_5_form_0::has_cutcell_integrals() const
{
    return false;
}

bool poisson2d_5_form_0::has_interface_integrals() const
{
    return false;
}

bool poisson2d_5_form_0::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * poisson2d_5_form_0::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * poisson2d_5_form_0::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson2d_5_form_0::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * poisson2d_5_form_0::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * poisson2d_5_form_0::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * poisson2d_5_form_0::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * poisson2d_5_form_0::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * poisson2d_5_form_0::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * poisson2d_5_form_0::create_default_cell_integral() const
{
    return new poisson2d_5_cell_integral_0_otherwise();
}

ufc::exterior_facet_integral * poisson2d_5_form_0::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson2d_5_form_0::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * poisson2d_5_form_0::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * poisson2d_5_form_0::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * poisson2d_5_form_0::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * poisson2d_5_form_0::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * poisson2d_5_form_0::create_default_overlap_integral() const
{
    return nullptr;
}


poisson2d_5_form_1::poisson2d_5_form_1() : ufc::form()
{
    // Do nothing
}

poisson2d_5_form_1::~poisson2d_5_form_1()
{
    // Do nothing
}

const char * poisson2d_5_form_1::signature() const
{
    return "3f2cdf8236b3b24efd48977ac52e89606b80dd7b6061803bc963dd54083f3d4043076fec7b7e99d883c47e0d04224cbc82ef1f29fe0c98cff6ada22dfa791646";
}

std::size_t poisson2d_5_form_1::rank() const
{
    return 1;
}

std::size_t poisson2d_5_form_1::num_coefficients() const
{
    return 1;
}

std::size_t poisson2d_5_form_1::original_coefficient_position(std::size_t i) const
{
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
}

ufc::finite_element * poisson2d_5_form_1::create_coordinate_finite_element() const
{
    return new poisson2d_5_finite_element_1();
}

ufc::dofmap * poisson2d_5_form_1::create_coordinate_dofmap() const
{
    return new poisson2d_5_dofmap_1();
}

ufc::coordinate_mapping * poisson2d_5_form_1::create_coordinate_mapping() const
{
    return new poisson2d_5_coordinate_mapping_1();
}

ufc::finite_element * poisson2d_5_form_1::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson2d_5_finite_element_2();
    case 1:
        return new poisson2d_5_finite_element_2();
    default:
        return nullptr;
    }
}

ufc::dofmap * poisson2d_5_form_1::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson2d_5_dofmap_2();
    case 1:
        return new poisson2d_5_dofmap_2();
    default:
        return nullptr;
    }
}

std::size_t poisson2d_5_form_1::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_1::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_1::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_1::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_1::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_1::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_1::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t poisson2d_5_form_1::max_overlap_subdomain_id() const
{
    return 0;
}

bool poisson2d_5_form_1::has_cell_integrals() const
{
    return true;
}

bool poisson2d_5_form_1::has_exterior_facet_integrals() const
{
    return false;
}

bool poisson2d_5_form_1::has_interior_facet_integrals() const
{
    return false;
}

bool poisson2d_5_form_1::has_vertex_integrals() const
{
    return false;
}

bool poisson2d_5_form_1::has_custom_integrals() const
{
    return false;
}

bool poisson2d_5_form_1::has_cutcell_integrals() const
{
    return false;
}

bool poisson2d_5_form_1::has_interface_integrals() const
{
    return false;
}

bool poisson2d_5_form_1::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * poisson2d_5_form_1::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * poisson2d_5_form_1::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson2d_5_form_1::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * poisson2d_5_form_1::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * poisson2d_5_form_1::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * poisson2d_5_form_1::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * poisson2d_5_form_1::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * poisson2d_5_form_1::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * poisson2d_5_form_1::create_default_cell_integral() const
{
    return new poisson2d_5_cell_integral_1_otherwise();
}

ufc::exterior_facet_integral * poisson2d_5_form_1::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson2d_5_form_1::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * poisson2d_5_form_1::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * poisson2d_5_form_1::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * poisson2d_5_form_1::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * poisson2d_5_form_1::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * poisson2d_5_form_1::create_default_overlap_integral() const
{
    return nullptr;
}

