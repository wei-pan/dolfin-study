// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  evaluate_basis:                 False
//  evaluate_basis_derivatives:     False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          True

#include "Poisson3D_4.h"

poisson3d_4_finite_element_0::poisson3d_4_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

poisson3d_4_finite_element_0::~poisson3d_4_finite_element_0()
{
    // Do nothing
}

const char * poisson3d_4_finite_element_0::signature() const
{
    return "FiniteElement('Lagrange', tetrahedron, 1)";
}

ufc::shape poisson3d_4_finite_element_0::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t poisson3d_4_finite_element_0::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_4_finite_element_0::geometric_dimension() const
{
    return 3;
}

std::size_t poisson3d_4_finite_element_0::space_dimension() const
{
    return 4;
}

std::size_t poisson3d_4_finite_element_0::value_rank() const
{
    return 0;
}

std::size_t poisson3d_4_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson3d_4_finite_element_0::value_size() const
{
    return 1;
}

std::size_t poisson3d_4_finite_element_0::reference_value_rank() const
{
    return 0;
}

std::size_t poisson3d_4_finite_element_0::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson3d_4_finite_element_0::reference_value_size() const
{
    return 1;
}

std::size_t poisson3d_4_finite_element_0::degree() const
{
    return 1;
}

const char * poisson3d_4_finite_element_0::family() const
{
    return "Lagrange";
}

void poisson3d_4_finite_element_0::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
}

void poisson3d_4_finite_element_0::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 1.825741858350554, 0.0, 0.0, 0.0 },
            { 5.163977794943222, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void poisson3d_4_finite_element_0::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void poisson3d_4_finite_element_0::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[4];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[4];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
}

void poisson3d_4_finite_element_0::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
}

void poisson3d_4_finite_element_0::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
}

void poisson3d_4_finite_element_0::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 4, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
}

double poisson3d_4_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
}

void poisson3d_4_finite_element_0::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
}

void poisson3d_4_finite_element_0::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

void poisson3d_4_finite_element_0::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
}

void poisson3d_4_finite_element_0::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
}

std::size_t poisson3d_4_finite_element_0::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * poisson3d_4_finite_element_0::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * poisson3d_4_finite_element_0::create() const
{
    return new poisson3d_4_finite_element_0();
}


poisson3d_4_finite_element_1::poisson3d_4_finite_element_1() : ufc::finite_element()
{
    // Do nothing
}

poisson3d_4_finite_element_1::~poisson3d_4_finite_element_1()
{
    // Do nothing
}

const char * poisson3d_4_finite_element_1::signature() const
{
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

ufc::shape poisson3d_4_finite_element_1::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t poisson3d_4_finite_element_1::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_4_finite_element_1::geometric_dimension() const
{
    return 3;
}

std::size_t poisson3d_4_finite_element_1::space_dimension() const
{
    return 12;
}

std::size_t poisson3d_4_finite_element_1::value_rank() const
{
    return 1;
}

std::size_t poisson3d_4_finite_element_1::value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t poisson3d_4_finite_element_1::value_size() const
{
    return 3;
}

std::size_t poisson3d_4_finite_element_1::reference_value_rank() const
{
    return 1;
}

std::size_t poisson3d_4_finite_element_1::reference_value_dimension(std::size_t i) const
{
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
}

std::size_t poisson3d_4_finite_element_1::reference_value_size() const
{
    return 3;
}

std::size_t poisson3d_4_finite_element_1::degree() const
{
    return 1;
}

const char * poisson3d_4_finite_element_1::family() const
{
    return "Lagrange";
}

void poisson3d_4_finite_element_1::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
}

void poisson3d_4_finite_element_1::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0 },
            { 1.825741858350554, 0.0, 0.0, 0.0 },
            { 5.163977794943222, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void poisson3d_4_finite_element_1::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void poisson3d_4_finite_element_1::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[36];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[36];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
}

void poisson3d_4_finite_element_1::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
}

void poisson3d_4_finite_element_1::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0 },
                  { 1.825741858350554, 0.0, 0.0, 0.0 },
                  { 5.163977794943222, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
}

void poisson3d_4_finite_element_1::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[9] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
}

double poisson3d_4_finite_element_1::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
}

void poisson3d_4_finite_element_1::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
}

void poisson3d_4_finite_element_1::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
}

void poisson3d_4_finite_element_1::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
}

void poisson3d_4_finite_element_1::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
}

std::size_t poisson3d_4_finite_element_1::num_sub_elements() const
{
    return 3;
}

ufc::finite_element * poisson3d_4_finite_element_1::create_sub_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_4_finite_element_0();
    case 1:
        return new poisson3d_4_finite_element_0();
    case 2:
        return new poisson3d_4_finite_element_0();
    default:
        return nullptr;
    }
}

ufc::finite_element * poisson3d_4_finite_element_1::create() const
{
    return new poisson3d_4_finite_element_1();
}


poisson3d_4_finite_element_2::poisson3d_4_finite_element_2() : ufc::finite_element()
{
    // Do nothing
}

poisson3d_4_finite_element_2::~poisson3d_4_finite_element_2()
{
    // Do nothing
}

const char * poisson3d_4_finite_element_2::signature() const
{
    return "FiniteElement('Lagrange', tetrahedron, 4)";
}

ufc::shape poisson3d_4_finite_element_2::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

std::size_t poisson3d_4_finite_element_2::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_4_finite_element_2::geometric_dimension() const
{
    return 3;
}

std::size_t poisson3d_4_finite_element_2::space_dimension() const
{
    return 35;
}

std::size_t poisson3d_4_finite_element_2::value_rank() const
{
    return 0;
}

std::size_t poisson3d_4_finite_element_2::value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson3d_4_finite_element_2::value_size() const
{
    return 1;
}

std::size_t poisson3d_4_finite_element_2::reference_value_rank() const
{
    return 0;
}

std::size_t poisson3d_4_finite_element_2::reference_value_dimension(std::size_t i) const
{
    return 1;
}

std::size_t poisson3d_4_finite_element_2::reference_value_size() const
{
    return 1;
}

std::size_t poisson3d_4_finite_element_2::degree() const
{
    return 4;
}

const char * poisson3d_4_finite_element_2::family() const
{
    return "Lagrange";
}

void poisson3d_4_finite_element_2::evaluate_reference_basis(double * reference_values,
                                             std::size_t num_points,
                                             const double * X) const
{
    static const double coefficients0[1][35] = { { -0.013746434980705125, -0.014490014748813906, -0.008365813915789357, -0.00591552374999943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.006719368409052926, -0.005678902799999458, -0.004918074090422109, -0.004398859193825713, -0.0038095238095238074, -0.0031104631654389624, -0.00253968253968254, -0.002199429596912853, -0.0017958267458705983, -0.0012698412698412807, 0.013698028951634123, 0.012080526019262244, 0.010805150953210114, 0.010209907964538027, 0.009132019301089426, 0.007908560702593246, 0.007908560702593253, 0.007073631734072807, 0.006125944778722807, 0.005001812966779234, 0.00456600965054471, 0.004083963185815212, 0.003536815867036402, 0.0028877980628061553, 0.0020419815929076093 } };
    static const double coefficients1[1][35] = { { -0.013746434980705451, 0.014490014748813866, -0.008365813915789345, -0.0059155237499994556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0067193684090529225, -0.005678902799999461, -0.004918074090422115, 0.004398859193825714, 0.0038095238095238065, 0.0031104631654389698, -0.0025396825396825375, -0.0021994295969128557, -0.0017958267458705983, -0.0012698412698412714, 0.013698028951634116, -0.012080526019262234, -0.010805150953210114, 0.010209907964538028, 0.00913201930108942, 0.00790856070259326, -0.007908560702593256, -0.007073631734072807, -0.006125944778722825, -0.0050018129667792465, 0.004566009650544712, 0.004083963185815214, 0.0035368158670364062, 0.0028877980628061544, 0.00204198159290761 } };
    static const double coefficients2[1][35] = { { -0.013746434980705267, 0.0, 0.01673162783157876, -0.0059155237499994556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010158730158730166, -0.006598288790738582, 0.0035916534917411888, -0.0012698412698412614, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02283004825272354, -0.016335852743260847, 0.010610447601109206, -0.0057755961256123, 0.0020419815929076015 } };
    static const double coefficients3[1][35] = { { -0.013746434980705383, 0.0, 0.0, 0.017746571249998316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012698412698412698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.030629723893614087 } };
    static const double coefficients4[1][35] = { { 0.043988591938257195, 0.0, 0.02677060453052602, 0.0189296759999982, 0.0, 0.0, 0.0, 0.05819143739626466, -0.03167540644887993, 0.011198947348421556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040634920634920614, 0.004398859193825727, -0.01436661396696479, 0.007619047619047625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.036755668672336886, -0.042441790404436804, 0.030321879659464597, -0.012251889557445633 } };
    static const double coefficients5[1][35] = { { -0.03299144395369299, 0.0, -0.020077953397894525, -0.014197256999998653, 0.0, 0.0, 0.0, -0.009698572899377422, 0.07126966450997983, -0.050395263067896955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04618802153517006, 0.010774960475223578, -0.019047619047619056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0495154221385096, -0.06064375931892919, 0.03062972389361408 } };
    static const double coefficients6[1][35] = { { 0.043988591938257195, 0.0, 0.026770604530525943, 0.01892967599999823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0671936840905293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03591653491741196, 0.02539682539682539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.050536466099107634, -0.040839631858152106 } };
    static const double coefficients7[1][35] = { { 0.043988591938257056, 0.02318402359810227, -0.013385302265262945, 0.018929675999998202, 0.04337333657549036, -0.03359684204526462, -0.027431706659927488, 0.01939714579875486, 0.01583770322443996, 0.011198947348421555, 0.026877473636211725, -0.022715611199997883, 0.0032787160602813993, 0.01759543677530287, -0.0025396825396825306, -0.012441852661755856, -0.010158730158730145, 0.001466286397941892, 0.007183306983482361, 0.007619047619047628, 0.0, 0.0, 0.024311589644722773, 0.0, -0.020547043427451207, -0.031634242810373, 0.0, 0.015915671401663802, 0.024503779114891263, 0.02625951807559098, 0.0, -0.009188917168084215, -0.014147263468145592, -0.01516093982973229, -0.012251889557445638 } };
    static const double coefficients8[1][35] = { { -0.032991443953692995, -0.017388017698576706, 0.010038976698947216, -0.014197256999998673, -0.0072288894292483535, 0.005599473674210736, 0.061721339984836796, -0.003232857633125797, -0.03563483225498993, -0.05039526306789696, 0.0, 0.0, 0.03442651863295485, 0.0, -0.026666666666666693, 0.009331389496316898, 0.0, 0.015396007178390032, -0.005387480237611765, -0.019047619047619088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03690661661210182, 0.0, 0.0, -0.02858774230070647, -0.05251903615118194, 0.0, 0.0, 0.01650514071283653, 0.030321879659464597, 0.030629723893614107 } };
    static const double coefficients9[1][35] = { { 0.04398859193825728, 0.023184023598102222, -0.013385302265263, 0.018929675999998227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06719368409052928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.031104631654389554, 0.0, 0.0, -0.017958267458705962, 0.025396825396825418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04376586345931829, 0.0, 0.0, 0.0, -0.025268233049553827, -0.04083963185815212 } };
    static const double coefficients10[1][35] = { { 0.043988591938257146, 0.02318402359810225, 0.013385302265263006, -0.018929675999998216, 0.043373336575490376, -0.033596842045264634, -0.02743170665992746, 0.019397145798754876, 0.015837703224439954, 0.011198947348421534, 0.02687747363621169, 0.0, -0.022951012421969882, -0.011730291183535253, 0.007619047619047612, 0.0165891368823411, 0.010158730158730152, -0.0014662863979419084, -0.007183306983482392, -0.007619047619047611, 0.0, 0.024161052038524453, -0.0027012877383025278, -0.035734677875883095, -0.011415024126361773, 0.003954280351296621, 0.03558852316166961, 0.0159156714016638, 0.0030629723893614113, -0.0037513597250844193, -0.02283004825272354, -0.011230898760991828, -0.0035368158670363897, 0.0007219495157015412, 0.0020419815929076084 } };
    static const double coefficients11[1][35] = { { -0.03299144395369284, -0.017388017698576716, -0.010038976698947238, 0.014197256999998608, -0.007228889429248384, 0.061594210416318504, -0.006857926664981875, -0.06142429502939045, -0.00395942580610997, 0.005599473674210764, 0.0, 0.0340734167999968, -0.0049180740904221166, 0.0, -0.026666666666666658, 0.009331389496316884, -0.015238095238095224, 0.017595436775302883, 0.005387480237611789, -0.007619047619047603, 0.0, 0.0, 0.0, 0.03573467787588308, -0.009132019301089419, 0.0013180934504322145, -0.059314205269449354, 0.0, 0.007146935575176615, -0.002500906483389623, 0.04566009650544707, 0.004083963185815198, -0.0047157544893818735, -0.0014438990314030772, 0.0020419815929075998 } };
    static const double coefficients12[1][35] = { { 0.043988591938257195, 0.02318402359810225, 0.01338530226526301, -0.01892967599999821, 0.0, 0.0, 0.0, 0.058191437396264645, -0.03167540644887995, 0.011198947348421553, 0.0, 0.0, 0.0, 0.029325727958838154, -0.010158730158730174, 0.002073642110292627, 0.01015873015873014, -0.021994295969128597, 0.017958267458705972, -0.00761904761904762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.039542803512966226, -0.017684079335182016, 0.006125944778722815, -0.0012504532416948056, -0.04566009650544708, 0.01429387115035325, 0.0, -0.0036097475785076836, 0.0020419815929076063 } };
    static const double coefficients13[1][35] = { { 0.04398859193825726, -0.0231840235981023, -0.013385302265263025, 0.018929675999998195, 0.04337333657549033, 0.03359684204526462, 0.027431706659927443, 0.01939714579875487, 0.01583770322443999, 0.011198947348421542, -0.026877473636211728, -0.02271561119999787, 0.003278716060281398, -0.01759543677530287, 0.0025396825396825293, 0.012441852661755856, -0.010158730158730147, 0.0014662863979418993, 0.007183306983482398, 0.007619047619047647, 0.0, 0.0, -0.024311589644722766, 0.0, -0.020547043427451204, -0.03163424281037299, 0.0, -0.015915671401663795, -0.02450377911489126, -0.026259518075590984, 0.0, -0.009188917168084225, -0.014147263468145608, -0.0151609398297323, -0.012251889557445647 } };
    static const double coefficients14[1][35] = { { -0.03299144395369305, 0.017388017698576775, 0.010038976698947245, -0.014197256999998676, -0.00722888942924837, -0.00559947367421078, -0.06172133998483674, -0.003232857633125811, -0.03563483225498993, -0.050395263067896955, 0.0, 0.0, 0.034426518632954824, 0.0, 0.02666666666666666, -0.009331389496316886, 0.0, 0.015396007178390021, -0.005387480237611803, -0.01904761904761907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03690661661210182, 0.0, 0.0, 0.02858774230070648, 0.05251903615118197, 0.0, 0.0, 0.016505140712836538, 0.030321879659464597, 0.030629723893614094 } };
    static const double coefficients15[1][35] = { { 0.043988591938257146, -0.023184023598102354, -0.013385302265262968, 0.018929675999998227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06719368409052931, 0.0, 0.0, 0.0, 0.0, 0.0, -0.031104631654389564, 0.0, 0.0, -0.017958267458705962, 0.025396825396825407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0437658634593183, 0.0, 0.0, 0.0, -0.025268233049553827, -0.04083963185815212 } };
    static const double coefficients16[1][35] = { { 0.04398859193825711, -0.023184023598102246, 0.013385302265263, -0.018929675999998192, 0.043373336575490355, 0.033596842045264634, 0.027431706659927477, 0.01939714579875487, 0.015837703224439958, 0.01119894734842156, -0.026877473636211745, 0.0, -0.02295101242196986, 0.011730291183535252, -0.007619047619047634, -0.016589136882341097, 0.010158730158730148, -0.0014662863979419036, -0.007183306983482391, -0.007619047619047624, 0.0, -0.024161052038524488, 0.002701287738302527, -0.03573467787588307, -0.01141502412636176, 0.003954280351296623, -0.03558852316166963, -0.015915671401663813, -0.0030629723893614113, 0.0037513597250844206, -0.022830048252723528, -0.01123089876099183, -0.003536815867036399, 0.000721949515701541, 0.002041981592907602 } };
    static const double coefficients17[1][35] = { { -0.032991443953692925, 0.017388017698576744, -0.010038976698947235, 0.01419725699999862, -0.007228889429248374, -0.06159421041631847, 0.006857926664981856, -0.06142429502939045, -0.003959425806109959, 0.005599473674210749, 0.0, 0.034073416799996786, -0.004918074090422132, 0.0, 0.026666666666666686, -0.009331389496316865, -0.01523809523809523, 0.01759543677530288, 0.005387480237611785, -0.007619047619047608, 0.0, 0.0, 0.0, 0.03573467787588306, -0.009132019301089426, 0.0013180934504322158, 0.059314205269449374, 0.0, -0.007146935575176623, 0.0025009064833896246, 0.04566009650544707, 0.004083963185815195, -0.004715754489381868, -0.0014438990314030815, 0.002041981592907609 } };
    static const double coefficients18[1][35] = { { 0.04398859193825715, -0.02318402359810226, 0.013385302265262996, -0.018929675999998206, 0.0, 0.0, 0.0, 0.05819143739626465, -0.031675406448879936, 0.011198947348421558, 0.0, 0.0, 0.0, -0.029325727958838105, 0.010158730158730148, -0.002073642110292627, 0.01015873015873014, -0.021994295969128597, 0.017958267458705972, -0.00761904761904762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03954280351296624, 0.017684079335181995, -0.006125944778722807, 0.001250453241694807, -0.04566009650544708, 0.01429387115035324, 0.0, -0.003609747578507687, 0.0020419815929076032 } };
    static const double coefficients19[1][35] = { { 0.04398859193825711, 0.0, -0.026770604530525967, -0.018929675999998202, 0.04337333657549036, 0.03359684204526463, 0.027431706659927432, 0.019397145798754876, 0.015837703224439958, 0.011198947348421556, 0.013438736818105855, -0.011357805599998926, -0.009836148180844226, -0.020528009571186695, -0.01777777777777778, -0.014515494772048455, -0.015238095238095238, -0.013196577581477163, -0.010774960475223574, -0.0076190476190476164, -0.054792115806536486, -0.02416105203852447, -0.02161030190642023, -0.005104953982269008, -0.004566009650544709, -0.003954280351296628, 0.00395428035129663, 0.0035368158670364015, 0.003062972389361401, 0.0025009064833896107, 0.004566009650544711, 0.004083963185815216, 0.003536815867036397, 0.002887798062806152, 0.0020419815929075998 } };
    static const double coefficients20[1][35] = { { -0.03299144395369279, 0.0, 0.02007795339789451, 0.014197256999998688, -0.08674667315098068, 0.0, 0.0, 0.009698572899377434, 0.00791885161221997, 0.005599473674210777, 0.0, 0.03407341679999679, 0.029508444542532694, 0.0, 0.0, 0.0, -0.01523809523809525, -0.013196577581477166, -0.010774960475223597, -0.007619047619047627, 0.08218817370980473, 0.0, 0.0, -0.010209907964538032, -0.009132019301089417, -0.007908560702593255, 0.0, 0.0, 0.0, 0.0, 0.004566009650544712, 0.004083963185815212, 0.003536815867036405, 0.002887798062806154, 0.0020419815929076054 } };
    static const double coefficients21[1][35] = { { 0.04398859193825729, 0.0, -0.026770604530525943, -0.01892967599999822, 0.04337333657549036, -0.033596842045264634, -0.02743170665992745, 0.01939714579875488, 0.01583770322443995, 0.011198947348421532, -0.013438736818105866, -0.011357805599998935, -0.009836148180844223, 0.020528009571186688, 0.01777777777777777, 0.014515494772048472, -0.015238095238095243, -0.013196577581477156, -0.010774960475223583, -0.007619047619047611, -0.05479211580653649, 0.02416105203852446, 0.02161030190642023, -0.005104953982269011, -0.00456600965054471, -0.003954280351296631, -0.003954280351296629, -0.0035368158670363984, -0.003062972389361407, -0.002500906483389618, 0.00456600965054471, 0.004083963185815213, 0.0035368158670364097, 0.002887798062806153, 0.002041981592907609 } };
    static const double coefficients22[1][35] = { { 0.04398859193825708, 0.13910414158861353, -0.08031181359157798, -0.05678902799999453, 0.05783111543398716, 0.033596842045264565, 0.027431706659927432, -0.042027149230635566, -0.04751310967331989, -0.016798421022632307, 0.0, 0.045431222399995724, 0.03934459272337693, -0.05865145591767627, 0.002539682539682548, -0.06013562119848649, 0.04063492063492066, -0.010997147984564325, 0.01795826745870599, 0.039365079365079346, 0.0, 0.0, 0.0, 0.0, 0.041094086854902366, -0.010544747603457668, 0.0, -0.05305223800554601, -0.02450377911489125, 0.01750634538372731, 0.0, 0.03675566867233692, 0.023578772446909323, 0.0, -0.012251889557445635 } };
    static const double coefficients23[1][35] = { { 0.04398859193825721, 0.0, 0.1606236271831557, -0.056789027999994614, 0.0, 0.07839263143895081, -0.027431706659927474, 0.00969857289937742, 0.0475131096733199, -0.01679842102263231, 0.0, 0.0, 0.0, 0.05865145591767624, 0.033015873015873005, -0.014515494772048474, -0.06095238095238094, 0.024193725566041463, -0.061058109359600286, 0.03936507936507935, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053052238005545996, -0.03267170548652169, 0.008753172691863651, 0.0, -0.05513350300850534, 0.014147263468145597, 0.015160939829732295, -0.012251889557445633 } };
    static const double coefficients24[1][35] = { { 0.043988591938257264, 0.0, 0.0, 0.17036708399998396, 0.0, -0.011198947348421511, 0.0822951199797824, 0.009698572899377457, 0.04751310967331994, -0.01679842102263232, 0.0, 0.0, 0.0, 0.0, 0.05333333333333334, 0.04354648431614532, 0.0, -0.04618802153517002, 0.02514157444218828, -0.08253968253968254, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05717548460141294, -0.026259518075590967, 0.0, 0.0, -0.04951542213850959, -0.01516093982973229, 0.030629723893614087 } };
    static const double coefficients25[1][35] = { { 0.043988591938257174, -0.1391041415886136, -0.08031181359157798, -0.056789027999994614, 0.05783111543398713, -0.0335968420452646, -0.02743170665992745, -0.042027149230635566, -0.0475131096733199, -0.016798421022632355, 0.0, 0.04543122239999571, 0.03934459272337692, 0.05865145591767627, -0.0025396825396825145, 0.06013562119848647, 0.040634920634920656, -0.01099714798456433, 0.017958267458705993, 0.03936507936507937, 0.0, 0.0, 0.0, 0.0, 0.041094086854902366, -0.010544747603457671, 0.0, 0.05305223800554601, 0.024503779114891266, -0.017506345383727324, 0.0, 0.03675566867233692, 0.02357877244690933, 0.0, -0.012251889557445628 } };
    static const double coefficients26[1][35] = { { 0.043988591938257306, 0.0, 0.16062362718315581, -0.05678902799999469, 0.0, -0.07839263143895077, 0.02743170665992744, 0.009698572899377398, 0.04751310967331991, -0.016798421022632314, 0.0, 0.0, 0.0, -0.05865145591767624, -0.033015873015873005, 0.01451549477204846, -0.06095238095238094, 0.024193725566041463, -0.061058109359600286, 0.03936507936507938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.053052238005545975, 0.03267170548652168, -0.008753172691863657, 0.0, -0.05513350300850535, 0.014147263468145599, 0.015160939829732304, -0.012251889557445647 } };
    static const double coefficients27[1][35] = { { 0.04398859193825711, 0.0, 0.0, 0.1703670839999839, 0.0, 0.01119894734842152, -0.08229511997978231, 0.009698572899377447, 0.04751310967331991, -0.016798421022632334, 0.0, 0.0, 0.0, 0.0, -0.053333333333333344, -0.0435464843161454, 0.0, -0.04618802153517004, 0.025141574442188307, -0.08253968253968254, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05717548460141295, 0.026259518075590984, 0.0, 0.0, -0.04951542213850959, -0.015160939829732286, 0.030629723893614087 } };
    static const double coefficients28[1][35] = { { 0.04398859193825719, -0.13910414158861364, -0.08031181359157796, -0.056789027999994655, -0.043373336575490355, 0.044795789393686135, -0.0548634133198549, 0.04849286449688725, 0.0, -0.016798421022632355, 0.08063242090863515, 0.022715611199997866, -0.003278716060281415, -0.005865145591767625, 0.030476190476190476, 0.045620126426438035, -0.010158730158730157, 0.027126298361925275, 0.04309984190089435, 0.03936507936507936, 0.0, 0.0, 0.07293476893416828, 0.0, 0.02054704342745119, 0.031634242810373, 0.0, -0.005305223800554606, -0.008167926371630389, -0.008753172691863651, 0.0, -0.009188917168084215, -0.014147263468145604, -0.015160939829732297, -0.012251889557445621 } };
    static const double coefficients29[1][35] = { { 0.04398859193825713, 0.13910414158861367, -0.08031181359157794, -0.05678902799999463, -0.04337333657549037, -0.0447957893936862, 0.054863413319854885, 0.0484928644968872, 0.0, -0.01679842102263226, -0.08063242090863515, 0.02271561119999788, -0.003278716060281409, 0.0058651455917676214, -0.030476190476190494, -0.04562012642643805, -0.01015873015873015, 0.027126298361925275, 0.04309984190089433, 0.039365079365079346, 0.0, 0.0, -0.07293476893416828, 0.0, 0.020547043427451197, 0.031634242810373005, 0.0, 0.00530522380055459, 0.008167926371630411, 0.00875317269186364, 0.0, -0.009188917168084204, -0.014147263468145608, -0.015160939829732292, -0.01225188955744564 } };
    static const double coefficients30[1][35] = { { 0.0439885919382573, 0.0, 0.0, 0.17036708399998388, 0.014457778858496745, 0.0, 0.0, -0.0032328576331258673, -0.09502621934663974, -0.016798421022632334, 0.0, 0.0, -0.06885303726590965, 0.0, 0.0, 0.0, 0.0, 0.015396007178389999, -0.05028314888437674, -0.08253968253968251, 0.0, 0.0, 0.0, 0.0, 0.0, -0.07381323322420365, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016505140712836548, 0.030321879659464597, 0.030629723893614076 } };
    static const double coefficients31[1][35] = { { 0.04398859193825734, -0.13910414158861362, -0.08031181359157785, -0.05678902799999469, -0.043373336575490404, -0.04479578939368615, 0.0548634133198549, -0.009698572899377415, 0.031675406448879936, 0.03919631571947541, 0.08063242090863512, 0.0, 0.022951012421969876, 0.05278631032590866, 0.010158730158730167, -0.012441852661755832, 0.06095238095238093, 0.016862293576331924, -0.00718330698348239, -0.013968253968253968, 0.0, 0.07248315611557339, -0.008103863214907593, 0.035734677875883095, 0.011415024126361768, -0.00395428035129662, -0.011862841053889886, -0.005305223800554606, -0.0010209907964537992, 0.0012504532416948149, -0.022830048252723556, -0.01123089876099184, -0.003536815867036398, 0.0007219495157015318, 0.00204198159290761 } };
    static const double coefficients32[1][35] = { { 0.043988591938257326, 0.13910414158861367, -0.08031181359157788, -0.05678902799999469, -0.04337333657549037, 0.04479578939368619, -0.054863413319854885, -0.009698572899377419, 0.031675406448879936, 0.03919631571947544, -0.08063242090863514, 0.0, 0.022951012421969882, -0.05278631032590862, -0.010158730158730162, 0.012441852661755815, 0.06095238095238094, 0.016862293576331924, -0.0071833069834823715, -0.013968253968253968, 0.0, -0.0724831561155734, 0.0081038632149076, 0.035734677875883095, 0.011415024126361762, -0.003954280351296619, 0.011862841053889867, 0.005305223800554593, 0.0010209907964537992, -0.0012504532416948058, -0.022830048252723546, -0.011230898760991835, -0.0035368158670364093, 0.0007219495157015299, 0.0020419815929075963 } };
    static const double coefficients33[1][35] = { { 0.043988591938257195, 0.0, 0.16062362718315587, -0.056789027999994704, 0.014457778858496837, 0.0, 0.0, -0.06142429502939049, -0.06335081289775983, 0.03919631571947542, 0.0, -0.06814683359999359, 0.009836148180844235, 0.0, 0.0, 0.0, -0.09142857142857146, 0.02859258475986719, 0.014366613966964743, -0.013968253968253951, 0.0, 0.0, 0.0, -0.0714693557517662, 0.01826403860217884, -0.0026361869008644234, 0.0, 0.0, 0.0, 0.0, 0.045660096505447105, 0.0040839631858151995, -0.004715754489381863, -0.0014438990314030624, 0.002041981592907599 } };
    static const double coefficients34[1][35] = { { 0.3519087355060576, 0.0, 0.0, 0.0, -0.1156622308679743, 0.0, 0.0, -0.12931430532503255, 0.0, -0.13438736818105862, 0.0, -0.09086244479999145, -0.07868918544675388, 0.0, 0.0, 0.0, 0.04063492063492065, -0.08797718387651442, 0.0, 0.07111111111111108, 0.0, 0.0, 0.0, 0.0, -0.08218817370980472, 0.021089495206915318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.036755668672336914, 0.023578772446909348, 0.0, -0.012251889557445604 } };
    for (std::size_t k = 0; k < num_points * 35; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues4[35] = {};
        basisvalues4[0] = 1.0;
        const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues4[1] = tmp1_4;
        const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues4[4] = 1.5 * tmp1_4 * basisvalues4[1] - 0.5 * tmp2_4 * basisvalues4[0];
        basisvalues4[10] = 1.6666666666666667 * tmp1_4 * basisvalues4[4] - 0.6666666666666666 * tmp2_4 * basisvalues4[1];
        basisvalues4[20] = 1.75 * tmp1_4 * basisvalues4[10] - 0.75 * tmp2_4 * basisvalues4[4];
        basisvalues4[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues4[0];
        basisvalues4[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues4[1];
        basisvalues4[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues4[4];
        basisvalues4[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues4[10];
        const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_4 = 0.5 * (1.0 - Y[2]);
        const double tmp5_4 = tmp4_4 * tmp4_4;
        basisvalues4[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues4[2] - 0.5555555555555556 * tmp5_4 * basisvalues4[0];
        basisvalues4[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues4[7] - 0.7 * tmp5_4 * basisvalues4[2];
        basisvalues4[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues4[16] - 0.7714285714285715 * tmp5_4 * basisvalues4[7];
        basisvalues4[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues4[5] - 0.56 * tmp5_4 * basisvalues4[1];
        basisvalues4[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues4[13] - 0.7142857142857143 * tmp5_4 * basisvalues4[5];
        basisvalues4[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues4[11] - 0.5510204081632653 * tmp5_4 * basisvalues4[4];
        basisvalues4[3] = (2.0 * Y[2] + 1.0) * basisvalues4[0];
        basisvalues4[8] = (3.0 * Y[2] + 2.0) * basisvalues4[2];
        basisvalues4[17] = (4.0 * Y[2] + 3.0) * basisvalues4[7];
        basisvalues4[31] = (5.0 * Y[2] + 4.0) * basisvalues4[16];
        basisvalues4[6] = (3.0 * Y[2] + 2.0) * basisvalues4[1];
        basisvalues4[14] = (4.0 * Y[2] + 3.0) * basisvalues4[5];
        basisvalues4[27] = (5.0 * Y[2] + 4.0) * basisvalues4[13];
        basisvalues4[12] = (4.0 * Y[2] + 3.0) * basisvalues4[4];
        basisvalues4[24] = (5.0 * Y[2] + 4.0) * basisvalues4[11];
        basisvalues4[22] = (5.0 * Y[2] + 4.0) * basisvalues4[10];
        basisvalues4[9] = (0.3125 + 1.875 * Y[2]) * basisvalues4[3] - 0.5625 * basisvalues4[0];
        basisvalues4[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues4[9] - 0.7111111111111111 * basisvalues4[3];
        basisvalues4[34] = (0.09375 + 1.875 * Y[2]) * basisvalues4[19] - 0.78125 * basisvalues4[9];
        basisvalues4[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues4[8] - 0.5555555555555556 * basisvalues4[2];
        basisvalues4[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues4[18] - 0.7142857142857143 * basisvalues4[8];
        basisvalues4[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues4[17] - 0.546875 * basisvalues4[7];
        basisvalues4[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues4[6] - 0.5555555555555556 * basisvalues4[1];
        basisvalues4[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues4[15] - 0.7142857142857143 * basisvalues4[6];
        basisvalues4[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues4[14] - 0.546875 * basisvalues4[5];
        basisvalues4[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues4[12] - 0.546875 * basisvalues4[4];
        basisvalues4[0] *= std::sqrt(0.75);
        basisvalues4[3] *= std::sqrt(1.25);
        basisvalues4[9] *= std::sqrt(1.75);
        basisvalues4[19] *= std::sqrt(2.25);
        basisvalues4[34] *= std::sqrt(2.75);
        basisvalues4[2] *= std::sqrt(2.5);
        basisvalues4[8] *= std::sqrt(3.5);
        basisvalues4[18] *= std::sqrt(4.5);
        basisvalues4[33] *= std::sqrt(5.5);
        basisvalues4[7] *= std::sqrt(5.25);
        basisvalues4[17] *= std::sqrt(6.75);
        basisvalues4[32] *= std::sqrt(8.25);
        basisvalues4[16] *= std::sqrt(9.0);
        basisvalues4[31] *= std::sqrt(11.0);
        basisvalues4[30] *= std::sqrt(13.75);
        basisvalues4[1] *= std::sqrt(7.5);
        basisvalues4[6] *= std::sqrt(10.5);
        basisvalues4[15] *= std::sqrt(13.5);
        basisvalues4[29] *= std::sqrt(16.5);
        basisvalues4[5] *= std::sqrt(15.75);
        basisvalues4[14] *= std::sqrt(20.25);
        basisvalues4[28] *= std::sqrt(24.75);
        basisvalues4[13] *= std::sqrt(27.0);
        basisvalues4[27] *= std::sqrt(33.0);
        basisvalues4[26] *= std::sqrt(41.25);
        basisvalues4[4] *= std::sqrt(26.25);
        basisvalues4[12] *= std::sqrt(33.75);
        basisvalues4[25] *= std::sqrt(41.25);
        basisvalues4[11] *= std::sqrt(45.0);
        basisvalues4[24] *= std::sqrt(55.0);
        basisvalues4[23] *= std::sqrt(68.75);
        basisvalues4[10] *= std::sqrt(63.0);
        basisvalues4[22] *= std::sqrt(77.0);
        basisvalues4[21] *= std::sqrt(96.25);
        basisvalues4[20] *= std::sqrt(123.75);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip] += coefficients0[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 1] += coefficients1[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 2] += coefficients2[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 3] += coefficients3[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 4] += coefficients4[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 5] += coefficients5[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 6] += coefficients6[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 7] += coefficients7[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 8] += coefficients8[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 9] += coefficients9[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 10] += coefficients10[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 11] += coefficients11[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 12] += coefficients12[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 13] += coefficients13[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 14] += coefficients14[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 15] += coefficients15[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 16] += coefficients16[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 17] += coefficients17[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 18] += coefficients18[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 19] += coefficients19[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 20] += coefficients20[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 21] += coefficients21[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 22] += coefficients22[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 23] += coefficients23[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 24] += coefficients24[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 25] += coefficients25[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 26] += coefficients26[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 27] += coefficients27[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 28] += coefficients28[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 29] += coefficients29[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 30] += coefficients30[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 31] += coefficients31[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 32] += coefficients32[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 33] += coefficients33[0][r] * basisvalues4[r];
        for (std::size_t r = 0; r < 35; ++r)
            reference_values[35 * ip + 34] += coefficients34[0][r] * basisvalues4[r];
    }
}

void poisson3d_4_finite_element_2::evaluate_reference_basis_derivatives(double * reference_values,
                                                         std::size_t order,
                                                         std::size_t num_points,
                                                         const double * X) const
{
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 35 * num_derivatives, 0.0);
    if (order > 4)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][35][35] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.499090833947008, 0.0, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, 0.0, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, 0.0, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, 0.0, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.605769149479935, 0.0, 0.0, 0.0, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 0.0, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.531372124791044, 0.0, 3.5456210417116667, -2.507132682112032, 4.787135538781696, 0.0, 0.0, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 0.0, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.052982440952173, 0.0, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, 0.0, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 0.0, 0.0, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 2.5951288749406802, 0.0, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, 0.0, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, 0.0, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 0.0, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 0.0, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, 0.0, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, 0.0, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][35] = { { -0.013746434980705125, -0.014490014748813906, -0.008365813915789357, -0.00591552374999943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.006719368409052926, -0.005678902799999458, -0.004918074090422109, -0.004398859193825713, -0.0038095238095238074, -0.0031104631654389624, -0.00253968253968254, -0.002199429596912853, -0.0017958267458705983, -0.0012698412698412807, 0.013698028951634123, 0.012080526019262244, 0.010805150953210114, 0.010209907964538027, 0.009132019301089426, 0.007908560702593246, 0.007908560702593253, 0.007073631734072807, 0.006125944778722807, 0.005001812966779234, 0.00456600965054471, 0.004083963185815212, 0.003536815867036402, 0.0028877980628061553, 0.0020419815929076093 } };
    static const double coefficients1[1][35] = { { -0.013746434980705451, 0.014490014748813866, -0.008365813915789345, -0.0059155237499994556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0067193684090529225, -0.005678902799999461, -0.004918074090422115, 0.004398859193825714, 0.0038095238095238065, 0.0031104631654389698, -0.0025396825396825375, -0.0021994295969128557, -0.0017958267458705983, -0.0012698412698412714, 0.013698028951634116, -0.012080526019262234, -0.010805150953210114, 0.010209907964538028, 0.00913201930108942, 0.00790856070259326, -0.007908560702593256, -0.007073631734072807, -0.006125944778722825, -0.0050018129667792465, 0.004566009650544712, 0.004083963185815214, 0.0035368158670364062, 0.0028877980628061544, 0.00204198159290761 } };
    static const double coefficients2[1][35] = { { -0.013746434980705267, 0.0, 0.01673162783157876, -0.0059155237499994556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010158730158730166, -0.006598288790738582, 0.0035916534917411888, -0.0012698412698412614, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02283004825272354, -0.016335852743260847, 0.010610447601109206, -0.0057755961256123, 0.0020419815929076015 } };
    static const double coefficients3[1][35] = { { -0.013746434980705383, 0.0, 0.0, 0.017746571249998316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012698412698412698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.030629723893614087 } };
    static const double coefficients4[1][35] = { { 0.043988591938257195, 0.0, 0.02677060453052602, 0.0189296759999982, 0.0, 0.0, 0.0, 0.05819143739626466, -0.03167540644887993, 0.011198947348421556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040634920634920614, 0.004398859193825727, -0.01436661396696479, 0.007619047619047625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.036755668672336886, -0.042441790404436804, 0.030321879659464597, -0.012251889557445633 } };
    static const double coefficients5[1][35] = { { -0.03299144395369299, 0.0, -0.020077953397894525, -0.014197256999998653, 0.0, 0.0, 0.0, -0.009698572899377422, 0.07126966450997983, -0.050395263067896955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04618802153517006, 0.010774960475223578, -0.019047619047619056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0495154221385096, -0.06064375931892919, 0.03062972389361408 } };
    static const double coefficients6[1][35] = { { 0.043988591938257195, 0.0, 0.026770604530525943, 0.01892967599999823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0671936840905293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03591653491741196, 0.02539682539682539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.050536466099107634, -0.040839631858152106 } };
    static const double coefficients7[1][35] = { { 0.043988591938257056, 0.02318402359810227, -0.013385302265262945, 0.018929675999998202, 0.04337333657549036, -0.03359684204526462, -0.027431706659927488, 0.01939714579875486, 0.01583770322443996, 0.011198947348421555, 0.026877473636211725, -0.022715611199997883, 0.0032787160602813993, 0.01759543677530287, -0.0025396825396825306, -0.012441852661755856, -0.010158730158730145, 0.001466286397941892, 0.007183306983482361, 0.007619047619047628, 0.0, 0.0, 0.024311589644722773, 0.0, -0.020547043427451207, -0.031634242810373, 0.0, 0.015915671401663802, 0.024503779114891263, 0.02625951807559098, 0.0, -0.009188917168084215, -0.014147263468145592, -0.01516093982973229, -0.012251889557445638 } };
    static const double coefficients8[1][35] = { { -0.032991443953692995, -0.017388017698576706, 0.010038976698947216, -0.014197256999998673, -0.0072288894292483535, 0.005599473674210736, 0.061721339984836796, -0.003232857633125797, -0.03563483225498993, -0.05039526306789696, 0.0, 0.0, 0.03442651863295485, 0.0, -0.026666666666666693, 0.009331389496316898, 0.0, 0.015396007178390032, -0.005387480237611765, -0.019047619047619088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03690661661210182, 0.0, 0.0, -0.02858774230070647, -0.05251903615118194, 0.0, 0.0, 0.01650514071283653, 0.030321879659464597, 0.030629723893614107 } };
    static const double coefficients9[1][35] = { { 0.04398859193825728, 0.023184023598102222, -0.013385302265263, 0.018929675999998227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06719368409052928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.031104631654389554, 0.0, 0.0, -0.017958267458705962, 0.025396825396825418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04376586345931829, 0.0, 0.0, 0.0, -0.025268233049553827, -0.04083963185815212 } };
    static const double coefficients10[1][35] = { { 0.043988591938257146, 0.02318402359810225, 0.013385302265263006, -0.018929675999998216, 0.043373336575490376, -0.033596842045264634, -0.02743170665992746, 0.019397145798754876, 0.015837703224439954, 0.011198947348421534, 0.02687747363621169, 0.0, -0.022951012421969882, -0.011730291183535253, 0.007619047619047612, 0.0165891368823411, 0.010158730158730152, -0.0014662863979419084, -0.007183306983482392, -0.007619047619047611, 0.0, 0.024161052038524453, -0.0027012877383025278, -0.035734677875883095, -0.011415024126361773, 0.003954280351296621, 0.03558852316166961, 0.0159156714016638, 0.0030629723893614113, -0.0037513597250844193, -0.02283004825272354, -0.011230898760991828, -0.0035368158670363897, 0.0007219495157015412, 0.0020419815929076084 } };
    static const double coefficients11[1][35] = { { -0.03299144395369284, -0.017388017698576716, -0.010038976698947238, 0.014197256999998608, -0.007228889429248384, 0.061594210416318504, -0.006857926664981875, -0.06142429502939045, -0.00395942580610997, 0.005599473674210764, 0.0, 0.0340734167999968, -0.0049180740904221166, 0.0, -0.026666666666666658, 0.009331389496316884, -0.015238095238095224, 0.017595436775302883, 0.005387480237611789, -0.007619047619047603, 0.0, 0.0, 0.0, 0.03573467787588308, -0.009132019301089419, 0.0013180934504322145, -0.059314205269449354, 0.0, 0.007146935575176615, -0.002500906483389623, 0.04566009650544707, 0.004083963185815198, -0.0047157544893818735, -0.0014438990314030772, 0.0020419815929075998 } };
    static const double coefficients12[1][35] = { { 0.043988591938257195, 0.02318402359810225, 0.01338530226526301, -0.01892967599999821, 0.0, 0.0, 0.0, 0.058191437396264645, -0.03167540644887995, 0.011198947348421553, 0.0, 0.0, 0.0, 0.029325727958838154, -0.010158730158730174, 0.002073642110292627, 0.01015873015873014, -0.021994295969128597, 0.017958267458705972, -0.00761904761904762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.039542803512966226, -0.017684079335182016, 0.006125944778722815, -0.0012504532416948056, -0.04566009650544708, 0.01429387115035325, 0.0, -0.0036097475785076836, 0.0020419815929076063 } };
    static const double coefficients13[1][35] = { { 0.04398859193825726, -0.0231840235981023, -0.013385302265263025, 0.018929675999998195, 0.04337333657549033, 0.03359684204526462, 0.027431706659927443, 0.01939714579875487, 0.01583770322443999, 0.011198947348421542, -0.026877473636211728, -0.02271561119999787, 0.003278716060281398, -0.01759543677530287, 0.0025396825396825293, 0.012441852661755856, -0.010158730158730147, 0.0014662863979418993, 0.007183306983482398, 0.007619047619047647, 0.0, 0.0, -0.024311589644722766, 0.0, -0.020547043427451204, -0.03163424281037299, 0.0, -0.015915671401663795, -0.02450377911489126, -0.026259518075590984, 0.0, -0.009188917168084225, -0.014147263468145608, -0.0151609398297323, -0.012251889557445647 } };
    static const double coefficients14[1][35] = { { -0.03299144395369305, 0.017388017698576775, 0.010038976698947245, -0.014197256999998676, -0.00722888942924837, -0.00559947367421078, -0.06172133998483674, -0.003232857633125811, -0.03563483225498993, -0.050395263067896955, 0.0, 0.0, 0.034426518632954824, 0.0, 0.02666666666666666, -0.009331389496316886, 0.0, 0.015396007178390021, -0.005387480237611803, -0.01904761904761907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03690661661210182, 0.0, 0.0, 0.02858774230070648, 0.05251903615118197, 0.0, 0.0, 0.016505140712836538, 0.030321879659464597, 0.030629723893614094 } };
    static const double coefficients15[1][35] = { { 0.043988591938257146, -0.023184023598102354, -0.013385302265262968, 0.018929675999998227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06719368409052931, 0.0, 0.0, 0.0, 0.0, 0.0, -0.031104631654389564, 0.0, 0.0, -0.017958267458705962, 0.025396825396825407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0437658634593183, 0.0, 0.0, 0.0, -0.025268233049553827, -0.04083963185815212 } };
    static const double coefficients16[1][35] = { { 0.04398859193825711, -0.023184023598102246, 0.013385302265263, -0.018929675999998192, 0.043373336575490355, 0.033596842045264634, 0.027431706659927477, 0.01939714579875487, 0.015837703224439958, 0.01119894734842156, -0.026877473636211745, 0.0, -0.02295101242196986, 0.011730291183535252, -0.007619047619047634, -0.016589136882341097, 0.010158730158730148, -0.0014662863979419036, -0.007183306983482391, -0.007619047619047624, 0.0, -0.024161052038524488, 0.002701287738302527, -0.03573467787588307, -0.01141502412636176, 0.003954280351296623, -0.03558852316166963, -0.015915671401663813, -0.0030629723893614113, 0.0037513597250844206, -0.022830048252723528, -0.01123089876099183, -0.003536815867036399, 0.000721949515701541, 0.002041981592907602 } };
    static const double coefficients17[1][35] = { { -0.032991443953692925, 0.017388017698576744, -0.010038976698947235, 0.01419725699999862, -0.007228889429248374, -0.06159421041631847, 0.006857926664981856, -0.06142429502939045, -0.003959425806109959, 0.005599473674210749, 0.0, 0.034073416799996786, -0.004918074090422132, 0.0, 0.026666666666666686, -0.009331389496316865, -0.01523809523809523, 0.01759543677530288, 0.005387480237611785, -0.007619047619047608, 0.0, 0.0, 0.0, 0.03573467787588306, -0.009132019301089426, 0.0013180934504322158, 0.059314205269449374, 0.0, -0.007146935575176623, 0.0025009064833896246, 0.04566009650544707, 0.004083963185815195, -0.004715754489381868, -0.0014438990314030815, 0.002041981592907609 } };
    static const double coefficients18[1][35] = { { 0.04398859193825715, -0.02318402359810226, 0.013385302265262996, -0.018929675999998206, 0.0, 0.0, 0.0, 0.05819143739626465, -0.031675406448879936, 0.011198947348421558, 0.0, 0.0, 0.0, -0.029325727958838105, 0.010158730158730148, -0.002073642110292627, 0.01015873015873014, -0.021994295969128597, 0.017958267458705972, -0.00761904761904762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03954280351296624, 0.017684079335181995, -0.006125944778722807, 0.001250453241694807, -0.04566009650544708, 0.01429387115035324, 0.0, -0.003609747578507687, 0.0020419815929076032 } };
    static const double coefficients19[1][35] = { { 0.04398859193825711, 0.0, -0.026770604530525967, -0.018929675999998202, 0.04337333657549036, 0.03359684204526463, 0.027431706659927432, 0.019397145798754876, 0.015837703224439958, 0.011198947348421556, 0.013438736818105855, -0.011357805599998926, -0.009836148180844226, -0.020528009571186695, -0.01777777777777778, -0.014515494772048455, -0.015238095238095238, -0.013196577581477163, -0.010774960475223574, -0.0076190476190476164, -0.054792115806536486, -0.02416105203852447, -0.02161030190642023, -0.005104953982269008, -0.004566009650544709, -0.003954280351296628, 0.00395428035129663, 0.0035368158670364015, 0.003062972389361401, 0.0025009064833896107, 0.004566009650544711, 0.004083963185815216, 0.003536815867036397, 0.002887798062806152, 0.0020419815929075998 } };
    static const double coefficients20[1][35] = { { -0.03299144395369279, 0.0, 0.02007795339789451, 0.014197256999998688, -0.08674667315098068, 0.0, 0.0, 0.009698572899377434, 0.00791885161221997, 0.005599473674210777, 0.0, 0.03407341679999679, 0.029508444542532694, 0.0, 0.0, 0.0, -0.01523809523809525, -0.013196577581477166, -0.010774960475223597, -0.007619047619047627, 0.08218817370980473, 0.0, 0.0, -0.010209907964538032, -0.009132019301089417, -0.007908560702593255, 0.0, 0.0, 0.0, 0.0, 0.004566009650544712, 0.004083963185815212, 0.003536815867036405, 0.002887798062806154, 0.0020419815929076054 } };
    static const double coefficients21[1][35] = { { 0.04398859193825729, 0.0, -0.026770604530525943, -0.01892967599999822, 0.04337333657549036, -0.033596842045264634, -0.02743170665992745, 0.01939714579875488, 0.01583770322443995, 0.011198947348421532, -0.013438736818105866, -0.011357805599998935, -0.009836148180844223, 0.020528009571186688, 0.01777777777777777, 0.014515494772048472, -0.015238095238095243, -0.013196577581477156, -0.010774960475223583, -0.007619047619047611, -0.05479211580653649, 0.02416105203852446, 0.02161030190642023, -0.005104953982269011, -0.00456600965054471, -0.003954280351296631, -0.003954280351296629, -0.0035368158670363984, -0.003062972389361407, -0.002500906483389618, 0.00456600965054471, 0.004083963185815213, 0.0035368158670364097, 0.002887798062806153, 0.002041981592907609 } };
    static const double coefficients22[1][35] = { { 0.04398859193825708, 0.13910414158861353, -0.08031181359157798, -0.05678902799999453, 0.05783111543398716, 0.033596842045264565, 0.027431706659927432, -0.042027149230635566, -0.04751310967331989, -0.016798421022632307, 0.0, 0.045431222399995724, 0.03934459272337693, -0.05865145591767627, 0.002539682539682548, -0.06013562119848649, 0.04063492063492066, -0.010997147984564325, 0.01795826745870599, 0.039365079365079346, 0.0, 0.0, 0.0, 0.0, 0.041094086854902366, -0.010544747603457668, 0.0, -0.05305223800554601, -0.02450377911489125, 0.01750634538372731, 0.0, 0.03675566867233692, 0.023578772446909323, 0.0, -0.012251889557445635 } };
    static const double coefficients23[1][35] = { { 0.04398859193825721, 0.0, 0.1606236271831557, -0.056789027999994614, 0.0, 0.07839263143895081, -0.027431706659927474, 0.00969857289937742, 0.0475131096733199, -0.01679842102263231, 0.0, 0.0, 0.0, 0.05865145591767624, 0.033015873015873005, -0.014515494772048474, -0.06095238095238094, 0.024193725566041463, -0.061058109359600286, 0.03936507936507935, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053052238005545996, -0.03267170548652169, 0.008753172691863651, 0.0, -0.05513350300850534, 0.014147263468145597, 0.015160939829732295, -0.012251889557445633 } };
    static const double coefficients24[1][35] = { { 0.043988591938257264, 0.0, 0.0, 0.17036708399998396, 0.0, -0.011198947348421511, 0.0822951199797824, 0.009698572899377457, 0.04751310967331994, -0.01679842102263232, 0.0, 0.0, 0.0, 0.0, 0.05333333333333334, 0.04354648431614532, 0.0, -0.04618802153517002, 0.02514157444218828, -0.08253968253968254, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05717548460141294, -0.026259518075590967, 0.0, 0.0, -0.04951542213850959, -0.01516093982973229, 0.030629723893614087 } };
    static const double coefficients25[1][35] = { { 0.043988591938257174, -0.1391041415886136, -0.08031181359157798, -0.056789027999994614, 0.05783111543398713, -0.0335968420452646, -0.02743170665992745, -0.042027149230635566, -0.0475131096733199, -0.016798421022632355, 0.0, 0.04543122239999571, 0.03934459272337692, 0.05865145591767627, -0.0025396825396825145, 0.06013562119848647, 0.040634920634920656, -0.01099714798456433, 0.017958267458705993, 0.03936507936507937, 0.0, 0.0, 0.0, 0.0, 0.041094086854902366, -0.010544747603457671, 0.0, 0.05305223800554601, 0.024503779114891266, -0.017506345383727324, 0.0, 0.03675566867233692, 0.02357877244690933, 0.0, -0.012251889557445628 } };
    static const double coefficients26[1][35] = { { 0.043988591938257306, 0.0, 0.16062362718315581, -0.05678902799999469, 0.0, -0.07839263143895077, 0.02743170665992744, 0.009698572899377398, 0.04751310967331991, -0.016798421022632314, 0.0, 0.0, 0.0, -0.05865145591767624, -0.033015873015873005, 0.01451549477204846, -0.06095238095238094, 0.024193725566041463, -0.061058109359600286, 0.03936507936507938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.053052238005545975, 0.03267170548652168, -0.008753172691863657, 0.0, -0.05513350300850535, 0.014147263468145599, 0.015160939829732304, -0.012251889557445647 } };
    static const double coefficients27[1][35] = { { 0.04398859193825711, 0.0, 0.0, 0.1703670839999839, 0.0, 0.01119894734842152, -0.08229511997978231, 0.009698572899377447, 0.04751310967331991, -0.016798421022632334, 0.0, 0.0, 0.0, 0.0, -0.053333333333333344, -0.0435464843161454, 0.0, -0.04618802153517004, 0.025141574442188307, -0.08253968253968254, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05717548460141295, 0.026259518075590984, 0.0, 0.0, -0.04951542213850959, -0.015160939829732286, 0.030629723893614087 } };
    static const double coefficients28[1][35] = { { 0.04398859193825719, -0.13910414158861364, -0.08031181359157796, -0.056789027999994655, -0.043373336575490355, 0.044795789393686135, -0.0548634133198549, 0.04849286449688725, 0.0, -0.016798421022632355, 0.08063242090863515, 0.022715611199997866, -0.003278716060281415, -0.005865145591767625, 0.030476190476190476, 0.045620126426438035, -0.010158730158730157, 0.027126298361925275, 0.04309984190089435, 0.03936507936507936, 0.0, 0.0, 0.07293476893416828, 0.0, 0.02054704342745119, 0.031634242810373, 0.0, -0.005305223800554606, -0.008167926371630389, -0.008753172691863651, 0.0, -0.009188917168084215, -0.014147263468145604, -0.015160939829732297, -0.012251889557445621 } };
    static const double coefficients29[1][35] = { { 0.04398859193825713, 0.13910414158861367, -0.08031181359157794, -0.05678902799999463, -0.04337333657549037, -0.0447957893936862, 0.054863413319854885, 0.0484928644968872, 0.0, -0.01679842102263226, -0.08063242090863515, 0.02271561119999788, -0.003278716060281409, 0.0058651455917676214, -0.030476190476190494, -0.04562012642643805, -0.01015873015873015, 0.027126298361925275, 0.04309984190089433, 0.039365079365079346, 0.0, 0.0, -0.07293476893416828, 0.0, 0.020547043427451197, 0.031634242810373005, 0.0, 0.00530522380055459, 0.008167926371630411, 0.00875317269186364, 0.0, -0.009188917168084204, -0.014147263468145608, -0.015160939829732292, -0.01225188955744564 } };
    static const double coefficients30[1][35] = { { 0.0439885919382573, 0.0, 0.0, 0.17036708399998388, 0.014457778858496745, 0.0, 0.0, -0.0032328576331258673, -0.09502621934663974, -0.016798421022632334, 0.0, 0.0, -0.06885303726590965, 0.0, 0.0, 0.0, 0.0, 0.015396007178389999, -0.05028314888437674, -0.08253968253968251, 0.0, 0.0, 0.0, 0.0, 0.0, -0.07381323322420365, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016505140712836548, 0.030321879659464597, 0.030629723893614076 } };
    static const double coefficients31[1][35] = { { 0.04398859193825734, -0.13910414158861362, -0.08031181359157785, -0.05678902799999469, -0.043373336575490404, -0.04479578939368615, 0.0548634133198549, -0.009698572899377415, 0.031675406448879936, 0.03919631571947541, 0.08063242090863512, 0.0, 0.022951012421969876, 0.05278631032590866, 0.010158730158730167, -0.012441852661755832, 0.06095238095238093, 0.016862293576331924, -0.00718330698348239, -0.013968253968253968, 0.0, 0.07248315611557339, -0.008103863214907593, 0.035734677875883095, 0.011415024126361768, -0.00395428035129662, -0.011862841053889886, -0.005305223800554606, -0.0010209907964537992, 0.0012504532416948149, -0.022830048252723556, -0.01123089876099184, -0.003536815867036398, 0.0007219495157015318, 0.00204198159290761 } };
    static const double coefficients32[1][35] = { { 0.043988591938257326, 0.13910414158861367, -0.08031181359157788, -0.05678902799999469, -0.04337333657549037, 0.04479578939368619, -0.054863413319854885, -0.009698572899377419, 0.031675406448879936, 0.03919631571947544, -0.08063242090863514, 0.0, 0.022951012421969882, -0.05278631032590862, -0.010158730158730162, 0.012441852661755815, 0.06095238095238094, 0.016862293576331924, -0.0071833069834823715, -0.013968253968253968, 0.0, -0.0724831561155734, 0.0081038632149076, 0.035734677875883095, 0.011415024126361762, -0.003954280351296619, 0.011862841053889867, 0.005305223800554593, 0.0010209907964537992, -0.0012504532416948058, -0.022830048252723546, -0.011230898760991835, -0.0035368158670364093, 0.0007219495157015299, 0.0020419815929075963 } };
    static const double coefficients33[1][35] = { { 0.043988591938257195, 0.0, 0.16062362718315587, -0.056789027999994704, 0.014457778858496837, 0.0, 0.0, -0.06142429502939049, -0.06335081289775983, 0.03919631571947542, 0.0, -0.06814683359999359, 0.009836148180844235, 0.0, 0.0, 0.0, -0.09142857142857146, 0.02859258475986719, 0.014366613966964743, -0.013968253968253951, 0.0, 0.0, 0.0, -0.0714693557517662, 0.01826403860217884, -0.0026361869008644234, 0.0, 0.0, 0.0, 0.0, 0.045660096505447105, 0.0040839631858151995, -0.004715754489381863, -0.0014438990314030624, 0.002041981592907599 } };
    static const double coefficients34[1][35] = { { 0.3519087355060576, 0.0, 0.0, 0.0, -0.1156622308679743, 0.0, 0.0, -0.12931430532503255, 0.0, -0.13438736818105862, 0.0, -0.09086244479999145, -0.07868918544675388, 0.0, 0.0, 0.0, 0.04063492063492065, -0.08797718387651442, 0.0, 0.07111111111111108, 0.0, 0.0, 0.0, 0.0, -0.08218817370980472, 0.021089495206915318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.036755668672336914, 0.023578772446909348, 0.0, -0.012251889557445604 } };
    const std::size_t reference_offset[35] = {};
    const std::size_t num_components[35] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[4][81][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 0, 2, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 0, 1, 2, 0 },
            { 0, 2, 0, 0 },
            { 0, 2, 1, 0 },
            { 0, 2, 2, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 2, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 1, 1, 2, 0 },
            { 1, 2, 0, 0 },
            { 1, 2, 1, 0 },
            { 1, 2, 2, 0 },
            { 2, 0, 0, 0 },
            { 2, 0, 1, 0 },
            { 2, 0, 2, 0 },
            { 2, 1, 0, 0 },
            { 2, 1, 1, 0 },
            { 2, 1, 2, 0 },
            { 2, 2, 0, 0 },
            { 2, 2, 1, 0 },
            { 2, 2, 2, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 0, 2, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 0, 1, 2, 0 },
            { 0, 2, 0, 0 },
            { 0, 2, 1, 0 },
            { 0, 2, 2, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 2, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 1, 1, 2, 0 },
            { 1, 2, 0, 0 },
            { 1, 2, 1, 0 },
            { 1, 2, 2, 0 },
            { 2, 0, 0, 0 },
            { 2, 0, 1, 0 },
            { 2, 0, 2, 0 },
            { 2, 1, 0, 0 },
            { 2, 1, 1, 0 },
            { 2, 1, 2, 0 },
            { 2, 2, 0, 0 },
            { 2, 2, 1, 0 },
            { 2, 2, 2, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 0, 2, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 0, 1, 2, 0 },
            { 0, 2, 0, 0 },
            { 0, 2, 1, 0 },
            { 0, 2, 2, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 2, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 1, 1, 2, 0 },
            { 1, 2, 0, 0 },
            { 1, 2, 1, 0 },
            { 1, 2, 2, 0 },
            { 2, 0, 0, 0 },
            { 2, 0, 1, 0 },
            { 2, 0, 2, 0 },
            { 2, 1, 0, 0 },
            { 2, 1, 1, 0 },
            { 2, 1, 2, 0 },
            { 2, 2, 0, 0 },
            { 2, 2, 1, 0 },
            { 2, 2, 2, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 0, 2 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 0, 1, 2 },
            { 0, 0, 2, 0 },
            { 0, 0, 2, 1 },
            { 0, 0, 2, 2 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 0, 2 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 0, 1, 1, 2 },
            { 0, 1, 2, 0 },
            { 0, 1, 2, 1 },
            { 0, 1, 2, 2 },
            { 0, 2, 0, 0 },
            { 0, 2, 0, 1 },
            { 0, 2, 0, 2 },
            { 0, 2, 1, 0 },
            { 0, 2, 1, 1 },
            { 0, 2, 1, 2 },
            { 0, 2, 2, 0 },
            { 0, 2, 2, 1 },
            { 0, 2, 2, 2 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 0, 2 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 0, 1, 2 },
            { 1, 0, 2, 0 },
            { 1, 0, 2, 1 },
            { 1, 0, 2, 2 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 0, 2 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 },
            { 1, 1, 1, 2 },
            { 1, 1, 2, 0 },
            { 1, 1, 2, 1 },
            { 1, 1, 2, 2 },
            { 1, 2, 0, 0 },
            { 1, 2, 0, 1 },
            { 1, 2, 0, 2 },
            { 1, 2, 1, 0 },
            { 1, 2, 1, 1 },
            { 1, 2, 1, 2 },
            { 1, 2, 2, 0 },
            { 1, 2, 2, 1 },
            { 1, 2, 2, 2 },
            { 2, 0, 0, 0 },
            { 2, 0, 0, 1 },
            { 2, 0, 0, 2 },
            { 2, 0, 1, 0 },
            { 2, 0, 1, 1 },
            { 2, 0, 1, 2 },
            { 2, 0, 2, 0 },
            { 2, 0, 2, 1 },
            { 2, 0, 2, 2 },
            { 2, 1, 0, 0 },
            { 2, 1, 0, 1 },
            { 2, 1, 0, 2 },
            { 2, 1, 1, 0 },
            { 2, 1, 1, 1 },
            { 2, 1, 1, 2 },
            { 2, 1, 2, 0 },
            { 2, 1, 2, 1 },
            { 2, 1, 2, 2 },
            { 2, 2, 0, 0 },
            { 2, 2, 0, 1 },
            { 2, 2, 0, 2 },
            { 2, 2, 1, 0 },
            { 2, 2, 1, 1 },
            { 2, 2, 1, 2 },
            { 2, 2, 2, 0 },
            { 2, 2, 2, 1 },
            { 2, 2, 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues4[35] = {};
        basisvalues4[0] = 1.0;
        const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues4[1] = tmp1_4;
        const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues4[4] = 1.5 * tmp1_4 * basisvalues4[1] - 0.5 * tmp2_4 * basisvalues4[0];
        basisvalues4[10] = 1.6666666666666667 * tmp1_4 * basisvalues4[4] - 0.6666666666666666 * tmp2_4 * basisvalues4[1];
        basisvalues4[20] = 1.75 * tmp1_4 * basisvalues4[10] - 0.75 * tmp2_4 * basisvalues4[4];
        basisvalues4[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues4[0];
        basisvalues4[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues4[1];
        basisvalues4[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues4[4];
        basisvalues4[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues4[10];
        const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_4 = 0.5 * (1.0 - Y[2]);
        const double tmp5_4 = tmp4_4 * tmp4_4;
        basisvalues4[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues4[2] - 0.5555555555555556 * tmp5_4 * basisvalues4[0];
        basisvalues4[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues4[7] - 0.7 * tmp5_4 * basisvalues4[2];
        basisvalues4[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues4[16] - 0.7714285714285715 * tmp5_4 * basisvalues4[7];
        basisvalues4[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues4[5] - 0.56 * tmp5_4 * basisvalues4[1];
        basisvalues4[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues4[13] - 0.7142857142857143 * tmp5_4 * basisvalues4[5];
        basisvalues4[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues4[11] - 0.5510204081632653 * tmp5_4 * basisvalues4[4];
        basisvalues4[3] = (2.0 * Y[2] + 1.0) * basisvalues4[0];
        basisvalues4[8] = (3.0 * Y[2] + 2.0) * basisvalues4[2];
        basisvalues4[17] = (4.0 * Y[2] + 3.0) * basisvalues4[7];
        basisvalues4[31] = (5.0 * Y[2] + 4.0) * basisvalues4[16];
        basisvalues4[6] = (3.0 * Y[2] + 2.0) * basisvalues4[1];
        basisvalues4[14] = (4.0 * Y[2] + 3.0) * basisvalues4[5];
        basisvalues4[27] = (5.0 * Y[2] + 4.0) * basisvalues4[13];
        basisvalues4[12] = (4.0 * Y[2] + 3.0) * basisvalues4[4];
        basisvalues4[24] = (5.0 * Y[2] + 4.0) * basisvalues4[11];
        basisvalues4[22] = (5.0 * Y[2] + 4.0) * basisvalues4[10];
        basisvalues4[9] = (0.3125 + 1.875 * Y[2]) * basisvalues4[3] - 0.5625 * basisvalues4[0];
        basisvalues4[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues4[9] - 0.7111111111111111 * basisvalues4[3];
        basisvalues4[34] = (0.09375 + 1.875 * Y[2]) * basisvalues4[19] - 0.78125 * basisvalues4[9];
        basisvalues4[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues4[8] - 0.5555555555555556 * basisvalues4[2];
        basisvalues4[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues4[18] - 0.7142857142857143 * basisvalues4[8];
        basisvalues4[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues4[17] - 0.546875 * basisvalues4[7];
        basisvalues4[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues4[6] - 0.5555555555555556 * basisvalues4[1];
        basisvalues4[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues4[15] - 0.7142857142857143 * basisvalues4[6];
        basisvalues4[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues4[14] - 0.546875 * basisvalues4[5];
        basisvalues4[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues4[12] - 0.546875 * basisvalues4[4];
        basisvalues4[0] *= std::sqrt(0.75);
        basisvalues4[3] *= std::sqrt(1.25);
        basisvalues4[9] *= std::sqrt(1.75);
        basisvalues4[19] *= std::sqrt(2.25);
        basisvalues4[34] *= std::sqrt(2.75);
        basisvalues4[2] *= std::sqrt(2.5);
        basisvalues4[8] *= std::sqrt(3.5);
        basisvalues4[18] *= std::sqrt(4.5);
        basisvalues4[33] *= std::sqrt(5.5);
        basisvalues4[7] *= std::sqrt(5.25);
        basisvalues4[17] *= std::sqrt(6.75);
        basisvalues4[32] *= std::sqrt(8.25);
        basisvalues4[16] *= std::sqrt(9.0);
        basisvalues4[31] *= std::sqrt(11.0);
        basisvalues4[30] *= std::sqrt(13.75);
        basisvalues4[1] *= std::sqrt(7.5);
        basisvalues4[6] *= std::sqrt(10.5);
        basisvalues4[15] *= std::sqrt(13.5);
        basisvalues4[29] *= std::sqrt(16.5);
        basisvalues4[5] *= std::sqrt(15.75);
        basisvalues4[14] *= std::sqrt(20.25);
        basisvalues4[28] *= std::sqrt(24.75);
        basisvalues4[13] *= std::sqrt(27.0);
        basisvalues4[27] *= std::sqrt(33.0);
        basisvalues4[26] *= std::sqrt(41.25);
        basisvalues4[4] *= std::sqrt(26.25);
        basisvalues4[12] *= std::sqrt(33.75);
        basisvalues4[25] *= std::sqrt(41.25);
        basisvalues4[11] *= std::sqrt(45.0);
        basisvalues4[24] *= std::sqrt(55.0);
        basisvalues4[23] *= std::sqrt(68.75);
        basisvalues4[10] *= std::sqrt(63.0);
        basisvalues4[22] *= std::sqrt(77.0);
        basisvalues4[21] *= std::sqrt(96.25);
        basisvalues4[20] *= std::sqrt(123.75);
        // Loop over all dofs
        for (std::size_t i = 0; i < 35; ++i)
        {
            double derivatives[81] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients20[0][s] * aux[s];
                }
                break;
            case 21:
                // Compute reference derivatives for dof 21.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients21[0][s] * aux[s];
                }
                break;
            case 22:
                // Compute reference derivatives for dof 22.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients22[0][s] * aux[s];
                }
                break;
            case 23:
                // Compute reference derivatives for dof 23.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients23[0][s] * aux[s];
                }
                break;
            case 24:
                // Compute reference derivatives for dof 24.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients24[0][s] * aux[s];
                }
                break;
            case 25:
                // Compute reference derivatives for dof 25.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients25[0][s] * aux[s];
                }
                break;
            case 26:
                // Compute reference derivatives for dof 26.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients26[0][s] * aux[s];
                }
                break;
            case 27:
                // Compute reference derivatives for dof 27.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients27[0][s] * aux[s];
                }
                break;
            case 28:
                // Compute reference derivatives for dof 28.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients28[0][s] * aux[s];
                }
                break;
            case 29:
                // Compute reference derivatives for dof 29.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients29[0][s] * aux[s];
                }
                break;
            case 30:
                // Compute reference derivatives for dof 30.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients30[0][s] * aux[s];
                }
                break;
            case 31:
                // Compute reference derivatives for dof 31.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients31[0][s] * aux[s];
                }
                break;
            case 32:
                // Compute reference derivatives for dof 32.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients32[0][s] * aux[s];
                }
                break;
            case 33:
                // Compute reference derivatives for dof 33.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients33[0][s] * aux[s];
                }
                break;
            case 34:
                // Compute reference derivatives for dof 34.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[35] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[35][35] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 1225, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[35][35];
                        std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 1225, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 35; ++s)
                        for (std::size_t t = 0; t < 35; ++t)
                            aux[s] += dmats[s][t] * basisvalues4[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 35; ++s)
                        derivatives[r] += coefficients34[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[35 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
}

void poisson3d_4_finite_element_2::transform_reference_basis_derivatives(double * values,
                                                          std::size_t order,
                                                          std::size_t num_points,
                                                          const double * reference_values,
                                                          const double * X,
                                                          const double * J,
                                                          const double * detJ,
                                                          const double * K,
                                                          int cell_orientation) const
{
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[4][81][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 0, 2, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 0, 1, 2, 0 },
            { 0, 2, 0, 0 },
            { 0, 2, 1, 0 },
            { 0, 2, 2, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 2, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 1, 1, 2, 0 },
            { 1, 2, 0, 0 },
            { 1, 2, 1, 0 },
            { 1, 2, 2, 0 },
            { 2, 0, 0, 0 },
            { 2, 0, 1, 0 },
            { 2, 0, 2, 0 },
            { 2, 1, 0, 0 },
            { 2, 1, 1, 0 },
            { 2, 1, 2, 0 },
            { 2, 2, 0, 0 },
            { 2, 2, 1, 0 },
            { 2, 2, 2, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 0, 2, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 0, 1, 2, 0 },
            { 0, 2, 0, 0 },
            { 0, 2, 1, 0 },
            { 0, 2, 2, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 2, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 1, 1, 2, 0 },
            { 1, 2, 0, 0 },
            { 1, 2, 1, 0 },
            { 1, 2, 2, 0 },
            { 2, 0, 0, 0 },
            { 2, 0, 1, 0 },
            { 2, 0, 2, 0 },
            { 2, 1, 0, 0 },
            { 2, 1, 1, 0 },
            { 2, 1, 2, 0 },
            { 2, 2, 0, 0 },
            { 2, 2, 1, 0 },
            { 2, 2, 2, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 0, 2, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 0, 1, 2, 0 },
            { 0, 2, 0, 0 },
            { 0, 2, 1, 0 },
            { 0, 2, 2, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 2, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 1, 1, 2, 0 },
            { 1, 2, 0, 0 },
            { 1, 2, 1, 0 },
            { 1, 2, 2, 0 },
            { 2, 0, 0, 0 },
            { 2, 0, 1, 0 },
            { 2, 0, 2, 0 },
            { 2, 1, 0, 0 },
            { 2, 1, 1, 0 },
            { 2, 1, 2, 0 },
            { 2, 2, 0, 0 },
            { 2, 2, 1, 0 },
            { 2, 2, 2, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 0, 2 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 0, 1, 2 },
            { 0, 0, 2, 0 },
            { 0, 0, 2, 1 },
            { 0, 0, 2, 2 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 0, 2 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 0, 1, 1, 2 },
            { 0, 1, 2, 0 },
            { 0, 1, 2, 1 },
            { 0, 1, 2, 2 },
            { 0, 2, 0, 0 },
            { 0, 2, 0, 1 },
            { 0, 2, 0, 2 },
            { 0, 2, 1, 0 },
            { 0, 2, 1, 1 },
            { 0, 2, 1, 2 },
            { 0, 2, 2, 0 },
            { 0, 2, 2, 1 },
            { 0, 2, 2, 2 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 0, 2 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 0, 1, 2 },
            { 1, 0, 2, 0 },
            { 1, 0, 2, 1 },
            { 1, 0, 2, 2 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 0, 2 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 },
            { 1, 1, 1, 2 },
            { 1, 1, 2, 0 },
            { 1, 1, 2, 1 },
            { 1, 1, 2, 2 },
            { 1, 2, 0, 0 },
            { 1, 2, 0, 1 },
            { 1, 2, 0, 2 },
            { 1, 2, 1, 0 },
            { 1, 2, 1, 1 },
            { 1, 2, 1, 2 },
            { 1, 2, 2, 0 },
            { 1, 2, 2, 1 },
            { 1, 2, 2, 2 },
            { 2, 0, 0, 0 },
            { 2, 0, 0, 1 },
            { 2, 0, 0, 2 },
            { 2, 0, 1, 0 },
            { 2, 0, 1, 1 },
            { 2, 0, 1, 2 },
            { 2, 0, 2, 0 },
            { 2, 0, 2, 1 },
            { 2, 0, 2, 2 },
            { 2, 1, 0, 0 },
            { 2, 1, 0, 1 },
            { 2, 1, 0, 2 },
            { 2, 1, 1, 0 },
            { 2, 1, 1, 1 },
            { 2, 1, 1, 2 },
            { 2, 1, 2, 0 },
            { 2, 1, 2, 1 },
            { 2, 1, 2, 2 },
            { 2, 2, 0, 0 },
            { 2, 2, 0, 1 },
            { 2, 2, 0, 2 },
            { 2, 2, 1, 0 },
            { 2, 2, 1, 1 },
            { 2, 2, 1, 2 },
            { 2, 2, 2, 0 },
            { 2, 2, 2, 1 },
            { 2, 2, 2, 2 } } };
    std::fill_n(values, num_points * 35 * num_derivatives, 0.0);
    const std::size_t reference_offsets[35] = {};
    const std::size_t physical_offsets[35] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[81][81];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 35; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[35 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[35 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
}

void poisson3d_4_finite_element_2::evaluate_basis(std::size_t i,
                                   double * values,
                                   const double * x,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[35];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[35];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
}

void poisson3d_4_finite_element_2::evaluate_basis_all(double * values,
                                       const double * x,
                                       const double * coordinate_dofs,
                                       int cell_orientation,
                                       const ufc::coordinate_mapping * cm
                                       ) const
{
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 35; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
}

void poisson3d_4_finite_element_2::evaluate_basis_derivatives(std::size_t i,
                                               std::size_t n,
                                               double * values,
                                               const double * x,
                                               const double * coordinate_dofs,
                                               int cell_orientation,
                                               const ufc::coordinate_mapping * cm
                                               ) const
{
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 4)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[4][81][4] =
        { { { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 },
            { 0, 0, 0, 0 },
            { 1, 0, 0, 0 },
            { 2, 0, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 },
            { 0, 0, 0, 0 },
            { 0, 1, 0, 0 },
            { 0, 2, 0, 0 },
            { 1, 0, 0, 0 },
            { 1, 1, 0, 0 },
            { 1, 2, 0, 0 },
            { 2, 0, 0, 0 },
            { 2, 1, 0, 0 },
            { 2, 2, 0, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 0, 2, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 0, 1, 2, 0 },
            { 0, 2, 0, 0 },
            { 0, 2, 1, 0 },
            { 0, 2, 2, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 2, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 1, 1, 2, 0 },
            { 1, 2, 0, 0 },
            { 1, 2, 1, 0 },
            { 1, 2, 2, 0 },
            { 2, 0, 0, 0 },
            { 2, 0, 1, 0 },
            { 2, 0, 2, 0 },
            { 2, 1, 0, 0 },
            { 2, 1, 1, 0 },
            { 2, 1, 2, 0 },
            { 2, 2, 0, 0 },
            { 2, 2, 1, 0 },
            { 2, 2, 2, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 0, 2, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 0, 1, 2, 0 },
            { 0, 2, 0, 0 },
            { 0, 2, 1, 0 },
            { 0, 2, 2, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 2, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 1, 1, 2, 0 },
            { 1, 2, 0, 0 },
            { 1, 2, 1, 0 },
            { 1, 2, 2, 0 },
            { 2, 0, 0, 0 },
            { 2, 0, 1, 0 },
            { 2, 0, 2, 0 },
            { 2, 1, 0, 0 },
            { 2, 1, 1, 0 },
            { 2, 1, 2, 0 },
            { 2, 2, 0, 0 },
            { 2, 2, 1, 0 },
            { 2, 2, 2, 0 },
            { 0, 0, 0, 0 },
            { 0, 0, 1, 0 },
            { 0, 0, 2, 0 },
            { 0, 1, 0, 0 },
            { 0, 1, 1, 0 },
            { 0, 1, 2, 0 },
            { 0, 2, 0, 0 },
            { 0, 2, 1, 0 },
            { 0, 2, 2, 0 },
            { 1, 0, 0, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 2, 0 },
            { 1, 1, 0, 0 },
            { 1, 1, 1, 0 },
            { 1, 1, 2, 0 },
            { 1, 2, 0, 0 },
            { 1, 2, 1, 0 },
            { 1, 2, 2, 0 },
            { 2, 0, 0, 0 },
            { 2, 0, 1, 0 },
            { 2, 0, 2, 0 },
            { 2, 1, 0, 0 },
            { 2, 1, 1, 0 },
            { 2, 1, 2, 0 },
            { 2, 2, 0, 0 },
            { 2, 2, 1, 0 },
            { 2, 2, 2, 0 } },
          { { 0, 0, 0, 0 },
            { 0, 0, 0, 1 },
            { 0, 0, 0, 2 },
            { 0, 0, 1, 0 },
            { 0, 0, 1, 1 },
            { 0, 0, 1, 2 },
            { 0, 0, 2, 0 },
            { 0, 0, 2, 1 },
            { 0, 0, 2, 2 },
            { 0, 1, 0, 0 },
            { 0, 1, 0, 1 },
            { 0, 1, 0, 2 },
            { 0, 1, 1, 0 },
            { 0, 1, 1, 1 },
            { 0, 1, 1, 2 },
            { 0, 1, 2, 0 },
            { 0, 1, 2, 1 },
            { 0, 1, 2, 2 },
            { 0, 2, 0, 0 },
            { 0, 2, 0, 1 },
            { 0, 2, 0, 2 },
            { 0, 2, 1, 0 },
            { 0, 2, 1, 1 },
            { 0, 2, 1, 2 },
            { 0, 2, 2, 0 },
            { 0, 2, 2, 1 },
            { 0, 2, 2, 2 },
            { 1, 0, 0, 0 },
            { 1, 0, 0, 1 },
            { 1, 0, 0, 2 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 1 },
            { 1, 0, 1, 2 },
            { 1, 0, 2, 0 },
            { 1, 0, 2, 1 },
            { 1, 0, 2, 2 },
            { 1, 1, 0, 0 },
            { 1, 1, 0, 1 },
            { 1, 1, 0, 2 },
            { 1, 1, 1, 0 },
            { 1, 1, 1, 1 },
            { 1, 1, 1, 2 },
            { 1, 1, 2, 0 },
            { 1, 1, 2, 1 },
            { 1, 1, 2, 2 },
            { 1, 2, 0, 0 },
            { 1, 2, 0, 1 },
            { 1, 2, 0, 2 },
            { 1, 2, 1, 0 },
            { 1, 2, 1, 1 },
            { 1, 2, 1, 2 },
            { 1, 2, 2, 0 },
            { 1, 2, 2, 1 },
            { 1, 2, 2, 2 },
            { 2, 0, 0, 0 },
            { 2, 0, 0, 1 },
            { 2, 0, 0, 2 },
            { 2, 0, 1, 0 },
            { 2, 0, 1, 1 },
            { 2, 0, 1, 2 },
            { 2, 0, 2, 0 },
            { 2, 0, 2, 1 },
            { 2, 0, 2, 2 },
            { 2, 1, 0, 0 },
            { 2, 1, 0, 1 },
            { 2, 1, 0, 2 },
            { 2, 1, 1, 0 },
            { 2, 1, 1, 1 },
            { 2, 1, 1, 2 },
            { 2, 1, 2, 0 },
            { 2, 1, 2, 1 },
            { 2, 1, 2, 2 },
            { 2, 2, 0, 0 },
            { 2, 2, 0, 1 },
            { 2, 2, 0, 2 },
            { 2, 2, 1, 0 },
            { 2, 2, 1, 1 },
            { 2, 2, 1, 2 },
            { 2, 2, 2, 0 },
            { 2, 2, 2, 1 },
            { 2, 2, 2, 2 } } };
    // Declare transformation matrix
    double transform[81][81] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { -0.013746434980705125, -0.014490014748813906, -0.008365813915789357, -0.00591552374999943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.006719368409052926, -0.005678902799999458, -0.004918074090422109, -0.004398859193825713, -0.0038095238095238074, -0.0031104631654389624, -0.00253968253968254, -0.002199429596912853, -0.0017958267458705983, -0.0012698412698412807, 0.013698028951634123, 0.012080526019262244, 0.010805150953210114, 0.010209907964538027, 0.009132019301089426, 0.007908560702593246, 0.007908560702593253, 0.007073631734072807, 0.006125944778722807, 0.005001812966779234, 0.00456600965054471, 0.004083963185815212, 0.003536815867036402, 0.0028877980628061553, 0.0020419815929076093 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { -0.013746434980705451, 0.014490014748813866, -0.008365813915789345, -0.0059155237499994556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0067193684090529225, -0.005678902799999461, -0.004918074090422115, 0.004398859193825714, 0.0038095238095238065, 0.0031104631654389698, -0.0025396825396825375, -0.0021994295969128557, -0.0017958267458705983, -0.0012698412698412714, 0.013698028951634116, -0.012080526019262234, -0.010805150953210114, 0.010209907964538028, 0.00913201930108942, 0.00790856070259326, -0.007908560702593256, -0.007073631734072807, -0.006125944778722825, -0.0050018129667792465, 0.004566009650544712, 0.004083963185815214, 0.0035368158670364062, 0.0028877980628061544, 0.00204198159290761 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { -0.013746434980705267, 0.0, 0.01673162783157876, -0.0059155237499994556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010158730158730166, -0.006598288790738582, 0.0035916534917411888, -0.0012698412698412614, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02283004825272354, -0.016335852743260847, 0.010610447601109206, -0.0057755961256123, 0.0020419815929076015 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { -0.013746434980705383, 0.0, 0.0, 0.017746571249998316, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.012698412698412698, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.030629723893614087 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.043988591938257195, 0.0, 0.02677060453052602, 0.0189296759999982, 0.0, 0.0, 0.0, 0.05819143739626466, -0.03167540644887993, 0.011198947348421556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.040634920634920614, 0.004398859193825727, -0.01436661396696479, 0.007619047619047625, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.036755668672336886, -0.042441790404436804, 0.030321879659464597, -0.012251889557445633 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { -0.03299144395369299, 0.0, -0.020077953397894525, -0.014197256999998653, 0.0, 0.0, 0.0, -0.009698572899377422, 0.07126966450997983, -0.050395263067896955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04618802153517006, 0.010774960475223578, -0.019047619047619056, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0495154221385096, -0.06064375931892919, 0.03062972389361408 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.043988591938257195, 0.0, 0.026770604530525943, 0.01892967599999823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0671936840905293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03591653491741196, 0.02539682539682539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.050536466099107634, -0.040839631858152106 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.043988591938257056, 0.02318402359810227, -0.013385302265262945, 0.018929675999998202, 0.04337333657549036, -0.03359684204526462, -0.027431706659927488, 0.01939714579875486, 0.01583770322443996, 0.011198947348421555, 0.026877473636211725, -0.022715611199997883, 0.0032787160602813993, 0.01759543677530287, -0.0025396825396825306, -0.012441852661755856, -0.010158730158730145, 0.001466286397941892, 0.007183306983482361, 0.007619047619047628, 0.0, 0.0, 0.024311589644722773, 0.0, -0.020547043427451207, -0.031634242810373, 0.0, 0.015915671401663802, 0.024503779114891263, 0.02625951807559098, 0.0, -0.009188917168084215, -0.014147263468145592, -0.01516093982973229, -0.012251889557445638 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { -0.032991443953692995, -0.017388017698576706, 0.010038976698947216, -0.014197256999998673, -0.0072288894292483535, 0.005599473674210736, 0.061721339984836796, -0.003232857633125797, -0.03563483225498993, -0.05039526306789696, 0.0, 0.0, 0.03442651863295485, 0.0, -0.026666666666666693, 0.009331389496316898, 0.0, 0.015396007178390032, -0.005387480237611765, -0.019047619047619088, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03690661661210182, 0.0, 0.0, -0.02858774230070647, -0.05251903615118194, 0.0, 0.0, 0.01650514071283653, 0.030321879659464597, 0.030629723893614107 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825728, 0.023184023598102222, -0.013385302265263, 0.018929675999998227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06719368409052928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.031104631654389554, 0.0, 0.0, -0.017958267458705962, 0.025396825396825418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04376586345931829, 0.0, 0.0, 0.0, -0.025268233049553827, -0.04083963185815212 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.043988591938257146, 0.02318402359810225, 0.013385302265263006, -0.018929675999998216, 0.043373336575490376, -0.033596842045264634, -0.02743170665992746, 0.019397145798754876, 0.015837703224439954, 0.011198947348421534, 0.02687747363621169, 0.0, -0.022951012421969882, -0.011730291183535253, 0.007619047619047612, 0.0165891368823411, 0.010158730158730152, -0.0014662863979419084, -0.007183306983482392, -0.007619047619047611, 0.0, 0.024161052038524453, -0.0027012877383025278, -0.035734677875883095, -0.011415024126361773, 0.003954280351296621, 0.03558852316166961, 0.0159156714016638, 0.0030629723893614113, -0.0037513597250844193, -0.02283004825272354, -0.011230898760991828, -0.0035368158670363897, 0.0007219495157015412, 0.0020419815929076084 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { -0.03299144395369284, -0.017388017698576716, -0.010038976698947238, 0.014197256999998608, -0.007228889429248384, 0.061594210416318504, -0.006857926664981875, -0.06142429502939045, -0.00395942580610997, 0.005599473674210764, 0.0, 0.0340734167999968, -0.0049180740904221166, 0.0, -0.026666666666666658, 0.009331389496316884, -0.015238095238095224, 0.017595436775302883, 0.005387480237611789, -0.007619047619047603, 0.0, 0.0, 0.0, 0.03573467787588308, -0.009132019301089419, 0.0013180934504322145, -0.059314205269449354, 0.0, 0.007146935575176615, -0.002500906483389623, 0.04566009650544707, 0.004083963185815198, -0.0047157544893818735, -0.0014438990314030772, 0.0020419815929075998 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.043988591938257195, 0.02318402359810225, 0.01338530226526301, -0.01892967599999821, 0.0, 0.0, 0.0, 0.058191437396264645, -0.03167540644887995, 0.011198947348421553, 0.0, 0.0, 0.0, 0.029325727958838154, -0.010158730158730174, 0.002073642110292627, 0.01015873015873014, -0.021994295969128597, 0.017958267458705972, -0.00761904761904762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.039542803512966226, -0.017684079335182016, 0.006125944778722815, -0.0012504532416948056, -0.04566009650544708, 0.01429387115035325, 0.0, -0.0036097475785076836, 0.0020419815929076063 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825726, -0.0231840235981023, -0.013385302265263025, 0.018929675999998195, 0.04337333657549033, 0.03359684204526462, 0.027431706659927443, 0.01939714579875487, 0.01583770322443999, 0.011198947348421542, -0.026877473636211728, -0.02271561119999787, 0.003278716060281398, -0.01759543677530287, 0.0025396825396825293, 0.012441852661755856, -0.010158730158730147, 0.0014662863979418993, 0.007183306983482398, 0.007619047619047647, 0.0, 0.0, -0.024311589644722766, 0.0, -0.020547043427451204, -0.03163424281037299, 0.0, -0.015915671401663795, -0.02450377911489126, -0.026259518075590984, 0.0, -0.009188917168084225, -0.014147263468145608, -0.0151609398297323, -0.012251889557445647 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { -0.03299144395369305, 0.017388017698576775, 0.010038976698947245, -0.014197256999998676, -0.00722888942924837, -0.00559947367421078, -0.06172133998483674, -0.003232857633125811, -0.03563483225498993, -0.050395263067896955, 0.0, 0.0, 0.034426518632954824, 0.0, 0.02666666666666666, -0.009331389496316886, 0.0, 0.015396007178390021, -0.005387480237611803, -0.01904761904761907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03690661661210182, 0.0, 0.0, 0.02858774230070648, 0.05251903615118197, 0.0, 0.0, 0.016505140712836538, 0.030321879659464597, 0.030629723893614094 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.043988591938257146, -0.023184023598102354, -0.013385302265262968, 0.018929675999998227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06719368409052931, 0.0, 0.0, 0.0, 0.0, 0.0, -0.031104631654389564, 0.0, 0.0, -0.017958267458705962, 0.025396825396825407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0437658634593183, 0.0, 0.0, 0.0, -0.025268233049553827, -0.04083963185815212 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825711, -0.023184023598102246, 0.013385302265263, -0.018929675999998192, 0.043373336575490355, 0.033596842045264634, 0.027431706659927477, 0.01939714579875487, 0.015837703224439958, 0.01119894734842156, -0.026877473636211745, 0.0, -0.02295101242196986, 0.011730291183535252, -0.007619047619047634, -0.016589136882341097, 0.010158730158730148, -0.0014662863979419036, -0.007183306983482391, -0.007619047619047624, 0.0, -0.024161052038524488, 0.002701287738302527, -0.03573467787588307, -0.01141502412636176, 0.003954280351296623, -0.03558852316166963, -0.015915671401663813, -0.0030629723893614113, 0.0037513597250844206, -0.022830048252723528, -0.01123089876099183, -0.003536815867036399, 0.000721949515701541, 0.002041981592907602 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { -0.032991443953692925, 0.017388017698576744, -0.010038976698947235, 0.01419725699999862, -0.007228889429248374, -0.06159421041631847, 0.006857926664981856, -0.06142429502939045, -0.003959425806109959, 0.005599473674210749, 0.0, 0.034073416799996786, -0.004918074090422132, 0.0, 0.026666666666666686, -0.009331389496316865, -0.01523809523809523, 0.01759543677530288, 0.005387480237611785, -0.007619047619047608, 0.0, 0.0, 0.0, 0.03573467787588306, -0.009132019301089426, 0.0013180934504322158, 0.059314205269449374, 0.0, -0.007146935575176623, 0.0025009064833896246, 0.04566009650544707, 0.004083963185815195, -0.004715754489381868, -0.0014438990314030815, 0.002041981592907609 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825715, -0.02318402359810226, 0.013385302265262996, -0.018929675999998206, 0.0, 0.0, 0.0, 0.05819143739626465, -0.031675406448879936, 0.011198947348421558, 0.0, 0.0, 0.0, -0.029325727958838105, 0.010158730158730148, -0.002073642110292627, 0.01015873015873014, -0.021994295969128597, 0.017958267458705972, -0.00761904761904762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03954280351296624, 0.017684079335181995, -0.006125944778722807, 0.001250453241694807, -0.04566009650544708, 0.01429387115035324, 0.0, -0.003609747578507687, 0.0020419815929076032 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825711, 0.0, -0.026770604530525967, -0.018929675999998202, 0.04337333657549036, 0.03359684204526463, 0.027431706659927432, 0.019397145798754876, 0.015837703224439958, 0.011198947348421556, 0.013438736818105855, -0.011357805599998926, -0.009836148180844226, -0.020528009571186695, -0.01777777777777778, -0.014515494772048455, -0.015238095238095238, -0.013196577581477163, -0.010774960475223574, -0.0076190476190476164, -0.054792115806536486, -0.02416105203852447, -0.02161030190642023, -0.005104953982269008, -0.004566009650544709, -0.003954280351296628, 0.00395428035129663, 0.0035368158670364015, 0.003062972389361401, 0.0025009064833896107, 0.004566009650544711, 0.004083963185815216, 0.003536815867036397, 0.002887798062806152, 0.0020419815929075998 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 20:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { -0.03299144395369279, 0.0, 0.02007795339789451, 0.014197256999998688, -0.08674667315098068, 0.0, 0.0, 0.009698572899377434, 0.00791885161221997, 0.005599473674210777, 0.0, 0.03407341679999679, 0.029508444542532694, 0.0, 0.0, 0.0, -0.01523809523809525, -0.013196577581477166, -0.010774960475223597, -0.007619047619047627, 0.08218817370980473, 0.0, 0.0, -0.010209907964538032, -0.009132019301089417, -0.007908560702593255, 0.0, 0.0, 0.0, 0.0, 0.004566009650544712, 0.004083963185815212, 0.003536815867036405, 0.002887798062806154, 0.0020419815929076054 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 21:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825729, 0.0, -0.026770604530525943, -0.01892967599999822, 0.04337333657549036, -0.033596842045264634, -0.02743170665992745, 0.01939714579875488, 0.01583770322443995, 0.011198947348421532, -0.013438736818105866, -0.011357805599998935, -0.009836148180844223, 0.020528009571186688, 0.01777777777777777, 0.014515494772048472, -0.015238095238095243, -0.013196577581477156, -0.010774960475223583, -0.007619047619047611, -0.05479211580653649, 0.02416105203852446, 0.02161030190642023, -0.005104953982269011, -0.00456600965054471, -0.003954280351296631, -0.003954280351296629, -0.0035368158670363984, -0.003062972389361407, -0.002500906483389618, 0.00456600965054471, 0.004083963185815213, 0.0035368158670364097, 0.002887798062806153, 0.002041981592907609 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 22:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825708, 0.13910414158861353, -0.08031181359157798, -0.05678902799999453, 0.05783111543398716, 0.033596842045264565, 0.027431706659927432, -0.042027149230635566, -0.04751310967331989, -0.016798421022632307, 0.0, 0.045431222399995724, 0.03934459272337693, -0.05865145591767627, 0.002539682539682548, -0.06013562119848649, 0.04063492063492066, -0.010997147984564325, 0.01795826745870599, 0.039365079365079346, 0.0, 0.0, 0.0, 0.0, 0.041094086854902366, -0.010544747603457668, 0.0, -0.05305223800554601, -0.02450377911489125, 0.01750634538372731, 0.0, 0.03675566867233692, 0.023578772446909323, 0.0, -0.012251889557445635 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 23:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825721, 0.0, 0.1606236271831557, -0.056789027999994614, 0.0, 0.07839263143895081, -0.027431706659927474, 0.00969857289937742, 0.0475131096733199, -0.01679842102263231, 0.0, 0.0, 0.0, 0.05865145591767624, 0.033015873015873005, -0.014515494772048474, -0.06095238095238094, 0.024193725566041463, -0.061058109359600286, 0.03936507936507935, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053052238005545996, -0.03267170548652169, 0.008753172691863651, 0.0, -0.05513350300850534, 0.014147263468145597, 0.015160939829732295, -0.012251889557445633 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 24:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.043988591938257264, 0.0, 0.0, 0.17036708399998396, 0.0, -0.011198947348421511, 0.0822951199797824, 0.009698572899377457, 0.04751310967331994, -0.01679842102263232, 0.0, 0.0, 0.0, 0.0, 0.05333333333333334, 0.04354648431614532, 0.0, -0.04618802153517002, 0.02514157444218828, -0.08253968253968254, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05717548460141294, -0.026259518075590967, 0.0, 0.0, -0.04951542213850959, -0.01516093982973229, 0.030629723893614087 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 25:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.043988591938257174, -0.1391041415886136, -0.08031181359157798, -0.056789027999994614, 0.05783111543398713, -0.0335968420452646, -0.02743170665992745, -0.042027149230635566, -0.0475131096733199, -0.016798421022632355, 0.0, 0.04543122239999571, 0.03934459272337692, 0.05865145591767627, -0.0025396825396825145, 0.06013562119848647, 0.040634920634920656, -0.01099714798456433, 0.017958267458705993, 0.03936507936507937, 0.0, 0.0, 0.0, 0.0, 0.041094086854902366, -0.010544747603457671, 0.0, 0.05305223800554601, 0.024503779114891266, -0.017506345383727324, 0.0, 0.03675566867233692, 0.02357877244690933, 0.0, -0.012251889557445628 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 26:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.043988591938257306, 0.0, 0.16062362718315581, -0.05678902799999469, 0.0, -0.07839263143895077, 0.02743170665992744, 0.009698572899377398, 0.04751310967331991, -0.016798421022632314, 0.0, 0.0, 0.0, -0.05865145591767624, -0.033015873015873005, 0.01451549477204846, -0.06095238095238094, 0.024193725566041463, -0.061058109359600286, 0.03936507936507938, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.053052238005545975, 0.03267170548652168, -0.008753172691863657, 0.0, -0.05513350300850535, 0.014147263468145599, 0.015160939829732304, -0.012251889557445647 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 27:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825711, 0.0, 0.0, 0.1703670839999839, 0.0, 0.01119894734842152, -0.08229511997978231, 0.009698572899377447, 0.04751310967331991, -0.016798421022632334, 0.0, 0.0, 0.0, 0.0, -0.053333333333333344, -0.0435464843161454, 0.0, -0.04618802153517004, 0.025141574442188307, -0.08253968253968254, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05717548460141295, 0.026259518075590984, 0.0, 0.0, -0.04951542213850959, -0.015160939829732286, 0.030629723893614087 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 28:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825719, -0.13910414158861364, -0.08031181359157796, -0.056789027999994655, -0.043373336575490355, 0.044795789393686135, -0.0548634133198549, 0.04849286449688725, 0.0, -0.016798421022632355, 0.08063242090863515, 0.022715611199997866, -0.003278716060281415, -0.005865145591767625, 0.030476190476190476, 0.045620126426438035, -0.010158730158730157, 0.027126298361925275, 0.04309984190089435, 0.03936507936507936, 0.0, 0.0, 0.07293476893416828, 0.0, 0.02054704342745119, 0.031634242810373, 0.0, -0.005305223800554606, -0.008167926371630389, -0.008753172691863651, 0.0, -0.009188917168084215, -0.014147263468145604, -0.015160939829732297, -0.012251889557445621 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 29:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825713, 0.13910414158861367, -0.08031181359157794, -0.05678902799999463, -0.04337333657549037, -0.0447957893936862, 0.054863413319854885, 0.0484928644968872, 0.0, -0.01679842102263226, -0.08063242090863515, 0.02271561119999788, -0.003278716060281409, 0.0058651455917676214, -0.030476190476190494, -0.04562012642643805, -0.01015873015873015, 0.027126298361925275, 0.04309984190089433, 0.039365079365079346, 0.0, 0.0, -0.07293476893416828, 0.0, 0.020547043427451197, 0.031634242810373005, 0.0, 0.00530522380055459, 0.008167926371630411, 0.00875317269186364, 0.0, -0.009188917168084204, -0.014147263468145608, -0.015160939829732292, -0.01225188955744564 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 30:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.0439885919382573, 0.0, 0.0, 0.17036708399998388, 0.014457778858496745, 0.0, 0.0, -0.0032328576331258673, -0.09502621934663974, -0.016798421022632334, 0.0, 0.0, -0.06885303726590965, 0.0, 0.0, 0.0, 0.0, 0.015396007178389999, -0.05028314888437674, -0.08253968253968251, 0.0, 0.0, 0.0, 0.0, 0.0, -0.07381323322420365, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.016505140712836548, 0.030321879659464597, 0.030629723893614076 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 31:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.04398859193825734, -0.13910414158861362, -0.08031181359157785, -0.05678902799999469, -0.043373336575490404, -0.04479578939368615, 0.0548634133198549, -0.009698572899377415, 0.031675406448879936, 0.03919631571947541, 0.08063242090863512, 0.0, 0.022951012421969876, 0.05278631032590866, 0.010158730158730167, -0.012441852661755832, 0.06095238095238093, 0.016862293576331924, -0.00718330698348239, -0.013968253968253968, 0.0, 0.07248315611557339, -0.008103863214907593, 0.035734677875883095, 0.011415024126361768, -0.00395428035129662, -0.011862841053889886, -0.005305223800554606, -0.0010209907964537992, 0.0012504532416948149, -0.022830048252723556, -0.01123089876099184, -0.003536815867036398, 0.0007219495157015318, 0.00204198159290761 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 32:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.043988591938257326, 0.13910414158861367, -0.08031181359157788, -0.05678902799999469, -0.04337333657549037, 0.04479578939368619, -0.054863413319854885, -0.009698572899377419, 0.031675406448879936, 0.03919631571947544, -0.08063242090863514, 0.0, 0.022951012421969882, -0.05278631032590862, -0.010158730158730162, 0.012441852661755815, 0.06095238095238094, 0.016862293576331924, -0.0071833069834823715, -0.013968253968253968, 0.0, -0.0724831561155734, 0.0081038632149076, 0.035734677875883095, 0.011415024126361762, -0.003954280351296619, 0.011862841053889867, 0.005305223800554593, 0.0010209907964537992, -0.0012504532416948058, -0.022830048252723546, -0.011230898760991835, -0.0035368158670364093, 0.0007219495157015299, 0.0020419815929075963 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 33:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.043988591938257195, 0.0, 0.16062362718315587, -0.056789027999994704, 0.014457778858496837, 0.0, 0.0, -0.06142429502939049, -0.06335081289775983, 0.03919631571947542, 0.0, -0.06814683359999359, 0.009836148180844235, 0.0, 0.0, 0.0, -0.09142857142857146, 0.02859258475986719, 0.014366613966964743, -0.013968253968253951, 0.0, 0.0, 0.0, -0.0714693557517662, 0.01826403860217884, -0.0026361869008644234, 0.0, 0.0, 0.0, 0.0, 0.045660096505447105, 0.0040839631858151995, -0.004715754489381863, -0.0014438990314030624, 0.002041981592907599 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 34:
        {
            double basisvalues[35] = {};
            basisvalues[0] = 1.0;
            const double tmp1_4 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_4;
            const double tmp2_4 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_4 * basisvalues[1] - 0.5 * tmp2_4 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_4 * basisvalues[4] - 0.6666666666666666 * tmp2_4 * basisvalues[1];
            basisvalues[20] = 1.75 * tmp1_4 * basisvalues[10] - 0.75 * tmp2_4 * basisvalues[4];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            basisvalues[21] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 3.0 * (1.0 + Y[1])) * basisvalues[10];
            const double tmp3_4 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_4 = 0.5 * (1.0 - Y[2]);
            const double tmp5_4 = tmp4_4 * tmp4_4;
            basisvalues[7] = (1.6666666666666667 * tmp3_4 + 0.1111111111111111 * tmp4_4) * basisvalues[2] - 0.5555555555555556 * tmp5_4 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_4 + 0.05 * tmp4_4) * basisvalues[7] - 0.7 * tmp5_4 * basisvalues[2];
            basisvalues[30] = (1.8 * tmp3_4 + 0.02857142857142857 * tmp4_4) * basisvalues[16] - 0.7714285714285715 * tmp5_4 * basisvalues[7];
            basisvalues[13] = (2.1 * tmp3_4 + 0.54 * tmp4_4) * basisvalues[5] - 0.56 * tmp5_4 * basisvalues[1];
            basisvalues[26] = (2.0 * tmp3_4 + 0.2857142857142857 * tmp4_4) * basisvalues[13] - 0.7142857142857143 * tmp5_4 * basisvalues[5];
            basisvalues[23] = (2.5714285714285716 * tmp3_4 + 1.0204081632653061 * tmp4_4) * basisvalues[11] - 0.5510204081632653 * tmp5_4 * basisvalues[4];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[31] = (5.0 * Y[2] + 4.0) * basisvalues[16];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[27] = (5.0 * Y[2] + 4.0) * basisvalues[13];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[24] = (5.0 * Y[2] + 4.0) * basisvalues[11];
            basisvalues[22] = (5.0 * Y[2] + 4.0) * basisvalues[10];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[34] = (0.09375 + 1.875 * Y[2]) * basisvalues[19] - 0.78125 * basisvalues[9];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[33] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[18] - 0.7142857142857143 * basisvalues[8];
            basisvalues[32] = (1.265625 + 2.8125 * Y[2]) * basisvalues[17] - 0.546875 * basisvalues[7];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[29] = (0.42857142857142855 + 2.142857142857143 * Y[2]) * basisvalues[15] - 0.7142857142857143 * basisvalues[6];
            basisvalues[28] = (1.265625 + 2.8125 * Y[2]) * basisvalues[14] - 0.546875 * basisvalues[5];
            basisvalues[25] = (1.265625 + 2.8125 * Y[2]) * basisvalues[12] - 0.546875 * basisvalues[4];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[34] *= std::sqrt(2.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[33] *= std::sqrt(5.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[32] *= std::sqrt(8.25);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[31] *= std::sqrt(11.0);
            basisvalues[30] *= std::sqrt(13.75);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[29] *= std::sqrt(16.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[28] *= std::sqrt(24.75);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[27] *= std::sqrt(33.0);
            basisvalues[26] *= std::sqrt(41.25);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[25] *= std::sqrt(41.25);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[24] *= std::sqrt(55.0);
            basisvalues[23] *= std::sqrt(68.75);
            basisvalues[10] *= std::sqrt(63.0);
            basisvalues[22] *= std::sqrt(77.0);
            basisvalues[21] *= std::sqrt(96.25);
            basisvalues[20] *= std::sqrt(123.75);
            // Table(s) of coefficients
            static const double coefficients0[35] = { 0.3519087355060576, 0.0, 0.0, 0.0, -0.1156622308679743, 0.0, 0.0, -0.12931430532503255, 0.0, -0.13438736818105862, 0.0, -0.09086244479999145, -0.07868918544675388, 0.0, 0.0, 0.0, 0.04063492063492065, -0.08797718387651442, 0.0, 0.07111111111111108, 0.0, 0.0, 0.0, 0.0, -0.08218817370980472, 0.021089495206915318, 0.0, 0.0, 0.0, 0.0, 0.0, 0.036755668672336914, 0.023578772446909348, 0.0, -0.012251889557445604 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336759, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955857, 0.0, 8.366600265340756, -1.183215956619926, 0.0, 0.0, 0.0, 0.0, -1.7317563602313043e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.601517050930402e-14, 0.0, 0.0, 0.0 },
                  { 3.741657386773947, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.595533843923536e-14, -3.3466401061363023, -2.3664319132398433, 15.491933384829682, 0.0, -1.2576806272390947e-14, 0.6928203230275467, 0.5656854249492548, 0.4000000000000126, 0.0, 0.0, -1.1116469846201162e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0577160775041153e-14, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0913103278021254e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566341, 0.0, 0.0, 0.0, 14.198591479439072, -0.8280786712108167, 2.63823931484668e-14, -1.3367799756155659e-14, -1.0577563739569073e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.951329142140117e-14, -1.1745004035448191e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9538650959583565e-14, 0.0, -1.2117916920010833e-14, 0.0, 1.12265255565564e-14, -1.6133981702513424e-14, 0.0, 0.0, 0.0 },
                  { 0.0, 4.242640687119276, 0.0, 0.0, 0.0, 0.0, 14.342743312012717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000036, 0.0, 8.763560920082679, -1.5491933384829721, 0.0, -1.1583250462349633e-14, 0.0, 9.524704719832553, -1.4813121596360954, 0.2618614682831745, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.2511005756237792e-14, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.162277660168376, 4.919349550499537, 0.0, 0.0, -1.8106357197869972e-14, 0.0, 10.690449676496963, -2.41897262725906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.757567909045012e-14, 0.0, 0.0, 0.0, -1.0534398676378316e-14, 0.0, 0.0, 0.0 },
                  { 2.5455844122715594, 0.0, 0.0, 7.668115805072291, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.330503151850056e-14, 11.605769149479935, 3.960498505666324e-14, 2.3976886041478365e-14, -8.110978203476746e-14, -4.204589329360412, -3.4330328116279807, 0.0, 0.0, 0.0, 19.62141687034857, 1.3135071332560108e-14, 0.0, 0.6116777418411969, 0.5297284633639773, 0.4325214791567859, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.531372124791044, -2.850996940059778e-14, 3.5456210417116667, -2.507132682112032, 4.787135538781696, -6.596228840165717e-14, 1.1839705774199276e-14, -5.566267450754866, -1.0488088481701419, 0.7416198487095744, 0.0, 18.80349511584026, -0.6031223870464548, 1.7597069776392504e-14, 0.0, 0.0, 1.6818357317441648, 0.701283781217665, 0.1321374945286812, -0.0934353184302307, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8437458591274805e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.052982440952173, -1.830550020351154e-14, -1.585649934344183, 4.4848952846510945, 4.281744192888377, 0.0, -8.763633449884516e-14, 0.19148542155126536, -3.7523326078587256, -4.311612227461993, 0.0, 0.0, 18.88071718662934, 0.0, 1.9139823656101015e-14, 2.6066669384382406e-14, 0.0, 0.8443713418650352, 1.181873680570557, 1.0446386175466833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.8806771023688927e-14, 0.0, 0.0, 0.0, 0.0, 1.0658141036401503e-14 },
                  { 1.8314778902706516e-14, 2.5951288749406802, 1.3611440913199736e-14, 0.0, 0.0, 10.028530728448041, -0.7676494735787178, 2.2709357969060002e-14, 0.0, 1.2734799057229814e-14, 0.0, 0.0, 0.0, 16.413036132965775, -1.2634761106115702, 0.09671474291232757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1705860513679126e-14, 0.0, 0.0, 1.0773465817486554e-14, 0.0, 0.0, -1.3316388098032193e-14, 0.0 },
                  { 0.0, 2.321153829895986, 0.0, 0.0, 0.0, 3.924283374069708, 5.492852498604756, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.304463136556546, -1.730085916627133, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 2.0101781827814587, 0.0, 0.0, 0.0, 0.0, 8.91928088068603, 0.0, 1.529675243217666e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.855856488448858, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.966479394838273, 0.0, 8.124038404635954, -1.6413036132965826, 0.0, 0.0, 0.0, 11.77285012220919, -2.403122968139582, 0.48550415622760795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.276186062932084, -1.483239697419135, 0.30276503540974753, -0.061167774184124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3511484141521304e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 2.653299832284321, 0.0, 4.152206199905124, 2.936053160837746, 0.0, 0.0, 0.0, 2.6324893162176406, 9.825913261807846, -2.8226127713774196, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.608186766243895, -3.0948717731946505, 0.6838765055402409, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.864237847640092e-14, 0.0, 1.1272239547758273e-14, 0.0 },
                  { 2.2978250586152216, 0.0, 1.4982983545287996, 5.509176018985349, 0.0, 0.0, -1.492874995192631e-14, 0.0, 6.648039453209396, 4.136768925484857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.563613642384182, -3.5535265610950684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.876166303929351, 0.0, 0.0, 6.228309299857677, 0.0, 0.0, 0.0, 0.0, 0.0, 11.054152419533777, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.60576914947995, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779563, 7.245688373094724, 4.183300132670379, -0.5916079783099686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869736, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646316, 0.0, 9.660917830792954, 0.6831300510639802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203936, 0.0, 0.0, 7.529940238806684, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244587, 2.4494897427831677, 2.828427124746208, -1.0000000000000029, 9.165151389911683, 7.099295739719531, -0.414039335605414, -2.0493901531919163, -0.47809144373376483, 0.1690308509456981, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498044, 2.1213203435596375, -0.40824829046386224, 3.1754264805429413, 0.0, 0.0, 7.171371656006356, 0.0, -1.380131118684711, -1.5614401167176586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.800000000000001, -5.692099788303123, 4.381780460041341, -0.7745966692414885, 0.0, 10.998181667893983, 0.9621404708847462, 4.762352359916282, -0.7406560798180445, 0.13093073414158407, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119886, 2.738612787525831, 1.5811388300841889, 2.459674775249768, 0.0, 0.0, 9.258200997725497, 0.0, 5.345224838248484, -1.2094863136295309, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0458888067112545e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135775, 0.0, 0.0, 3.834057902536146, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706649, 0.0, -3.1622776601684044, -2.236067977499798, 0.0, 0.0, 0.0, 13.74772708486752, 0.5345224838248537, 0.3779644730092344, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999845, 0.0, 3.651483716701071, -2.8401877872187673, 0.0, 0.0, -1.4449168511043932e-14, 0.0, 12.344267996967327, 1.3965944975103537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0017851193254583e-14, 0.0, 0.0, 0.0 },
                  { 2.2045407685048546, 0.0, 0.0, 6.640783086353626, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257492, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.265686062395528, 3.0705978943149255, 1.772810520855839, -1.2535663410560185, 2.3935677693907893, 6.303768714031274, -0.908295106229238, -2.783133725377421, -0.5244044240850672, 0.37080992435478816, 11.124297730643486, 9.40174755792014, -0.30156119352322097, -2.4275207811380524, -0.7942002066569627, 0.11443442705426228, 0.8409178658720864, 0.3506418906088314, 0.06606874726433942, -0.04671765921511843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1307438842922726e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760823, 2.7464262493023717, -0.7928249671720906, 2.2424476423255437, 2.14087209644419, -0.331662479035544, 6.499230723708699, 0.09574271077563525, -1.8761663039293628, -2.155806113730988, 0.0, 0.0, 9.440358593314679, 0.0, -1.4624940645653415, -2.0470652628766133, 0.0, 0.422185670932515, 0.590936840285275, 0.5223193087733384, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.993064022839544e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126722, 1.2975644374703423, 3.74574588632195, -1.0594569267279437, -8.091735937126927, 5.014265364224017, -0.38382473678935675, 1.8093671611393922, -1.1080065755348987, 0.3133915852640052, 0.0, 12.713483120735418, 1.0194629030686677, 8.206518066482888, -0.6317380553057825, 0.04835737145616601, -2.8428212488760574, -0.22795883518008403, 0.13959570713760264, -0.03948362845661131, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0627836207909658e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479928, 1.3401187885209798, 1.8952141659173722, 2.5331140255951103, 1.962141687034854, 2.746426249302365, -0.5664215155988747, 3.1712998686883687, -1.821988709389515, 0.0, 0.0, 11.16998292382394, 0.0, 8.652231568278271, -0.8650429583135634, 0.0, -2.4976841125182245, -0.9988655696858566, 0.44144038613664854, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191224, 1.005089091390728, -0.19342948582465902, 3.5561578288092566, 0.0, 0.0, 4.459640440343018, 0.0, -0.8582582029069905, 2.670272859251861, 0.0, 0.0, 0.0, 0.0, 0.0, 8.427928244224427, 0.0, 0.0, -1.6219555468379445, -2.293791531904489, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191515, 7.035623639735128, 4.062019202317992, -0.8206518066482938, 0.0, -6.797058187186526, -2.081165538826724, 5.88642506110461, -1.2015614840697915, 0.24275207811380675, 0.0, 0.0, 0.0, 14.832396974191319, 0.8563488385776682, 0.2622022120425354, 5.13809303146605, -0.7416198487095697, 0.15138251770487415, -0.030583887092060853, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.5380790216902193e-14, 0.0, 0.0, 0.0, 1.0660212672427117e-14, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3266499161421623, -2.6969370381518205, 2.0761030999525625, 1.4680265804188717, 0.0, 3.0397368307141344, -6.382117875081008, 1.3162446581088219, 4.912956630903925, -1.4113063856887094, 0.0, 0.0, 0.0, 0.0, 13.403979508588742, 2.0101781827814693, 0.0, 5.804093383121946, -1.5474358865973252, 0.34193825277012, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.1489125293076419, 1.2975644374703548, 0.7491491772644009, 2.7545880094926662, 0.0, 1.0145883267538782e-14, 5.757371051840533, 0.0, 3.3240197266047025, 2.0683844627424297, 0.0, 0.0, 0.0, 0.0, 0.0, 10.880408577637443, 0.0, 0.0, 6.2818068211920925, -1.7767632805475366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646862, 0.0, 0.0, 3.1141546499288344, 0.0, 0.0, 0.0, 0.0, 0.0, 5.52707620976689, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.802884574739974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.4253953543107123, 0.0, 9.380831519646812, 1.8952141659173807, 0.0, 0.0, 0.0, -3.398529093593304, -2.7748873851023097, -0.5606119105813873, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 17.79887636902958, 0.4281744192888399, 0.34960294939004605, 0.07063046178185983, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.829708431025359, 0.0, -1.4982983545288049, 4.237827706911812, 0.0, 0.0, 2.162264202642749e-14, 3.799671038392672, -3.5456210417117067, -4.074090608432061, 0.0, 0.0, 0.0, 0.0, 1.0817105152032458e-14, 0.0, 0.0, 16.754974385735906, 1.1167656571008324, 0.9870907114152954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.6875142296040193e-14, 0.0, 0.0, 0.0, 0.0, 1.494544328050302e-14, 0.0, 0.0 },
                  { -1.3266499161421754, 0.0, 1.730085916627137, -3.1807242575742176, 0.0, 0.0, -1.5953962943146432e-14, 0.0, 7.676494735787393, -2.3883646527039595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.507211436849923, 2.0516295166207263, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.6248076809271539, 0.0, 0.0, 5.393874076303519, 0.0, 0.0, 0.0, 0.0, 0.0, 9.573176812621368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.050890913907315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[35][35] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498067, 5.61248608016091, -1.0801234497346441, -0.7637626158259722, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779177, 1.4491376746189426, 4.183300132670373, -0.5916079783099618, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870102, 7.099295739719542, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323071, 0.0, 3.864367132317187, -0.3415650255319906, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346333, 0.0, 7.099295739719543, 2.5099800796022125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129914, 0.0, 0.0, 8.874119674649435, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734797, 5.796550698475767, -1.6733200530681367, -1.1832159566199099, 7.745966692414839, -1.2000000000000004, -0.9797958971132789, 0.34641016151377657, 0.2828427124746243, 0.20000000000000623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244618, 2.449489742783168, 2.8284271247462036, -1.0000000000000058, 1.3093073414159513, 7.099295739719532, -0.4140393356054129, -2.049390153191917, -0.47809144373376916, 0.16903085094569686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498027, 2.121320343559638, -0.4082482904638613, 3.1754264805429417, 9.071147352221457, 0.0, 7.171371656006354, 0.0, -1.3801311186847007, -1.5614401167176584, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000054, 0.6324555320336741, 4.381780460041338, -0.7745966692414874, 0.0, 3.1423376193982864, -0.10690449676496583, 4.76235235991628, -0.7406560798180474, 0.1309307341415874, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119882, 0.5477225575051582, 1.5811388300841902, 2.459674775249769, 0.0, 9.071147352221452, 1.8516401995450962, 0.0, 5.345224838248482, -1.2094863136295335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357737, -6.260990336999453, 0.0, 3.834057902536143, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413218, 0.0, 3.162277660168363, -0.447213595499958, 0.0, 0.0, 0.0, 5.891883036371794, -0.5345224838248525, 0.07559289460184068, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999853, 0.0, 1.4605934866803663, 1.4200938936093892, 0.0, 0.0, 0.0, 9.071147352221445, 4.937707198786941, -0.6982972487551771, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7348469228349547, 0.0, -6.260990336999386, 2.213594362117879, 0.0, 0.0, -1.3491100171061865e-14, 0.0, 10.583005244258375, 2.993325909419169, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977282, 0.0, 0.0, -4.695742752749557, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.569046515733006, 5.80288457473998, -2.0101781827814476, -1.421410624438014, 8.142152225127095, -2.102294664680215, -1.716516405814003, 0.7282562343414167, 0.5946187253790766, 0.4204589329360458, 9.810708435174295, -1.1845088536983466, -1.0258147583103607, 0.3058388709205976, 0.26486423168198897, 0.21626073957839415, -0.1059456926727933, -0.09175166127617798, -0.07491491772644072, -0.05297284633639918, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2656860623955217, 3.0705978943149304, 1.772810520855836, -1.253566341056014, 2.393567769390836, 6.303768714031273, -0.9082951062292401, -2.7831337253774255, -0.5244044240850767, 0.3708099243547887, 1.2360330811826061, 9.401747557920132, -0.3015611935232256, -2.4275207811380537, -0.7942002066569638, 0.11443442705426564, 0.8409178658720896, 0.35064189060883205, 0.06606874726434106, -0.04671765921511667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3670589577544366e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0264912204760903, 2.7464262493023517, -0.7928249671720885, 2.242447642325539, 2.1408720964441366, -0.3316624790355405, 6.499230723708705, 0.0957427107756389, -1.8761663039293512, -2.1558061137309883, 11.055415967851332, 0.0, 9.440358593314683, 0.0, -1.4624940645653401, -2.047065262876616, 0.0, 0.42218567093251474, 0.590936840285273, 0.5223193087733379, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.599765871229052e-14, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.9148542155126682, 1.2975644374703392, 3.745745886321956, -1.0594569267279421, 0.4045867968563367, 5.0142653642240145, -0.38382473678935974, 1.809367161139388, -1.108006575534902, 0.31339158526400385, 0.0, 2.8252184712745443, -0.05097314515343376, 8.206518066482891, -0.6317380553057809, 0.04835737145616555, -2.842821248876053, -0.22795883518008558, 0.13959570713760205, -0.03948362845661233, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.7126976771553526, 1.1605769149479905, 1.3401187885209846, 1.8952141659173725, 0.3618734322278701, 1.9621416870348567, 2.7464262493023686, -0.5664215155988688, 3.171299868688374, -1.8219887093895097, 0.0, 11.05541596785133, 1.5957118462605635, 0.0, 8.65223156827827, -0.8650429583135661, 0.0, -2.497684112518219, -0.9988655696858585, 0.4414403861366436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191255, 1.0050890913907282, -0.19342948582465688, 3.5561578288092597, -8.46157280212815, 0.0, 4.459640440343013, 0.0, -0.8582582029069988, 2.670272859251861, 0.0, 0.0, 12.437342963832732, 0.0, 0.0, 8.42792824422443, 0.0, 0.0, -1.6219555468379419, -2.2937915319044846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.4832396974191437, 0.33502969713025177, 4.062019202317992, -0.8206518066482941, 0.0, 1.6992645467966534, -0.0991031208965086, 5.886425061104606, -1.2015614840697957, 0.24275207811380342, 0.0, 0.0, 0.0, 4.944132324730431, -0.21408720964441727, 0.012485819621072435, 5.138093031466052, -0.7416198487095693, 0.1513825177048745, -0.030583887092061963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.326649916142165, 0.2996596709057543, 2.076103099952562, 1.4680265804188735, 0.0, 0.8684962373468885, 0.7091242083423479, 1.3162446581088239, 4.912956630903926, -1.4113063856887116, 0.0, 0.0, 0.0, 11.055415967851332, 3.8297084310253577, -0.22335313142016355, 0.0, 5.804093383121947, -1.5474358865973252, 0.3419382527701209, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1069664289435565e-14, 0.0, 0.0, 0.0, -1.0612621482255336e-14, 0.0, 0.0, 0.0 },
                  { 1.1489125293076057, 0.2595128874940706, 0.7491491772643925, 2.7545880094926725, 0.0, -8.461572802128144, 1.1514742103680917, 0.0, 3.324019726604704, 2.068384462742431, 0.0, 0.0, 0.0, 0.0, 12.437342963832721, 2.176081715527487, 0.0, 0.0, 6.28180682119209, -1.7767632805475362, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.9380831519646892, 7.628089872441259, 0.0, 3.1141546499288317, 0.0, 0.0, -7.521398046336141, 0.0, 0.0, 5.527076209766871, -1.2236895295494794e-14, 0.0, 0.0, 0.0, 0.0, 14.214106244380265, 0.0, 0.0, 0.0, 5.802884574739969, 0.0, 0.0, 1.3455709111270722e-14, 0.0, 0.0, 0.0, 0.0, 1.1219701420288515e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8563488385776568, 0.0, 2.680237577041935, -0.47380354147933157, 0.0, 0.0, 0.0, 5.097793640389914, -0.7928249671720795, 0.14015297764535037, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.910611719568696, -0.6422616289332551, 0.09988655696858305, -0.017657615445468556, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.7659416862050301, 0.0, 1.4982983545287594, 0.8475655413823988, 0.0, 0.0, 0.0, 1.6284304450253648, 3.5456210417116636, -0.8148181216864206, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.05541596785133, 7.180703308172538, -1.1167656571008078, 0.1974181422830578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.663324958071094, 0.0, 0.6920343666509058, 1.590362128787088, 0.0, 0.0, 0.0, -8.461572802128083, 3.0705978943148606, 1.194182326351994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.437342963832771, 5.802884574739995, -1.0258147583103627, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.541602560309076, 0.0, 7.628089872441244, 1.7979580254344996, 0.0, 0.0, 0.0, 0.0, -7.521398046336186, 3.19105893754045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.214106244380218, 3.3502969713024413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -5.361591803435523, 0.0, 0.0, 8.899438184514773, 0.0, 0.0, 0.0, 0.0, 0.0, -5.26497863243531, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.583123951776976, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[81] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[35][35] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 1225, 0.0);
                for (std::size_t t = 0; t < 35; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 1225, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 1225, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 35; ++t)
                            for (std::size_t u = 0; u < 35; ++u)
                                for (std::size_t tu = 0; tu < 35; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 35; ++s)
                    for (std::size_t t = 0; t < 35; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
}

void poisson3d_4_finite_element_2::evaluate_basis_derivatives_all(std::size_t n,
                                                   double * values,
                                                   const double * x,
                                                   const double * coordinate_dofs,
                                                   int cell_orientation,
                                                   const ufc::coordinate_mapping * cm
                                                   ) const
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 35, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 4)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[81] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 35; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
}

double poisson3d_4_finite_element_2::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double * coordinate_dofs,
                                   int cell_orientation,
                                   const ufc::cell& c,
                                   const ufc::coordinate_mapping * cm
                                   ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.75 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.75 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.75 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.75 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[7] + 0.75 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[8] + 0.75 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9];
            y[1] = 0.75 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10];
            y[2] = 0.75 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[4] + 0.75 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[5] + 0.75 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6];
            y[1] = 0.75 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7];
            y[2] = 0.75 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[6];
            y[1] = 0.25 * coordinate_dofs[4] + 0.75 * coordinate_dofs[7];
            y[2] = 0.25 * coordinate_dofs[5] + 0.75 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[9];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[10];
            y[2] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7];
            y[2] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[6];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[7];
            y[2] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3];
            y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4];
            y[2] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 20:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 21:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[3];
            y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[4];
            y[2] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 22:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 23:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 24:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 25:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 26:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 27:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 28:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 29:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 30:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 31:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 32:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6];
            y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7];
            y[2] = 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 33:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 34:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
}

void poisson3d_4_finite_element_2::evaluate_dofs(double * values,
                                  const ufc::function& f,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::cell& c,
                                  const ufc::coordinate_mapping * cm
                                  ) const
{
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.75 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.75 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.75 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.25 * coordinate_dofs[6] + 0.75 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[7] + 0.75 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[8] + 0.75 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9];
    y[1] = 0.75 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10];
    y[2] = 0.75 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[4] + 0.75 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[5] + 0.75 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6];
    y[1] = 0.75 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7];
    y[2] = 0.75 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[6];
    y[1] = 0.25 * coordinate_dofs[4] + 0.75 * coordinate_dofs[7];
    y[2] = 0.25 * coordinate_dofs[5] + 0.75 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[9];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[10];
    y[2] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7];
    y[2] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[6];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[7];
    y[2] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3];
    y[1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4];
    y[2] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[3];
    y[1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[4];
    y[2] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[27] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[28] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[29] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[30] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[31] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6];
    y[1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7];
    y[2] = 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[32] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[33] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[34] = vals[0];
}

void poisson3d_4_finite_element_2::interpolate_vertex_values(double * vertex_values,
                                              const double * dof_values,
                                              const double * coordinate_dofs,
                                              int cell_orientation,
                                              const ufc::coordinate_mapping * cm
                                              ) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
}

void poisson3d_4_finite_element_2::tabulate_dof_coordinates(double * dof_coordinates,
                                             const double * coordinate_dofs,
                                             const ufc::coordinate_mapping * cm
                                             ) const
{
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.75 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.75 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.75 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.25 * coordinate_dofs[6] + 0.75 * coordinate_dofs[9];
    dof_coordinates[3 * 6 + 1] = 0.25 * coordinate_dofs[7] + 0.75 * coordinate_dofs[10];
    dof_coordinates[3 * 6 + 2] = 0.25 * coordinate_dofs[8] + 0.75 * coordinate_dofs[11];
    dof_coordinates[3 * 7] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.75 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.75 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 8 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 8 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 9] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[9];
    dof_coordinates[3 * 9 + 1] = 0.25 * coordinate_dofs[4] + 0.75 * coordinate_dofs[10];
    dof_coordinates[3 * 9 + 2] = 0.25 * coordinate_dofs[5] + 0.75 * coordinate_dofs[11];
    dof_coordinates[3 * 10] = 0.75 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = 0.75 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = 0.75 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8];
    dof_coordinates[3 * 11] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 11 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 11 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 12] = 0.25 * coordinate_dofs[3] + 0.75 * coordinate_dofs[6];
    dof_coordinates[3 * 12 + 1] = 0.25 * coordinate_dofs[4] + 0.75 * coordinate_dofs[7];
    dof_coordinates[3 * 12 + 2] = 0.25 * coordinate_dofs[5] + 0.75 * coordinate_dofs[8];
    dof_coordinates[3 * 13] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 13 + 1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 13 + 2] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 14] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 14 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 14 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 15] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[9];
    dof_coordinates[3 * 15 + 1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[10];
    dof_coordinates[3 * 15 + 2] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[11];
    dof_coordinates[3 * 16] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6];
    dof_coordinates[3 * 16 + 1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7];
    dof_coordinates[3 * 16 + 2] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8];
    dof_coordinates[3 * 17] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 17 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 17 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 18] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[6];
    dof_coordinates[3 * 18 + 1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[7];
    dof_coordinates[3 * 18 + 2] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[8];
    dof_coordinates[3 * 19] = 0.75 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3];
    dof_coordinates[3 * 19 + 1] = 0.75 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4];
    dof_coordinates[3 * 19 + 2] = 0.75 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5];
    dof_coordinates[3 * 20] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 20 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 20 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 21] = 0.25 * coordinate_dofs[0] + 0.75 * coordinate_dofs[3];
    dof_coordinates[3 * 21 + 1] = 0.25 * coordinate_dofs[1] + 0.75 * coordinate_dofs[4];
    dof_coordinates[3 * 21 + 2] = 0.25 * coordinate_dofs[2] + 0.75 * coordinate_dofs[5];
    dof_coordinates[3 * 22] = 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 22 + 1] = 0.5 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 22 + 2] = 0.5 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 23] = 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 23 + 1] = 0.25 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 23 + 2] = 0.25 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 24] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 24 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 24 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 25] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 25 + 1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 25 + 2] = 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 26] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 26 + 1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 26 + 2] = 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 27] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 27 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 27 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 28] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 28 + 1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 28 + 2] = 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 29] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 29 + 1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 29 + 2] = 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 30] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 30 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 30 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 31] = 0.5 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6];
    dof_coordinates[3 * 31 + 1] = 0.5 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7];
    dof_coordinates[3 * 31 + 2] = 0.5 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8];
    dof_coordinates[3 * 32] = 0.25 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6];
    dof_coordinates[3 * 32 + 1] = 0.25 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7];
    dof_coordinates[3 * 32 + 2] = 0.25 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8];
    dof_coordinates[3 * 33] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 33 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 33 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 34] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 34 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 34 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
}

void poisson3d_4_finite_element_2::tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const
{
    static const double dof_X[105] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.75, 0.25, 0.0, 0.5, 0.5, 0.0, 0.25, 0.75, 0.75, 0.0, 0.25, 0.5, 0.0, 0.5, 0.25, 0.0, 0.75, 0.75, 0.25, 0.0, 0.5, 0.5, 0.0, 0.25, 0.75, 0.0, 0.0, 0.0, 0.25, 0.0, 0.0, 0.5, 0.0, 0.0, 0.75, 0.0, 0.25, 0.0, 0.0, 0.5, 0.0, 0.0, 0.75, 0.0, 0.25, 0.0, 0.0, 0.5, 0.0, 0.0, 0.75, 0.0, 0.0, 0.5, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.5, 0.0, 0.25, 0.25, 0.0, 0.5, 0.25, 0.0, 0.25, 0.5, 0.25, 0.0, 0.25, 0.5, 0.0, 0.25, 0.25, 0.0, 0.5, 0.25, 0.25, 0.0, 0.5, 0.25, 0.0, 0.25, 0.5, 0.0, 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 105, reference_dof_coordinates);
}

std::size_t poisson3d_4_finite_element_2::num_sub_elements() const
{
    return 0;
}

ufc::finite_element * poisson3d_4_finite_element_2::create_sub_element(std::size_t i) const
{
    return nullptr;
}

ufc::finite_element * poisson3d_4_finite_element_2::create() const
{
    return new poisson3d_4_finite_element_2();
}


poisson3d_4_dofmap_0::poisson3d_4_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

poisson3d_4_dofmap_0::~poisson3d_4_dofmap_0()
{
    // Do nothing
}

const char * poisson3d_4_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
}

bool poisson3d_4_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t poisson3d_4_dofmap_0::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_4_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0];
}

std::size_t poisson3d_4_dofmap_0::num_global_support_dofs() const
{
    return 0;
}

std::size_t poisson3d_4_dofmap_0::num_element_support_dofs() const
{
    return 4;
}

std::size_t poisson3d_4_dofmap_0::num_element_dofs() const
{
    return 4;
}

std::size_t poisson3d_4_dofmap_0::num_facet_dofs() const
{
    return 3;
}

std::size_t poisson3d_4_dofmap_0::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t poisson3d_4_dofmap_0::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 2, 3, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void poisson3d_4_dofmap_0::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
}

void poisson3d_4_dofmap_0::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    }
}

void poisson3d_4_dofmap_0::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
}

void poisson3d_4_dofmap_0::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
}

std::size_t poisson3d_4_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * poisson3d_4_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * poisson3d_4_dofmap_0::create() const
{
    return new poisson3d_4_dofmap_0();
}


poisson3d_4_dofmap_1::poisson3d_4_dofmap_1() : ufc::dofmap()
{
    // Do nothing
}

poisson3d_4_dofmap_1::~poisson3d_4_dofmap_1()
{
    // Do nothing
}

const char * poisson3d_4_dofmap_1::signature() const
{
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

bool poisson3d_4_dofmap_1::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t poisson3d_4_dofmap_1::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_4_dofmap_1::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return 3 * num_global_entities[0];
}

std::size_t poisson3d_4_dofmap_1::num_global_support_dofs() const
{
    return 0;
}

std::size_t poisson3d_4_dofmap_1::num_element_support_dofs() const
{
    return 12;
}

std::size_t poisson3d_4_dofmap_1::num_element_dofs() const
{
    return 12;
}

std::size_t poisson3d_4_dofmap_1::num_facet_dofs() const
{
    return 9;
}

std::size_t poisson3d_4_dofmap_1::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t poisson3d_4_dofmap_1::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 3, 6, 9, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void poisson3d_4_dofmap_1::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
}

void poisson3d_4_dofmap_1::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        break;
    }
}

void poisson3d_4_dofmap_1::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    }
}

void poisson3d_4_dofmap_1::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
}

std::size_t poisson3d_4_dofmap_1::num_sub_dofmaps() const
{
    return 3;
}

ufc::dofmap * poisson3d_4_dofmap_1::create_sub_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_4_dofmap_0();
    case 1:
        return new poisson3d_4_dofmap_0();
    case 2:
        return new poisson3d_4_dofmap_0();
    default:
        return nullptr;
    }
}

ufc::dofmap * poisson3d_4_dofmap_1::create() const
{
    return new poisson3d_4_dofmap_1();
}


poisson3d_4_dofmap_2::poisson3d_4_dofmap_2() : ufc::dofmap()
{
    // Do nothing
}

poisson3d_4_dofmap_2::~poisson3d_4_dofmap_2()
{
    // Do nothing
}

const char * poisson3d_4_dofmap_2::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 4)";
}

bool poisson3d_4_dofmap_2::needs_mesh_entities(std::size_t d) const
{
    static const bool return_values[4] = { true, true, true, true };
    if (d >= 4)
        return false;
    return return_values[d];
}

std::size_t poisson3d_4_dofmap_2::topological_dimension() const
{
    return 3;
}

std::size_t poisson3d_4_dofmap_2::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0] + 3 * num_global_entities[1] + 3 * num_global_entities[2] + num_global_entities[3];
}

std::size_t poisson3d_4_dofmap_2::num_global_support_dofs() const
{
    return 0;
}

std::size_t poisson3d_4_dofmap_2::num_element_support_dofs() const
{
    return 35;
}

std::size_t poisson3d_4_dofmap_2::num_element_dofs() const
{
    return 35;
}

std::size_t poisson3d_4_dofmap_2::num_facet_dofs() const
{
    return 15;
}

std::size_t poisson3d_4_dofmap_2::num_entity_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 3, 3, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

std::size_t poisson3d_4_dofmap_2::num_entity_closure_dofs(std::size_t d) const
{
    static const std::size_t return_values[4] = { 1, 5, 15, 35 };
    if (d >= 4)
        return 0;
    return return_values[d];
}

void poisson3d_4_dofmap_2::tabulate_dofs(std::size_t * dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const std::vector<std::vector<std::size_t>>& entity_indices) const
{
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + 3 * entity_indices[1][0];
    dofs[5] = offset + 3 * entity_indices[1][0] + 1;
    dofs[6] = offset + 3 * entity_indices[1][0] + 2;
    dofs[7] = offset + 3 * entity_indices[1][1];
    dofs[8] = offset + 3 * entity_indices[1][1] + 1;
    dofs[9] = offset + 3 * entity_indices[1][1] + 2;
    dofs[10] = offset + 3 * entity_indices[1][2];
    dofs[11] = offset + 3 * entity_indices[1][2] + 1;
    dofs[12] = offset + 3 * entity_indices[1][2] + 2;
    dofs[13] = offset + 3 * entity_indices[1][3];
    dofs[14] = offset + 3 * entity_indices[1][3] + 1;
    dofs[15] = offset + 3 * entity_indices[1][3] + 2;
    dofs[16] = offset + 3 * entity_indices[1][4];
    dofs[17] = offset + 3 * entity_indices[1][4] + 1;
    dofs[18] = offset + 3 * entity_indices[1][4] + 2;
    dofs[19] = offset + 3 * entity_indices[1][5];
    dofs[20] = offset + 3 * entity_indices[1][5] + 1;
    dofs[21] = offset + 3 * entity_indices[1][5] + 2;
    offset += 3 * num_global_entities[1];
    dofs[22] = offset + 3 * entity_indices[2][0];
    dofs[23] = offset + 3 * entity_indices[2][0] + 1;
    dofs[24] = offset + 3 * entity_indices[2][0] + 2;
    dofs[25] = offset + 3 * entity_indices[2][1];
    dofs[26] = offset + 3 * entity_indices[2][1] + 1;
    dofs[27] = offset + 3 * entity_indices[2][1] + 2;
    dofs[28] = offset + 3 * entity_indices[2][2];
    dofs[29] = offset + 3 * entity_indices[2][2] + 1;
    dofs[30] = offset + 3 * entity_indices[2][2] + 2;
    dofs[31] = offset + 3 * entity_indices[2][3];
    dofs[32] = offset + 3 * entity_indices[2][3] + 1;
    dofs[33] = offset + 3 * entity_indices[2][3] + 2;
    offset += 3 * num_global_entities[2];
    dofs[34] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
}

void poisson3d_4_dofmap_2::tabulate_facet_dofs(std::size_t * dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 7;
        dofs[7] = 8;
        dofs[8] = 9;
        dofs[9] = 10;
        dofs[10] = 11;
        dofs[11] = 12;
        dofs[12] = 22;
        dofs[13] = 23;
        dofs[14] = 24;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 16;
        dofs[10] = 17;
        dofs[11] = 18;
        dofs[12] = 25;
        dofs[13] = 26;
        dofs[14] = 27;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 19;
        dofs[10] = 20;
        dofs[11] = 21;
        dofs[12] = 28;
        dofs[13] = 29;
        dofs[14] = 30;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 10;
        dofs[4] = 11;
        dofs[5] = 12;
        dofs[6] = 16;
        dofs[7] = 17;
        dofs[8] = 18;
        dofs[9] = 19;
        dofs[10] = 20;
        dofs[11] = 21;
        dofs[12] = 31;
        dofs[13] = 32;
        dofs[14] = 33;
        break;
    }
}

void poisson3d_4_dofmap_2::tabulate_entity_dofs(std::size_t * dofs,
                                         std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            dofs[1] = 5;
            dofs[2] = 6;
            break;
        case 1:
            dofs[0] = 7;
            dofs[1] = 8;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 10;
            dofs[1] = 11;
            dofs[2] = 12;
            break;
        case 3:
            dofs[0] = 13;
            dofs[1] = 14;
            dofs[2] = 15;
            break;
        case 4:
            dofs[0] = 16;
            dofs[1] = 17;
            dofs[2] = 18;
            break;
        case 5:
            dofs[0] = 19;
            dofs[1] = 20;
            dofs[2] = 21;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 22;
            dofs[1] = 23;
            dofs[2] = 24;
            break;
        case 1:
            dofs[0] = 25;
            dofs[1] = 26;
            dofs[2] = 27;
            break;
        case 2:
            dofs[0] = 28;
            dofs[1] = 29;
            dofs[2] = 30;
            break;
        case 3:
            dofs[0] = 31;
            dofs[1] = 32;
            dofs[2] = 33;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 34;
            break;
        }
        break;
    }
}

void poisson3d_4_dofmap_2::tabulate_entity_closure_dofs(std::size_t * dofs,
                                             std::size_t d, std::size_t i) const
{
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 6;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 7;
            dofs[3] = 8;
            dofs[4] = 9;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 10;
            dofs[3] = 11;
            dofs[4] = 12;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 13;
            dofs[3] = 14;
            dofs[4] = 15;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 16;
            dofs[3] = 17;
            dofs[4] = 18;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 19;
            dofs[3] = 20;
            dofs[4] = 21;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 7;
            dofs[7] = 8;
            dofs[8] = 9;
            dofs[9] = 10;
            dofs[10] = 11;
            dofs[11] = 12;
            dofs[12] = 22;
            dofs[13] = 23;
            dofs[14] = 24;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 16;
            dofs[10] = 17;
            dofs[11] = 18;
            dofs[12] = 25;
            dofs[13] = 26;
            dofs[14] = 27;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 19;
            dofs[10] = 20;
            dofs[11] = 21;
            dofs[12] = 28;
            dofs[13] = 29;
            dofs[14] = 30;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 10;
            dofs[4] = 11;
            dofs[5] = 12;
            dofs[6] = 16;
            dofs[7] = 17;
            dofs[8] = 18;
            dofs[9] = 19;
            dofs[10] = 20;
            dofs[11] = 21;
            dofs[12] = 31;
            dofs[13] = 32;
            dofs[14] = 33;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            dofs[27] = 27;
            dofs[28] = 28;
            dofs[29] = 29;
            dofs[30] = 30;
            dofs[31] = 31;
            dofs[32] = 32;
            dofs[33] = 33;
            dofs[34] = 34;
            break;
        }
        break;
    }
}

std::size_t poisson3d_4_dofmap_2::num_sub_dofmaps() const
{
    return 0;
}

ufc::dofmap * poisson3d_4_dofmap_2::create_sub_dofmap(std::size_t i) const
{
    return nullptr;
}

ufc::dofmap * poisson3d_4_dofmap_2::create() const
{
    return new poisson3d_4_dofmap_2();
}


poisson3d_4_coordinate_mapping_1::poisson3d_4_coordinate_mapping_1() : ufc::coordinate_mapping()
{
    // Do nothing
}

poisson3d_4_coordinate_mapping_1::~poisson3d_4_coordinate_mapping_1()
{
    // Do nothing
}

const char * poisson3d_4_coordinate_mapping_1::signature() const
{
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
}

ufc::coordinate_mapping * poisson3d_4_coordinate_mapping_1::create() const
{
    return new poisson3d_4_coordinate_mapping_1();
}

std::size_t poisson3d_4_coordinate_mapping_1::geometric_dimension() const
{
    return 3;
}

std::size_t poisson3d_4_coordinate_mapping_1::topological_dimension() const
{
    return 3;
}

ufc::shape poisson3d_4_coordinate_mapping_1::cell_shape() const
{
    return ufc::shape::tetrahedron;
}

ufc::finite_element * poisson3d_4_coordinate_mapping_1::create_coordinate_finite_element() const
{
    return new poisson3d_4_finite_element_1();
}

ufc::dofmap * poisson3d_4_coordinate_mapping_1::create_coordinate_dofmap() const
{
    return new poisson3d_4_dofmap_1();
}

void poisson3d_4_coordinate_mapping_1::compute_physical_coordinates(
    double * x, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    poisson3d_4_finite_element_0 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
}

void poisson3d_4_coordinate_mapping_1::compute_reference_coordinates(
    double * X, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
}

void poisson3d_4_coordinate_mapping_1::compute_reference_geometry(
    double * X, double * J, double * detJ, double * K, std::size_t num_points,
    const double * x,
    const double * coordinate_dofs, int cell_orientation) const
{
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
}

void poisson3d_4_coordinate_mapping_1::compute_jacobians(
    double * J, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs) const
{
    poisson3d_4_finite_element_0 xelement;
    double dphi[12];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
}

void poisson3d_4_coordinate_mapping_1::compute_jacobian_determinants(
    double * detJ, std::size_t num_points,
    const double * J,
    int cell_orientation) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
}

void poisson3d_4_coordinate_mapping_1::compute_jacobian_inverses(
    double * K, std::size_t num_points,
    const double * J, const double * detJ) const
{
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
}

void poisson3d_4_coordinate_mapping_1::compute_geometry(
    double * x, double * J, double * detJ, double * K, std::size_t num_points,
    const double * X,
    const double * coordinate_dofs, int cell_orientation) const
{
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
}

void poisson3d_4_coordinate_mapping_1::compute_midpoint_geometry(
    double * x, double * J,
    const double * coordinate_dofs) const
{
    const double phi_Xm[4] = { 0.25000000000000006, 0.25, 0.25, 0.25 };
    const double dphi_Xm[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
}


poisson3d_4_cell_integral_0_otherwise::poisson3d_4_cell_integral_0_otherwise() : ufc::cell_integral()
{

}

poisson3d_4_cell_integral_0_otherwise::~poisson3d_4_cell_integral_0_otherwise()
{

}

const std::vector<bool> & poisson3d_4_cell_integral_0_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({});
return enabled;
}

void poisson3d_4_cell_integral_0_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation,
                                    std::size_t local_facet) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE8_C0_D001_Q24[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[1][30][30] =
        { { { 0.03791887125220485, 0.005114638447971801, 0.007760141093474365, 0.005114638447971664, 0.007760141093474443, 0.007760141093474429, 0.005114638447971517, 0.007760141093474467, -0.02469135802469122, 0.02028218694885362, -0.007760141093474444, -0.02469135802469115, 0.02028218694885341, -0.007760141093474473, -0.07054673721340435, 0.05291005291005325, -0.02539682539682555, 0.01834215167548476, 0.0183421516754853, 0.01834215167548503, 0.04938271604938282, -0.01834215167548527, -0.01834215167548508, 0.04232804232804198, -0.02539682539682514, -0.02539682539682529, 0.04232804232804197, -0.02539682539682528, -0.02539682539682487, -0.06772486772486756 },
            { 0.005114638447971801, 0.03791887125220466, -0.02469135802469156, 0.02028218694885382, -0.007760141093474475, -0.0246913580246915, 0.02028218694885354, -0.007760141093474451, 0.007760141093474515, 0.005114638447971845, 0.007760141093474469, 0.007760141093474603, 0.005114638447971558, 0.007760141093474469, -0.0253968253968254, 0.05291005291005294, -0.07054673721340397, 0.04938271604938264, -0.01834215167548493, -0.01834215167548508, 0.01834215167548501, 0.01834215167548496, 0.01834215167548508, -0.02539682539682544, 0.04232804232804246, -0.02539682539682563, -0.02539682539682569, 0.04232804232804261, -0.02539682539682517, -0.06772486772486767 },
            { 0.007760141093474365, -0.02469135802469156, 0.2031746031746032, -0.118518518518519, 0.04514991181657847, 0.1015873015873017, -0.04232804232804227, 0.01128747795414444, -0.02257495590828906, -0.01693121693121708, -0.04514991181657849, -0.01128747795414467, -0.002821869488536075, -0.01128747795414454, -0.02257495590828865, 0.01693121693121589, 0.02257495590828985, -0.06772486772486833, 0.02257495590828934, 0.06772486772486759, -0.02257495590828961, -0.02257495590828937, -0.06772486772486766, 0.09029982363315665, -0.2708994708994707, 0.135449735449736, 0.04514991181657857, -0.1354497354497357, 0.04514991181657853, 0.09029982363315779 },
            { 0.005114638447971664, 0.02028218694885382, -0.118518518518519, 0.2497354497354499, -0.09029982363315697, -0.04232804232804259, -0.01340388007054646, 0.002821869488536223, -0.01693121693121662, 0.02116402116402105, 0.09029982363315704, -0.002821869488536113, -0.009171075837742418, -0.002821869488536194, -0.01128747795414438, -0.002821869488535983, -0.01128747795414497, 0.1185185185185191, -0.01693121693121673, -0.08465608465608447, 0.01693121693121755, 0.01693121693121677, 0.08465608465608455, 0.0677248677248664, 0.06772486772486921, -0.2708994708994709, 0.02257495590828911, 0.02257495590828959, 0.0225749559082888, -0.1354497354497363 },
            { 0.007760141093474443, -0.007760141093474475, 0.04514991181657847, -0.09029982363315697, 0.1580246913580243, 0.01128747795414454, 0.002821869488536194, 0.01128747795414448, -0.04514991181657847, 0.09029982363315694, -0.1580246913580245, -0.01128747795414476, -0.002821869488536135, -0.01128747795414446, 0.0, 0.0, 0.0, -0.02257495590828948, -0.02257495590828957, 0.1128747795414456, 0.02257495590828886, 0.02257495590828951, -0.1128747795414456, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.007760141093474429, -0.0246913580246915, 0.1015873015873017, -0.04232804232804259, 0.01128747795414454, 0.2031746031746029, -0.118518518518518, 0.04514991181657848, -0.01128747795414478, -0.002821869488536231, -0.01128747795414451, -0.0225749559082898, -0.01693121693121614, -0.04514991181657864, -0.02257495590828883, 0.01693121693121589, 0.02257495590828987, -0.06772486772486792, 0.06772486772486769, 0.0225749559082892, -0.02257495590828849, -0.06772486772486774, -0.02257495590828924, 0.04514991181657889, -0.1354497354497358, 0.04514991181657871, 0.09029982363315733, -0.2708994708994706, 0.1354497354497346, 0.09029982363315664 },
            { 0.005114638447971517, 0.02028218694885354, -0.04232804232804227, -0.01340388007054646, 0.002821869488536194, -0.118518518518518, 0.2497354497354486, -0.09029982363315739, -0.002821869488535961, -0.009171075837742347, -0.002821869488536228, -0.01693121693121595, 0.02116402116401949, 0.09029982363315739, -0.01128747795414423, -0.002821869488536019, -0.01128747795414461, 0.1185185185185183, -0.08465608465608494, -0.01693121693121681, 0.01693121693121555, 0.08465608465608507, 0.01693121693121682, 0.02257495590828917, 0.02257495590828907, 0.02257495590828895, 0.06772486772486631, 0.06772486772486772, -0.2708994708994688, -0.1354497354497343 },
            { 0.007760141093474467, -0.007760141093474451, 0.01128747795414444, 0.002821869488536223, 0.01128747795414448, 0.04514991181657848, -0.09029982363315739, 0.1580246913580259, -0.01128747795414462, -0.002821869488536315, -0.01128747795414448, -0.04514991181657878, 0.09029982363315785, -0.1580246913580258, 0.0, 0.0, 0.0, -0.02257495590828938, 0.112874779541447, -0.02257495590828919, 0.02257495590828993, -0.112874779541447, 0.02257495590828915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.02469135802469122, 0.007760141093474515, -0.02257495590828906, -0.01693121693121662, -0.04514991181657847, -0.01128747795414478, -0.002821869488535961, -0.01128747795414462, 0.2031746031746035, -0.1185185185185186, 0.04514991181657845, 0.1015873015873018, -0.04232804232804243, 0.01128747795414466, 0.02257495590828877, 0.01693121693121751, -0.02257495590828947, -0.02257495590828901, -0.02257495590828958, -0.06772486772486751, -0.06772486772486759, 0.02257495590828956, 0.06772486772486759, -0.2708994708994712, 0.09029982363315685, 0.1354497354497352, -0.1354497354497358, 0.04514991181657875, 0.04514991181657831, 0.09029982363315675 },
            { 0.02028218694885362, 0.005114638447971845, -0.01693121693121708, 0.02116402116402105, 0.09029982363315694, -0.002821869488536231, -0.009171075837742347, -0.002821869488536315, -0.1185185185185186, 0.2497354497354498, -0.09029982363315696, -0.04232804232804254, -0.01340388007054662, 0.002821869488536325, -0.01128747795414467, -0.002821869488536171, -0.0112874779541447, 0.01693121693121676, 0.01693121693121664, 0.08465608465608378, 0.1185185185185182, -0.01693121693121665, -0.08465608465608386, 0.0677248677248677, 0.06772486772486787, -0.2708994708994709, 0.02257495590828969, 0.0225749559082891, 0.02257495590828907, -0.1354497354497353 },
            { -0.007760141093474444, 0.007760141093474469, -0.04514991181657849, 0.09029982363315704, -0.1580246913580245, -0.01128747795414451, -0.002821869488536228, -0.01128747795414448, 0.04514991181657845, -0.09029982363315696, 0.1580246913580247, 0.01128747795414475, 0.002821869488536126, 0.01128747795414447, 0.0, 0.0, 0.0, 0.02257495590828936, 0.02257495590828964, -0.1128747795414459, -0.02257495590828883, -0.02257495590828957, 0.1128747795414459, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.02469135802469115, 0.007760141093474603, -0.01128747795414467, -0.002821869488536113, -0.01128747795414476, -0.0225749559082898, -0.01693121693121595, -0.04514991181657878, 0.1015873015873018, -0.04232804232804254, 0.01128747795414475, 0.2031746031746033, -0.118518518518518, 0.04514991181657885, 0.02257495590828872, 0.01693121693121752, -0.0225749559082896, -0.02257495590828834, -0.06772486772486808, -0.02257495590828938, -0.06772486772486737, 0.06772486772486801, 0.02257495590828948, -0.1354497354497358, 0.04514991181657866, 0.04514991181657871, -0.2708994708994711, 0.09029982363315778, 0.1354497354497337, 0.09029982363315554 },
            { 0.02028218694885341, 0.005114638447971558, -0.002821869488536075, -0.009171075837742418, -0.002821869488536135, -0.01693121693121614, 0.02116402116401949, 0.09029982363315785, -0.04232804232804243, -0.01340388007054662, 0.002821869488536126, -0.118518518518518, 0.2497354497354496, -0.09029982363315776, -0.01128747795414431, -0.002821869488536245, -0.01128747795414453, 0.01693121693121644, 0.08465608465608518, 0.01693121693121733, 0.1185185185185185, -0.08465608465608508, -0.01693121693121745, 0.02257495590828914, 0.02257495590828934, 0.02257495590828899, 0.06772486772486669, 0.06772486772486744, -0.2708994708994689, -0.1354497354497345 },
            { -0.007760141093474473, 0.007760141093474469, -0.01128747795414454, -0.002821869488536194, -0.01128747795414446, -0.04514991181657864, 0.09029982363315739, -0.1580246913580258, 0.01128747795414466, 0.002821869488536325, 0.01128747795414447, 0.04514991181657885, -0.09029982363315776, 0.1580246913580256, 0.0, 0.0, 0.0, 0.02257495590828936, -0.1128747795414469, 0.02257495590828917, -0.02257495590828986, 0.112874779541447, -0.02257495590828914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.07054673721340435, -0.0253968253968254, -0.02257495590828865, -0.01128747795414438, 0.0, -0.02257495590828883, -0.01128747795414423, 0.0, 0.02257495590828877, -0.01128747795414467, 0.0, 0.02257495590828872, -0.01128747795414431, 0.0, 0.2031746031746039, -0.2201058201058206, 0.1128747795414464, -0.04514991181657754, 0.0, 0.0, -0.04514991181657873, 0.0, 0.0, -0.06772486772486661, 0.06772486772486649, 0.02257495590828906, -0.06772486772486649, 0.06772486772486666, 0.02257495590828851, 0.09029982363315631 },
            { 0.05291005291005325, 0.05291005291005294, 0.01693121693121589, -0.002821869488535983, 0.0, 0.01693121693121589, -0.002821869488536019, 0.0, 0.01693121693121751, -0.002821869488536171, 0.0, 0.01693121693121752, -0.002821869488536245, 0.0, -0.2201058201058206, 0.3343915343915345, -0.2201058201058201, 0.02257495590828855, 0.0, 0.0, 0.02257495590828956, 0.0, 0.0, -0.01693121693121813, -0.01693121693121529, 0.005643738977072191, -0.01693121693121822, -0.01693121693121521, 0.0056437389770723, -0.04514991181657817 },
            { -0.02539682539682555, -0.07054673721340397, 0.02257495590828985, -0.01128747795414497, 0.0, 0.02257495590828987, -0.01128747795414461, 0.0, -0.02257495590828947, -0.0112874779541447, 0.0, -0.0225749559082896, -0.01128747795414453, 0.0, 0.1128747795414464, -0.2201058201058201, 0.2031746031746033, -0.04514991181657821, 0.0, 0.0, -0.04514991181657856, 0.0, 0.0, 0.06772486772486827, -0.0677248677248686, 0.0225749559082896, 0.06772486772486852, -0.06772486772486883, 0.02257495590828915, 0.09029982363315685 },
            { 0.01834215167548476, 0.04938271604938264, -0.06772486772486833, 0.1185185185185191, -0.02257495590828948, -0.06772486772486792, 0.1185185185185183, -0.02257495590828938, -0.02257495590828901, 0.01693121693121676, 0.02257495590828936, -0.02257495590828834, 0.01693121693121644, 0.02257495590828936, -0.04514991181657754, 0.02257495590828855, -0.04514991181657821, 0.6320987654320985, -0.1354497354497357, -0.1354497354497356, 0.09029982363315621, 0.135449735449736, 0.1354497354497357, 0.04514991181657747, 0.04514991181657965, -0.1354497354497355, 0.04514991181657704, 0.04514991181657926, -0.1354497354497348, -0.7223985890652551 },
            { 0.0183421516754853, -0.01834215167548493, 0.02257495590828934, -0.01693121693121673, -0.02257495590828957, 0.06772486772486769, -0.08465608465608494, 0.112874779541447, -0.02257495590828958, 0.01693121693121664, 0.02257495590828964, -0.06772486772486808, 0.08465608465608518, -0.1128747795414469, 0.0, 0.0, 0.0, -0.1354497354497357, 0.5417989417989413, 0.0, 0.1354497354497357, -0.5417989417989413, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.01834215167548503, -0.01834215167548508, 0.06772486772486759, -0.08465608465608447, 0.1128747795414456, 0.0225749559082892, -0.01693121693121681, -0.02257495590828919, -0.06772486772486751, 0.08465608465608378, -0.1128747795414459, -0.02257495590828938, 0.01693121693121733, 0.02257495590828917, 0.0, 0.0, 0.0, -0.1354497354497356, 0.0, 0.5417989417989421, 0.1354497354497347, 0.0, -0.5417989417989422, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.04938271604938282, 0.01834215167548501, -0.02257495590828961, 0.01693121693121755, 0.02257495590828886, -0.02257495590828849, 0.01693121693121555, 0.02257495590828993, -0.06772486772486759, 0.1185185185185182, -0.02257495590828883, -0.06772486772486737, 0.1185185185185185, -0.02257495590828986, -0.04514991181657873, 0.02257495590828956, -0.04514991181657856, 0.09029982363315621, 0.1354497354497357, 0.1354497354497347, 0.6320987654320992, -0.1354497354497355, -0.1354497354497353, 0.04514991181657804, 0.04514991181657894, -0.1354497354497357, 0.0451499118165779, 0.04514991181657784, -0.135449735449734, -0.7223985890652557 },
            { -0.01834215167548527, 0.01834215167548496, -0.02257495590828937, 0.01693121693121677, 0.02257495590828951, -0.06772486772486774, 0.08465608465608507, -0.112874779541447, 0.02257495590828956, -0.01693121693121665, -0.02257495590828957, 0.06772486772486801, -0.08465608465608508, 0.112874779541447, 0.0, 0.0, 0.0, 0.135449735449736, -0.5417989417989413, 0.0, -0.1354497354497355, 0.5417989417989412, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.01834215167548508, 0.01834215167548508, -0.06772486772486766, 0.08465608465608455, -0.1128747795414456, -0.02257495590828924, 0.01693121693121682, 0.02257495590828915, 0.06772486772486759, -0.08465608465608386, 0.1128747795414459, 0.02257495590828948, -0.01693121693121745, -0.02257495590828914, 0.0, 0.0, 0.0, 0.1354497354497357, 0.0, -0.5417989417989422, -0.1354497354497353, 0.0, 0.5417989417989423, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.04232804232804198, -0.02539682539682544, 0.09029982363315665, 0.0677248677248664, 0.0, 0.04514991181657889, 0.02257495590828917, 0.0, -0.2708994708994712, 0.0677248677248677, 0.0, -0.1354497354497358, 0.02257495590828914, 0.0, -0.06772486772486661, -0.01693121693121813, 0.06772486772486827, 0.04514991181657747, 0.0, 0.0, 0.04514991181657804, 0.0, 0.0, 0.6320987654320984, -0.4514991181657838, -0.1354497354497342, 0.3160493827160497, -0.225749559082893, -0.04514991181657835, -0.0902998236331556 },
            { -0.02539682539682514, 0.04232804232804246, -0.2708994708994707, 0.06772486772486921, 0.0, -0.1354497354497358, 0.02257495590828907, 0.0, 0.09029982363315685, 0.06772486772486787, 0.0, 0.04514991181657866, 0.02257495590828934, 0.0, 0.06772486772486649, -0.01693121693121529, -0.0677248677248686, 0.04514991181657965, 0.0, 0.0, 0.04514991181657894, 0.0, 0.0, -0.4514991181657838, 0.6320987654320979, -0.1354497354497369, -0.2257495590828924, 0.3160493827160499, -0.04514991181657849, -0.09029982363315855 },
            { -0.02539682539682529, -0.02539682539682563, 0.135449735449736, -0.2708994708994709, 0.0, 0.04514991181657871, 0.02257495590828895, 0.0, 0.1354497354497352, -0.2708994708994709, 0.0, 0.04514991181657871, 0.02257495590828899, 0.0, 0.02257495590828906, 0.005643738977072191, 0.0225749559082896, -0.1354497354497355, 0.0, 0.0, -0.1354497354497357, 0.0, 0.0, -0.1354497354497342, -0.1354497354497369, 0.5417989417989417, -0.04514991181657886, -0.04514991181657858, -0.04514991181657797, 0.2708994708994714 },
            { 0.04232804232804197, -0.02539682539682569, 0.04514991181657857, 0.02257495590828911, 0.0, 0.09029982363315733, 0.06772486772486631, 0.0, -0.1354497354497358, 0.02257495590828969, 0.0, -0.2708994708994711, 0.06772486772486669, 0.0, -0.06772486772486649, -0.01693121693121822, 0.06772486772486852, 0.04514991181657704, 0.0, 0.0, 0.0451499118165779, 0.0, 0.0, 0.3160493827160497, -0.2257495590828924, -0.04514991181657886, 0.6320987654320989, -0.4514991181657855, -0.1354497354497329, -0.09029982363315467 },
            { -0.02539682539682528, 0.04232804232804261, -0.1354497354497357, 0.02257495590828959, 0.0, -0.2708994708994706, 0.06772486772486772, 0.0, 0.04514991181657875, 0.0225749559082891, 0.0, 0.09029982363315778, 0.06772486772486744, 0.0, 0.06772486772486666, -0.01693121693121521, -0.06772486772486883, 0.04514991181657926, 0.0, 0.0, 0.04514991181657784, 0.0, 0.0, -0.225749559082893, 0.3160493827160499, -0.04514991181657858, -0.4514991181657855, 0.632098765432099, -0.1354497354497356, -0.09029982363315742 },
            { -0.02539682539682487, -0.02539682539682517, 0.04514991181657853, 0.0225749559082888, 0.0, 0.1354497354497346, -0.2708994708994688, 0.0, 0.04514991181657831, 0.02257495590828907, 0.0, 0.1354497354497337, -0.2708994708994689, 0.0, 0.02257495590828851, 0.0056437389770723, 0.02257495590828915, -0.1354497354497348, 0.0, 0.0, -0.135449735449734, 0.0, 0.0, -0.04514991181657835, -0.04514991181657849, -0.04514991181657797, -0.1354497354497329, -0.1354497354497356, 0.5417989417989381, 0.2708994708994689 },
            { -0.06772486772486756, -0.06772486772486767, 0.09029982363315779, -0.1354497354497363, 0.0, 0.09029982363315664, -0.1354497354497343, 0.0, 0.09029982363315675, -0.1354497354497353, 0.0, 0.09029982363315554, -0.1354497354497345, 0.0, 0.09029982363315631, -0.04514991181657817, 0.09029982363315685, -0.7223985890652551, 0.0, 0.0, -0.7223985890652557, 0.0, 0.0, -0.0902998236331556, -0.09029982363315855, 0.2708994708994714, -0.09029982363315467, -0.09029982363315742, 0.2708994708994689, 1.444797178130511 } } };
    alignas(32) static const double PI1[1][30][30] =
        { { { 0.03791887125220485, 0.005114638447971817, 0.007760141093474424, 0.005114638447971896, 0.00776014109347439, 0.007760141093474429, 0.005114638447971578, 0.007760141093474388, -0.0246913580246912, 0.02028218694885359, -0.007760141093474416, -0.07054673721340425, 0.05291005291005306, -0.02539682539682537, -0.02469135802469122, 0.02028218694885348, -0.007760141093474528, 0.01834215167548488, 0.01834215167548509, 0.01834215167548489, 0.04232804232804215, -0.02539682539682541, -0.02539682539682549, 0.04938271604938272, -0.01834215167548477, -0.01834215167548495, 0.04232804232804199, -0.02539682539682492, -0.02539682539682536, -0.06772486772486784 },
            { 0.005114638447971811, -0.005114638447971777, -0.00776014109347437, -0.00511463844797185, -0.007760141093474431, 0.04585537918871251, -0.0326278659611994, 0.01763668430335092, 0.007760141093474517, 0.005114638447971889, 0.007760141093474453, 0.0, 0.0, 0.0, -0.01763668430335088, 0.0326278659611993, -0.0458553791887126, 0.007054673721340244, 0.007054673721340464, 0.007054673721340452, 0.0, 0.0, 0.0, -0.007054673721340204, -0.007054673721340282, -0.00705467372134041, 0.0, 0.0, 0.0, 0.0 },
            { 0.007760141093474284, -0.007760141093474336, 0.02257495590828902, 0.01693121693121731, 0.04514991181657827, 0.07901234567901225, -0.05925925925925883, 0.03386243386243345, -0.02257495590828909, -0.01693121693121718, -0.04514991181657842, 0.0, 0.0, 0.0, -0.03386243386243334, 0.05925925925925882, -0.07901234567901241, 0.2031746031746026, -0.06772486772486767, -0.06772486772486819, 0.0, 0.0, 0.0, 0.06772486772486723, -0.2031746031746025, 0.06772486772486819, 0.0, 0.0, 0.0, 0.0 },
            { 0.005114638447971708, -0.005114638447971986, 0.0169312169312175, -0.02116402116402182, -0.09029982363315651, -0.03104056437389778, -0.01058201058201055, 0.01410934744268095, -0.01693121693121689, 0.02116402116402149, 0.09029982363315681, 0.0, 0.0, 0.0, -0.01410934744268059, 0.0105820105820105, 0.03104056437389766, 0.05079365079365081, -0.08465608465608419, 0.1862433862433863, 0.0, 0.0, 0.0, 0.08465608465608383, -0.05079365079365032, -0.1862433862433863, 0.0, 0.0, 0.0, 0.0 },
            { 0.007760141093474357, -0.007760141093474267, 0.04514991181657762, -0.09029982363315561, 0.1580246913580236, 0.01128747795414451, 0.002821869488536377, 0.01128747795414456, -0.04514991181657804, 0.09029982363315624, -0.1580246913580241, 0.0, 0.0, 0.0, -0.01128747795414478, -0.002821869488536311, -0.01128747795414478, -0.02257495590828896, -0.02257495590829023, 0.1128747795414459, 0.0, 0.0, 0.0, 0.02257495590828991, 0.02257495590828943, -0.1128747795414463, 0.0, 0.0, 0.0, 0.0 },
            { 0.007760141093474327, 0.01763668430335105, 0.03386243386243375, 0.01410934744268099, 0.01128747795414449, 0.07901234567901219, 0.04232804232804256, -0.03386243386243391, -0.01128747795414481, -0.002821869488536144, -0.01128747795414453, -0.01128747795414441, -0.002821869488536121, -0.01128747795414471, -0.03386243386243379, 0.05925925925925876, -0.0790123456790123, 0.1015873015873016, -0.03386243386243389, -0.03386243386243418, -0.01128747795414389, -0.0112874779541452, -0.01128747795414483, 0.03386243386243401, -0.1015873015873018, 0.03386243386243434, 0.03386243386243412, -0.1015873015873011, 0.03386243386243331, 0.0 },
            { 0.005114638447971646, -0.03262786596119925, -0.05925925925925942, -0.01058201058201056, 0.00282186948853618, -0.03104056437389753, 0.08253968253968212, 0.04232804232804168, -0.002821869488535981, -0.009171075837742399, -0.002821869488536198, -0.01410934744268044, 0.01058201058201027, 0.03104056437389791, -0.0141093474426803, 0.01058201058201076, 0.03104056437389763, -0.04232804232804216, 0.09312169312169252, -0.01975308641975271, 0.01975308641975189, 0.04232804232804362, 0.01975308641975297, 0.01975308641975305, 0.04232804232804232, 0.01975308641975277, 0.06490299823632949, -0.09312169312169266, -0.09312169312169112, -0.1128747795414459 },
            { 0.00776014109347446, 0.04585537918871271, 0.07901234567901248, -0.03104056437389764, 0.01128747795414441, 0.01128747795414481, -0.03104056437389811, 0.07901234567901308, -0.01128747795414469, -0.00282186948853625, -0.01128747795414448, -0.03386243386243396, 0.05925925925925954, -0.07901234567901293, -0.01128747795414474, -0.002821869488536241, -0.01128747795414479, 0.01128747795414475, 0.01128747795414498, 0.01128747795414467, 0.03386243386243435, -0.1015873015873023, 0.03386243386243375, -0.01128747795414458, -0.01128747795414475, -0.01128747795414464, 0.03386243386243423, 0.03386243386243434, -0.1015873015873023, 0.0 },
            { -0.02469135802469125, 0.007760141093474355, -0.02257495590828907, -0.01693121693121727, -0.04514991181657821, -0.01128747795414482, -0.002821869488536007, -0.0112874779541445, 0.2031746031746033, -0.1185185185185184, 0.04514991181657837, 0.02257495590828928, 0.01693121693121679, -0.02257495590828901, 0.1015873015873013, -0.04232804232804194, 0.0112874779541446, -0.02257495590828864, -0.02257495590828966, -0.06772486772486701, -0.2708994708994714, 0.09029982363315738, 0.1354497354497357, -0.06772486772486726, 0.02257495590828843, 0.0677248677248673, -0.1354497354497353, 0.0451499118165783, 0.04514991181657819, 0.090299823633157 },
            { 0.02028218694885356, 0.005114638447971822, -0.01693121693121725, 0.02116402116402147, 0.09029982363315651, -0.002821869488536099, -0.009171075837742477, -0.002821869488536067, -0.1185185185185184, 0.2497354497354495, -0.09029982363315676, -0.01128747795414474, -0.002821869488536253, -0.01128747795414452, -0.04232804232804237, -0.01340388007054679, 0.002821869488536072, 0.01693121693121698, 0.01693121693121639, 0.08465608465608414, 0.06772486772486795, 0.06772486772486733, -0.2708994708994709, 0.1185185185185183, -0.01693121693121666, -0.08465608465608426, 0.02257495590828955, 0.02257495590828906, 0.02257495590828904, -0.1354497354497352 },
            { -0.007760141093474358, 0.007760141093474275, -0.04514991181657763, 0.09029982363315568, -0.1580246913580238, -0.01128747795414451, -0.002821869488536397, -0.01128747795414456, 0.04514991181657804, -0.09029982363315628, 0.1580246913580242, 0.0, 0.0, 0.0, 0.01128747795414477, 0.002821869488536331, 0.01128747795414478, 0.02257495590828897, 0.02257495590829018, -0.1128747795414461, 0.0, 0.0, 0.0, -0.02257495590828981, -0.02257495590828944, 0.1128747795414466, 0.0, 0.0, 0.0, 0.0 },
            { -0.02469135802469118, -0.01763668430335106, -0.03386243386243386, -0.0141093474426808, -0.01128747795414468, -0.01128747795414513, -0.01410934744267989, -0.03386243386243393, 0.1015873015873018, -0.04232804232804249, 0.01128747795414475, 0.1241622574955905, -0.1608465608465607, 0.07901234567901252, 0.1015873015873013, -0.04232804232804206, 0.01128747795414484, -0.01128747795414437, -0.05643738977072288, -0.01128747795414459, -0.1693121693121693, 0.1015873015873014, 0.05643738977072348, -0.03386243386243352, 0.01128747795414426, 0.01128747795414464, -0.1693121693121686, 0.05643738977072225, 0.1015873015873009, 0.09029982363315631 },
            { 0.02028218694885358, 0.03262786596119958, 0.05925925925925928, 0.01058201058201074, -0.002821869488536169, -0.002821869488535664, 0.01058201058200951, 0.0592592592592594, -0.04232804232804238, -0.01340388007054659, 0.002821869488536132, -0.0874779541446207, 0.1671957671957673, -0.1326278659611998, -0.04232804232804215, -0.01340388007054686, 0.002821869488535852, -0.002821869488535898, 0.04232804232804203, -0.002821869488535981, 0.1608465608465605, -0.1777777777777774, 0.002821869488535586, -0.01975308641975318, 0.002821869488536027, 0.002821869488535847, 0.1608465608465601, 0.002821869488537201, -0.1777777777777773, -0.02257495590828885 },
            { -0.007760141093474468, -0.04585537918871268, -0.07901234567901243, 0.03104056437389759, -0.0112874779541444, -0.01128747795414489, 0.03104056437389803, -0.07901234567901297, 0.01128747795414473, 0.002821869488536258, 0.01128747795414446, 0.03386243386243398, -0.05925925925925954, 0.07901234567901289, 0.01128747795414482, 0.002821869488536133, 0.01128747795414487, -0.01128747795414487, -0.01128747795414497, -0.01128747795414463, -0.03386243386243436, 0.1015873015873022, -0.03386243386243371, 0.01128747795414452, 0.01128747795414487, 0.01128747795414459, -0.03386243386243431, -0.03386243386243416, 0.1015873015873022, 0.0 },
            { -0.07054673721340443, 0.0, 0.0, 0.0, 0.0, -0.03386243386243337, -0.01410934744268058, -0.01128747795414443, 0.02257495590828876, -0.0112874779541447, 0.0, 0.1015873015873025, -0.04232804232804293, 0.01128747795414483, 0.1241622574955902, -0.08747795414462005, 0.03386243386243364, -0.05643738977072184, -0.01128747795414494, -0.01128747795414435, -0.03386243386243334, 0.01128747795414459, 0.01128747795414484, -0.07901234567901207, 0.05643738977072166, 0.0112874779541444, -0.1693121693121685, 0.1015873015873003, 0.05643738977072311, 0.09029982363315697 },
            { 0.05291005291005332, 0.0, 0.0, 0.0, 0.0, 0.05925925925925835, 0.01058201058201055, -0.002821869488536277, 0.01693121693121753, -0.002821869488536148, 0.0, -0.04232804232804309, -0.01340388007054604, 0.002821869488535883, -0.1608465608465601, 0.1671957671957663, -0.05925925925925867, 0.04232804232804067, -0.002821869488535741, -0.002821869488536011, -0.01975308641975368, 0.002821869488536269, 0.002821869488536122, 0.02539682539682515, -0.04232804232804051, 0.002821869488536004, 0.1608465608465602, -0.1777777777777767, 0.002821869488535937, -0.02257495590828935 },
            { -0.02539682539682558, 0.0, 0.0, 0.0, 0.0, -0.07901234567901197, 0.03104056437389789, -0.01128747795414464, -0.0225749559082895, -0.01128747795414471, 0.0, 0.01128747795414493, 0.002821869488535822, 0.01128747795414476, 0.07901234567901201, -0.132627865961199, 0.07901234567901225, -0.01128747795414387, -0.01128747795414494, -0.01128747795414511, 0.0112874779541451, 0.01128747795414447, 0.0112874779541447, 0.01128747795414457, 0.01128747795414385, 0.0112874779541451, -0.0338624338624333, 0.1015873015873012, -0.03386243386243385, 0.0 },
            { 0.018342151675485, 0.007054673721340372, -0.06772486772486727, -0.08465608465608507, -0.02257495590828931, 0.01128747795414427, 0.0931216931216933, -0.03386243386243438, -0.02257495590828924, 0.01693121693121702, 0.0225749559082893, -0.01128747795414447, -0.002821869488536041, -0.01128747795414493, -0.05643738977072216, 0.04232804232804181, -0.01128747795414483, 0.2708994708994714, 0.2257495590828913, 0.06772486772486776, 0.04514991181657849, 0.04514991181657855, 0.06772486772486765, 0.09029982363315528, -0.2708994708994704, -0.06772486772486724, 0.04514991181657724, -0.1354497354497342, 0.04514991181657874, -0.3160493827160487 },
            { 0.01834215167548522, 0.007054673721340398, 0.2031746031746026, 0.05079365079365011, -0.02257495590828957, 0.01128747795414521, -0.04232804232804305, 0.1015873015873024, -0.02257495590828972, 0.01693121693121692, 0.02257495590828952, -0.05643738977072312, 0.04232804232804242, -0.01128747795414499, -0.01128747795414473, -0.002821869488535599, -0.01128747795414487, -0.04514991181657847, 0.2708994708994713, -0.06772486772486719, 0.09029982363315731, -0.2708994708994703, -0.06772486772486767, 0.04514991181657776, 0.04514991181657761, 0.06772486772486758, 0.04514991181657885, 0.04514991181657848, -0.135449735449736, -0.3160493827160479 },
            { 0.01834215167548496, 0.007054673721340672, -0.06772486772486867, 0.1862433862433878, 0.1128747795414451, 0.01128747795414447, -0.01975308641975267, -0.03386243386243373, -0.06772486772486704, 0.08465608465608306, -0.1128747795414455, -0.01128747795414487, -0.00282186948853565, -0.01128747795414477, -0.01128747795414484, -0.00282186948853619, -0.01128747795414505, -0.06772486772486777, 0.06772486772486692, 0.2708994708994717, 0.06772486772486747, 0.06772486772486695, -0.2708994708994701, 0.06772486772486788, 0.06772486772486862, -0.2708994708994721, 0.02257495590828961, 0.0225749559082889, 0.02257495590828921, -0.135449735449735 },
            { 0.04938271604938289, -0.007054673721340125, 0.0677248677248674, 0.08465608465608508, 0.02257495590828854, -0.01128747795414408, 0.01975308641975201, 0.03386243386243432, -0.06772486772486747, 0.118518518518518, -0.02257495590828867, -0.07901234567901298, 0.02539682539682554, 0.01128747795414476, -0.03386243386243371, -0.01975308641975299, 0.01128747795414428, 0.04514991181657836, 0.09029982363315597, 0.06772486772486758, 0.3611992945326281, -0.3611992945326282, -0.2031746031746033, 0.31604938271605, -0.04514991181657795, -0.06772486772486815, 0.1805996472663137, 0.0, -0.1805996472663142, -0.4063492063492068 },
            { -0.01834215167548519, -0.007054673721340407, -0.2031746031746026, -0.05079365079365012, 0.02257495590828951, -0.01128747795414521, 0.0423280423280431, -0.1015873015873024, 0.0225749559082897, -0.01693121693121693, -0.02257495590828944, 0.05643738977072307, -0.0423280423280424, 0.01128747795414498, 0.01128747795414468, 0.002821869488535647, 0.01128747795414486, 0.04514991181657853, -0.2708994708994711, 0.06772486772486706, -0.09029982363315715, 0.2708994708994702, 0.06772486772486767, -0.04514991181657766, -0.04514991181657766, -0.06772486772486747, -0.04514991181657873, -0.04514991181657858, 0.1354497354497359, 0.3160493827160476 },
            { -0.01834215167548501, -0.007054673721340665, 0.06772486772486859, -0.186243386243388, -0.1128747795414451, -0.01128747795414448, 0.01975308641975266, 0.03386243386243368, 0.06772486772486715, -0.08465608465608312, 0.1128747795414455, 0.01128747795414497, 0.002821869488535617, 0.01128747795414475, 0.0112874779541449, 0.002821869488536157, 0.01128747795414506, 0.06772486772486778, -0.06772486772486701, -0.2708994708994716, -0.06772486772486788, -0.06772486772486656, 0.2708994708994703, -0.06772486772486828, -0.06772486772486863, 0.270899470899472, -0.02257495590828984, -0.02257495590828885, -0.02257495590828899, 0.1354497354497355 },
            { 0.04232804232804195, 0.0, 0.0, 0.0, 0.0, 0.0338624338624345, 0.01975308641975283, -0.01128747795414485, -0.2708994708994713, 0.06772486772486767, 0.0, -0.03386243386243352, -0.01975308641975325, 0.01128747795414463, -0.1693121693121684, 0.1608465608465601, -0.03386243386243393, 0.09029982363315477, 0.0451499118165794, 0.06772486772486627, 0.3160493827160502, -0.04514991181657879, -0.06772486772486783, 0.3611992945326264, -0.0902998236331547, -0.06772486772486667, 0.1805996472663131, -0.180599647266314, 0.0, -0.4063492063492055 },
            { -0.025396825396825, 0.0, 0.0, 0.0, 0.0, -0.1015873015873019, 0.04232804232804201, -0.0112874779541441, 0.0902998236331571, 0.0677248677248678, 0.0, 0.01128747795414399, 0.002821869488536604, 0.01128747795414425, 0.1015873015873005, -0.177777777777777, 0.1015873015873017, -0.2708994708994689, 0.04514991181657772, 0.06772486772486877, -0.04514991181657874, -0.04514991181657833, -0.06772486772486798, -0.3611992945326264, 0.2708994708994689, -0.06772486772486867, -0.04514991181657738, 0.1354497354497358, -0.04514991181657917, 0.3160493827160487 },
            { -0.02539682539682528, 0.0, 0.0, 0.0, 0.0, 0.03386243386243386, 0.01975308641975311, -0.01128747795414497, 0.1354497354497353, -0.2708994708994709, 0.0, 0.01128747795414476, 0.002821869488536294, 0.01128747795414457, 0.056437389770723, 0.002821869488536277, -0.03386243386243373, -0.06772486772486772, 0.06772486772486777, -0.2708994708994705, -0.06772486772486822, -0.06772486772486695, 0.2708994708994709, -0.2031746031746022, 0.06772486772486687, 0.2708994708994706, -0.02257495590828983, -0.02257495590828898, -0.02257495590828861, 0.1354497354497355 },
            { 0.04232804232804188, 0.0, 0.0, 0.0, 0.0, 0.03386243386243436, 0.06490299823632988, 0.03386243386243374, -0.1354497354497357, 0.02257495590828961, 0.0, -0.1693121693121687, 0.1608465608465604, -0.03386243386243384, -0.1693121693121683, 0.1608465608465603, -0.03386243386243383, 0.04514991181657764, 0.04514991181657835, 0.02257495590828958, 0.1805996472663136, -0.04514991181657815, -0.02257495590828985, 0.1805996472663138, -0.04514991181657746, -0.02257495590828977, 0.3611992945326258, -0.2257495590828909, -0.2257495590828907, -0.2257495590828919 },
            { -0.02539682539682507, 0.0, 0.0, 0.0, 0.0, -0.1015873015873015, -0.09312169312169269, 0.03386243386243416, 0.04514991181657878, 0.02257495590828903, 0.0, 0.05643738977072267, 0.002821869488536329, -0.03386243386243396, 0.1015873015873009, -0.1777777777777772, 0.1015873015873014, -0.135449735449735, 0.04514991181657842, 0.02257495590828926, 0.0, -0.04514991181657802, -0.02257495590828876, -0.1805996472663145, 0.1354497354497351, -0.02257495590828927, -0.2257495590828914, 0.27089947089947, 0.09029982363315647, 0.1354497354497355 },
            { -0.02539682539682518, 0.0, 0.0, 0.0, 0.0, 0.03386243386243334, -0.09312169312169166, -0.101587301587301, 0.04514991181657828, 0.02257495590828909, 0.0, 0.101587301587301, -0.1777777777777774, 0.1015873015873016, 0.05643738977072239, 0.002821869488536193, -0.03386243386243361, 0.04514991181657827, -0.1354497354497345, 0.0225749559082888, -0.1805996472663124, 0.1354497354497335, -0.02257495590828859, 0.0, -0.04514991181657856, -0.02257495590828872, -0.2257495590828895, 0.09029982363315542, 0.2708994708994682, 0.1354497354497347 },
            { -0.06772486772486791, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1128747795414455, 0.0, 0.09029982363315689, -0.1354497354497354, 0.0, 0.09029982363315724, -0.02257495590828917, 0.0, 0.09029982363315589, -0.02257495590828886, 0.0, -0.3160493827160497, -0.3160493827160476, -0.1354497354497358, -0.4063492063492065, 0.3160493827160491, 0.1354497354497358, -0.4063492063492054, 0.3160493827160484, 0.1354497354497359, -0.2257495590828906, 0.1354497354497342, 0.1354497354497349, 0.722398589065256 } } };
    alignas(32) static const double PI2[1][30][30] =
        { { { 0.03791887125220484, 0.005114638447971829, 0.007760141093474403, 0.005114638447971933, 0.007760141093474351, 0.007760141093474429, 0.005114638447971651, 0.007760141093474364, -0.07054673721340431, 0.05291005291005314, -0.02539682539682544, -0.02469135802469117, 0.02028218694885341, -0.007760141093474425, -0.02469135802469121, 0.0202821869488535, -0.007760141093474541, 0.01834215167548484, 0.01834215167548485, 0.01834215167548509, 0.04232804232804228, -0.02539682539682541, -0.02539682539682546, 0.04232804232804217, -0.02539682539682491, -0.02539682539682553, 0.04938271604938246, -0.01834215167548474, -0.0183421516754849, -0.06772486772486765 },
            { 0.005114638447971791, -0.005114638447971808, -0.00776014109347442, -0.005114638447971795, -0.007760141093474444, 0.04585537918871251, -0.03262786596119924, 0.01763668430335094, 0.0, 0.0, 0.0, 0.007760141093474577, 0.005114638447971626, 0.007760141093474427, -0.01763668430335091, 0.03262786596119929, -0.04585537918871256, 0.007054673721339992, 0.007054673721340483, 0.007054673721340448, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.007054673721340587, -0.007054673721339926, -0.007054673721340392, 0.0 },
            { 0.007760141093474286, 0.01763668430335101, 0.01128747795414425, 0.01410934744268132, 0.03386243386243338, 0.07901234567901269, 0.04232804232804142, -0.03386243386243372, -0.0112874779541444, -0.002821869488535968, -0.01128747795414493, -0.01128747795414443, -0.002821869488536287, -0.01128747795414453, -0.03386243386243331, 0.05925925925925884, -0.07901234567901243, 0.1015873015873016, -0.03386243386243409, -0.03386243386243383, -0.0112874779541452, -0.01128747795414455, -0.01128747795414434, 0.03386243386243262, -0.1015873015873004, 0.03386243386243454, 0.033862433862434, -0.1015873015873017, 0.03386243386243393, 0.0 },
            { 0.005114638447971735, -0.0326278659611994, 0.002821869488536464, -0.01058201058201113, -0.05925925925925853, -0.03104056437389826, 0.08253968253968313, 0.04232804232804201, -0.0141093474426807, 0.01058201058201052, 0.03104056437389817, -0.002821869488536155, -0.009171075837742418, -0.002821869488536204, -0.01410934744268054, 0.0105820105820105, 0.03104056437389762, -0.04232804232804194, -0.0197530864197523, 0.09312169312169251, 0.0197530864197534, 0.0197530864197532, 0.04232804232804151, 0.06490299823633065, -0.09312169312169249, -0.09312169312169302, 0.0197530864197532, 0.04232804232804233, 0.01975308641975259, -0.1128747795414462 },
            { 0.007760141093474387, 0.04585537918871258, 0.01128747795414431, -0.03104056437389734, 0.07901234567901178, 0.01128747795414464, -0.03104056437389755, 0.07901234567901196, -0.03386243386243357, 0.05925925925925876, -0.07901234567901222, -0.01128747795414463, -0.002821869488536148, -0.01128747795414441, -0.01128747795414466, -0.002821869488536197, -0.01128747795414464, 0.01128747795414467, 0.01128747795414396, 0.01128747795414447, 0.03386243386243383, 0.03386243386243377, -0.1015873015873014, 0.03386243386243412, 0.03386243386243386, -0.1015873015873015, -0.01128747795414453, -0.01128747795414486, -0.01128747795414423, 0.0 },
            { 0.007760141093474351, -0.007760141093474502, 0.04514991181657829, 0.0169312169312171, 0.02257495590828911, 0.07901234567901254, -0.05925925925925959, 0.03386243386243394, 0.0, 0.0, 0.0, -0.02257495590828947, -0.01693121693121646, -0.04514991181657863, -0.03386243386243372, 0.05925925925925878, -0.07901234567901226, 0.2031746031746031, -0.06772486772486744, -0.0677248677248678, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06772486772486812, -0.2031746031746033, 0.06772486772486729, 0.0 },
            { 0.005114638447971613, -0.005114638447971696, -0.09029982363315703, -0.02116402116402099, 0.01693121693121684, -0.0310405643738978, -0.01058201058201037, 0.01410934744268069, 0.0, 0.0, 0.0, -0.01693121693121641, 0.02116402116402015, 0.09029982363315729, -0.01410934744268043, 0.01058201058201074, 0.03104056437389768, 0.05079365079365079, 0.1862433862433849, -0.0846560846560843, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08465608465608275, -0.05079365079365042, -0.1862433862433846, 0.0 },
            { 0.007760141093474481, -0.007760141093474556, 0.1580246913580249, -0.09029982363315722, 0.04514991181657861, 0.0112874779541445, 0.002821869488536327, 0.01128747795414448, 0.0, 0.0, 0.0, -0.04514991181657853, 0.09029982363315738, -0.1580246913580257, -0.01128747795414461, -0.002821869488536132, -0.01128747795414457, -0.02257495590828962, 0.1128747795414474, -0.02257495590828916, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225749559082896, 0.02257495590828927, -0.1128747795414473, 0.0 },
            { -0.02469135802469117, -0.01763668430335103, -0.01128747795414438, -0.01410934744268137, -0.03386243386243326, -0.01128747795414459, -0.01410934744268053, -0.03386243386243355, 0.1241622574955904, -0.1608465608465605, 0.07901234567901225, 0.1015873015873017, -0.0423280423280424, 0.01128747795414463, 0.1015873015873013, -0.04232804232804192, 0.01128747795414452, -0.0112874779541444, -0.01128747795414466, -0.05643738977072306, -0.1693121693121693, 0.05643738977072341, 0.1015873015873013, -0.169312169312169, 0.05643738977072231, 0.1015873015873011, -0.03386243386243371, 0.01128747795414451, 0.01128747795414444, 0.09029982363315694 },
            { 0.0202821869488535, 0.03262786596119942, -0.002821869488536576, 0.01058201058201114, 0.05925925925925828, -0.002821869488536139, 0.01058201058201064, 0.05925925925925857, -0.08747795414462035, 0.1671957671957666, -0.1326278659611989, -0.04232804232804232, -0.0134038800705466, 0.002821869488536384, -0.04232804232804228, -0.01340388007054679, 0.002821869488536079, -0.002821869488536183, -0.002821869488536573, 0.04232804232804218, 0.1608465608465605, 0.002821869488535828, -0.1777777777777769, 0.1608465608465607, 0.002821869488536539, -0.1777777777777776, -0.01975308641975292, 0.002821869488536016, 0.002821869488536431, -0.02257495590828906 },
            { -0.00776014109347439, -0.04585537918871261, -0.01128747795414432, 0.0310405643738974, -0.07901234567901191, -0.01128747795414464, 0.03104056437389758, -0.07901234567901202, 0.03386243386243357, -0.05925925925925877, 0.07901234567901225, 0.01128747795414462, 0.002821869488536139, 0.01128747795414442, 0.01128747795414465, 0.002821869488536217, 0.01128747795414464, -0.01128747795414471, -0.01128747795414398, -0.01128747795414467, -0.03386243386243379, -0.03386243386243383, 0.1015873015873015, -0.03386243386243404, -0.03386243386243391, 0.1015873015873015, 0.01128747795414459, 0.0112874779541449, 0.01128747795414425, 0.0 },
            { -0.02469135802469114, 0.007760141093474441, -0.04514991181657849, -0.01693121693121704, -0.02257495590828906, -0.01128747795414475, -0.002821869488536101, -0.01128747795414452, 0.02257495590828887, 0.01693121693121733, -0.02257495590828937, 0.2031746031746031, -0.1185185185185179, 0.04514991181657879, 0.1015873015873014, -0.04232804232804203, 0.01128747795414472, -0.02257495590828844, -0.06772486772486738, -0.0225749559082894, -0.2708994708994712, 0.1354497354497349, 0.09029982363315738, -0.1354497354497355, 0.0451499118165779, 0.04514991181657865, -0.06772486772486688, 0.02257495590828869, 0.06772486772486709, 0.09029982363315658 },
            { 0.02028218694885353, 0.005114638447971768, 0.09029982363315731, 0.02116402116402106, -0.01693121693121696, -0.002821869488536027, -0.009171075837742586, -0.002821869488536039, -0.01128747795414456, -0.002821869488536261, -0.01128747795414466, -0.1185185185185183, 0.2497354497354498, -0.09029982363315781, -0.04232804232804222, -0.01340388007054686, 0.002821869488535995, 0.01693121693121633, 0.08465608465608439, 0.01693121693121744, 0.06772486772486734, -0.2708994708994708, 0.06772486772486776, 0.02257495590828945, 0.02257495590828944, 0.02257495590828893, 0.1185185185185179, -0.01693121693121639, -0.08465608465608379, -0.135449735449736 },
            { -0.007760141093474492, 0.007760141093474552, -0.1580246913580247, 0.09029982363315711, -0.04514991181657856, -0.01128747795414458, -0.002821869488536285, -0.01128747795414448, 0.0, 0.0, 0.0, 0.04514991181657861, -0.09029982363315732, 0.1580246913580255, 0.01128747795414469, 0.002821869488536026, 0.01128747795414465, 0.02257495590828937, -0.1128747795414473, 0.02257495590828917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.02257495590828969, -0.02257495590828903, 0.1128747795414472, 0.0 },
            { -0.07054673721340439, 0.0, 0.0, 0.0, 0.0, -0.03386243386243347, -0.01410934744268041, -0.01128747795414453, 0.1015873015873025, -0.04232804232804305, 0.01128747795414482, 0.02257495590828873, -0.01128747795414435, 0.0, 0.1241622574955902, -0.0874779541446201, 0.03386243386243366, -0.05643738977072186, -0.01128747795414456, -0.01128747795414464, -0.03386243386243356, 0.01128747795414458, 0.01128747795414491, -0.1693121693121689, 0.1015873015873001, 0.05643738977072339, -0.07901234567901154, 0.05643738977072162, 0.01128747795414455, 0.09029982363315643 },
            { 0.05291005291005329, 0.0, 0.0, 0.0, 0.0, 0.05925925925925851, 0.01058201058201041, -0.002821869488536235, -0.0423280423280431, -0.01340388007054617, 0.002821869488536042, 0.0169312169312175, -0.002821869488536212, 0.0, -0.1608465608465601, 0.1671957671957663, -0.05925925925925864, 0.04232804232804054, -0.002821869488536004, -0.002821869488535786, -0.01975308641975356, 0.002821869488535955, 0.002821869488536077, 0.1608465608465604, -0.1777777777777764, 0.0028218694885358, 0.02539682539682481, -0.0423280423280404, 0.002821869488536047, -0.02257495590828907 },
            { -0.02539682539682557, 0.0, 0.0, 0.0, 0.0, -0.079012345679012, 0.03104056437389768, -0.0112874779541446, 0.01128747795414496, 0.002821869488535911, 0.01128747795414462, -0.02257495590828954, -0.0112874779541446, 0.0, 0.07901234567901205, -0.132627865961199, 0.07901234567901216, -0.01128747795414345, -0.01128747795414482, -0.01128747795414524, 0.01128747795414494, 0.01128747795414489, 0.01128747795414465, -0.03386243386243379, 0.1015873015873012, -0.03386243386243354, 0.01128747795414502, 0.01128747795414341, 0.01128747795414473, 0.0 },
            { 0.01834215167548488, 0.007054673721340415, -0.02257495590828867, -0.08465608465608512, -0.0677248677248678, 0.01128747795414366, 0.09312169312169435, -0.03386243386243486, -0.01128747795414483, -0.002821869488535664, -0.01128747795414501, -0.02257495590828852, 0.01693121693121708, 0.02257495590828919, -0.05643738977072216, 0.04232804232804187, -0.01128747795414474, 0.2708994708994714, 0.06772486772486772, 0.2257495590828915, 0.04514991181657742, 0.06772486772486738, 0.04514991181657919, 0.04514991181657628, -0.1354497354497343, 0.04514991181657957, 0.09029982363315611, -0.2708994708994703, -0.06772486772486694, -0.3160493827160498 },
            { 0.01834215167548518, 0.007054673721340143, 0.1128747795414456, 0.1862433862433852, -0.06772486772486767, 0.01128747795414485, -0.01975308641975288, -0.03386243386243418, -0.01128747795414498, -0.002821869488536165, -0.01128747795414485, -0.06772486772486762, 0.08465608465608451, -0.1128747795414465, -0.01128747795414469, -0.002821869488535557, -0.01128747795414469, -0.06772486772486823, 0.2708994708994715, 0.0677248677248687, 0.06772486772486748, -0.2708994708994698, 0.06772486772486808, 0.02257495590828878, 0.02257495590828891, 0.02257495590828931, 0.06772486772486792, 0.06772486772486699, -0.2708994708994714, -0.1354497354497353 },
            { 0.01834215167548496, 0.007054673721340101, -0.02257495590828924, 0.05079365079365129, 0.2031746031746024, 0.01128747795414493, -0.04232804232804306, 0.1015873015873021, -0.0564373897707224, 0.04232804232804067, -0.01128747795414341, -0.02257495590828947, 0.01693121693121738, 0.02257495590828944, -0.01128747795414486, -0.002821869488536184, -0.01128747795414511, -0.04514991181657795, -0.06772486772486859, 0.2708994708994715, 0.09029982363315672, -0.0677248677248687, -0.2708994708994702, 0.04514991181657894, 0.04514991181657976, -0.1354497354497365, 0.04514991181657842, 0.04514991181657777, 0.06772486772486772, -0.3160493827160488 },
            { 0.0493827160493828, -0.007054673721340472, 0.02257495590828903, 0.08465608465608504, 0.06772486772486729, -0.01128747795414451, 0.01975308641975259, 0.03386243386243389, -0.07901234567901227, 0.02539682539682488, 0.01128747795414576, -0.06772486772486777, 0.1185185185185189, -0.02257495590828981, -0.03386243386243371, -0.01975308641975304, 0.01128747795414419, 0.04514991181657853, 0.06772486772486749, 0.09029982363315611, 0.3611992945326277, -0.2031746031746038, -0.3611992945326272, 0.180599647266314, 0.0, -0.1805996472663152, 0.3160493827160497, -0.04514991181657827, -0.06772486772486669, -0.4063492063492068 },
            { -0.01834215167548516, -0.007054673721340155, -0.1128747795414456, -0.1862433862433852, 0.06772486772486763, -0.01128747795414484, 0.0197530864197529, 0.03386243386243413, 0.01128747795414496, 0.002821869488536148, 0.01128747795414486, 0.06772486772486754, -0.08465608465608442, 0.1128747795414465, 0.01128747795414464, 0.002821869488535605, 0.01128747795414468, 0.06772486772486834, -0.2708994708994714, -0.06772486772486874, -0.06772486772486738, 0.2708994708994696, -0.06772486772486806, -0.02257495590828874, -0.02257495590828898, -0.02257495590828927, -0.06772486772486778, -0.0677248677248671, 0.2708994708994713, 0.1354497354497352 },
            { -0.01834215167548502, -0.007054673721340089, 0.0225749559082892, -0.05079365079365145, -0.2031746031746024, -0.01128747795414494, 0.04232804232804307, -0.1015873015873021, 0.05643738977072249, -0.04232804232804069, 0.01128747795414338, 0.02257495590828958, -0.01693121693121749, -0.02257495590828942, 0.01128747795414492, 0.002821869488536151, 0.01128747795414512, 0.04514991181657794, 0.06772486772486848, -0.2708994708994715, -0.09029982363315711, 0.06772486772486894, 0.2708994708994706, -0.04514991181657919, -0.04514991181657974, 0.1354497354497367, -0.04514991181657883, -0.04514991181657776, -0.06772486772486762, 0.3160493827160491 },
            { 0.04232804232804189, 0.0, 0.0, 0.0, 0.0, 0.03386243386243411, 0.06490299823632983, 0.03386243386243402, -0.1693121693121687, 0.1608465608465609, -0.03386243386243375, -0.1354497354497357, 0.02257495590828913, 0.0, -0.1693121693121685, 0.16084656084656, -0.03386243386243389, 0.04514991181657848, 0.02257495590828934, 0.04514991181657713, 0.1805996472663143, -0.02257495590828914, -0.04514991181657882, 0.3611992945326264, -0.22574955908289, -0.2257495590828915, 0.1805996472663133, -0.04514991181657842, -0.02257495590828902, -0.2257495590828908 },
            { -0.02539682539682502, 0.0, 0.0, 0.0, 0.0, -0.1015873015873022, -0.0931216931216907, 0.0338624338624332, 0.05643738977072271, 0.002821869488535516, -0.03386243386243357, 0.04514991181657847, 0.02257495590828956, 0.0, 0.1015873015873005, -0.177777777777777, 0.1015873015873018, -0.1354497354497357, 0.0225749559082893, 0.04514991181657952, 0.0, -0.02257495590828962, -0.04514991181657804, -0.2257495590828901, 0.270899470899468, 0.09029982363315603, -0.1805996472663137, 0.1354497354497357, -0.02257495590828926, 0.1354497354497339 },
            { -0.02539682539682525, 0.0, 0.0, 0.0, 0.0, 0.0338624338624344, -0.09312169312169376, -0.1015873015873006, 0.1015873015873011, -0.1777777777777772, 0.1015873015873008, 0.04514991181657852, 0.02257495590828897, 0.0, 0.05643738977072284, 0.002821869488536284, -0.03386243386243368, 0.04514991181657826, 0.02257495590828875, -0.1354497354497347, -0.1805996472663138, -0.02257495590828891, 0.1354497354497352, -0.2257495590828913, 0.09029982363315593, 0.2708994708994708, 0.0, -0.04514991181657849, -0.02257495590828891, 0.1354497354497353 },
            { 0.04232804232804192, 0.0, 0.0, 0.0, 0.0, 0.03386243386243384, 0.0197530864197531, -0.01128747795414474, -0.03386243386243337, -0.01975308641975352, 0.01128747795414489, -0.270899470899471, 0.06772486772486663, 0.0, -0.1693121693121683, 0.1608465608465602, -0.03386243386243382, 0.09029982363315514, 0.0677248677248668, 0.04514991181657924, 0.3160493827160502, -0.06772486772486741, -0.04514991181657934, 0.1805996472663135, -0.1805996472663132, 0.0, 0.3611992945326263, -0.09029982363315514, -0.06772486772486648, -0.4063492063492062 },
            { -0.02539682539682516, 0.0, 0.0, 0.0, 0.0, -0.1015873015873017, 0.04232804232804262, -0.01128747795414468, 0.01128747795414437, 0.002821869488536368, 0.01128747795414453, 0.0902998236331575, 0.06772486772486773, 0.0, 0.1015873015873008, -0.1777777777777771, 0.1015873015873014, -0.27089947089947, 0.0677248677248681, 0.04514991181657801, -0.04514991181657955, -0.06772486772486723, -0.04514991181657761, -0.04514991181657799, 0.1354497354497349, -0.04514991181657847, -0.3611992945326278, 0.27089947089947, -0.06772486772486799, 0.3160493827160499 },
            { -0.02539682539682509, 0.0, 0.0, 0.0, 0.0, 0.03386243386243397, 0.01975308641975291, -0.01128747795414459, 0.01128747795414456, 0.002821869488536325, 0.01128747795414469, 0.1354497354497345, -0.2708994708994696, 0.0, 0.0564373897707226, 0.002821869488536207, -0.03386243386243383, -0.06772486772486692, -0.2708994708994692, 0.06772486772486699, -0.06772486772486726, 0.2708994708994706, -0.06772486772486795, -0.02257495590828941, -0.02257495590828906, -0.0225749559082889, -0.2031746031746005, 0.06772486772486661, 0.2708994708994683, 0.1354497354497355 },
            { -0.06772486772486769, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1128747795414469, 0.0, 0.09029982363315728, -0.02257495590828948, 0.0, 0.09029982363315614, -0.1354497354497356, 0.0, 0.0902998236331559, -0.02257495590828885, 0.0, -0.31604938271605, -0.1354497354497353, -0.3160493827160479, -0.4063492063492053, 0.1354497354497363, 0.3160493827160483, -0.2257495590828905, 0.1354497354497334, 0.1354497354497362, -0.4063492063492054, 0.3160493827160488, 0.1354497354497337, 0.7223985890652564 } } };
    alignas(32) static const double PI3[1][30][30] =
        { { { 0.03791887125220485, 0.005114638447971821, 0.007760141093474367, 0.005114638447971942, 0.007760141093474303, 0.00776014109347434, 0.005114638447971699, 0.007760141093474376, -0.02469135802469123, 0.02028218694885355, -0.007760141093474333, -0.07054673721340426, 0.05291005291005307, -0.02539682539682539, -0.0246913580246913, 0.0202821869488534, -0.007760141093474443, 0.01834215167548491, 0.01834215167548519, 0.01834215167548482, 0.04232804232804232, -0.02539682539682549, -0.0253968253968255, 0.0493827160493826, -0.01834215167548481, -0.01834215167548488, 0.04232804232804221, -0.02539682539682497, -0.02539682539682547, -0.06772486772486783 },
            { 0.005114638447971821, 0.03791887125220467, -0.02469135802469136, 0.02028218694885353, -0.007760141093474227, -0.007760141093474272, 0.02028218694885361, -0.02469135802469132, 0.007760141093474314, 0.005114638447971868, 0.007760141093474251, -0.02539682539682544, 0.05291005291005308, -0.07054673721340414, 0.007760141093474312, 0.005114638447971891, 0.007760141093474312, -0.01834215167548499, 0.04938271604938287, -0.01834215167548487, -0.02539682539682531, 0.04232804232804233, -0.02539682539682541, 0.01834215167548518, 0.01834215167548491, 0.01834215167548498, -0.0253968253968253, -0.02539682539682549, 0.04232804232804237, -0.06772486772486792 },
            { 0.007760141093474367, -0.02469135802469136, 0.2031746031746023, -0.1185185185185179, 0.04514991181657734, 0.01128747795414474, -0.04232804232804264, 0.1015873015873017, -0.02257495590828899, -0.01693121693121733, -0.04514991181657754, -0.02257495590828916, 0.01693121693121678, 0.0225749559082892, -0.01128747795414458, -0.002821869488536163, -0.01128747795414473, 0.02257495590829, -0.06772486772486802, 0.06772486772486694, 0.09029982363315694, -0.2708994708994704, 0.135449735449735, -0.0225749559082896, -0.0225749559082899, -0.06772486772486723, 0.04514991181657843, 0.04514991181657863, -0.1354497354497353, 0.09029982363315765 },
            { 0.005114638447971942, 0.02028218694885353, -0.1185185185185179, 0.2497354497354482, -0.09029982363315522, 0.002821869488536373, -0.01340388007054676, -0.04232804232804223, -0.01693121693121745, 0.02116402116402176, 0.09029982363315547, -0.01128747795414468, -0.002821869488535918, -0.01128747795414474, -0.002821869488536232, -0.009171075837742322, -0.002821869488536196, -0.0169312169312177, 0.1185185185185182, -0.08465608465608271, 0.06772486772486765, 0.06772486772486794, -0.2708994708994702, 0.01693121693121689, 0.01693121693121733, 0.0846560846560831, 0.02257495590828949, 0.02257495590828896, 0.02257495590828902, -0.1354497354497347 },
            { 0.007760141093474303, -0.007760141093474227, 0.04514991181657734, -0.09029982363315522, 0.1580246913580229, 0.01128747795414447, 0.002821869488536336, 0.0112874779541445, -0.04514991181657779, 0.09029982363315583, -0.1580246913580234, 0.0, 0.0, 0.0, -0.01128747795414471, -0.002821869488536303, -0.01128747795414475, -0.02257495590828877, -0.02257495590829018, 0.1128747795414454, 0.0, 0.0, 0.0, 0.02257495590828967, 0.02257495590828925, -0.1128747795414459, 0.0, 0.0, 0.0, 0.0 },
            { 0.00776014109347434, -0.007760141093474272, 0.01128747795414474, 0.002821869488536373, 0.01128747795414447, 0.1580246913580247, -0.09029982363315671, 0.04514991181657838, -0.01128747795414481, -0.002821869488536053, -0.01128747795414452, 0.0, 0.0, 0.0, -0.04514991181657841, 0.0902998236331569, -0.1580246913580249, 0.1128747795414458, -0.02257495590828868, -0.02257495590828964, 0.0, 0.0, 0.0, 0.02257495590828973, -0.112874779541446, 0.02257495590828976, 0.0, 0.0, 0.0, 0.0 },
            { 0.005114638447971699, 0.02028218694885361, -0.04232804232804264, -0.01340388007054676, 0.002821869488536336, -0.09029982363315671, 0.2497354497354492, -0.1185185185185187, -0.002821869488536003, -0.009171075837742508, -0.002821869488536362, -0.01128747795414434, -0.002821869488536379, -0.01128747795414457, -0.01693121693121653, 0.02116402116402082, 0.0902998236331569, -0.0846560846560838, 0.1185185185185176, -0.01693121693121637, 0.02257495590828823, 0.02257495590829049, 0.02257495590828919, 0.01693121693121658, 0.0846560846560838, 0.01693121693121644, 0.06772486772486604, -0.2708994708994696, 0.0677248677248691, -0.1354497354497344 },
            { 0.007760141093474376, -0.02469135802469132, 0.1015873015873017, -0.04232804232804223, 0.0112874779541445, 0.04514991181657838, -0.1185185185185187, 0.2031746031746035, -0.01128747795414458, -0.002821869488535984, -0.01128747795414456, -0.02257495590828915, 0.01693121693121686, 0.02257495590828911, -0.0225749559082892, -0.01693121693121694, -0.04514991181657844, 0.06772486772486733, -0.06772486772486727, 0.02257495590828938, 0.04514991181657867, -0.1354497354497359, 0.04514991181657808, -0.02257495590828913, -0.06772486772486717, -0.02257495590828941, 0.0902998236331569, 0.1354497354497357, -0.2708994708994711, 0.09029982363315643 },
            { -0.02469135802469123, 0.007760141093474314, -0.02257495590828899, -0.01693121693121745, -0.04514991181657779, -0.01128747795414481, -0.002821869488536003, -0.01128747795414458, 0.2031746031746033, -0.1185185185185181, 0.04514991181657795, 0.02257495590828922, 0.01693121693121685, -0.022574955908289, 0.1015873015873012, -0.042328042328042, 0.0112874779541446, -0.02257495590828906, -0.02257495590828973, -0.06772486772486663, -0.2708994708994713, 0.09029982363315732, 0.1354497354497357, -0.06772486772486741, 0.02257495590828883, 0.06772486772486695, -0.1354497354497352, 0.04514991181657838, 0.04514991181657817, 0.09029982363315719 },
            { 0.02028218694885355, 0.005114638447971868, -0.01693121693121733, 0.02116402116402176, 0.09029982363315583, -0.002821869488536053, -0.009171075837742508, -0.002821869488535984, -0.1185185185185181, 0.2497354497354491, -0.09029982363315606, -0.01128747795414474, -0.002821869488536212, -0.01128747795414457, -0.04232804232804234, -0.01340388007054677, 0.002821869488536026, 0.01693121693121742, 0.01693121693121646, 0.08465608465608351, 0.06772486772486781, 0.06772486772486733, -0.2708994708994708, 0.1185185185185181, -0.0169312169312171, -0.08465608465608365, 0.02257495590828947, 0.02257495590828907, 0.02257495590828901, -0.1354497354497351 },
            { -0.007760141093474333, 0.007760141093474251, -0.04514991181657754, 0.09029982363315547, -0.1580246913580234, -0.01128747795414452, -0.002821869488536362, -0.01128747795414456, 0.04514991181657795, -0.09029982363315606, 0.1580246913580238, 0.0, 0.0, 0.0, 0.01128747795414477, 0.002821869488536307, 0.0112874779541448, 0.02257495590828882, 0.02257495590829011, -0.1128747795414457, 0.0, 0.0, 0.0, -0.02257495590828972, -0.02257495590828929, 0.1128747795414462, 0.0, 0.0, 0.0, 0.0 },
            { -0.07054673721340426, -0.02539682539682544, -0.02257495590828916, -0.01128747795414468, 0.0, 0.0, -0.01128747795414434, -0.02257495590828915, 0.02257495590828922, -0.01128747795414474, 0.0, 0.2031746031746036, -0.2201058201058201, 0.1128747795414462, 0.02257495590828932, -0.01128747795414433, 0.0, 0.0, -0.04514991181657844, 0.0, -0.06772486772486794, 0.06772486772486788, 0.02257495590828953, -0.04514991181657842, 0.0, 0.0, -0.06772486772486776, 0.02257495590828847, 0.06772486772486788, 0.09029982363315682 },
            { 0.05291005291005307, 0.05291005291005308, 0.01693121693121678, -0.002821869488535918, 0.0, 0.0, -0.002821869488536379, 0.01693121693121686, 0.01693121693121685, -0.002821869488536212, 0.0, -0.2201058201058201, 0.3343915343915342, -0.2201058201058202, 0.01693121693121658, -0.002821869488536099, 0.0, 0.0, 0.02257495590828953, 0.0, -0.01693121693121676, -0.01693121693121688, 0.005643738977072102, 0.02257495590828881, 0.0, 0.0, -0.01693121693121665, 0.005643738977072529, -0.01693121693121697, -0.04514991181657836 },
            { -0.02539682539682539, -0.07054673721340414, 0.0225749559082892, -0.01128747795414474, 0.0, 0.0, -0.01128747795414457, 0.02257495590828911, -0.022574955908289, -0.01128747795414457, 0.0, 0.1128747795414462, -0.2201058201058202, 0.2031746031746035, -0.02257495590828882, -0.01128747795414477, 0.0, 0.0, -0.0451499118165789, 0.0, 0.06772486772486751, -0.06772486772486759, 0.02257495590828925, -0.04514991181657797, 0.0, 0.0, 0.06772486772486731, 0.02257495590828935, -0.06772486772486755, 0.09029982363315688 },
            { -0.0246913580246913, 0.007760141093474312, -0.01128747795414458, -0.002821869488536232, -0.01128747795414471, -0.04514991181657841, -0.01693121693121653, -0.0225749559082892, 0.1015873015873012, -0.04232804232804234, 0.01128747795414477, 0.02257495590828932, 0.01693121693121658, -0.02257495590828882, 0.2031746031746023, -0.1185185185185174, 0.04514991181657838, -0.06772486772486656, -0.0225749559082892, -0.02257495590828911, -0.1354497354497352, 0.04514991181657856, 0.04514991181657865, -0.0677248677248668, 0.06772486772486633, 0.02257495590828917, -0.27089947089947, 0.1354497354497342, 0.09029982363315661, 0.09029982363315597 },
            { 0.0202821869488534, 0.005114638447971891, -0.002821869488536163, -0.009171075837742322, -0.002821869488536303, 0.0902998236331569, 0.02116402116402082, -0.01693121693121694, -0.042328042328042, -0.01340388007054677, 0.002821869488536307, -0.01128747795414433, -0.002821869488536099, -0.01128747795414477, -0.1185185185185174, 0.2497354497354493, -0.09029982363315686, 0.08465608465608371, 0.01693121693121761, 0.01693121693121665, 0.02257495590828878, 0.02257495590828927, 0.02257495590828919, 0.1185185185185184, -0.08465608465608361, -0.01693121693121668, 0.06772486772486627, -0.2708994708994706, 0.0677248677248683, -0.135449735449736 },
            { -0.007760141093474443, 0.007760141093474312, -0.01128747795414473, -0.002821869488536196, -0.01128747795414475, -0.1580246913580249, 0.0902998236331569, -0.04514991181657844, 0.0112874779541446, 0.002821869488536026, 0.0112874779541448, 0.0, 0.0, 0.0, 0.04514991181657838, -0.09029982363315686, 0.1580246913580252, -0.1128747795414465, 0.02257495590828893, 0.02257495590828877, 0.0, 0.0, 0.0, -0.02257495590828959, 0.1128747795414467, -0.02257495590828889, 0.0, 0.0, 0.0, 0.0 },
            { 0.01834215167548491, -0.01834215167548499, 0.02257495590829, -0.0169312169312177, -0.02257495590828877, 0.1128747795414458, -0.0846560846560838, 0.06772486772486733, -0.02257495590828906, 0.01693121693121742, 0.02257495590828882, 0.0, 0.0, 0.0, -0.06772486772486656, 0.08465608465608371, -0.1128747795414465, 0.5417989417989425, -0.1354497354497358, 0.0, 0.0, 0.0, 0.0, 0.1354497354497333, -0.5417989417989415, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.01834215167548519, 0.04938271604938287, -0.06772486772486802, 0.1185185185185182, -0.02257495590829018, -0.02257495590828868, 0.1185185185185176, -0.06772486772486727, -0.02257495590828973, 0.01693121693121646, 0.02257495590829011, -0.04514991181657844, 0.02257495590828953, -0.0451499118165789, -0.0225749559082892, 0.01693121693121761, 0.02257495590828893, -0.1354497354497358, 0.632098765432099, -0.1354497354497357, 0.0451499118165784, 0.04514991181657915, -0.135449735449735, 0.09029982363315611, 0.1354497354497348, 0.1354497354497365, 0.04514991181657783, -0.1354497354497346, 0.04514991181657872, -0.7223985890652542 },
            { 0.01834215167548482, -0.01834215167548487, 0.06772486772486694, -0.08465608465608271, 0.1128747795414454, -0.02257495590828964, -0.01693121693121637, 0.02257495590828938, -0.06772486772486663, 0.08465608465608351, -0.1128747795414457, 0.0, 0.0, 0.0, -0.02257495590828911, 0.01693121693121665, 0.02257495590828877, 0.0, -0.1354497354497357, 0.5417989417989424, 0.0, 0.0, 0.0, 0.1354497354497357, 0.0, -0.5417989417989432, 0.0, 0.0, 0.0, 0.0 },
            { 0.04232804232804232, -0.02539682539682531, 0.09029982363315694, 0.06772486772486765, 0.0, 0.0, 0.02257495590828823, 0.04514991181657867, -0.2708994708994713, 0.06772486772486781, 0.0, -0.06772486772486794, -0.01693121693121676, 0.06772486772486751, -0.1354497354497352, 0.02257495590828878, 0.0, 0.0, 0.0451499118165784, 0.0, 0.6320987654320992, -0.4514991181657848, -0.1354497354497361, 0.0451499118165786, 0.0, 0.0, 0.3160493827160488, -0.04514991181657772, -0.2257495590828919, -0.09029982363315707 },
            { -0.02539682539682549, 0.04232804232804233, -0.2708994708994704, 0.06772486772486794, 0.0, 0.0, 0.02257495590829049, -0.1354497354497359, 0.09029982363315732, 0.06772486772486733, 0.0, 0.06772486772486788, -0.01693121693121688, -0.06772486772486759, 0.04514991181657856, 0.02257495590828927, 0.0, 0.0, 0.04514991181657915, 0.0, -0.4514991181657848, 0.6320987654320975, -0.1354497354497346, 0.04514991181657812, 0.0, 0.0, -0.2257495590828919, -0.04514991181657924, 0.3160493827160489, -0.09029982363315731 },
            { -0.0253968253968255, -0.02539682539682541, 0.135449735449735, -0.2708994708994702, 0.0, 0.0, 0.02257495590828919, 0.04514991181657808, 0.1354497354497357, -0.2708994708994708, 0.0, 0.02257495590828953, 0.005643738977072102, 0.02257495590828925, 0.04514991181657865, 0.02257495590828919, 0.0, 0.0, -0.135449735449735, 0.0, -0.1354497354497361, -0.1354497354497346, 0.5417989417989411, -0.1354497354497349, 0.0, 0.0, -0.04514991181657938, -0.04514991181657804, -0.04514991181657757, 0.27089947089947 },
            { 0.0493827160493826, 0.01834215167548518, -0.0225749559082896, 0.01693121693121689, 0.02257495590828967, 0.02257495590828973, 0.01693121693121658, -0.02257495590828913, -0.06772486772486741, 0.1185185185185181, -0.02257495590828972, -0.04514991181657842, 0.02257495590828881, -0.04514991181657797, -0.0677248677248668, 0.1185185185185184, -0.02257495590828959, 0.1354497354497333, 0.09029982363315611, 0.1354497354497357, 0.0451499118165786, 0.04514991181657812, -0.1354497354497349, 0.632098765432099, -0.1354497354497329, -0.135449735449736, 0.04514991181657779, -0.1354497354497361, 0.04514991181657847, -0.722398589065256 },
            { -0.01834215167548481, 0.01834215167548491, -0.0225749559082899, 0.01693121693121733, 0.02257495590828925, -0.112874779541446, 0.0846560846560838, -0.06772486772486717, 0.02257495590828883, -0.0169312169312171, -0.02257495590828929, 0.0, 0.0, 0.0, 0.06772486772486633, -0.08465608465608361, 0.1128747795414467, -0.5417989417989415, 0.1354497354497348, 0.0, 0.0, 0.0, 0.0, -0.1354497354497329, 0.5417989417989403, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.01834215167548488, 0.01834215167548498, -0.06772486772486723, 0.0846560846560831, -0.1128747795414459, 0.02257495590828976, 0.01693121693121644, -0.02257495590828941, 0.06772486772486695, -0.08465608465608365, 0.1128747795414462, 0.0, 0.0, 0.0, 0.02257495590828917, -0.01693121693121668, -0.02257495590828889, 0.0, 0.1354497354497365, -0.5417989417989432, 0.0, 0.0, 0.0, -0.135449735449736, 0.0, 0.5417989417989439, 0.0, 0.0, 0.0, 0.0 },
            { 0.04232804232804221, -0.0253968253968253, 0.04514991181657843, 0.02257495590828949, 0.0, 0.0, 0.06772486772486604, 0.0902998236331569, -0.1354497354497352, 0.02257495590828947, 0.0, -0.06772486772486776, -0.01693121693121665, 0.06772486772486731, -0.27089947089947, 0.06772486772486627, 0.0, 0.0, 0.04514991181657783, 0.0, 0.3160493827160488, -0.2257495590828919, -0.04514991181657938, 0.04514991181657779, 0.0, 0.0, 0.6320987654320969, -0.1354497354497325, -0.4514991181657837, -0.09029982363315536 },
            { -0.02539682539682497, -0.02539682539682549, 0.04514991181657863, 0.02257495590828896, 0.0, 0.0, -0.2708994708994696, 0.1354497354497357, 0.04514991181657838, 0.02257495590828907, 0.0, 0.02257495590828847, 0.005643738977072529, 0.02257495590828935, 0.1354497354497342, -0.2708994708994706, 0.0, 0.0, -0.1354497354497346, 0.0, -0.04514991181657772, -0.04514991181657924, -0.04514991181657804, -0.1354497354497361, 0.0, 0.0, -0.1354497354497325, 0.5417989417989404, -0.1354497354497374, 0.2708994708994709 },
            { -0.02539682539682547, 0.04232804232804237, -0.1354497354497353, 0.02257495590828902, 0.0, 0.0, 0.0677248677248691, -0.2708994708994711, 0.04514991181657817, 0.02257495590828901, 0.0, 0.06772486772486788, -0.01693121693121697, -0.06772486772486755, 0.09029982363315661, 0.0677248677248683, 0.0, 0.0, 0.04514991181657872, 0.0, -0.2257495590828919, 0.3160493827160489, -0.04514991181657757, 0.04514991181657847, 0.0, 0.0, -0.4514991181657837, -0.1354497354497374, 0.632098765432098, -0.09029982363315744 },
            { -0.06772486772486783, -0.06772486772486792, 0.09029982363315765, -0.1354497354497347, 0.0, 0.0, -0.1354497354497344, 0.09029982363315643, 0.09029982363315719, -0.1354497354497351, 0.0, 0.09029982363315682, -0.04514991181657836, 0.09029982363315688, 0.09029982363315597, -0.135449735449736, 0.0, 0.0, -0.7223985890652542, 0.0, -0.09029982363315707, -0.09029982363315731, 0.27089947089947, -0.722398589065256, 0.0, 0.0, -0.09029982363315536, 0.2708994708994709, -0.09029982363315744, 1.44479717813051 } } };
    alignas(32) static const double PI4[1][30][30] =
        { { { 0.03791887125220485, 0.005114638447971801, 0.007760141093474394, 0.005114638447971927, 0.007760141093474303, 0.007760141093474343, 0.005114638447971696, 0.007760141093474313, -0.07054673721340433, 0.05291005291005312, -0.0253968253968254, -0.0246913580246912, 0.02028218694885358, -0.007760141093474415, -0.0246913580246913, 0.02028218694885341, -0.007760141093474453, 0.01834215167548495, 0.0183421516754849, 0.01834215167548509, 0.04232804232804226, -0.02539682539682558, -0.02539682539682538, 0.04232804232804225, -0.02539682539682488, -0.02539682539682548, 0.04938271604938246, -0.01834215167548485, -0.01834215167548495, -0.06772486772486766 },
            { 0.005114638447971823, -0.005114638447971773, 0.04585537918871258, -0.03262786596119931, 0.01763668430335105, -0.007760141093474325, -0.005114638447972047, -0.007760141093474232, 0.0, 0.0, 0.0, -0.01763668430335106, 0.03262786596119951, -0.04585537918871262, 0.007760141093474331, 0.005114638447971894, 0.007760141093474329, 0.007054673721340643, 0.007054673721340367, 0.007054673721340431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.007054673721340299, -0.007054673721340686, -0.007054673721340476, 0.0 },
            { 0.007760141093474416, 0.01763668430335079, 0.07901234567901169, 0.04232804232804189, -0.03386243386243408, 0.01128747795414444, 0.01410934744268165, 0.03386243386243293, -0.0112874779541446, -0.002821869488536093, -0.01128747795414471, -0.03386243386243362, 0.0592592592592589, -0.07901234567901234, -0.01128747795414445, -0.002821869488536041, -0.01128747795414453, -0.03386243386243395, 0.1015873015873017, -0.03386243386243402, 0.03386243386243352, -0.1015873015873004, 0.0338624338624339, -0.01128747795414538, -0.01128747795414519, -0.01128747795414344, 0.03386243386243387, 0.03386243386243351, -0.1015873015873014, 0.0 },
            { 0.005114638447971853, -0.03262786596119911, -0.03104056437389767, 0.08253968253968237, 0.04232804232804282, 0.002821869488536635, -0.01058201058201178, -0.05925925925925761, -0.0141093474426809, 0.01058201058201041, 0.03104056437389778, -0.0141093474426809, 0.01058201058201079, 0.03104056437389769, -0.002821869488536403, -0.009171075837742487, -0.002821869488536422, -0.01975308641975303, -0.04232804232804277, 0.09312169312169379, 0.06490299823633171, -0.09312169312169323, -0.09312169312169356, 0.01975308641975382, 0.01975308641975397, 0.04232804232804027, 0.01975308641975316, 0.01975308641975294, 0.04232804232804251, -0.1128747795414464 },
            { 0.007760141093474337, 0.04585537918871237, 0.01128747795414425, -0.03104056437389725, 0.07901234567901144, 0.0112874779541446, -0.03104056437389738, 0.07901234567901155, -0.03386243386243339, 0.05925925925925848, -0.07901234567901186, -0.01128747795414455, -0.002821869488536181, -0.01128747795414434, -0.01128747795414459, -0.002821869488536187, -0.01128747795414461, 0.01128747795414465, 0.01128747795414386, 0.01128747795414447, 0.03386243386243356, 0.03386243386243373, -0.1015873015873009, 0.03386243386243388, 0.03386243386243368, -0.101587301587301, -0.01128747795414464, -0.01128747795414483, -0.01128747795414412, 0.0 },
            { 0.007760141093474317, -0.007760141093474512, 0.01128747795414467, 0.002821869488536392, 0.01128747795414441, 0.1580246913580251, -0.09029982363315733, 0.04514991181657845, 0.0, 0.0, 0.0, -0.01128747795414488, -0.002821869488535833, -0.01128747795414492, -0.04514991181657844, 0.09029982363315694, -0.1580246913580249, 0.1128747795414456, -0.02257495590828854, -0.02257495590828911, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0225749559082897, -0.1128747795414458, 0.02257495590828853, 0.0 },
            { 0.005114638447971701, -0.005114638447971721, -0.03104056437389766, -0.01058201058201082, 0.01410934744268107, -0.09029982363315706, -0.02116402116402093, 0.01693121693121716, 0.0, 0.0, 0.0, -0.01410934744268028, 0.01058201058200998, 0.03104056437389795, -0.01693121693121656, 0.02116402116402082, 0.09029982363315688, 0.1862433862433869, 0.05079365079364969, -0.08465608465608464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08465608465608271, -0.1862433862433865, -0.05079365079364949, 0.0 },
            { 0.007760141093474391, -0.007760141093474464, 0.07901234567901202, -0.05925925925925907, 0.03386243386243388, 0.04514991181657815, 0.01693121693121733, 0.02257495590828889, 0.0, 0.0, 0.0, -0.03386243386243371, 0.05925925925925912, -0.07901234567901289, -0.02257495590828915, -0.01693121693121685, -0.04514991181657822, -0.06772486772486871, 0.2031746031746041, -0.06772486772486738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06772486772486777, 0.06772486772486844, -0.2031746031746038, 0.0 },
            { -0.02469135802469115, -0.01763668430335089, -0.01128747795414444, -0.01410934744268131, -0.03386243386243309, -0.01128747795414458, -0.01410934744268079, -0.03386243386243329, 0.1241622574955903, -0.1608465608465603, 0.07901234567901204, 0.1015873015873016, -0.04232804232804237, 0.0112874779541447, 0.1015873015873013, -0.042328042328042, 0.01128747795414451, -0.01128747795414455, -0.01128747795414489, -0.05643738977072291, -0.1693121693121692, 0.05643738977072331, 0.1015873015873011, -0.169312169312169, 0.05643738977072266, 0.1015873015873008, -0.03386243386243374, 0.01128747795414465, 0.01128747795414467, 0.09029982363315683 },
            { 0.02028218694885348, 0.03262786596119923, -0.00282186948853651, 0.01058201058201123, 0.05925925925925788, -0.002821869488536094, 0.01058201058201081, 0.05925925925925824, -0.0874779541446202, 0.1671957671957664, -0.1326278659611986, -0.04232804232804227, -0.01340388007054657, 0.002821869488536317, -0.04232804232804224, -0.01340388007054677, 0.002821869488536032, -0.002821869488535956, -0.002821869488536424, 0.04232804232804194, 0.1608465608465602, 0.002821869488535711, -0.1777777777777762, 0.1608465608465605, 0.002821869488536347, -0.1777777777777771, -0.01975308641975295, 0.002821869488535788, 0.002821869488536281, -0.0225749559082888 },
            { -0.007760141093474365, -0.04585537918871249, -0.01128747795414432, 0.03104056437389732, -0.07901234567901166, -0.01128747795414465, 0.03104056437389749, -0.07901234567901179, 0.03386243386243346, -0.05925925925925865, 0.07901234567901208, 0.01128747795414462, 0.002821869488536145, 0.01128747795414441, 0.01128747795414465, 0.002821869488536193, 0.01128747795414465, -0.01128747795414474, -0.01128747795414401, -0.01128747795414455, -0.03386243386243371, -0.03386243386243375, 0.1015873015873012, -0.03386243386243398, -0.03386243386243379, 0.1015873015873013, 0.01128747795414464, 0.01128747795414492, 0.01128747795414427, 0.0 },
            { -0.07054673721340428, 0.0, -0.03386243386243382, -0.0141093474426808, -0.0112874779541446, 0.0, 0.0, 0.0, 0.1015873015873024, -0.04232804232804269, 0.01128747795414469, 0.1241622574955906, -0.08747795414462063, 0.03386243386243385, 0.02257495590828931, -0.01128747795414436, 0.0, -0.01128747795414415, -0.05643738977072266, -0.01128747795414492, -0.1693121693121694, 0.1015873015873017, 0.05643738977072349, -0.03386243386243418, 0.01128747795414402, 0.01128747795414512, -0.07901234567901196, 0.01128747795414409, 0.05643738977072275, 0.09029982363315711 },
            { 0.05291005291005311, 0.0, 0.05925925925925952, 0.01058201058201038, -0.002821869488536095, 0.0, 0.0, 0.0, -0.04232804232804269, -0.01340388007054663, 0.002821869488536213, -0.1608465608465607, 0.1671957671957673, -0.05925925925925945, 0.01693121693121659, -0.002821869488536093, 0.0, -0.002821869488536238, 0.04232804232804203, -0.002821869488535623, 0.1608465608465607, -0.1777777777777781, 0.002821869488536181, -0.01975308641975281, 0.002821869488536534, 0.002821869488536027, 0.02539682539682501, 0.00282186948853622, -0.04232804232804216, -0.02257495590828958 },
            { -0.02539682539682541, 0.0, -0.07901234567901286, 0.03104056437389793, -0.01128747795414457, 0.0, 0.0, 0.0, 0.01128747795414462, 0.002821869488536253, 0.01128747795414448, 0.07901234567901259, -0.1326278659611998, 0.07901234567901279, -0.02257495590828884, -0.01128747795414478, 0.0, -0.01128747795414482, -0.01128747795414475, -0.01128747795414504, -0.03386243386243381, 0.1015873015873022, -0.03386243386243429, 0.01128747795414437, 0.01128747795414445, 0.0112874779541446, 0.01128747795414491, 0.01128747795414485, 0.01128747795414492, 0.0 },
            { -0.02469135802469122, 0.007760141093474456, -0.01128747795414459, -0.002821869488536275, -0.01128747795414456, -0.04514991181657824, -0.0169312169312165, -0.02257495590828927, 0.02257495590828899, 0.0169312169312171, -0.02257495590828935, 0.1015873015873012, -0.04232804232804219, 0.01128747795414487, 0.2031746031746023, -0.1185185185185174, 0.04514991181657824, -0.06772486772486659, -0.02257495590828929, -0.02257495590828911, -0.1354497354497351, 0.04514991181657822, 0.04514991181657883, -0.2708994708994702, 0.1354497354497337, 0.0902998236331571, -0.06772486772486662, 0.06772486772486666, 0.0225749559082889, 0.09029982363315607 },
            { 0.02028218694885344, 0.005114638447971781, -0.002821869488536109, -0.009171075837742383, -0.002821869488536161, 0.09029982363315675, 0.02116402116402085, -0.01693121693121711, -0.01128747795414446, -0.002821869488536097, -0.01128747795414463, -0.04232804232804203, -0.01340388007054691, 0.002821869488536185, -0.1185185185185174, 0.2497354497354493, -0.09029982363315676, 0.0846560846560839, 0.01693121693121725, 0.01693121693121693, 0.02257495590828903, 0.02257495590828885, 0.02257495590828922, 0.06772486772486641, -0.27089947089947, 0.06772486772486827, 0.1185185185185183, -0.08465608465608389, -0.01693121693121719, -0.1354497354497352 },
            { -0.007760141093474416, 0.007760141093474476, -0.01128747795414465, -0.002821869488536205, -0.01128747795414464, -0.1580246913580253, 0.09029982363315736, -0.0451499118165788, 0.0, 0.0, 0.0, 0.01128747795414458, 0.002821869488536021, 0.0112874779541449, 0.04514991181657842, -0.09029982363315685, 0.1580246913580251, -0.1128747795414461, 0.02257495590828879, 0.02257495590828855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.02257495590828942, 0.1128747795414463, -0.02257495590828879, 0.0 },
            { 0.01834215167548487, 0.007054673721340471, 0.01128747795414483, -0.01975308641975325, -0.03386243386243388, 0.112874779541446, 0.1862433862433863, -0.06772486772486792, -0.01128747795414453, -0.002821869488535395, -0.01128747795414517, -0.01128747795414405, -0.002821869488535946, -0.01128747795414501, -0.06772486772486645, 0.08465608465608374, -0.1128747795414465, 0.270899470899472, -0.06772486772486688, 0.06772486772486717, 0.02257495590828798, 0.02257495590828973, 0.02257495590828908, 0.06772486772486423, -0.2708994708994686, 0.06772486772486899, 0.06772486772486783, -0.2708994708994714, 0.06772486772486731, -0.1354497354497358 },
            { 0.01834215167548503, 0.007054673721340074, 0.01128747795414478, 0.0931216931216927, -0.03386243386243484, -0.02257495590828906, -0.08465608465608457, -0.06772486772486841, -0.01128747795414482, -0.00282186948853656, -0.01128747795414462, -0.05643738977072292, 0.04232804232804224, -0.01128747795414466, -0.02257495590828937, 0.01693121693121757, 0.02257495590828905, 0.06772486772486701, 0.2708994708994706, 0.2257495590828932, 0.04514991181657809, -0.135449735449736, 0.04514991181658078, 0.04514991181657877, 0.0677248677248673, 0.0451499118165787, 0.09029982363315579, -0.06772486772486748, -0.2708994708994706, -0.3160493827160487 },
            { 0.01834215167548494, 0.00705467372134022, 0.0112874779541449, -0.04232804232804242, 0.1015873015873021, -0.02257495590828993, 0.0507936507936515, 0.2031746031746027, -0.05643738977072245, 0.04232804232804115, -0.01128747795414363, -0.01128747795414461, -0.002821869488535986, -0.01128747795414446, -0.0225749559082889, 0.01693121693121682, 0.02257495590828889, -0.06772486772486694, -0.04514991181657818, 0.2708994708994707, 0.04514991181657847, 0.04514991181657814, -0.1354497354497363, 0.09029982363315611, -0.06772486772486633, -0.2708994708994713, 0.04514991181657872, 0.06772486772486724, 0.04514991181657785, -0.3160493827160493 },
            { 0.04232804232804216, 0.0, 0.03386243386243355, 0.064902998236332, 0.03386243386243353, 0.0, 0.0, 0.0, -0.169312169312169, 0.1608465608465603, -0.03386243386243341, -0.1693121693121694, 0.1608465608465607, -0.03386243386243439, -0.1354497354497353, 0.02257495590828872, 0.0, 0.02257495590828884, 0.0451499118165789, 0.04514991181657802, 0.3611992945326284, -0.225749559082892, -0.2257495590828929, 0.1805996472663146, -0.02257495590828906, -0.04514991181657891, 0.1805996472663133, -0.02257495590828879, -0.04514991181657783, -0.2257495590828926 },
            { -0.02539682539682546, 0.0, -0.101587301587301, -0.09312169312169247, 0.03386243386243292, 0.0, 0.0, 0.0, 0.05643738977072337, 0.002821869488535964, -0.03386243386243372, 0.1015873015873015, -0.1777777777777772, 0.1015873015873022, 0.04514991181657855, 0.0225749559082892, 0.0, 0.02257495590828974, -0.1354497354497359, 0.0451499118165786, -0.2257495590828927, 0.2708994708994689, 0.09029982363315864, 0.0, -0.02257495590828877, -0.04514991181657765, -0.1805996472663133, -0.02257495590828946, 0.1354497354497347, 0.1354497354497357 },
            { -0.02539682539682535, 0.0, 0.03386243386243404, -0.09312169312169385, -0.1015873015873002, 0.0, 0.0, 0.0, 0.1015873015873011, -0.1777777777777769, 0.1015873015873008, 0.05643738977072336, 0.002821869488535511, -0.03386243386243387, 0.04514991181657874, 0.02257495590828935, 0.0, 0.02257495590828888, 0.04514991181657883, -0.1354497354497356, -0.2257495590828922, 0.09029982363315806, 0.2708994708994693, -0.1805996472663143, -0.02257495590829018, 0.1354497354497363, 0.0, -0.02257495590828863, -0.04514991181657843, 0.1354497354497353 },
            { 0.04938271604938259, -0.007054673721340234, -0.01128747795414466, 0.0197530864197526, 0.03386243386243454, 0.02257495590828947, 0.08465608465608275, 0.06772486772486827, -0.07901234567901215, 0.02539682539682558, 0.01128747795414529, -0.03386243386243366, -0.01975308641975303, 0.01128747795414466, -0.0677248677248667, 0.1185185185185184, -0.02257495590828974, 0.06772486772486784, 0.04514991181657781, 0.09029982363315556, 0.1805996472663137, 0.0, -0.180599647266314, 0.3611992945326261, -0.2031746031746006, -0.3611992945326289, 0.3160493827160502, -0.06772486772486758, -0.04514991181657774, -0.406349206349206 },
            { -0.01834215167548477, -0.00705467372134036, -0.01128747795414483, 0.0197530864197528, 0.03386243386243434, -0.1128747795414462, -0.1862433862433855, 0.06772486772486826, 0.01128747795414436, 0.00282186948853546, 0.01128747795414507, 0.01128747795414393, 0.002821869488536076, 0.011287477954145, 0.06772486772486622, -0.08465608465608362, 0.1128747795414467, -0.2708994708994718, 0.06772486772486662, -0.06772486772486619, -0.02257495590828768, -0.02257495590828941, -0.02257495590828972, -0.06772486772486382, 0.2708994708994676, -0.06772486772486948, -0.06772486772486751, 0.2708994708994711, -0.06772486772486705, 0.1354497354497345 },
            { -0.01834215167548501, -0.007054673721340349, -0.01128747795414487, 0.04232804232804247, -0.1015873015873023, 0.02257495590829005, -0.05079365079365152, -0.203174603174603, 0.05643738977072274, -0.04232804232804138, 0.01128747795414378, 0.01128747795414466, 0.002821869488535854, 0.01128747795414442, 0.02257495590828895, -0.01693121693121684, -0.02257495590828901, 0.06772486772486745, 0.04514991181657857, -0.2708994708994708, -0.04514991181657884, -0.04514991181657805, 0.1354497354497368, -0.09029982363315639, 0.06772486772486636, 0.2708994708994719, -0.04514991181657914, -0.06772486772486774, -0.04514991181657825, 0.3160493827160498 },
            { 0.04232804232804209, 0.0, 0.03386243386243361, 0.01975308641975364, -0.01128747795414489, 0.0, 0.0, 0.0, -0.03386243386243352, -0.01975308641975365, 0.01128747795414504, -0.1693121693121689, 0.1608465608465604, -0.03386243386243441, -0.2708994708994701, 0.06772486772486623, 0.0, 0.0677248677248653, 0.09029982363315618, 0.04514991181657912, 0.1805996472663138, -0.1805996472663136, 0.0, 0.3160493827160497, -0.06772486772486644, -0.0451499118165794, 0.3611992945326254, -0.06772486772486525, -0.09029982363315517, -0.4063492063492059 },
            { -0.025396825396825, 0.0, 0.03386243386243375, 0.01975308641975295, -0.01128747795414478, 0.0, 0.0, 0.0, 0.0112874779541445, 0.002821869488536281, 0.01128747795414472, 0.05643738977072262, 0.00282186948853679, -0.03386243386243413, 0.1354497354497342, -0.2708994708994706, 0.0, -0.2708994708994697, -0.06772486772486666, 0.06772486772486765, -0.02257495590828969, -0.02257495590828884, -0.02257495590828892, -0.06772486772486705, 0.2708994708994713, -0.06772486772486781, -0.2031746031746015, 0.2708994708994693, 0.0677248677248664, 0.135449735449735 },
            { -0.02539682539682546, 0.0, -0.1015873015873008, 0.04232804232804171, -0.01128747795414439, 0.0, 0.0, 0.0, 0.01128747795414477, 0.002821869488536295, 0.01128747795414457, 0.101587301587301, -0.1777777777777772, 0.1015873015873022, 0.09029982363315664, 0.06772486772486826, 0.0, 0.06772486772486884, -0.2708994708994709, 0.045149911816578, -0.0451499118165783, 0.1354497354497349, -0.04514991181657781, -0.04514991181657866, -0.06772486772486806, -0.04514991181657785, -0.3611992945326265, -0.06772486772486867, 0.2708994708994699, 0.3160493827160497 },
            { -0.06772486772486766, 0.0, 0.0, -0.1128747795414449, 0.0, 0.0, 0.0, 0.0, 0.09029982363315713, -0.02257495590828914, 0.0, 0.09029982363315647, -0.02257495590828921, 0.0, 0.09029982363315604, -0.1354497354497359, 0.0, -0.1354497354497355, -0.316049382716048, -0.3160493827160496, -0.2257495590828922, 0.1354497354497358, 0.1354497354497339, -0.406349206349205, 0.1354497354497347, 0.3160493827160502, -0.4063492063492062, 0.1354497354497358, 0.316049382716048, 0.7223985890652558 } } };
    alignas(32) static const double PI5[1][30][30] =
        { { { 0.03791887125220484, 0.005114638447971815, 0.007760141093474415, 0.00511463844797187, 0.007760141093474324, 0.007760141093474318, 0.005114638447971732, 0.007760141093474331, -0.07054673721340431, 0.05291005291005309, -0.02539682539682542, -0.02469135802469116, 0.02028218694885353, -0.007760141093474437, -0.0246913580246912, 0.02028218694885345, -0.007760141093474427, 0.01834215167548487, 0.0183421516754849, 0.01834215167548506, 0.04232804232804216, -0.02539682539682547, -0.02539682539682532, 0.04232804232804208, -0.02539682539682496, -0.02539682539682541, 0.04938271604938253, -0.01834215167548477, -0.01834215167548494, -0.0677248677248677 },
            { 0.005114638447971815, 0.03791887125220465, -0.007760141093474485, 0.02028218694885358, -0.02469135802469147, -0.007760141093474474, 0.02028218694885372, -0.02469135802469146, -0.02539682539682543, 0.05291005291005291, -0.07054673721340395, 0.007760141093474444, 0.005114638447971772, 0.007760141093474567, 0.007760141093474464, 0.005114638447971788, 0.007760141093474466, -0.01834215167548495, -0.01834215167548526, 0.04938271604938255, -0.02539682539682543, -0.02539682539682539, 0.04232804232804246, -0.02539682539682543, -0.02539682539682548, 0.04232804232804236, 0.01834215167548518, 0.01834215167548493, 0.01834215167548519, -0.06772486772486766 },
            { 0.007760141093474415, -0.007760141093474485, 0.1580246913580237, -0.09029982363315678, 0.04514991181657806, 0.01128747795414436, 0.002821869488536412, 0.01128747795414438, 0.0, 0.0, 0.0, -0.04514991181657824, 0.09029982363315685, -0.1580246913580246, -0.01128747795414446, -0.002821869488536002, -0.01128747795414444, -0.02257495590828916, 0.1128747795414459, -0.02257495590828857, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02257495590828912, 0.02257495590828882, -0.1128747795414458, 0.0 },
            { 0.00511463844797187, 0.02028218694885358, -0.09029982363315678, 0.2497354497354488, -0.1185185185185178, 0.002821869488536625, -0.01340388007054714, -0.042328042328042, -0.01128747795414488, -0.002821869488535775, -0.01128747795414476, -0.0169312169312171, 0.02116402116402116, 0.0902998236331571, -0.002821869488536436, -0.009171075837742517, -0.002821869488536397, -0.01693121693121699, -0.08465608465608497, 0.1185185185185183, 0.0677248677248681, -0.2708994708994703, 0.06772486772486706, 0.02257495590828958, 0.02257495590828943, 0.02257495590828879, 0.01693121693121711, 0.01693121693121668, 0.08465608465608494, -0.135449735449735 },
            { 0.007760141093474324, -0.02469135802469147, 0.04514991181657806, -0.1185185185185178, 0.2031746031746021, 0.01128747795414448, -0.04232804232804235, 0.1015873015873016, -0.02257495590828873, 0.01693121693121588, 0.0225749559082899, -0.02257495590828897, -0.01693121693121702, -0.04514991181657843, -0.01128747795414445, -0.002821869488536065, -0.01128747795414451, 0.02257495590828919, 0.06772486772486733, -0.06772486772486765, 0.09029982363315646, 0.1354497354497353, -0.2708994708994701, 0.04514991181657845, 0.0451499118165785, -0.1354497354497356, -0.02257495590828916, -0.02257495590828926, -0.06772486772486766, 0.09029982363315714 },
            { 0.007760141093474318, -0.007760141093474474, 0.01128747795414436, 0.002821869488536625, 0.01128747795414448, 0.1580246913580254, -0.09029982363315774, 0.04514991181657851, 0.0, 0.0, 0.0, -0.01128747795414449, -0.002821869488536196, -0.01128747795414462, -0.04514991181657827, 0.09029982363315679, -0.1580246913580252, 0.1128747795414459, -0.02257495590828941, -0.02257495590828923, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02257495590828922, -0.112874779541446, 0.02257495590828939, 0.0 },
            { 0.005114638447971732, 0.02028218694885372, 0.002821869488536412, -0.01340388007054714, -0.04232804232804235, -0.09029982363315774, 0.2497354497354503, -0.1185185185185186, -0.01128747795414468, -0.002821869488535741, -0.01128747795414463, -0.002821869488536113, -0.00917107583774261, -0.002821869488536233, -0.01693121693121641, 0.02116402116402083, 0.09029982363315721, -0.08465608465608408, -0.01693121693121615, 0.1185185185185182, 0.02257495590828893, 0.02257495590828969, 0.02257495590828964, 0.0677248677248657, -0.27089947089947, 0.06772486772486841, 0.01693121693121685, 0.08465608465608444, 0.01693121693121633, -0.1354497354497355 },
            { 0.007760141093474331, -0.02469135802469146, 0.01128747795414438, -0.042328042328042, 0.1015873015873016, 0.04514991181657851, -0.1185185185185186, 0.2031746031746026, -0.02257495590828886, 0.01693121693121628, 0.02257495590828967, -0.01128747795414445, -0.002821869488536005, -0.01128747795414449, -0.02257495590828918, -0.01693121693121699, -0.04514991181657861, 0.06772486772486758, 0.0225749559082885, -0.06772486772486785, 0.04514991181657833, 0.04514991181657821, -0.1354497354497358, 0.09029982363315706, 0.1354497354497358, -0.2708994708994706, -0.02257495590828919, -0.06772486772486762, -0.02257495590828864, 0.09029982363315714 },
            { -0.07054673721340431, -0.02539682539682543, 0.0, -0.01128747795414488, -0.02257495590828873, 0.0, -0.01128747795414468, -0.02257495590828886, 0.2031746031746037, -0.2201058201058202, 0.1128747795414461, 0.02257495590828887, -0.01128747795414454, 0.0, 0.02257495590828897, -0.01128747795414448, 0.0, 0.0, 0.0, -0.0451499118165782, -0.06772486772486713, 0.02257495590828936, 0.06772486772486708, -0.06772486772486712, 0.02257495590828889, 0.06772486772486716, -0.04514991181657851, 0.0, 0.0, 0.09029982363315679 },
            { 0.05291005291005309, 0.05291005291005291, 0.0, -0.002821869488535775, 0.01693121693121588, 0.0, -0.002821869488535741, 0.01693121693121628, -0.2201058201058202, 0.3343915343915339, -0.2201058201058197, 0.01693121693121736, -0.002821869488536294, 0.0, 0.01693121693121712, -0.002821869488536099, 0.0, 0.0, 0.0, 0.02257495590828863, -0.01693121693121772, 0.005643738977072269, -0.0169312169312157, -0.01693121693121721, 0.005643738977071856, -0.01693121693121624, 0.02257495590828916, 0.0, 0.0, -0.04514991181657779 },
            { -0.02539682539682542, -0.07054673721340395, 0.0, -0.01128747795414476, 0.0225749559082899, 0.0, -0.01128747795414463, 0.02257495590828967, 0.1128747795414461, -0.2201058201058197, 0.203174603174603, -0.02257495590828941, -0.01128747795414464, 0.0, -0.02257495590828937, -0.01128747795414463, 0.0, 0.0, 0.0, -0.04514991181657789, 0.06772486772486865, 0.02257495590828938, -0.06772486772486902, 0.06772486772486845, 0.02257495590828925, -0.06772486772486858, -0.04514991181657812, 0.0, 0.0, 0.09029982363315593 },
            { -0.02469135802469116, 0.007760141093474444, -0.04514991181657824, -0.0169312169312171, -0.02257495590828897, -0.01128747795414449, -0.002821869488536113, -0.01128747795414445, 0.02257495590828887, 0.01693121693121736, -0.02257495590828941, 0.203174603174603, -0.1185185185185182, 0.04514991181657853, 0.1015873015873012, -0.04232804232804203, 0.01128747795414446, -0.02257495590828849, -0.06772486772486731, -0.02257495590828937, -0.2708994708994709, 0.1354497354497352, 0.09029982363315721, -0.1354497354497353, 0.0451499118165779, 0.04514991181657851, -0.06772486772486741, 0.02257495590828874, 0.06772486772486705, 0.09029982363315708 },
            { 0.02028218694885353, 0.005114638447971772, 0.09029982363315685, 0.02116402116402116, -0.01693121693121702, -0.002821869488536196, -0.00917107583774261, -0.002821869488536005, -0.01128747795414454, -0.002821869488536294, -0.01128747795414464, -0.1185185185185182, 0.2497354497354499, -0.09029982363315736, -0.04232804232804226, -0.01340388007054691, 0.002821869488536165, 0.01693121693121678, 0.08465608465608429, 0.01693121693121741, 0.06772486772486742, -0.270899470899471, 0.06772486772486767, 0.02257495590828957, 0.02257495590828952, 0.02257495590828882, 0.1185185185185181, -0.01693121693121684, -0.08465608465608371, -0.1354497354497363 },
            { -0.007760141093474437, 0.007760141093474567, -0.1580246913580246, 0.0902998236331571, -0.04514991181657843, -0.01128747795414462, -0.002821869488536233, -0.01128747795414449, 0.0, 0.0, 0.0, 0.04514991181657853, -0.09029982363315736, 0.1580246913580253, 0.01128747795414474, 0.002821869488536078, 0.01128747795414469, 0.0225749559082891, -0.1128747795414469, 0.02257495590828943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0225749559082896, -0.02257495590828876, 0.1128747795414468, 0.0 },
            { -0.0246913580246912, 0.007760141093474464, -0.01128747795414446, -0.002821869488536436, -0.01128747795414445, -0.04514991181657827, -0.01693121693121641, -0.02257495590828918, 0.02257495590828897, 0.01693121693121712, -0.02257495590828937, 0.1015873015873012, -0.04232804232804226, 0.01128747795414474, 0.2031746031746024, -0.1185185185185175, 0.04514991181657827, -0.06772486772486661, -0.02257495590828923, -0.02257495590828914, -0.135449735449735, 0.04514991181657846, 0.04514991181657868, -0.2708994708994701, 0.1354497354497336, 0.09029982363315693, -0.06772486772486672, 0.06772486772486669, 0.02257495590828884, 0.09029982363315618 },
            { 0.02028218694885345, 0.005114638447971788, -0.002821869488536002, -0.009171075837742517, -0.002821869488536065, 0.09029982363315679, 0.02116402116402083, -0.01693121693121699, -0.01128747795414448, -0.002821869488536099, -0.01128747795414463, -0.04232804232804203, -0.01340388007054691, 0.002821869488536078, -0.1185185185185175, 0.2497354497354493, -0.09029982363315681, 0.08465608465608393, 0.01693121693121741, 0.01693121693121687, 0.02257495590828898, 0.02257495590828899, 0.02257495590828917, 0.0677248677248664, -0.27089947089947, 0.06772486772486816, 0.1185185185185182, -0.08465608465608393, -0.01693121693121735, -0.1354497354497351 },
            { -0.007760141093474427, 0.007760141093474466, -0.01128747795414444, -0.002821869488536397, -0.01128747795414451, -0.1580246913580252, 0.09029982363315721, -0.04514991181657861, 0.0, 0.0, 0.0, 0.01128747795414446, 0.002821869488536165, 0.01128747795414469, 0.04514991181657827, -0.09029982363315681, 0.158024691358025, -0.112874779541446, 0.02257495590828923, 0.02257495590828836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0225749559082895, 0.1128747795414461, -0.02257495590828922, 0.0 },
            { 0.01834215167548487, -0.01834215167548495, -0.02257495590828916, -0.01693121693121699, 0.02257495590828919, 0.1128747795414459, -0.08465608465608408, 0.06772486772486758, 0.0, 0.0, 0.0, -0.02257495590828849, 0.01693121693121678, 0.0225749559082891, -0.06772486772486661, 0.08465608465608393, -0.112874779541446, 0.5417989417989424, 0.0, -0.135449735449735, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1354497354497346, -0.5417989417989417, 0.0, 0.0 },
            { 0.0183421516754849, -0.01834215167548526, 0.1128747795414459, -0.08465608465608497, 0.06772486772486733, -0.02257495590828941, -0.01693121693121615, 0.0225749559082885, 0.0, 0.0, 0.0, -0.06772486772486731, 0.08465608465608429, -0.1128747795414469, -0.02257495590828923, 0.01693121693121741, 0.02257495590828923, 0.0, 0.5417989417989425, -0.135449735449735, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1354497354497341, 0.0, -0.5417989417989418, 0.0 },
            { 0.01834215167548506, 0.04938271604938255, -0.02257495590828857, 0.1185185185185183, -0.06772486772486765, -0.02257495590828923, 0.1185185185185182, -0.06772486772486785, -0.0451499118165782, 0.02257495590828863, -0.04514991181657789, -0.02257495590828937, 0.01693121693121741, 0.02257495590828943, -0.02257495590828914, 0.01693121693121687, 0.02257495590828836, -0.135449735449735, -0.135449735449735, 0.6320987654320985, 0.04514991181657764, -0.1354497354497365, 0.04514991181657943, 0.04514991181657758, -0.1354497354497331, 0.04514991181657794, 0.09029982363315711, 0.1354497354497351, 0.1354497354497347, -0.7223985890652549 },
            { 0.04232804232804216, -0.02539682539682543, 0.0, 0.0677248677248681, 0.09029982363315646, 0.0, 0.02257495590828893, 0.04514991181657833, -0.06772486772486713, -0.01693121693121772, 0.06772486772486865, -0.2708994708994709, 0.06772486772486742, 0.0, -0.135449735449735, 0.02257495590828898, 0.0, 0.0, 0.0, 0.04514991181657764, 0.6320987654320985, -0.135449735449735, -0.4514991181657846, 0.316049382716049, -0.04514991181657747, -0.2257495590828926, 0.04514991181657863, 0.0, 0.0, -0.09029982363315678 },
            { -0.02539682539682547, -0.02539682539682539, 0.0, -0.2708994708994703, 0.1354497354497353, 0.0, 0.02257495590828969, 0.04514991181657821, 0.02257495590828936, 0.005643738977072269, 0.02257495590828938, 0.1354497354497352, -0.270899470899471, 0.0, 0.04514991181657846, 0.02257495590828899, 0.0, 0.0, 0.0, -0.1354497354497365, -0.135449735449735, 0.5417989417989416, -0.1354497354497356, -0.04514991181657875, -0.04514991181657844, -0.04514991181657798, -0.1354497354497359, 0.0, 0.0, 0.2708994708994727 },
            { -0.02539682539682532, 0.04232804232804246, 0.0, 0.06772486772486706, -0.2708994708994701, 0.0, 0.02257495590828964, -0.1354497354497358, 0.06772486772486708, -0.0169312169312157, -0.06772486772486902, 0.09029982363315721, 0.06772486772486767, 0.0, 0.04514991181657868, 0.02257495590828917, 0.0, 0.0, 0.0, 0.04514991181657943, -0.4514991181657846, -0.1354497354497356, 0.6320987654320983, -0.2257495590828924, -0.04514991181657907, 0.3160493827160499, 0.0451499118165784, 0.0, 0.0, -0.09029982363315797 },
            { 0.04232804232804208, -0.02539682539682543, 0.0, 0.02257495590828958, 0.04514991181657845, 0.0, 0.0677248677248657, 0.09029982363315706, -0.06772486772486712, -0.01693121693121721, 0.06772486772486845, -0.1354497354497353, 0.02257495590828957, 0.0, -0.2708994708994701, 0.0677248677248664, 0.0, 0.0, 0.0, 0.04514991181657758, 0.316049382716049, -0.04514991181657875, -0.2257495590828924, 0.6320987654320979, -0.1354497354497316, -0.4514991181657853, 0.04514991181657785, 0.0, 0.0, -0.09029982363315561 },
            { -0.02539682539682496, -0.02539682539682548, 0.0, 0.02257495590828943, 0.0451499118165785, 0.0, -0.27089947089947, 0.1354497354497358, 0.02257495590828889, 0.005643738977071856, 0.02257495590828925, 0.0451499118165779, 0.02257495590828952, 0.0, 0.1354497354497336, -0.27089947089947, 0.0, 0.0, 0.0, -0.1354497354497331, -0.04514991181657747, -0.04514991181657844, -0.04514991181657907, -0.1354497354497316, 0.5417989417989387, -0.135449735449737, -0.135449735449735, 0.0, 0.0, 0.2708994708994685 },
            { -0.02539682539682541, 0.04232804232804236, 0.0, 0.02257495590828879, -0.1354497354497356, 0.0, 0.06772486772486841, -0.2708994708994706, 0.06772486772486716, -0.01693121693121624, -0.06772486772486858, 0.04514991181657851, 0.02257495590828882, 0.0, 0.09029982363315693, 0.06772486772486816, 0.0, 0.0, 0.0, 0.04514991181657794, -0.2257495590828926, -0.04514991181657798, 0.3160493827160499, -0.4514991181657853, -0.135449735449737, 0.6320987654320994, 0.04514991181657758, 0.0, 0.0, -0.09029982363315574 },
            { 0.04938271604938253, 0.01834215167548518, 0.02257495590828912, 0.01693121693121711, -0.02257495590828916, 0.02257495590828922, 0.01693121693121685, -0.02257495590828919, -0.04514991181657851, 0.02257495590828916, -0.04514991181657812, -0.06772486772486741, 0.1185185185185181, -0.0225749559082896, -0.06772486772486672, 0.1185185185185182, -0.0225749559082895, 0.1354497354497346, 0.1354497354497341, 0.09029982363315711, 0.04514991181657863, -0.1354497354497359, 0.0451499118165784, 0.04514991181657785, -0.135449735449735, 0.04514991181657758, 0.6320987654320979, -0.1354497354497342, -0.1354497354497334, -0.7223985890652562 },
            { -0.01834215167548477, 0.01834215167548493, 0.02257495590828882, 0.01693121693121668, -0.02257495590828926, -0.112874779541446, 0.08465608465608444, -0.06772486772486762, 0.0, 0.0, 0.0, 0.02257495590828874, -0.01693121693121684, -0.02257495590828876, 0.06772486772486669, -0.08465608465608393, 0.1128747795414461, -0.5417989417989417, 0.0, 0.1354497354497351, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1354497354497342, 0.5417989417989411, 0.0, 0.0 },
            { -0.01834215167548494, 0.01834215167548519, -0.1128747795414458, 0.08465608465608494, -0.06772486772486766, 0.02257495590828939, 0.01693121693121633, -0.02257495590828864, 0.0, 0.0, 0.0, 0.06772486772486705, -0.08465608465608371, 0.1128747795414468, 0.02257495590828884, -0.01693121693121735, -0.02257495590828922, 0.0, -0.5417989417989418, 0.1354497354497347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1354497354497334, 0.0, 0.5417989417989415, 0.0 },
            { -0.0677248677248677, -0.06772486772486766, 0.0, -0.135449735449735, 0.09029982363315714, 0.0, -0.1354497354497355, 0.09029982363315714, 0.09029982363315679, -0.04514991181657779, 0.09029982363315593, 0.09029982363315708, -0.1354497354497363, 0.0, 0.09029982363315618, -0.1354497354497351, 0.0, 0.0, 0.0, -0.7223985890652549, -0.09029982363315678, 0.2708994708994727, -0.09029982363315797, -0.09029982363315561, 0.2708994708994685, -0.09029982363315574, -0.7223985890652562, 0.0, 0.0, 1.444797178130512 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q24[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q24[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q24[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q24[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q24[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q24[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q24[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q24[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q24[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q24[0][0][1];
    alignas(32) double sp[80];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = sp[14] * sp[14];
    sp[20] = sp[14] * sp[17];
    sp[21] = sp[18] * sp[14];
    sp[22] = sp[17] * sp[17];
    sp[23] = sp[18] * sp[17];
    sp[24] = sp[18] * sp[18];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = J_c0 * J_c8;
    sp[30] = J_c6 * (-1 * J_c2);
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] / sp[13];
    sp[33] = J_c1 * J_c6;
    sp[34] = J_c0 * J_c7;
    sp[35] = sp[33] + -1 * sp[34];
    sp[36] = sp[35] / sp[13];
    sp[37] = sp[28] * sp[28];
    sp[38] = sp[28] * sp[32];
    sp[39] = sp[28] * sp[36];
    sp[40] = sp[32] * sp[32];
    sp[41] = sp[32] * sp[36];
    sp[42] = sp[36] * sp[36];
    sp[43] = sp[37] + sp[19];
    sp[44] = sp[38] + sp[20];
    sp[45] = sp[39] + sp[21];
    sp[46] = sp[40] + sp[22];
    sp[47] = sp[41] + sp[23];
    sp[48] = sp[24] + sp[42];
    sp[49] = J_c1 * J_c5;
    sp[50] = J_c2 * J_c4;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = J_c2 * J_c3;
    sp[54] = J_c0 * J_c5;
    sp[55] = sp[53] + -1 * sp[54];
    sp[56] = sp[55] / sp[13];
    sp[57] = J_c0 * J_c4;
    sp[58] = J_c1 * J_c3;
    sp[59] = sp[57] + -1 * sp[58];
    sp[60] = sp[59] / sp[13];
    sp[61] = sp[52] * sp[52];
    sp[62] = sp[52] * sp[56];
    sp[63] = sp[60] * sp[52];
    sp[64] = sp[56] * sp[56];
    sp[65] = sp[60] * sp[56];
    sp[66] = sp[60] * sp[60];
    sp[67] = sp[43] + sp[61];
    sp[68] = sp[44] + sp[62];
    sp[69] = sp[45] + sp[63];
    sp[70] = sp[46] + sp[64];
    sp[71] = sp[47] + sp[65];
    sp[72] = sp[48] + sp[66];
    sp[73] = std::abs(sp[13]);
    sp[74] = sp[67] * sp[73];
    sp[75] = sp[68] * sp[73];
    sp[76] = sp[69] * sp[73];
    sp[77] = sp[70] * sp[73];
    sp[78] = sp[71] * sp[73];
    sp[79] = sp[72] * sp[73];
    A[0] = sp[74] * PI0[0][0][0] + sp[75] * PI1[0][0][0] + sp[76] * PI2[0][0][0] + sp[75] * PI1[0][0][0] + sp[77] * PI3[0][0][0] + sp[78] * PI4[0][0][0] + sp[76] * PI2[0][0][0] + sp[78] * PI4[0][0][0] + sp[79] * PI5[0][0][0];
    A[1] = sp[74] * PI0[0][0][1] + sp[75] * PI1[0][1][0] + sp[76] * PI2[0][1][0];
    A[2] = sp[75] * PI1[0][0][1] + sp[77] * PI3[0][0][1] + sp[78] * PI4[0][1][0];
    A[3] = sp[76] * PI2[0][0][1] + sp[78] * PI4[0][0][1] + sp[79] * PI5[0][0][1];
    A[4] = sp[75] * PI1[0][0][2] + sp[76] * PI2[0][0][2] + sp[77] * PI3[0][0][2] + sp[78] * PI4[0][0][2] + sp[78] * PI4[0][2][0] + sp[79] * PI5[0][0][2];
    A[5] = sp[75] * PI1[0][0][3] + sp[76] * PI2[0][0][3] + sp[77] * PI3[0][0][3] + sp[78] * PI4[0][0][3] + sp[78] * PI4[0][3][0] + sp[79] * PI5[0][0][3];
    A[6] = sp[75] * PI1[0][0][4] + sp[76] * PI2[0][0][4] + sp[77] * PI3[0][0][4] + sp[78] * PI4[0][0][4] + sp[78] * PI4[0][4][0] + sp[79] * PI5[0][0][4];
    A[7] = sp[74] * PI0[0][0][2] + sp[76] * PI2[0][0][5] + sp[75] * PI1[0][2][0] + sp[78] * PI4[0][0][5] + sp[76] * PI2[0][2][0] + sp[79] * PI5[0][0][5];
    A[8] = sp[74] * PI0[0][0][3] + sp[76] * PI2[0][0][6] + sp[75] * PI1[0][3][0] + sp[78] * PI4[0][0][6] + sp[76] * PI2[0][3][0] + sp[79] * PI5[0][0][6];
    A[9] = sp[74] * PI0[0][0][4] + sp[76] * PI2[0][0][7] + sp[75] * PI1[0][4][0] + sp[78] * PI4[0][0][7] + sp[76] * PI2[0][4][0] + sp[79] * PI5[0][0][7];
    A[10] = sp[74] * PI0[0][0][5] + sp[75] * PI1[0][0][5] + sp[75] * PI1[0][5][0] + sp[77] * PI3[0][0][5] + sp[76] * PI2[0][5][0] + sp[78] * PI4[0][5][0];
    A[11] = sp[74] * PI0[0][0][6] + sp[75] * PI1[0][0][6] + sp[75] * PI1[0][6][0] + sp[77] * PI3[0][0][6] + sp[76] * PI2[0][6][0] + sp[78] * PI4[0][6][0];
    A[12] = sp[74] * PI0[0][0][7] + sp[75] * PI1[0][0][7] + sp[75] * PI1[0][7][0] + sp[77] * PI3[0][0][7] + sp[76] * PI2[0][7][0] + sp[78] * PI4[0][7][0];
    A[13] = sp[74] * PI0[0][0][8] + sp[75] * PI1[0][0][8] + sp[76] * PI2[0][0][8] + sp[75] * PI1[0][8][0] + sp[77] * PI3[0][0][8] + sp[78] * PI4[0][0][8] + sp[76] * PI2[0][8][0] + sp[78] * PI4[0][8][0] + sp[79] * PI5[0][0][8];
    A[14] = sp[74] * PI0[0][0][9] + sp[75] * PI1[0][0][9] + sp[76] * PI2[0][0][9] + sp[75] * PI1[0][9][0] + sp[77] * PI3[0][0][9] + sp[78] * PI4[0][0][9] + sp[76] * PI2[0][9][0] + sp[78] * PI4[0][9][0] + sp[79] * PI5[0][0][9];
    A[15] = sp[74] * PI0[0][0][10] + sp[75] * PI1[0][0][10] + sp[76] * PI2[0][0][10] + sp[75] * PI1[0][10][0] + sp[77] * PI3[0][0][10] + sp[78] * PI4[0][0][10] + sp[76] * PI2[0][10][0] + sp[78] * PI4[0][10][0] + sp[79] * PI5[0][0][10];
    A[16] = sp[74] * PI0[0][0][11] + sp[75] * PI1[0][0][11] + sp[76] * PI2[0][0][11] + sp[75] * PI1[0][11][0] + sp[77] * PI3[0][0][11] + sp[78] * PI4[0][0][11] + sp[76] * PI2[0][11][0] + sp[78] * PI4[0][11][0] + sp[79] * PI5[0][0][11];
    A[17] = sp[74] * PI0[0][0][12] + sp[75] * PI1[0][0][12] + sp[76] * PI2[0][0][12] + sp[75] * PI1[0][12][0] + sp[77] * PI3[0][0][12] + sp[78] * PI4[0][0][12] + sp[76] * PI2[0][12][0] + sp[78] * PI4[0][12][0] + sp[79] * PI5[0][0][12];
    A[18] = sp[74] * PI0[0][0][13] + sp[75] * PI1[0][0][13] + sp[76] * PI2[0][0][13] + sp[75] * PI1[0][13][0] + sp[77] * PI3[0][0][13] + sp[78] * PI4[0][0][13] + sp[76] * PI2[0][13][0] + sp[78] * PI4[0][13][0] + sp[79] * PI5[0][0][13];
    A[19] = sp[74] * PI0[0][0][14] + sp[75] * PI1[0][0][14] + sp[76] * PI2[0][0][14] + sp[75] * PI1[0][14][0] + sp[77] * PI3[0][0][14] + sp[78] * PI4[0][0][14] + sp[76] * PI2[0][14][0] + sp[78] * PI4[0][14][0] + sp[79] * PI5[0][0][14];
    A[20] = sp[74] * PI0[0][0][15] + sp[75] * PI1[0][0][15] + sp[76] * PI2[0][0][15] + sp[75] * PI1[0][15][0] + sp[77] * PI3[0][0][15] + sp[78] * PI4[0][0][15] + sp[76] * PI2[0][15][0] + sp[78] * PI4[0][15][0] + sp[79] * PI5[0][0][15];
    A[21] = sp[74] * PI0[0][0][16] + sp[75] * PI1[0][0][16] + sp[76] * PI2[0][0][16] + sp[75] * PI1[0][16][0] + sp[77] * PI3[0][0][16] + sp[78] * PI4[0][0][16] + sp[76] * PI2[0][16][0] + sp[78] * PI4[0][16][0] + sp[79] * PI5[0][0][16];
    A[22] = sp[74] * PI0[0][0][17] + sp[75] * PI1[0][0][17] + sp[76] * PI2[0][0][17] + sp[75] * PI1[0][17][0] + sp[77] * PI3[0][0][17] + sp[78] * PI4[0][0][17] + sp[76] * PI2[0][17][0] + sp[78] * PI4[0][17][0] + sp[79] * PI5[0][0][17];
    A[23] = sp[74] * PI0[0][0][18] + sp[75] * PI1[0][0][18] + sp[76] * PI2[0][0][18] + sp[75] * PI1[0][18][0] + sp[77] * PI3[0][0][18] + sp[78] * PI4[0][0][18] + sp[76] * PI2[0][18][0] + sp[78] * PI4[0][18][0] + sp[79] * PI5[0][0][18];
    A[24] = sp[74] * PI0[0][0][19] + sp[75] * PI1[0][0][19] + sp[76] * PI2[0][0][19] + sp[75] * PI1[0][19][0] + sp[77] * PI3[0][0][19] + sp[78] * PI4[0][0][19] + sp[76] * PI2[0][19][0] + sp[78] * PI4[0][19][0] + sp[79] * PI5[0][0][19];
    A[25] = sp[74] * PI0[0][0][20] + sp[75] * PI1[0][0][20] + sp[76] * PI2[0][0][20] + sp[75] * PI1[0][20][0] + sp[77] * PI3[0][0][20] + sp[78] * PI4[0][0][20] + sp[76] * PI2[0][20][0] + sp[78] * PI4[0][20][0] + sp[79] * PI5[0][0][20];
    A[26] = sp[74] * PI0[0][0][21] + sp[75] * PI1[0][0][21] + sp[76] * PI2[0][0][21] + sp[75] * PI1[0][21][0] + sp[77] * PI3[0][0][21] + sp[78] * PI4[0][0][21] + sp[76] * PI2[0][21][0] + sp[78] * PI4[0][21][0] + sp[79] * PI5[0][0][21];
    A[27] = sp[74] * PI0[0][0][22] + sp[75] * PI1[0][0][22] + sp[76] * PI2[0][0][22] + sp[75] * PI1[0][22][0] + sp[77] * PI3[0][0][22] + sp[78] * PI4[0][0][22] + sp[76] * PI2[0][22][0] + sp[78] * PI4[0][22][0] + sp[79] * PI5[0][0][22];
    A[28] = sp[74] * PI0[0][0][23] + sp[75] * PI1[0][0][23] + sp[76] * PI2[0][0][23] + sp[75] * PI1[0][23][0] + sp[77] * PI3[0][0][23] + sp[78] * PI4[0][0][23] + sp[76] * PI2[0][23][0] + sp[78] * PI4[0][23][0] + sp[79] * PI5[0][0][23];
    A[29] = sp[74] * PI0[0][0][24] + sp[75] * PI1[0][0][24] + sp[76] * PI2[0][0][24] + sp[75] * PI1[0][24][0] + sp[77] * PI3[0][0][24] + sp[78] * PI4[0][0][24] + sp[76] * PI2[0][24][0] + sp[78] * PI4[0][24][0] + sp[79] * PI5[0][0][24];
    A[30] = sp[74] * PI0[0][0][25] + sp[75] * PI1[0][0][25] + sp[76] * PI2[0][0][25] + sp[75] * PI1[0][25][0] + sp[77] * PI3[0][0][25] + sp[78] * PI4[0][0][25] + sp[76] * PI2[0][25][0] + sp[78] * PI4[0][25][0] + sp[79] * PI5[0][0][25];
    A[31] = sp[74] * PI0[0][0][26] + sp[75] * PI1[0][0][26] + sp[76] * PI2[0][0][26] + sp[75] * PI1[0][26][0] + sp[77] * PI3[0][0][26] + sp[78] * PI4[0][0][26] + sp[76] * PI2[0][26][0] + sp[78] * PI4[0][26][0] + sp[79] * PI5[0][0][26];
    A[32] = sp[74] * PI0[0][0][27] + sp[75] * PI1[0][0][27] + sp[76] * PI2[0][0][27] + sp[75] * PI1[0][27][0] + sp[77] * PI3[0][0][27] + sp[78] * PI4[0][0][27] + sp[76] * PI2[0][27][0] + sp[78] * PI4[0][27][0] + sp[79] * PI5[0][0][27];
    A[33] = sp[74] * PI0[0][0][28] + sp[75] * PI1[0][0][28] + sp[76] * PI2[0][0][28] + sp[75] * PI1[0][28][0] + sp[77] * PI3[0][0][28] + sp[78] * PI4[0][0][28] + sp[76] * PI2[0][28][0] + sp[78] * PI4[0][28][0] + sp[79] * PI5[0][0][28];
    A[34] = sp[74] * PI0[0][0][29] + sp[75] * PI1[0][0][29] + sp[76] * PI2[0][0][29] + sp[75] * PI1[0][29][0] + sp[77] * PI3[0][0][29] + sp[78] * PI4[0][0][29] + sp[76] * PI2[0][29][0] + sp[78] * PI4[0][29][0] + sp[79] * PI5[0][0][29];
    A[35] = sp[74] * PI0[0][1][0] + sp[75] * PI1[0][1][0] + sp[76] * PI2[0][1][0];
    A[36] = sp[74] * PI0[0][1][1];
    A[37] = sp[75] * PI1[0][1][1];
    A[38] = sp[76] * PI2[0][1][1];
    A[39] = sp[75] * PI1[0][1][2] + sp[76] * PI2[0][1][2];
    A[40] = sp[75] * PI1[0][1][3] + sp[76] * PI2[0][1][3];
    A[41] = sp[75] * PI1[0][1][4] + sp[76] * PI2[0][1][4];
    A[42] = sp[74] * PI0[0][1][2] + sp[76] * PI2[0][1][5];
    A[43] = sp[74] * PI0[0][1][3] + sp[76] * PI2[0][1][6];
    A[44] = sp[74] * PI0[0][1][4] + sp[76] * PI2[0][1][7];
    A[45] = sp[74] * PI0[0][1][5] + sp[75] * PI1[0][1][5];
    A[46] = sp[74] * PI0[0][1][6] + sp[75] * PI1[0][1][6];
    A[47] = sp[74] * PI0[0][1][7] + sp[75] * PI1[0][1][7];
    A[48] = sp[74] * PI0[0][1][8] + sp[75] * PI1[0][1][8] + sp[76] * PI2[0][1][8];
    A[49] = sp[74] * PI0[0][1][9] + sp[75] * PI1[0][1][9] + sp[76] * PI2[0][1][9];
    A[50] = sp[74] * PI0[0][1][10] + sp[75] * PI1[0][1][10] + sp[76] * PI2[0][1][10];
    A[51] = sp[74] * PI0[0][1][11] + sp[75] * PI1[0][1][11] + sp[76] * PI2[0][1][11];
    A[52] = sp[74] * PI0[0][1][12] + sp[75] * PI1[0][1][12] + sp[76] * PI2[0][1][12];
    A[53] = sp[74] * PI0[0][1][13] + sp[75] * PI1[0][1][13] + sp[76] * PI2[0][1][13];
    A[54] = sp[74] * PI0[0][1][14] + sp[75] * PI1[0][1][14] + sp[76] * PI2[0][1][14];
    A[55] = sp[74] * PI0[0][1][15] + sp[75] * PI1[0][1][15] + sp[76] * PI2[0][1][15];
    A[56] = sp[74] * PI0[0][1][16] + sp[75] * PI1[0][1][16] + sp[76] * PI2[0][1][16];
    A[57] = sp[74] * PI0[0][1][17] + sp[75] * PI1[0][1][17] + sp[76] * PI2[0][1][17];
    A[58] = sp[74] * PI0[0][1][18] + sp[75] * PI1[0][1][18] + sp[76] * PI2[0][1][18];
    A[59] = sp[74] * PI0[0][1][19] + sp[75] * PI1[0][1][19] + sp[76] * PI2[0][1][19];
    A[60] = sp[74] * PI0[0][1][20] + sp[75] * PI1[0][1][20] + sp[76] * PI2[0][1][20];
    A[61] = sp[74] * PI0[0][1][21] + sp[75] * PI1[0][1][21] + sp[76] * PI2[0][1][21];
    A[62] = sp[74] * PI0[0][1][22] + sp[75] * PI1[0][1][22] + sp[76] * PI2[0][1][22];
    A[63] = sp[74] * PI0[0][1][23] + sp[75] * PI1[0][1][23] + sp[76] * PI2[0][1][23];
    A[64] = sp[74] * PI0[0][1][24] + sp[75] * PI1[0][1][24] + sp[76] * PI2[0][1][24];
    A[65] = sp[74] * PI0[0][1][25] + sp[75] * PI1[0][1][25] + sp[76] * PI2[0][1][25];
    A[66] = sp[74] * PI0[0][1][26] + sp[75] * PI1[0][1][26] + sp[76] * PI2[0][1][26];
    A[67] = sp[74] * PI0[0][1][27] + sp[75] * PI1[0][1][27] + sp[76] * PI2[0][1][27];
    A[68] = sp[74] * PI0[0][1][28] + sp[75] * PI1[0][1][28] + sp[76] * PI2[0][1][28];
    A[69] = sp[74] * PI0[0][1][29] + sp[75] * PI1[0][1][29] + sp[76] * PI2[0][1][29];
    A[70] = sp[75] * PI1[0][0][1] + sp[77] * PI3[0][1][0] + sp[78] * PI4[0][1][0];
    A[71] = sp[75] * PI1[0][1][1];
    A[72] = sp[77] * PI3[0][1][1];
    A[73] = sp[78] * PI4[0][1][1];
    A[74] = sp[77] * PI3[0][1][2] + sp[78] * PI4[0][1][2];
    A[75] = sp[77] * PI3[0][1][3] + sp[78] * PI4[0][1][3];
    A[76] = sp[77] * PI3[0][1][4] + sp[78] * PI4[0][1][4];
    A[77] = sp[75] * PI1[0][2][1] + sp[78] * PI4[0][1][5];
    A[78] = sp[75] * PI1[0][3][1] + sp[78] * PI4[0][1][6];
    A[79] = sp[75] * PI1[0][4][1] + sp[78] * PI4[0][1][7];
    A[80] = sp[75] * PI1[0][5][1] + sp[77] * PI3[0][1][5];
    A[81] = sp[75] * PI1[0][6][1] + sp[77] * PI3[0][1][6];
    A[82] = sp[75] * PI1[0][7][1] + sp[77] * PI3[0][1][7];
    A[83] = sp[75] * PI1[0][8][1] + sp[77] * PI3[0][1][8] + sp[78] * PI4[0][1][8];
    A[84] = sp[75] * PI1[0][9][1] + sp[77] * PI3[0][1][9] + sp[78] * PI4[0][1][9];
    A[85] = sp[75] * PI1[0][10][1] + sp[77] * PI3[0][1][10] + sp[78] * PI4[0][1][10];
    A[86] = sp[75] * PI1[0][11][1] + sp[77] * PI3[0][1][11] + sp[78] * PI4[0][1][11];
    A[87] = sp[75] * PI1[0][12][1] + sp[77] * PI3[0][1][12] + sp[78] * PI4[0][1][12];
    A[88] = sp[75] * PI1[0][13][1] + sp[77] * PI3[0][1][13] + sp[78] * PI4[0][1][13];
    A[89] = sp[75] * PI1[0][14][1] + sp[77] * PI3[0][1][14] + sp[78] * PI4[0][1][14];
    A[90] = sp[75] * PI1[0][15][1] + sp[77] * PI3[0][1][15] + sp[78] * PI4[0][1][15];
    A[91] = sp[75] * PI1[0][16][1] + sp[77] * PI3[0][1][16] + sp[78] * PI4[0][1][16];
    A[92] = sp[75] * PI1[0][17][1] + sp[77] * PI3[0][1][17] + sp[78] * PI4[0][1][17];
    A[93] = sp[75] * PI1[0][18][1] + sp[77] * PI3[0][1][18] + sp[78] * PI4[0][1][18];
    A[94] = sp[75] * PI1[0][19][1] + sp[77] * PI3[0][1][19] + sp[78] * PI4[0][1][19];
    A[95] = sp[75] * PI1[0][20][1] + sp[77] * PI3[0][1][20] + sp[78] * PI4[0][1][20];
    A[96] = sp[75] * PI1[0][21][1] + sp[77] * PI3[0][1][21] + sp[78] * PI4[0][1][21];
    A[97] = sp[75] * PI1[0][22][1] + sp[77] * PI3[0][1][22] + sp[78] * PI4[0][1][22];
    A[98] = sp[75] * PI1[0][23][1] + sp[77] * PI3[0][1][23] + sp[78] * PI4[0][1][23];
    A[99] = sp[75] * PI1[0][24][1] + sp[77] * PI3[0][1][24] + sp[78] * PI4[0][1][24];
    A[100] = sp[75] * PI1[0][25][1] + sp[77] * PI3[0][1][25] + sp[78] * PI4[0][1][25];
    A[101] = sp[75] * PI1[0][26][1] + sp[77] * PI3[0][1][26] + sp[78] * PI4[0][1][26];
    A[102] = sp[75] * PI1[0][27][1] + sp[77] * PI3[0][1][27] + sp[78] * PI4[0][1][27];
    A[103] = sp[75] * PI1[0][28][1] + sp[77] * PI3[0][1][28] + sp[78] * PI4[0][1][28];
    A[104] = sp[75] * PI1[0][29][1] + sp[77] * PI3[0][1][29] + sp[78] * PI4[0][1][29];
    A[105] = sp[76] * PI2[0][0][1] + sp[78] * PI4[0][0][1] + sp[79] * PI5[0][1][0];
    A[106] = sp[76] * PI2[0][1][1];
    A[107] = sp[78] * PI4[0][1][1];
    A[108] = sp[79] * PI5[0][1][1];
    A[109] = sp[78] * PI4[0][2][1] + sp[79] * PI5[0][1][2];
    A[110] = sp[78] * PI4[0][3][1] + sp[79] * PI5[0][1][3];
    A[111] = sp[78] * PI4[0][4][1] + sp[79] * PI5[0][1][4];
    A[112] = sp[76] * PI2[0][2][1] + sp[79] * PI5[0][1][5];
    A[113] = sp[76] * PI2[0][3][1] + sp[79] * PI5[0][1][6];
    A[114] = sp[76] * PI2[0][4][1] + sp[79] * PI5[0][1][7];
    A[115] = sp[76] * PI2[0][5][1] + sp[78] * PI4[0][5][1];
    A[116] = sp[76] * PI2[0][6][1] + sp[78] * PI4[0][6][1];
    A[117] = sp[76] * PI2[0][7][1] + sp[78] * PI4[0][7][1];
    A[118] = sp[76] * PI2[0][8][1] + sp[78] * PI4[0][8][1] + sp[79] * PI5[0][1][8];
    A[119] = sp[76] * PI2[0][9][1] + sp[78] * PI4[0][9][1] + sp[79] * PI5[0][1][9];
    A[120] = sp[76] * PI2[0][10][1] + sp[78] * PI4[0][10][1] + sp[79] * PI5[0][1][10];
    A[121] = sp[76] * PI2[0][11][1] + sp[78] * PI4[0][11][1] + sp[79] * PI5[0][1][11];
    A[122] = sp[76] * PI2[0][12][1] + sp[78] * PI4[0][12][1] + sp[79] * PI5[0][1][12];
    A[123] = sp[76] * PI2[0][13][1] + sp[78] * PI4[0][13][1] + sp[79] * PI5[0][1][13];
    A[124] = sp[76] * PI2[0][14][1] + sp[78] * PI4[0][14][1] + sp[79] * PI5[0][1][14];
    A[125] = sp[76] * PI2[0][15][1] + sp[78] * PI4[0][15][1] + sp[79] * PI5[0][1][15];
    A[126] = sp[76] * PI2[0][16][1] + sp[78] * PI4[0][16][1] + sp[79] * PI5[0][1][16];
    A[127] = sp[76] * PI2[0][17][1] + sp[78] * PI4[0][17][1] + sp[79] * PI5[0][1][17];
    A[128] = sp[76] * PI2[0][18][1] + sp[78] * PI4[0][18][1] + sp[79] * PI5[0][1][18];
    A[129] = sp[76] * PI2[0][19][1] + sp[78] * PI4[0][19][1] + sp[79] * PI5[0][1][19];
    A[130] = sp[76] * PI2[0][20][1] + sp[78] * PI4[0][20][1] + sp[79] * PI5[0][1][20];
    A[131] = sp[76] * PI2[0][21][1] + sp[78] * PI4[0][21][1] + sp[79] * PI5[0][1][21];
    A[132] = sp[76] * PI2[0][22][1] + sp[78] * PI4[0][22][1] + sp[79] * PI5[0][1][22];
    A[133] = sp[76] * PI2[0][23][1] + sp[78] * PI4[0][23][1] + sp[79] * PI5[0][1][23];
    A[134] = sp[76] * PI2[0][24][1] + sp[78] * PI4[0][24][1] + sp[79] * PI5[0][1][24];
    A[135] = sp[76] * PI2[0][25][1] + sp[78] * PI4[0][25][1] + sp[79] * PI5[0][1][25];
    A[136] = sp[76] * PI2[0][26][1] + sp[78] * PI4[0][26][1] + sp[79] * PI5[0][1][26];
    A[137] = sp[76] * PI2[0][27][1] + sp[78] * PI4[0][27][1] + sp[79] * PI5[0][1][27];
    A[138] = sp[76] * PI2[0][28][1] + sp[78] * PI4[0][28][1] + sp[79] * PI5[0][1][28];
    A[139] = sp[76] * PI2[0][29][1] + sp[78] * PI4[0][29][1] + sp[79] * PI5[0][1][29];
    A[140] = sp[75] * PI1[0][0][2] + sp[77] * PI3[0][2][0] + sp[78] * PI4[0][2][0] + sp[76] * PI2[0][0][2] + sp[78] * PI4[0][0][2] + sp[79] * PI5[0][2][0];
    A[141] = sp[75] * PI1[0][1][2] + sp[76] * PI2[0][1][2];
    A[142] = sp[77] * PI3[0][2][1] + sp[78] * PI4[0][1][2];
    A[143] = sp[78] * PI4[0][2][1] + sp[79] * PI5[0][2][1];
    A[144] = sp[77] * PI3[0][2][2] + sp[78] * PI4[0][2][2] + sp[78] * PI4[0][2][2] + sp[79] * PI5[0][2][2];
    A[145] = sp[77] * PI3[0][2][3] + sp[78] * PI4[0][2][3] + sp[78] * PI4[0][3][2] + sp[79] * PI5[0][2][3];
    A[146] = sp[77] * PI3[0][2][4] + sp[78] * PI4[0][2][4] + sp[78] * PI4[0][4][2] + sp[79] * PI5[0][2][4];
    A[147] = sp[75] * PI1[0][2][2] + sp[78] * PI4[0][2][5] + sp[76] * PI2[0][2][2] + sp[79] * PI5[0][2][5];
    A[148] = sp[75] * PI1[0][3][2] + sp[78] * PI4[0][2][6] + sp[76] * PI2[0][3][2] + sp[79] * PI5[0][2][6];
    A[149] = sp[75] * PI1[0][4][2] + sp[78] * PI4[0][2][7] + sp[76] * PI2[0][4][2] + sp[79] * PI5[0][2][7];
    A[150] = sp[75] * PI1[0][5][2] + sp[77] * PI3[0][2][5] + sp[76] * PI2[0][5][2] + sp[78] * PI4[0][5][2];
    A[151] = sp[75] * PI1[0][6][2] + sp[77] * PI3[0][2][6] + sp[76] * PI2[0][6][2] + sp[78] * PI4[0][6][2];
    A[152] = sp[75] * PI1[0][7][2] + sp[77] * PI3[0][2][7] + sp[76] * PI2[0][7][2] + sp[78] * PI4[0][7][2];
    A[153] = sp[75] * PI1[0][8][2] + sp[77] * PI3[0][2][8] + sp[78] * PI4[0][2][8] + sp[76] * PI2[0][8][2] + sp[78] * PI4[0][8][2] + sp[79] * PI5[0][2][8];
    A[154] = sp[75] * PI1[0][9][2] + sp[77] * PI3[0][2][9] + sp[78] * PI4[0][2][9] + sp[76] * PI2[0][9][2] + sp[78] * PI4[0][9][2] + sp[79] * PI5[0][2][9];
    A[155] = sp[75] * PI1[0][10][2] + sp[77] * PI3[0][2][10] + sp[78] * PI4[0][2][10] + sp[76] * PI2[0][10][2] + sp[78] * PI4[0][10][2] + sp[79] * PI5[0][2][10];
    A[156] = sp[75] * PI1[0][11][2] + sp[77] * PI3[0][2][11] + sp[78] * PI4[0][2][11] + sp[76] * PI2[0][11][2] + sp[78] * PI4[0][11][2] + sp[79] * PI5[0][2][11];
    A[157] = sp[75] * PI1[0][12][2] + sp[77] * PI3[0][2][12] + sp[78] * PI4[0][2][12] + sp[76] * PI2[0][12][2] + sp[78] * PI4[0][12][2] + sp[79] * PI5[0][2][12];
    A[158] = sp[75] * PI1[0][13][2] + sp[77] * PI3[0][2][13] + sp[78] * PI4[0][2][13] + sp[76] * PI2[0][13][2] + sp[78] * PI4[0][13][2] + sp[79] * PI5[0][2][13];
    A[159] = sp[75] * PI1[0][14][2] + sp[77] * PI3[0][2][14] + sp[78] * PI4[0][2][14] + sp[76] * PI2[0][14][2] + sp[78] * PI4[0][14][2] + sp[79] * PI5[0][2][14];
    A[160] = sp[75] * PI1[0][15][2] + sp[77] * PI3[0][2][15] + sp[78] * PI4[0][2][15] + sp[76] * PI2[0][15][2] + sp[78] * PI4[0][15][2] + sp[79] * PI5[0][2][15];
    A[161] = sp[75] * PI1[0][16][2] + sp[77] * PI3[0][2][16] + sp[78] * PI4[0][2][16] + sp[76] * PI2[0][16][2] + sp[78] * PI4[0][16][2] + sp[79] * PI5[0][2][16];
    A[162] = sp[75] * PI1[0][17][2] + sp[77] * PI3[0][2][17] + sp[78] * PI4[0][2][17] + sp[76] * PI2[0][17][2] + sp[78] * PI4[0][17][2] + sp[79] * PI5[0][2][17];
    A[163] = sp[75] * PI1[0][18][2] + sp[77] * PI3[0][2][18] + sp[78] * PI4[0][2][18] + sp[76] * PI2[0][18][2] + sp[78] * PI4[0][18][2] + sp[79] * PI5[0][2][18];
    A[164] = sp[75] * PI1[0][19][2] + sp[77] * PI3[0][2][19] + sp[78] * PI4[0][2][19] + sp[76] * PI2[0][19][2] + sp[78] * PI4[0][19][2] + sp[79] * PI5[0][2][19];
    A[165] = sp[75] * PI1[0][20][2] + sp[77] * PI3[0][2][20] + sp[78] * PI4[0][2][20] + sp[76] * PI2[0][20][2] + sp[78] * PI4[0][20][2] + sp[79] * PI5[0][2][20];
    A[166] = sp[75] * PI1[0][21][2] + sp[77] * PI3[0][2][21] + sp[78] * PI4[0][2][21] + sp[76] * PI2[0][21][2] + sp[78] * PI4[0][21][2] + sp[79] * PI5[0][2][21];
    A[167] = sp[75] * PI1[0][22][2] + sp[77] * PI3[0][2][22] + sp[78] * PI4[0][2][22] + sp[76] * PI2[0][22][2] + sp[78] * PI4[0][22][2] + sp[79] * PI5[0][2][22];
    A[168] = sp[75] * PI1[0][23][2] + sp[77] * PI3[0][2][23] + sp[78] * PI4[0][2][23] + sp[76] * PI2[0][23][2] + sp[78] * PI4[0][23][2] + sp[79] * PI5[0][2][23];
    A[169] = sp[75] * PI1[0][24][2] + sp[77] * PI3[0][2][24] + sp[78] * PI4[0][2][24] + sp[76] * PI2[0][24][2] + sp[78] * PI4[0][24][2] + sp[79] * PI5[0][2][24];
    A[170] = sp[75] * PI1[0][25][2] + sp[77] * PI3[0][2][25] + sp[78] * PI4[0][2][25] + sp[76] * PI2[0][25][2] + sp[78] * PI4[0][25][2] + sp[79] * PI5[0][2][25];
    A[171] = sp[75] * PI1[0][26][2] + sp[77] * PI3[0][2][26] + sp[78] * PI4[0][2][26] + sp[76] * PI2[0][26][2] + sp[78] * PI4[0][26][2] + sp[79] * PI5[0][2][26];
    A[172] = sp[75] * PI1[0][27][2] + sp[77] * PI3[0][2][27] + sp[78] * PI4[0][2][27] + sp[76] * PI2[0][27][2] + sp[78] * PI4[0][27][2] + sp[79] * PI5[0][2][27];
    A[173] = sp[75] * PI1[0][28][2] + sp[77] * PI3[0][2][28] + sp[78] * PI4[0][2][28] + sp[76] * PI2[0][28][2] + sp[78] * PI4[0][28][2] + sp[79] * PI5[0][2][28];
    A[174] = sp[75] * PI1[0][29][2] + sp[77] * PI3[0][2][29] + sp[78] * PI4[0][2][29] + sp[76] * PI2[0][29][2] + sp[78] * PI4[0][29][2] + sp[79] * PI5[0][2][29];
    A[175] = sp[75] * PI1[0][0][3] + sp[77] * PI3[0][3][0] + sp[78] * PI4[0][3][0] + sp[76] * PI2[0][0][3] + sp[78] * PI4[0][0][3] + sp[79] * PI5[0][3][0];
    A[176] = sp[75] * PI1[0][1][3] + sp[76] * PI2[0][1][3];
    A[177] = sp[77] * PI3[0][3][1] + sp[78] * PI4[0][1][3];
    A[178] = sp[78] * PI4[0][3][1] + sp[79] * PI5[0][3][1];
    A[179] = sp[77] * PI3[0][3][2] + sp[78] * PI4[0][3][2] + sp[78] * PI4[0][2][3] + sp[79] * PI5[0][3][2];
    A[180] = sp[77] * PI3[0][3][3] + sp[78] * PI4[0][3][3] + sp[78] * PI4[0][3][3] + sp[79] * PI5[0][3][3];
    A[181] = sp[77] * PI3[0][3][4] + sp[78] * PI4[0][3][4] + sp[78] * PI4[0][4][3] + sp[79] * PI5[0][3][4];
    A[182] = sp[75] * PI1[0][2][3] + sp[78] * PI4[0][3][5] + sp[76] * PI2[0][2][3] + sp[79] * PI5[0][3][5];
    A[183] = sp[75] * PI1[0][3][3] + sp[78] * PI4[0][3][6] + sp[76] * PI2[0][3][3] + sp[79] * PI5[0][3][6];
    A[184] = sp[75] * PI1[0][4][3] + sp[78] * PI4[0][3][7] + sp[76] * PI2[0][4][3] + sp[79] * PI5[0][3][7];
    A[185] = sp[75] * PI1[0][5][3] + sp[77] * PI3[0][3][5] + sp[76] * PI2[0][5][3] + sp[78] * PI4[0][5][3];
    A[186] = sp[75] * PI1[0][6][3] + sp[77] * PI3[0][3][6] + sp[76] * PI2[0][6][3] + sp[78] * PI4[0][6][3];
    A[187] = sp[75] * PI1[0][7][3] + sp[77] * PI3[0][3][7] + sp[76] * PI2[0][7][3] + sp[78] * PI4[0][7][3];
    A[188] = sp[75] * PI1[0][8][3] + sp[77] * PI3[0][3][8] + sp[78] * PI4[0][3][8] + sp[76] * PI2[0][8][3] + sp[78] * PI4[0][8][3] + sp[79] * PI5[0][3][8];
    A[189] = sp[75] * PI1[0][9][3] + sp[77] * PI3[0][3][9] + sp[78] * PI4[0][3][9] + sp[76] * PI2[0][9][3] + sp[78] * PI4[0][9][3] + sp[79] * PI5[0][3][9];
    A[190] = sp[75] * PI1[0][10][3] + sp[77] * PI3[0][3][10] + sp[78] * PI4[0][3][10] + sp[76] * PI2[0][10][3] + sp[78] * PI4[0][10][3] + sp[79] * PI5[0][3][10];
    A[191] = sp[75] * PI1[0][11][3] + sp[77] * PI3[0][3][11] + sp[78] * PI4[0][3][11] + sp[76] * PI2[0][11][3] + sp[78] * PI4[0][11][3] + sp[79] * PI5[0][3][11];
    A[192] = sp[75] * PI1[0][12][3] + sp[77] * PI3[0][3][12] + sp[78] * PI4[0][3][12] + sp[76] * PI2[0][12][3] + sp[78] * PI4[0][12][3] + sp[79] * PI5[0][3][12];
    A[193] = sp[75] * PI1[0][13][3] + sp[77] * PI3[0][3][13] + sp[78] * PI4[0][3][13] + sp[76] * PI2[0][13][3] + sp[78] * PI4[0][13][3] + sp[79] * PI5[0][3][13];
    A[194] = sp[75] * PI1[0][14][3] + sp[77] * PI3[0][3][14] + sp[78] * PI4[0][3][14] + sp[76] * PI2[0][14][3] + sp[78] * PI4[0][14][3] + sp[79] * PI5[0][3][14];
    A[195] = sp[75] * PI1[0][15][3] + sp[77] * PI3[0][3][15] + sp[78] * PI4[0][3][15] + sp[76] * PI2[0][15][3] + sp[78] * PI4[0][15][3] + sp[79] * PI5[0][3][15];
    A[196] = sp[75] * PI1[0][16][3] + sp[77] * PI3[0][3][16] + sp[78] * PI4[0][3][16] + sp[76] * PI2[0][16][3] + sp[78] * PI4[0][16][3] + sp[79] * PI5[0][3][16];
    A[197] = sp[75] * PI1[0][17][3] + sp[77] * PI3[0][3][17] + sp[78] * PI4[0][3][17] + sp[76] * PI2[0][17][3] + sp[78] * PI4[0][17][3] + sp[79] * PI5[0][3][17];
    A[198] = sp[75] * PI1[0][18][3] + sp[77] * PI3[0][3][18] + sp[78] * PI4[0][3][18] + sp[76] * PI2[0][18][3] + sp[78] * PI4[0][18][3] + sp[79] * PI5[0][3][18];
    A[199] = sp[75] * PI1[0][19][3] + sp[77] * PI3[0][3][19] + sp[78] * PI4[0][3][19] + sp[76] * PI2[0][19][3] + sp[78] * PI4[0][19][3] + sp[79] * PI5[0][3][19];
    A[200] = sp[75] * PI1[0][20][3] + sp[77] * PI3[0][3][20] + sp[78] * PI4[0][3][20] + sp[76] * PI2[0][20][3] + sp[78] * PI4[0][20][3] + sp[79] * PI5[0][3][20];
    A[201] = sp[75] * PI1[0][21][3] + sp[77] * PI3[0][3][21] + sp[78] * PI4[0][3][21] + sp[76] * PI2[0][21][3] + sp[78] * PI4[0][21][3] + sp[79] * PI5[0][3][21];
    A[202] = sp[75] * PI1[0][22][3] + sp[77] * PI3[0][3][22] + sp[78] * PI4[0][3][22] + sp[76] * PI2[0][22][3] + sp[78] * PI4[0][22][3] + sp[79] * PI5[0][3][22];
    A[203] = sp[75] * PI1[0][23][3] + sp[77] * PI3[0][3][23] + sp[78] * PI4[0][3][23] + sp[76] * PI2[0][23][3] + sp[78] * PI4[0][23][3] + sp[79] * PI5[0][3][23];
    A[204] = sp[75] * PI1[0][24][3] + sp[77] * PI3[0][3][24] + sp[78] * PI4[0][3][24] + sp[76] * PI2[0][24][3] + sp[78] * PI4[0][24][3] + sp[79] * PI5[0][3][24];
    A[205] = sp[75] * PI1[0][25][3] + sp[77] * PI3[0][3][25] + sp[78] * PI4[0][3][25] + sp[76] * PI2[0][25][3] + sp[78] * PI4[0][25][3] + sp[79] * PI5[0][3][25];
    A[206] = sp[75] * PI1[0][26][3] + sp[77] * PI3[0][3][26] + sp[78] * PI4[0][3][26] + sp[76] * PI2[0][26][3] + sp[78] * PI4[0][26][3] + sp[79] * PI5[0][3][26];
    A[207] = sp[75] * PI1[0][27][3] + sp[77] * PI3[0][3][27] + sp[78] * PI4[0][3][27] + sp[76] * PI2[0][27][3] + sp[78] * PI4[0][27][3] + sp[79] * PI5[0][3][27];
    A[208] = sp[75] * PI1[0][28][3] + sp[77] * PI3[0][3][28] + sp[78] * PI4[0][3][28] + sp[76] * PI2[0][28][3] + sp[78] * PI4[0][28][3] + sp[79] * PI5[0][3][28];
    A[209] = sp[75] * PI1[0][29][3] + sp[77] * PI3[0][3][29] + sp[78] * PI4[0][3][29] + sp[76] * PI2[0][29][3] + sp[78] * PI4[0][29][3] + sp[79] * PI5[0][3][29];
    A[210] = sp[75] * PI1[0][0][4] + sp[77] * PI3[0][4][0] + sp[78] * PI4[0][4][0] + sp[76] * PI2[0][0][4] + sp[78] * PI4[0][0][4] + sp[79] * PI5[0][4][0];
    A[211] = sp[75] * PI1[0][1][4] + sp[76] * PI2[0][1][4];
    A[212] = sp[77] * PI3[0][4][1] + sp[78] * PI4[0][1][4];
    A[213] = sp[78] * PI4[0][4][1] + sp[79] * PI5[0][4][1];
    A[214] = sp[77] * PI3[0][4][2] + sp[78] * PI4[0][4][2] + sp[78] * PI4[0][2][4] + sp[79] * PI5[0][4][2];
    A[215] = sp[77] * PI3[0][4][3] + sp[78] * PI4[0][4][3] + sp[78] * PI4[0][3][4] + sp[79] * PI5[0][4][3];
    A[216] = sp[77] * PI3[0][4][4] + sp[78] * PI4[0][4][4] + sp[78] * PI4[0][4][4] + sp[79] * PI5[0][4][4];
    A[217] = sp[75] * PI1[0][2][4] + sp[78] * PI4[0][4][5] + sp[76] * PI2[0][2][4] + sp[79] * PI5[0][4][5];
    A[218] = sp[75] * PI1[0][3][4] + sp[78] * PI4[0][4][6] + sp[76] * PI2[0][3][4] + sp[79] * PI5[0][4][6];
    A[219] = sp[75] * PI1[0][4][4] + sp[78] * PI4[0][4][7] + sp[76] * PI2[0][4][4] + sp[79] * PI5[0][4][7];
    A[220] = sp[75] * PI1[0][5][4] + sp[77] * PI3[0][4][5] + sp[76] * PI2[0][5][4] + sp[78] * PI4[0][5][4];
    A[221] = sp[75] * PI1[0][6][4] + sp[77] * PI3[0][4][6] + sp[76] * PI2[0][6][4] + sp[78] * PI4[0][6][4];
    A[222] = sp[75] * PI1[0][7][4] + sp[77] * PI3[0][4][7] + sp[76] * PI2[0][7][4] + sp[78] * PI4[0][7][4];
    A[223] = sp[75] * PI1[0][8][4] + sp[77] * PI3[0][4][8] + sp[78] * PI4[0][4][8] + sp[76] * PI2[0][8][4] + sp[78] * PI4[0][8][4] + sp[79] * PI5[0][4][8];
    A[224] = sp[75] * PI1[0][9][4] + sp[77] * PI3[0][4][9] + sp[78] * PI4[0][4][9] + sp[76] * PI2[0][9][4] + sp[78] * PI4[0][9][4] + sp[79] * PI5[0][4][9];
    A[225] = sp[75] * PI1[0][10][4] + sp[77] * PI3[0][4][10] + sp[78] * PI4[0][4][10] + sp[76] * PI2[0][10][4] + sp[78] * PI4[0][10][4] + sp[79] * PI5[0][4][10];
    A[226] = sp[75] * PI1[0][11][4] + sp[77] * PI3[0][4][11] + sp[78] * PI4[0][4][11] + sp[76] * PI2[0][11][4] + sp[78] * PI4[0][11][4] + sp[79] * PI5[0][4][11];
    A[227] = sp[75] * PI1[0][12][4] + sp[77] * PI3[0][4][12] + sp[78] * PI4[0][4][12] + sp[76] * PI2[0][12][4] + sp[78] * PI4[0][12][4] + sp[79] * PI5[0][4][12];
    A[228] = sp[75] * PI1[0][13][4] + sp[77] * PI3[0][4][13] + sp[78] * PI4[0][4][13] + sp[76] * PI2[0][13][4] + sp[78] * PI4[0][13][4] + sp[79] * PI5[0][4][13];
    A[229] = sp[75] * PI1[0][14][4] + sp[77] * PI3[0][4][14] + sp[78] * PI4[0][4][14] + sp[76] * PI2[0][14][4] + sp[78] * PI4[0][14][4] + sp[79] * PI5[0][4][14];
    A[230] = sp[75] * PI1[0][15][4] + sp[77] * PI3[0][4][15] + sp[78] * PI4[0][4][15] + sp[76] * PI2[0][15][4] + sp[78] * PI4[0][15][4] + sp[79] * PI5[0][4][15];
    A[231] = sp[75] * PI1[0][16][4] + sp[77] * PI3[0][4][16] + sp[78] * PI4[0][4][16] + sp[76] * PI2[0][16][4] + sp[78] * PI4[0][16][4] + sp[79] * PI5[0][4][16];
    A[232] = sp[75] * PI1[0][17][4] + sp[77] * PI3[0][4][17] + sp[78] * PI4[0][4][17] + sp[76] * PI2[0][17][4] + sp[78] * PI4[0][17][4] + sp[79] * PI5[0][4][17];
    A[233] = sp[75] * PI1[0][18][4] + sp[77] * PI3[0][4][18] + sp[78] * PI4[0][4][18] + sp[76] * PI2[0][18][4] + sp[78] * PI4[0][18][4] + sp[79] * PI5[0][4][18];
    A[234] = sp[75] * PI1[0][19][4] + sp[77] * PI3[0][4][19] + sp[78] * PI4[0][4][19] + sp[76] * PI2[0][19][4] + sp[78] * PI4[0][19][4] + sp[79] * PI5[0][4][19];
    A[235] = sp[75] * PI1[0][20][4] + sp[77] * PI3[0][4][20] + sp[78] * PI4[0][4][20] + sp[76] * PI2[0][20][4] + sp[78] * PI4[0][20][4] + sp[79] * PI5[0][4][20];
    A[236] = sp[75] * PI1[0][21][4] + sp[77] * PI3[0][4][21] + sp[78] * PI4[0][4][21] + sp[76] * PI2[0][21][4] + sp[78] * PI4[0][21][4] + sp[79] * PI5[0][4][21];
    A[237] = sp[75] * PI1[0][22][4] + sp[77] * PI3[0][4][22] + sp[78] * PI4[0][4][22] + sp[76] * PI2[0][22][4] + sp[78] * PI4[0][22][4] + sp[79] * PI5[0][4][22];
    A[238] = sp[75] * PI1[0][23][4] + sp[77] * PI3[0][4][23] + sp[78] * PI4[0][4][23] + sp[76] * PI2[0][23][4] + sp[78] * PI4[0][23][4] + sp[79] * PI5[0][4][23];
    A[239] = sp[75] * PI1[0][24][4] + sp[77] * PI3[0][4][24] + sp[78] * PI4[0][4][24] + sp[76] * PI2[0][24][4] + sp[78] * PI4[0][24][4] + sp[79] * PI5[0][4][24];
    A[240] = sp[75] * PI1[0][25][4] + sp[77] * PI3[0][4][25] + sp[78] * PI4[0][4][25] + sp[76] * PI2[0][25][4] + sp[78] * PI4[0][25][4] + sp[79] * PI5[0][4][25];
    A[241] = sp[75] * PI1[0][26][4] + sp[77] * PI3[0][4][26] + sp[78] * PI4[0][4][26] + sp[76] * PI2[0][26][4] + sp[78] * PI4[0][26][4] + sp[79] * PI5[0][4][26];
    A[242] = sp[75] * PI1[0][27][4] + sp[77] * PI3[0][4][27] + sp[78] * PI4[0][4][27] + sp[76] * PI2[0][27][4] + sp[78] * PI4[0][27][4] + sp[79] * PI5[0][4][27];
    A[243] = sp[75] * PI1[0][28][4] + sp[77] * PI3[0][4][28] + sp[78] * PI4[0][4][28] + sp[76] * PI2[0][28][4] + sp[78] * PI4[0][28][4] + sp[79] * PI5[0][4][28];
    A[244] = sp[75] * PI1[0][29][4] + sp[77] * PI3[0][4][29] + sp[78] * PI4[0][4][29] + sp[76] * PI2[0][29][4] + sp[78] * PI4[0][29][4] + sp[79] * PI5[0][4][29];
    A[245] = sp[74] * PI0[0][2][0] + sp[75] * PI1[0][2][0] + sp[76] * PI2[0][2][0] + sp[76] * PI2[0][0][5] + sp[78] * PI4[0][0][5] + sp[79] * PI5[0][5][0];
    A[246] = sp[74] * PI0[0][2][1] + sp[76] * PI2[0][1][5];
    A[247] = sp[75] * PI1[0][2][1] + sp[78] * PI4[0][1][5];
    A[248] = sp[76] * PI2[0][2][1] + sp[79] * PI5[0][5][1];
    A[249] = sp[75] * PI1[0][2][2] + sp[76] * PI2[0][2][2] + sp[78] * PI4[0][2][5] + sp[79] * PI5[0][5][2];
    A[250] = sp[75] * PI1[0][2][3] + sp[76] * PI2[0][2][3] + sp[78] * PI4[0][3][5] + sp[79] * PI5[0][5][3];
    A[251] = sp[75] * PI1[0][2][4] + sp[76] * PI2[0][2][4] + sp[78] * PI4[0][4][5] + sp[79] * PI5[0][5][4];
    A[252] = sp[74] * PI0[0][2][2] + sp[76] * PI2[0][2][5] + sp[76] * PI2[0][2][5] + sp[79] * PI5[0][5][5];
    A[253] = sp[74] * PI0[0][2][3] + sp[76] * PI2[0][2][6] + sp[76] * PI2[0][3][5] + sp[79] * PI5[0][5][6];
    A[254] = sp[74] * PI0[0][2][4] + sp[76] * PI2[0][2][7] + sp[76] * PI2[0][4][5] + sp[79] * PI5[0][5][7];
    A[255] = sp[74] * PI0[0][2][5] + sp[75] * PI1[0][2][5] + sp[76] * PI2[0][5][5] + sp[78] * PI4[0][5][5];
    A[256] = sp[74] * PI0[0][2][6] + sp[75] * PI1[0][2][6] + sp[76] * PI2[0][6][5] + sp[78] * PI4[0][6][5];
    A[257] = sp[74] * PI0[0][2][7] + sp[75] * PI1[0][2][7] + sp[76] * PI2[0][7][5] + sp[78] * PI4[0][7][5];
    A[258] = sp[74] * PI0[0][2][8] + sp[75] * PI1[0][2][8] + sp[76] * PI2[0][2][8] + sp[76] * PI2[0][8][5] + sp[78] * PI4[0][8][5] + sp[79] * PI5[0][5][8];
    A[259] = sp[74] * PI0[0][2][9] + sp[75] * PI1[0][2][9] + sp[76] * PI2[0][2][9] + sp[76] * PI2[0][9][5] + sp[78] * PI4[0][9][5] + sp[79] * PI5[0][5][9];
    A[260] = sp[74] * PI0[0][2][10] + sp[75] * PI1[0][2][10] + sp[76] * PI2[0][2][10] + sp[76] * PI2[0][10][5] + sp[78] * PI4[0][10][5] + sp[79] * PI5[0][5][10];
    A[261] = sp[74] * PI0[0][2][11] + sp[75] * PI1[0][2][11] + sp[76] * PI2[0][2][11] + sp[76] * PI2[0][11][5] + sp[78] * PI4[0][11][5] + sp[79] * PI5[0][5][11];
    A[262] = sp[74] * PI0[0][2][12] + sp[75] * PI1[0][2][12] + sp[76] * PI2[0][2][12] + sp[76] * PI2[0][12][5] + sp[78] * PI4[0][12][5] + sp[79] * PI5[0][5][12];
    A[263] = sp[74] * PI0[0][2][13] + sp[75] * PI1[0][2][13] + sp[76] * PI2[0][2][13] + sp[76] * PI2[0][13][5] + sp[78] * PI4[0][13][5] + sp[79] * PI5[0][5][13];
    A[264] = sp[74] * PI0[0][2][14] + sp[75] * PI1[0][2][14] + sp[76] * PI2[0][2][14] + sp[76] * PI2[0][14][5] + sp[78] * PI4[0][14][5] + sp[79] * PI5[0][5][14];
    A[265] = sp[74] * PI0[0][2][15] + sp[75] * PI1[0][2][15] + sp[76] * PI2[0][2][15] + sp[76] * PI2[0][15][5] + sp[78] * PI4[0][15][5] + sp[79] * PI5[0][5][15];
    A[266] = sp[74] * PI0[0][2][16] + sp[75] * PI1[0][2][16] + sp[76] * PI2[0][2][16] + sp[76] * PI2[0][16][5] + sp[78] * PI4[0][16][5] + sp[79] * PI5[0][5][16];
    A[267] = sp[74] * PI0[0][2][17] + sp[75] * PI1[0][2][17] + sp[76] * PI2[0][2][17] + sp[76] * PI2[0][17][5] + sp[78] * PI4[0][17][5] + sp[79] * PI5[0][5][17];
    A[268] = sp[74] * PI0[0][2][18] + sp[75] * PI1[0][2][18] + sp[76] * PI2[0][2][18] + sp[76] * PI2[0][18][5] + sp[78] * PI4[0][18][5] + sp[79] * PI5[0][5][18];
    A[269] = sp[74] * PI0[0][2][19] + sp[75] * PI1[0][2][19] + sp[76] * PI2[0][2][19] + sp[76] * PI2[0][19][5] + sp[78] * PI4[0][19][5] + sp[79] * PI5[0][5][19];
    A[270] = sp[74] * PI0[0][2][20] + sp[75] * PI1[0][2][20] + sp[76] * PI2[0][2][20] + sp[76] * PI2[0][20][5] + sp[78] * PI4[0][20][5] + sp[79] * PI5[0][5][20];
    A[271] = sp[74] * PI0[0][2][21] + sp[75] * PI1[0][2][21] + sp[76] * PI2[0][2][21] + sp[76] * PI2[0][21][5] + sp[78] * PI4[0][21][5] + sp[79] * PI5[0][5][21];
    A[272] = sp[74] * PI0[0][2][22] + sp[75] * PI1[0][2][22] + sp[76] * PI2[0][2][22] + sp[76] * PI2[0][22][5] + sp[78] * PI4[0][22][5] + sp[79] * PI5[0][5][22];
    A[273] = sp[74] * PI0[0][2][23] + sp[75] * PI1[0][2][23] + sp[76] * PI2[0][2][23] + sp[76] * PI2[0][23][5] + sp[78] * PI4[0][23][5] + sp[79] * PI5[0][5][23];
    A[274] = sp[74] * PI0[0][2][24] + sp[75] * PI1[0][2][24] + sp[76] * PI2[0][2][24] + sp[76] * PI2[0][24][5] + sp[78] * PI4[0][24][5] + sp[79] * PI5[0][5][24];
    A[275] = sp[74] * PI0[0][2][25] + sp[75] * PI1[0][2][25] + sp[76] * PI2[0][2][25] + sp[76] * PI2[0][25][5] + sp[78] * PI4[0][25][5] + sp[79] * PI5[0][5][25];
    A[276] = sp[74] * PI0[0][2][26] + sp[75] * PI1[0][2][26] + sp[76] * PI2[0][2][26] + sp[76] * PI2[0][26][5] + sp[78] * PI4[0][26][5] + sp[79] * PI5[0][5][26];
    A[277] = sp[74] * PI0[0][2][27] + sp[75] * PI1[0][2][27] + sp[76] * PI2[0][2][27] + sp[76] * PI2[0][27][5] + sp[78] * PI4[0][27][5] + sp[79] * PI5[0][5][27];
    A[278] = sp[74] * PI0[0][2][28] + sp[75] * PI1[0][2][28] + sp[76] * PI2[0][2][28] + sp[76] * PI2[0][28][5] + sp[78] * PI4[0][28][5] + sp[79] * PI5[0][5][28];
    A[279] = sp[74] * PI0[0][2][29] + sp[75] * PI1[0][2][29] + sp[76] * PI2[0][2][29] + sp[76] * PI2[0][29][5] + sp[78] * PI4[0][29][5] + sp[79] * PI5[0][5][29];
    A[280] = sp[74] * PI0[0][3][0] + sp[75] * PI1[0][3][0] + sp[76] * PI2[0][3][0] + sp[76] * PI2[0][0][6] + sp[78] * PI4[0][0][6] + sp[79] * PI5[0][6][0];
    A[281] = sp[74] * PI0[0][3][1] + sp[76] * PI2[0][1][6];
    A[282] = sp[75] * PI1[0][3][1] + sp[78] * PI4[0][1][6];
    A[283] = sp[76] * PI2[0][3][1] + sp[79] * PI5[0][6][1];
    A[284] = sp[75] * PI1[0][3][2] + sp[76] * PI2[0][3][2] + sp[78] * PI4[0][2][6] + sp[79] * PI5[0][6][2];
    A[285] = sp[75] * PI1[0][3][3] + sp[76] * PI2[0][3][3] + sp[78] * PI4[0][3][6] + sp[79] * PI5[0][6][3];
    A[286] = sp[75] * PI1[0][3][4] + sp[76] * PI2[0][3][4] + sp[78] * PI4[0][4][6] + sp[79] * PI5[0][6][4];
    A[287] = sp[74] * PI0[0][3][2] + sp[76] * PI2[0][3][5] + sp[76] * PI2[0][2][6] + sp[79] * PI5[0][6][5];
    A[288] = sp[74] * PI0[0][3][3] + sp[76] * PI2[0][3][6] + sp[76] * PI2[0][3][6] + sp[79] * PI5[0][6][6];
    A[289] = sp[74] * PI0[0][3][4] + sp[76] * PI2[0][3][7] + sp[76] * PI2[0][4][6] + sp[79] * PI5[0][6][7];
    A[290] = sp[74] * PI0[0][3][5] + sp[75] * PI1[0][3][5] + sp[76] * PI2[0][5][6] + sp[78] * PI4[0][5][6];
    A[291] = sp[74] * PI0[0][3][6] + sp[75] * PI1[0][3][6] + sp[76] * PI2[0][6][6] + sp[78] * PI4[0][6][6];
    A[292] = sp[74] * PI0[0][3][7] + sp[75] * PI1[0][3][7] + sp[76] * PI2[0][7][6] + sp[78] * PI4[0][7][6];
    A[293] = sp[74] * PI0[0][3][8] + sp[75] * PI1[0][3][8] + sp[76] * PI2[0][3][8] + sp[76] * PI2[0][8][6] + sp[78] * PI4[0][8][6] + sp[79] * PI5[0][6][8];
    A[294] = sp[74] * PI0[0][3][9] + sp[75] * PI1[0][3][9] + sp[76] * PI2[0][3][9] + sp[76] * PI2[0][9][6] + sp[78] * PI4[0][9][6] + sp[79] * PI5[0][6][9];
    A[295] = sp[74] * PI0[0][3][10] + sp[75] * PI1[0][3][10] + sp[76] * PI2[0][3][10] + sp[76] * PI2[0][10][6] + sp[78] * PI4[0][10][6] + sp[79] * PI5[0][6][10];
    A[296] = sp[74] * PI0[0][3][11] + sp[75] * PI1[0][3][11] + sp[76] * PI2[0][3][11] + sp[76] * PI2[0][11][6] + sp[78] * PI4[0][11][6] + sp[79] * PI5[0][6][11];
    A[297] = sp[74] * PI0[0][3][12] + sp[75] * PI1[0][3][12] + sp[76] * PI2[0][3][12] + sp[76] * PI2[0][12][6] + sp[78] * PI4[0][12][6] + sp[79] * PI5[0][6][12];
    A[298] = sp[74] * PI0[0][3][13] + sp[75] * PI1[0][3][13] + sp[76] * PI2[0][3][13] + sp[76] * PI2[0][13][6] + sp[78] * PI4[0][13][6] + sp[79] * PI5[0][6][13];
    A[299] = sp[74] * PI0[0][3][14] + sp[75] * PI1[0][3][14] + sp[76] * PI2[0][3][14] + sp[76] * PI2[0][14][6] + sp[78] * PI4[0][14][6] + sp[79] * PI5[0][6][14];
    A[300] = sp[74] * PI0[0][3][15] + sp[75] * PI1[0][3][15] + sp[76] * PI2[0][3][15] + sp[76] * PI2[0][15][6] + sp[78] * PI4[0][15][6] + sp[79] * PI5[0][6][15];
    A[301] = sp[74] * PI0[0][3][16] + sp[75] * PI1[0][3][16] + sp[76] * PI2[0][3][16] + sp[76] * PI2[0][16][6] + sp[78] * PI4[0][16][6] + sp[79] * PI5[0][6][16];
    A[302] = sp[74] * PI0[0][3][17] + sp[75] * PI1[0][3][17] + sp[76] * PI2[0][3][17] + sp[76] * PI2[0][17][6] + sp[78] * PI4[0][17][6] + sp[79] * PI5[0][6][17];
    A[303] = sp[74] * PI0[0][3][18] + sp[75] * PI1[0][3][18] + sp[76] * PI2[0][3][18] + sp[76] * PI2[0][18][6] + sp[78] * PI4[0][18][6] + sp[79] * PI5[0][6][18];
    A[304] = sp[74] * PI0[0][3][19] + sp[75] * PI1[0][3][19] + sp[76] * PI2[0][3][19] + sp[76] * PI2[0][19][6] + sp[78] * PI4[0][19][6] + sp[79] * PI5[0][6][19];
    A[305] = sp[74] * PI0[0][3][20] + sp[75] * PI1[0][3][20] + sp[76] * PI2[0][3][20] + sp[76] * PI2[0][20][6] + sp[78] * PI4[0][20][6] + sp[79] * PI5[0][6][20];
    A[306] = sp[74] * PI0[0][3][21] + sp[75] * PI1[0][3][21] + sp[76] * PI2[0][3][21] + sp[76] * PI2[0][21][6] + sp[78] * PI4[0][21][6] + sp[79] * PI5[0][6][21];
    A[307] = sp[74] * PI0[0][3][22] + sp[75] * PI1[0][3][22] + sp[76] * PI2[0][3][22] + sp[76] * PI2[0][22][6] + sp[78] * PI4[0][22][6] + sp[79] * PI5[0][6][22];
    A[308] = sp[74] * PI0[0][3][23] + sp[75] * PI1[0][3][23] + sp[76] * PI2[0][3][23] + sp[76] * PI2[0][23][6] + sp[78] * PI4[0][23][6] + sp[79] * PI5[0][6][23];
    A[309] = sp[74] * PI0[0][3][24] + sp[75] * PI1[0][3][24] + sp[76] * PI2[0][3][24] + sp[76] * PI2[0][24][6] + sp[78] * PI4[0][24][6] + sp[79] * PI5[0][6][24];
    A[310] = sp[74] * PI0[0][3][25] + sp[75] * PI1[0][3][25] + sp[76] * PI2[0][3][25] + sp[76] * PI2[0][25][6] + sp[78] * PI4[0][25][6] + sp[79] * PI5[0][6][25];
    A[311] = sp[74] * PI0[0][3][26] + sp[75] * PI1[0][3][26] + sp[76] * PI2[0][3][26] + sp[76] * PI2[0][26][6] + sp[78] * PI4[0][26][6] + sp[79] * PI5[0][6][26];
    A[312] = sp[74] * PI0[0][3][27] + sp[75] * PI1[0][3][27] + sp[76] * PI2[0][3][27] + sp[76] * PI2[0][27][6] + sp[78] * PI4[0][27][6] + sp[79] * PI5[0][6][27];
    A[313] = sp[74] * PI0[0][3][28] + sp[75] * PI1[0][3][28] + sp[76] * PI2[0][3][28] + sp[76] * PI2[0][28][6] + sp[78] * PI4[0][28][6] + sp[79] * PI5[0][6][28];
    A[314] = sp[74] * PI0[0][3][29] + sp[75] * PI1[0][3][29] + sp[76] * PI2[0][3][29] + sp[76] * PI2[0][29][6] + sp[78] * PI4[0][29][6] + sp[79] * PI5[0][6][29];
    A[315] = sp[74] * PI0[0][4][0] + sp[75] * PI1[0][4][0] + sp[76] * PI2[0][4][0] + sp[76] * PI2[0][0][7] + sp[78] * PI4[0][0][7] + sp[79] * PI5[0][7][0];
    A[316] = sp[74] * PI0[0][4][1] + sp[76] * PI2[0][1][7];
    A[317] = sp[75] * PI1[0][4][1] + sp[78] * PI4[0][1][7];
    A[318] = sp[76] * PI2[0][4][1] + sp[79] * PI5[0][7][1];
    A[319] = sp[75] * PI1[0][4][2] + sp[76] * PI2[0][4][2] + sp[78] * PI4[0][2][7] + sp[79] * PI5[0][7][2];
    A[320] = sp[75] * PI1[0][4][3] + sp[76] * PI2[0][4][3] + sp[78] * PI4[0][3][7] + sp[79] * PI5[0][7][3];
    A[321] = sp[75] * PI1[0][4][4] + sp[76] * PI2[0][4][4] + sp[78] * PI4[0][4][7] + sp[79] * PI5[0][7][4];
    A[322] = sp[74] * PI0[0][4][2] + sp[76] * PI2[0][4][5] + sp[76] * PI2[0][2][7] + sp[79] * PI5[0][7][5];
    A[323] = sp[74] * PI0[0][4][3] + sp[76] * PI2[0][4][6] + sp[76] * PI2[0][3][7] + sp[79] * PI5[0][7][6];
    A[324] = sp[74] * PI0[0][4][4] + sp[76] * PI2[0][4][7] + sp[76] * PI2[0][4][7] + sp[79] * PI5[0][7][7];
    A[325] = sp[74] * PI0[0][4][5] + sp[75] * PI1[0][4][5] + sp[76] * PI2[0][5][7] + sp[78] * PI4[0][5][7];
    A[326] = sp[74] * PI0[0][4][6] + sp[75] * PI1[0][4][6] + sp[76] * PI2[0][6][7] + sp[78] * PI4[0][6][7];
    A[327] = sp[74] * PI0[0][4][7] + sp[75] * PI1[0][4][7] + sp[76] * PI2[0][7][7] + sp[78] * PI4[0][7][7];
    A[328] = sp[74] * PI0[0][4][8] + sp[75] * PI1[0][4][8] + sp[76] * PI2[0][4][8] + sp[76] * PI2[0][8][7] + sp[78] * PI4[0][8][7] + sp[79] * PI5[0][7][8];
    A[329] = sp[74] * PI0[0][4][9] + sp[75] * PI1[0][4][9] + sp[76] * PI2[0][4][9] + sp[76] * PI2[0][9][7] + sp[78] * PI4[0][9][7] + sp[79] * PI5[0][7][9];
    A[330] = sp[74] * PI0[0][4][10] + sp[75] * PI1[0][4][10] + sp[76] * PI2[0][4][10] + sp[76] * PI2[0][10][7] + sp[78] * PI4[0][10][7] + sp[79] * PI5[0][7][10];
    A[331] = sp[74] * PI0[0][4][11] + sp[75] * PI1[0][4][11] + sp[76] * PI2[0][4][11] + sp[76] * PI2[0][11][7] + sp[78] * PI4[0][11][7] + sp[79] * PI5[0][7][11];
    A[332] = sp[74] * PI0[0][4][12] + sp[75] * PI1[0][4][12] + sp[76] * PI2[0][4][12] + sp[76] * PI2[0][12][7] + sp[78] * PI4[0][12][7] + sp[79] * PI5[0][7][12];
    A[333] = sp[74] * PI0[0][4][13] + sp[75] * PI1[0][4][13] + sp[76] * PI2[0][4][13] + sp[76] * PI2[0][13][7] + sp[78] * PI4[0][13][7] + sp[79] * PI5[0][7][13];
    A[334] = sp[74] * PI0[0][4][14] + sp[75] * PI1[0][4][14] + sp[76] * PI2[0][4][14] + sp[76] * PI2[0][14][7] + sp[78] * PI4[0][14][7] + sp[79] * PI5[0][7][14];
    A[335] = sp[74] * PI0[0][4][15] + sp[75] * PI1[0][4][15] + sp[76] * PI2[0][4][15] + sp[76] * PI2[0][15][7] + sp[78] * PI4[0][15][7] + sp[79] * PI5[0][7][15];
    A[336] = sp[74] * PI0[0][4][16] + sp[75] * PI1[0][4][16] + sp[76] * PI2[0][4][16] + sp[76] * PI2[0][16][7] + sp[78] * PI4[0][16][7] + sp[79] * PI5[0][7][16];
    A[337] = sp[74] * PI0[0][4][17] + sp[75] * PI1[0][4][17] + sp[76] * PI2[0][4][17] + sp[76] * PI2[0][17][7] + sp[78] * PI4[0][17][7] + sp[79] * PI5[0][7][17];
    A[338] = sp[74] * PI0[0][4][18] + sp[75] * PI1[0][4][18] + sp[76] * PI2[0][4][18] + sp[76] * PI2[0][18][7] + sp[78] * PI4[0][18][7] + sp[79] * PI5[0][7][18];
    A[339] = sp[74] * PI0[0][4][19] + sp[75] * PI1[0][4][19] + sp[76] * PI2[0][4][19] + sp[76] * PI2[0][19][7] + sp[78] * PI4[0][19][7] + sp[79] * PI5[0][7][19];
    A[340] = sp[74] * PI0[0][4][20] + sp[75] * PI1[0][4][20] + sp[76] * PI2[0][4][20] + sp[76] * PI2[0][20][7] + sp[78] * PI4[0][20][7] + sp[79] * PI5[0][7][20];
    A[341] = sp[74] * PI0[0][4][21] + sp[75] * PI1[0][4][21] + sp[76] * PI2[0][4][21] + sp[76] * PI2[0][21][7] + sp[78] * PI4[0][21][7] + sp[79] * PI5[0][7][21];
    A[342] = sp[74] * PI0[0][4][22] + sp[75] * PI1[0][4][22] + sp[76] * PI2[0][4][22] + sp[76] * PI2[0][22][7] + sp[78] * PI4[0][22][7] + sp[79] * PI5[0][7][22];
    A[343] = sp[74] * PI0[0][4][23] + sp[75] * PI1[0][4][23] + sp[76] * PI2[0][4][23] + sp[76] * PI2[0][23][7] + sp[78] * PI4[0][23][7] + sp[79] * PI5[0][7][23];
    A[344] = sp[74] * PI0[0][4][24] + sp[75] * PI1[0][4][24] + sp[76] * PI2[0][4][24] + sp[76] * PI2[0][24][7] + sp[78] * PI4[0][24][7] + sp[79] * PI5[0][7][24];
    A[345] = sp[74] * PI0[0][4][25] + sp[75] * PI1[0][4][25] + sp[76] * PI2[0][4][25] + sp[76] * PI2[0][25][7] + sp[78] * PI4[0][25][7] + sp[79] * PI5[0][7][25];
    A[346] = sp[74] * PI0[0][4][26] + sp[75] * PI1[0][4][26] + sp[76] * PI2[0][4][26] + sp[76] * PI2[0][26][7] + sp[78] * PI4[0][26][7] + sp[79] * PI5[0][7][26];
    A[347] = sp[74] * PI0[0][4][27] + sp[75] * PI1[0][4][27] + sp[76] * PI2[0][4][27] + sp[76] * PI2[0][27][7] + sp[78] * PI4[0][27][7] + sp[79] * PI5[0][7][27];
    A[348] = sp[74] * PI0[0][4][28] + sp[75] * PI1[0][4][28] + sp[76] * PI2[0][4][28] + sp[76] * PI2[0][28][7] + sp[78] * PI4[0][28][7] + sp[79] * PI5[0][7][28];
    A[349] = sp[74] * PI0[0][4][29] + sp[75] * PI1[0][4][29] + sp[76] * PI2[0][4][29] + sp[76] * PI2[0][29][7] + sp[78] * PI4[0][29][7] + sp[79] * PI5[0][7][29];
    A[350] = sp[74] * PI0[0][5][0] + sp[75] * PI1[0][5][0] + sp[76] * PI2[0][5][0] + sp[75] * PI1[0][0][5] + sp[77] * PI3[0][5][0] + sp[78] * PI4[0][5][0];
    A[351] = sp[74] * PI0[0][5][1] + sp[75] * PI1[0][1][5];
    A[352] = sp[75] * PI1[0][5][1] + sp[77] * PI3[0][5][1];
    A[353] = sp[76] * PI2[0][5][1] + sp[78] * PI4[0][5][1];
    A[354] = sp[75] * PI1[0][5][2] + sp[76] * PI2[0][5][2] + sp[77] * PI3[0][5][2] + sp[78] * PI4[0][5][2];
    A[355] = sp[75] * PI1[0][5][3] + sp[76] * PI2[0][5][3] + sp[77] * PI3[0][5][3] + sp[78] * PI4[0][5][3];
    A[356] = sp[75] * PI1[0][5][4] + sp[76] * PI2[0][5][4] + sp[77] * PI3[0][5][4] + sp[78] * PI4[0][5][4];
    A[357] = sp[74] * PI0[0][5][2] + sp[76] * PI2[0][5][5] + sp[75] * PI1[0][2][5] + sp[78] * PI4[0][5][5];
    A[358] = sp[74] * PI0[0][5][3] + sp[76] * PI2[0][5][6] + sp[75] * PI1[0][3][5] + sp[78] * PI4[0][5][6];
    A[359] = sp[74] * PI0[0][5][4] + sp[76] * PI2[0][5][7] + sp[75] * PI1[0][4][5] + sp[78] * PI4[0][5][7];
    A[360] = sp[74] * PI0[0][5][5] + sp[75] * PI1[0][5][5] + sp[75] * PI1[0][5][5] + sp[77] * PI3[0][5][5];
    A[361] = sp[74] * PI0[0][5][6] + sp[75] * PI1[0][5][6] + sp[75] * PI1[0][6][5] + sp[77] * PI3[0][5][6];
    A[362] = sp[74] * PI0[0][5][7] + sp[75] * PI1[0][5][7] + sp[75] * PI1[0][7][5] + sp[77] * PI3[0][5][7];
    A[363] = sp[74] * PI0[0][5][8] + sp[75] * PI1[0][5][8] + sp[76] * PI2[0][5][8] + sp[75] * PI1[0][8][5] + sp[77] * PI3[0][5][8] + sp[78] * PI4[0][5][8];
    A[364] = sp[74] * PI0[0][5][9] + sp[75] * PI1[0][5][9] + sp[76] * PI2[0][5][9] + sp[75] * PI1[0][9][5] + sp[77] * PI3[0][5][9] + sp[78] * PI4[0][5][9];
    A[365] = sp[74] * PI0[0][5][10] + sp[75] * PI1[0][5][10] + sp[76] * PI2[0][5][10] + sp[75] * PI1[0][10][5] + sp[77] * PI3[0][5][10] + sp[78] * PI4[0][5][10];
    A[366] = sp[74] * PI0[0][5][11] + sp[75] * PI1[0][5][11] + sp[76] * PI2[0][5][11] + sp[75] * PI1[0][11][5] + sp[77] * PI3[0][5][11] + sp[78] * PI4[0][5][11];
    A[367] = sp[74] * PI0[0][5][12] + sp[75] * PI1[0][5][12] + sp[76] * PI2[0][5][12] + sp[75] * PI1[0][12][5] + sp[77] * PI3[0][5][12] + sp[78] * PI4[0][5][12];
    A[368] = sp[74] * PI0[0][5][13] + sp[75] * PI1[0][5][13] + sp[76] * PI2[0][5][13] + sp[75] * PI1[0][13][5] + sp[77] * PI3[0][5][13] + sp[78] * PI4[0][5][13];
    A[369] = sp[74] * PI0[0][5][14] + sp[75] * PI1[0][5][14] + sp[76] * PI2[0][5][14] + sp[75] * PI1[0][14][5] + sp[77] * PI3[0][5][14] + sp[78] * PI4[0][5][14];
    A[370] = sp[74] * PI0[0][5][15] + sp[75] * PI1[0][5][15] + sp[76] * PI2[0][5][15] + sp[75] * PI1[0][15][5] + sp[77] * PI3[0][5][15] + sp[78] * PI4[0][5][15];
    A[371] = sp[74] * PI0[0][5][16] + sp[75] * PI1[0][5][16] + sp[76] * PI2[0][5][16] + sp[75] * PI1[0][16][5] + sp[77] * PI3[0][5][16] + sp[78] * PI4[0][5][16];
    A[372] = sp[74] * PI0[0][5][17] + sp[75] * PI1[0][5][17] + sp[76] * PI2[0][5][17] + sp[75] * PI1[0][17][5] + sp[77] * PI3[0][5][17] + sp[78] * PI4[0][5][17];
    A[373] = sp[74] * PI0[0][5][18] + sp[75] * PI1[0][5][18] + sp[76] * PI2[0][5][18] + sp[75] * PI1[0][18][5] + sp[77] * PI3[0][5][18] + sp[78] * PI4[0][5][18];
    A[374] = sp[74] * PI0[0][5][19] + sp[75] * PI1[0][5][19] + sp[76] * PI2[0][5][19] + sp[75] * PI1[0][19][5] + sp[77] * PI3[0][5][19] + sp[78] * PI4[0][5][19];
    A[375] = sp[74] * PI0[0][5][20] + sp[75] * PI1[0][5][20] + sp[76] * PI2[0][5][20] + sp[75] * PI1[0][20][5] + sp[77] * PI3[0][5][20] + sp[78] * PI4[0][5][20];
    A[376] = sp[74] * PI0[0][5][21] + sp[75] * PI1[0][5][21] + sp[76] * PI2[0][5][21] + sp[75] * PI1[0][21][5] + sp[77] * PI3[0][5][21] + sp[78] * PI4[0][5][21];
    A[377] = sp[74] * PI0[0][5][22] + sp[75] * PI1[0][5][22] + sp[76] * PI2[0][5][22] + sp[75] * PI1[0][22][5] + sp[77] * PI3[0][5][22] + sp[78] * PI4[0][5][22];
    A[378] = sp[74] * PI0[0][5][23] + sp[75] * PI1[0][5][23] + sp[76] * PI2[0][5][23] + sp[75] * PI1[0][23][5] + sp[77] * PI3[0][5][23] + sp[78] * PI4[0][5][23];
    A[379] = sp[74] * PI0[0][5][24] + sp[75] * PI1[0][5][24] + sp[76] * PI2[0][5][24] + sp[75] * PI1[0][24][5] + sp[77] * PI3[0][5][24] + sp[78] * PI4[0][5][24];
    A[380] = sp[74] * PI0[0][5][25] + sp[75] * PI1[0][5][25] + sp[76] * PI2[0][5][25] + sp[75] * PI1[0][25][5] + sp[77] * PI3[0][5][25] + sp[78] * PI4[0][5][25];
    A[381] = sp[74] * PI0[0][5][26] + sp[75] * PI1[0][5][26] + sp[76] * PI2[0][5][26] + sp[75] * PI1[0][26][5] + sp[77] * PI3[0][5][26] + sp[78] * PI4[0][5][26];
    A[382] = sp[74] * PI0[0][5][27] + sp[75] * PI1[0][5][27] + sp[76] * PI2[0][5][27] + sp[75] * PI1[0][27][5] + sp[77] * PI3[0][5][27] + sp[78] * PI4[0][5][27];
    A[383] = sp[74] * PI0[0][5][28] + sp[75] * PI1[0][5][28] + sp[76] * PI2[0][5][28] + sp[75] * PI1[0][28][5] + sp[77] * PI3[0][5][28] + sp[78] * PI4[0][5][28];
    A[384] = sp[74] * PI0[0][5][29] + sp[75] * PI1[0][5][29] + sp[76] * PI2[0][5][29] + sp[75] * PI1[0][29][5] + sp[77] * PI3[0][5][29] + sp[78] * PI4[0][5][29];
    A[385] = sp[74] * PI0[0][6][0] + sp[75] * PI1[0][6][0] + sp[76] * PI2[0][6][0] + sp[75] * PI1[0][0][6] + sp[77] * PI3[0][6][0] + sp[78] * PI4[0][6][0];
    A[386] = sp[74] * PI0[0][6][1] + sp[75] * PI1[0][1][6];
    A[387] = sp[75] * PI1[0][6][1] + sp[77] * PI3[0][6][1];
    A[388] = sp[76] * PI2[0][6][1] + sp[78] * PI4[0][6][1];
    A[389] = sp[75] * PI1[0][6][2] + sp[76] * PI2[0][6][2] + sp[77] * PI3[0][6][2] + sp[78] * PI4[0][6][2];
    A[390] = sp[75] * PI1[0][6][3] + sp[76] * PI2[0][6][3] + sp[77] * PI3[0][6][3] + sp[78] * PI4[0][6][3];
    A[391] = sp[75] * PI1[0][6][4] + sp[76] * PI2[0][6][4] + sp[77] * PI3[0][6][4] + sp[78] * PI4[0][6][4];
    A[392] = sp[74] * PI0[0][6][2] + sp[76] * PI2[0][6][5] + sp[75] * PI1[0][2][6] + sp[78] * PI4[0][6][5];
    A[393] = sp[74] * PI0[0][6][3] + sp[76] * PI2[0][6][6] + sp[75] * PI1[0][3][6] + sp[78] * PI4[0][6][6];
    A[394] = sp[74] * PI0[0][6][4] + sp[76] * PI2[0][6][7] + sp[75] * PI1[0][4][6] + sp[78] * PI4[0][6][7];
    A[395] = sp[74] * PI0[0][6][5] + sp[75] * PI1[0][6][5] + sp[75] * PI1[0][5][6] + sp[77] * PI3[0][6][5];
    A[396] = sp[74] * PI0[0][6][6] + sp[75] * PI1[0][6][6] + sp[75] * PI1[0][6][6] + sp[77] * PI3[0][6][6];
    A[397] = sp[74] * PI0[0][6][7] + sp[75] * PI1[0][6][7] + sp[75] * PI1[0][7][6] + sp[77] * PI3[0][6][7];
    A[398] = sp[74] * PI0[0][6][8] + sp[75] * PI1[0][6][8] + sp[76] * PI2[0][6][8] + sp[75] * PI1[0][8][6] + sp[77] * PI3[0][6][8] + sp[78] * PI4[0][6][8];
    A[399] = sp[74] * PI0[0][6][9] + sp[75] * PI1[0][6][9] + sp[76] * PI2[0][6][9] + sp[75] * PI1[0][9][6] + sp[77] * PI3[0][6][9] + sp[78] * PI4[0][6][9];
    A[400] = sp[74] * PI0[0][6][10] + sp[75] * PI1[0][6][10] + sp[76] * PI2[0][6][10] + sp[75] * PI1[0][10][6] + sp[77] * PI3[0][6][10] + sp[78] * PI4[0][6][10];
    A[401] = sp[74] * PI0[0][6][11] + sp[75] * PI1[0][6][11] + sp[76] * PI2[0][6][11] + sp[75] * PI1[0][11][6] + sp[77] * PI3[0][6][11] + sp[78] * PI4[0][6][11];
    A[402] = sp[74] * PI0[0][6][12] + sp[75] * PI1[0][6][12] + sp[76] * PI2[0][6][12] + sp[75] * PI1[0][12][6] + sp[77] * PI3[0][6][12] + sp[78] * PI4[0][6][12];
    A[403] = sp[74] * PI0[0][6][13] + sp[75] * PI1[0][6][13] + sp[76] * PI2[0][6][13] + sp[75] * PI1[0][13][6] + sp[77] * PI3[0][6][13] + sp[78] * PI4[0][6][13];
    A[404] = sp[74] * PI0[0][6][14] + sp[75] * PI1[0][6][14] + sp[76] * PI2[0][6][14] + sp[75] * PI1[0][14][6] + sp[77] * PI3[0][6][14] + sp[78] * PI4[0][6][14];
    A[405] = sp[74] * PI0[0][6][15] + sp[75] * PI1[0][6][15] + sp[76] * PI2[0][6][15] + sp[75] * PI1[0][15][6] + sp[77] * PI3[0][6][15] + sp[78] * PI4[0][6][15];
    A[406] = sp[74] * PI0[0][6][16] + sp[75] * PI1[0][6][16] + sp[76] * PI2[0][6][16] + sp[75] * PI1[0][16][6] + sp[77] * PI3[0][6][16] + sp[78] * PI4[0][6][16];
    A[407] = sp[74] * PI0[0][6][17] + sp[75] * PI1[0][6][17] + sp[76] * PI2[0][6][17] + sp[75] * PI1[0][17][6] + sp[77] * PI3[0][6][17] + sp[78] * PI4[0][6][17];
    A[408] = sp[74] * PI0[0][6][18] + sp[75] * PI1[0][6][18] + sp[76] * PI2[0][6][18] + sp[75] * PI1[0][18][6] + sp[77] * PI3[0][6][18] + sp[78] * PI4[0][6][18];
    A[409] = sp[74] * PI0[0][6][19] + sp[75] * PI1[0][6][19] + sp[76] * PI2[0][6][19] + sp[75] * PI1[0][19][6] + sp[77] * PI3[0][6][19] + sp[78] * PI4[0][6][19];
    A[410] = sp[74] * PI0[0][6][20] + sp[75] * PI1[0][6][20] + sp[76] * PI2[0][6][20] + sp[75] * PI1[0][20][6] + sp[77] * PI3[0][6][20] + sp[78] * PI4[0][6][20];
    A[411] = sp[74] * PI0[0][6][21] + sp[75] * PI1[0][6][21] + sp[76] * PI2[0][6][21] + sp[75] * PI1[0][21][6] + sp[77] * PI3[0][6][21] + sp[78] * PI4[0][6][21];
    A[412] = sp[74] * PI0[0][6][22] + sp[75] * PI1[0][6][22] + sp[76] * PI2[0][6][22] + sp[75] * PI1[0][22][6] + sp[77] * PI3[0][6][22] + sp[78] * PI4[0][6][22];
    A[413] = sp[74] * PI0[0][6][23] + sp[75] * PI1[0][6][23] + sp[76] * PI2[0][6][23] + sp[75] * PI1[0][23][6] + sp[77] * PI3[0][6][23] + sp[78] * PI4[0][6][23];
    A[414] = sp[74] * PI0[0][6][24] + sp[75] * PI1[0][6][24] + sp[76] * PI2[0][6][24] + sp[75] * PI1[0][24][6] + sp[77] * PI3[0][6][24] + sp[78] * PI4[0][6][24];
    A[415] = sp[74] * PI0[0][6][25] + sp[75] * PI1[0][6][25] + sp[76] * PI2[0][6][25] + sp[75] * PI1[0][25][6] + sp[77] * PI3[0][6][25] + sp[78] * PI4[0][6][25];
    A[416] = sp[74] * PI0[0][6][26] + sp[75] * PI1[0][6][26] + sp[76] * PI2[0][6][26] + sp[75] * PI1[0][26][6] + sp[77] * PI3[0][6][26] + sp[78] * PI4[0][6][26];
    A[417] = sp[74] * PI0[0][6][27] + sp[75] * PI1[0][6][27] + sp[76] * PI2[0][6][27] + sp[75] * PI1[0][27][6] + sp[77] * PI3[0][6][27] + sp[78] * PI4[0][6][27];
    A[418] = sp[74] * PI0[0][6][28] + sp[75] * PI1[0][6][28] + sp[76] * PI2[0][6][28] + sp[75] * PI1[0][28][6] + sp[77] * PI3[0][6][28] + sp[78] * PI4[0][6][28];
    A[419] = sp[74] * PI0[0][6][29] + sp[75] * PI1[0][6][29] + sp[76] * PI2[0][6][29] + sp[75] * PI1[0][29][6] + sp[77] * PI3[0][6][29] + sp[78] * PI4[0][6][29];
    A[420] = sp[74] * PI0[0][7][0] + sp[75] * PI1[0][7][0] + sp[76] * PI2[0][7][0] + sp[75] * PI1[0][0][7] + sp[77] * PI3[0][7][0] + sp[78] * PI4[0][7][0];
    A[421] = sp[74] * PI0[0][7][1] + sp[75] * PI1[0][1][7];
    A[422] = sp[75] * PI1[0][7][1] + sp[77] * PI3[0][7][1];
    A[423] = sp[76] * PI2[0][7][1] + sp[78] * PI4[0][7][1];
    A[424] = sp[75] * PI1[0][7][2] + sp[76] * PI2[0][7][2] + sp[77] * PI3[0][7][2] + sp[78] * PI4[0][7][2];
    A[425] = sp[75] * PI1[0][7][3] + sp[76] * PI2[0][7][3] + sp[77] * PI3[0][7][3] + sp[78] * PI4[0][7][3];
    A[426] = sp[75] * PI1[0][7][4] + sp[76] * PI2[0][7][4] + sp[77] * PI3[0][7][4] + sp[78] * PI4[0][7][4];
    A[427] = sp[74] * PI0[0][7][2] + sp[76] * PI2[0][7][5] + sp[75] * PI1[0][2][7] + sp[78] * PI4[0][7][5];
    A[428] = sp[74] * PI0[0][7][3] + sp[76] * PI2[0][7][6] + sp[75] * PI1[0][3][7] + sp[78] * PI4[0][7][6];
    A[429] = sp[74] * PI0[0][7][4] + sp[76] * PI2[0][7][7] + sp[75] * PI1[0][4][7] + sp[78] * PI4[0][7][7];
    A[430] = sp[74] * PI0[0][7][5] + sp[75] * PI1[0][7][5] + sp[75] * PI1[0][5][7] + sp[77] * PI3[0][7][5];
    A[431] = sp[74] * PI0[0][7][6] + sp[75] * PI1[0][7][6] + sp[75] * PI1[0][6][7] + sp[77] * PI3[0][7][6];
    A[432] = sp[74] * PI0[0][7][7] + sp[75] * PI1[0][7][7] + sp[75] * PI1[0][7][7] + sp[77] * PI3[0][7][7];
    A[433] = sp[74] * PI0[0][7][8] + sp[75] * PI1[0][7][8] + sp[76] * PI2[0][7][8] + sp[75] * PI1[0][8][7] + sp[77] * PI3[0][7][8] + sp[78] * PI4[0][7][8];
    A[434] = sp[74] * PI0[0][7][9] + sp[75] * PI1[0][7][9] + sp[76] * PI2[0][7][9] + sp[75] * PI1[0][9][7] + sp[77] * PI3[0][7][9] + sp[78] * PI4[0][7][9];
    A[435] = sp[74] * PI0[0][7][10] + sp[75] * PI1[0][7][10] + sp[76] * PI2[0][7][10] + sp[75] * PI1[0][10][7] + sp[77] * PI3[0][7][10] + sp[78] * PI4[0][7][10];
    A[436] = sp[74] * PI0[0][7][11] + sp[75] * PI1[0][7][11] + sp[76] * PI2[0][7][11] + sp[75] * PI1[0][11][7] + sp[77] * PI3[0][7][11] + sp[78] * PI4[0][7][11];
    A[437] = sp[74] * PI0[0][7][12] + sp[75] * PI1[0][7][12] + sp[76] * PI2[0][7][12] + sp[75] * PI1[0][12][7] + sp[77] * PI3[0][7][12] + sp[78] * PI4[0][7][12];
    A[438] = sp[74] * PI0[0][7][13] + sp[75] * PI1[0][7][13] + sp[76] * PI2[0][7][13] + sp[75] * PI1[0][13][7] + sp[77] * PI3[0][7][13] + sp[78] * PI4[0][7][13];
    A[439] = sp[74] * PI0[0][7][14] + sp[75] * PI1[0][7][14] + sp[76] * PI2[0][7][14] + sp[75] * PI1[0][14][7] + sp[77] * PI3[0][7][14] + sp[78] * PI4[0][7][14];
    A[440] = sp[74] * PI0[0][7][15] + sp[75] * PI1[0][7][15] + sp[76] * PI2[0][7][15] + sp[75] * PI1[0][15][7] + sp[77] * PI3[0][7][15] + sp[78] * PI4[0][7][15];
    A[441] = sp[74] * PI0[0][7][16] + sp[75] * PI1[0][7][16] + sp[76] * PI2[0][7][16] + sp[75] * PI1[0][16][7] + sp[77] * PI3[0][7][16] + sp[78] * PI4[0][7][16];
    A[442] = sp[74] * PI0[0][7][17] + sp[75] * PI1[0][7][17] + sp[76] * PI2[0][7][17] + sp[75] * PI1[0][17][7] + sp[77] * PI3[0][7][17] + sp[78] * PI4[0][7][17];
    A[443] = sp[74] * PI0[0][7][18] + sp[75] * PI1[0][7][18] + sp[76] * PI2[0][7][18] + sp[75] * PI1[0][18][7] + sp[77] * PI3[0][7][18] + sp[78] * PI4[0][7][18];
    A[444] = sp[74] * PI0[0][7][19] + sp[75] * PI1[0][7][19] + sp[76] * PI2[0][7][19] + sp[75] * PI1[0][19][7] + sp[77] * PI3[0][7][19] + sp[78] * PI4[0][7][19];
    A[445] = sp[74] * PI0[0][7][20] + sp[75] * PI1[0][7][20] + sp[76] * PI2[0][7][20] + sp[75] * PI1[0][20][7] + sp[77] * PI3[0][7][20] + sp[78] * PI4[0][7][20];
    A[446] = sp[74] * PI0[0][7][21] + sp[75] * PI1[0][7][21] + sp[76] * PI2[0][7][21] + sp[75] * PI1[0][21][7] + sp[77] * PI3[0][7][21] + sp[78] * PI4[0][7][21];
    A[447] = sp[74] * PI0[0][7][22] + sp[75] * PI1[0][7][22] + sp[76] * PI2[0][7][22] + sp[75] * PI1[0][22][7] + sp[77] * PI3[0][7][22] + sp[78] * PI4[0][7][22];
    A[448] = sp[74] * PI0[0][7][23] + sp[75] * PI1[0][7][23] + sp[76] * PI2[0][7][23] + sp[75] * PI1[0][23][7] + sp[77] * PI3[0][7][23] + sp[78] * PI4[0][7][23];
    A[449] = sp[74] * PI0[0][7][24] + sp[75] * PI1[0][7][24] + sp[76] * PI2[0][7][24] + sp[75] * PI1[0][24][7] + sp[77] * PI3[0][7][24] + sp[78] * PI4[0][7][24];
    A[450] = sp[74] * PI0[0][7][25] + sp[75] * PI1[0][7][25] + sp[76] * PI2[0][7][25] + sp[75] * PI1[0][25][7] + sp[77] * PI3[0][7][25] + sp[78] * PI4[0][7][25];
    A[451] = sp[74] * PI0[0][7][26] + sp[75] * PI1[0][7][26] + sp[76] * PI2[0][7][26] + sp[75] * PI1[0][26][7] + sp[77] * PI3[0][7][26] + sp[78] * PI4[0][7][26];
    A[452] = sp[74] * PI0[0][7][27] + sp[75] * PI1[0][7][27] + sp[76] * PI2[0][7][27] + sp[75] * PI1[0][27][7] + sp[77] * PI3[0][7][27] + sp[78] * PI4[0][7][27];
    A[453] = sp[74] * PI0[0][7][28] + sp[75] * PI1[0][7][28] + sp[76] * PI2[0][7][28] + sp[75] * PI1[0][28][7] + sp[77] * PI3[0][7][28] + sp[78] * PI4[0][7][28];
    A[454] = sp[74] * PI0[0][7][29] + sp[75] * PI1[0][7][29] + sp[76] * PI2[0][7][29] + sp[75] * PI1[0][29][7] + sp[77] * PI3[0][7][29] + sp[78] * PI4[0][7][29];
    A[455] = sp[74] * PI0[0][8][0] + sp[75] * PI1[0][8][0] + sp[76] * PI2[0][8][0] + sp[75] * PI1[0][0][8] + sp[77] * PI3[0][8][0] + sp[78] * PI4[0][8][0] + sp[76] * PI2[0][0][8] + sp[78] * PI4[0][0][8] + sp[79] * PI5[0][8][0];
    A[456] = sp[74] * PI0[0][8][1] + sp[75] * PI1[0][1][8] + sp[76] * PI2[0][1][8];
    A[457] = sp[75] * PI1[0][8][1] + sp[77] * PI3[0][8][1] + sp[78] * PI4[0][1][8];
    A[458] = sp[76] * PI2[0][8][1] + sp[78] * PI4[0][8][1] + sp[79] * PI5[0][8][1];
    A[459] = sp[75] * PI1[0][8][2] + sp[76] * PI2[0][8][2] + sp[77] * PI3[0][8][2] + sp[78] * PI4[0][8][2] + sp[78] * PI4[0][2][8] + sp[79] * PI5[0][8][2];
    A[460] = sp[75] * PI1[0][8][3] + sp[76] * PI2[0][8][3] + sp[77] * PI3[0][8][3] + sp[78] * PI4[0][8][3] + sp[78] * PI4[0][3][8] + sp[79] * PI5[0][8][3];
    A[461] = sp[75] * PI1[0][8][4] + sp[76] * PI2[0][8][4] + sp[77] * PI3[0][8][4] + sp[78] * PI4[0][8][4] + sp[78] * PI4[0][4][8] + sp[79] * PI5[0][8][4];
    A[462] = sp[74] * PI0[0][8][2] + sp[76] * PI2[0][8][5] + sp[75] * PI1[0][2][8] + sp[78] * PI4[0][8][5] + sp[76] * PI2[0][2][8] + sp[79] * PI5[0][8][5];
    A[463] = sp[74] * PI0[0][8][3] + sp[76] * PI2[0][8][6] + sp[75] * PI1[0][3][8] + sp[78] * PI4[0][8][6] + sp[76] * PI2[0][3][8] + sp[79] * PI5[0][8][6];
    A[464] = sp[74] * PI0[0][8][4] + sp[76] * PI2[0][8][7] + sp[75] * PI1[0][4][8] + sp[78] * PI4[0][8][7] + sp[76] * PI2[0][4][8] + sp[79] * PI5[0][8][7];
    A[465] = sp[74] * PI0[0][8][5] + sp[75] * PI1[0][8][5] + sp[75] * PI1[0][5][8] + sp[77] * PI3[0][8][5] + sp[76] * PI2[0][5][8] + sp[78] * PI4[0][5][8];
    A[466] = sp[74] * PI0[0][8][6] + sp[75] * PI1[0][8][6] + sp[75] * PI1[0][6][8] + sp[77] * PI3[0][8][6] + sp[76] * PI2[0][6][8] + sp[78] * PI4[0][6][8];
    A[467] = sp[74] * PI0[0][8][7] + sp[75] * PI1[0][8][7] + sp[75] * PI1[0][7][8] + sp[77] * PI3[0][8][7] + sp[76] * PI2[0][7][8] + sp[78] * PI4[0][7][8];
    A[468] = sp[74] * PI0[0][8][8] + sp[75] * PI1[0][8][8] + sp[76] * PI2[0][8][8] + sp[75] * PI1[0][8][8] + sp[77] * PI3[0][8][8] + sp[78] * PI4[0][8][8] + sp[76] * PI2[0][8][8] + sp[78] * PI4[0][8][8] + sp[79] * PI5[0][8][8];
    A[469] = sp[74] * PI0[0][8][9] + sp[75] * PI1[0][8][9] + sp[76] * PI2[0][8][9] + sp[75] * PI1[0][9][8] + sp[77] * PI3[0][8][9] + sp[78] * PI4[0][8][9] + sp[76] * PI2[0][9][8] + sp[78] * PI4[0][9][8] + sp[79] * PI5[0][8][9];
    A[470] = sp[74] * PI0[0][8][10] + sp[75] * PI1[0][8][10] + sp[76] * PI2[0][8][10] + sp[75] * PI1[0][10][8] + sp[77] * PI3[0][8][10] + sp[78] * PI4[0][8][10] + sp[76] * PI2[0][10][8] + sp[78] * PI4[0][10][8] + sp[79] * PI5[0][8][10];
    A[471] = sp[74] * PI0[0][8][11] + sp[75] * PI1[0][8][11] + sp[76] * PI2[0][8][11] + sp[75] * PI1[0][11][8] + sp[77] * PI3[0][8][11] + sp[78] * PI4[0][8][11] + sp[76] * PI2[0][11][8] + sp[78] * PI4[0][11][8] + sp[79] * PI5[0][8][11];
    A[472] = sp[74] * PI0[0][8][12] + sp[75] * PI1[0][8][12] + sp[76] * PI2[0][8][12] + sp[75] * PI1[0][12][8] + sp[77] * PI3[0][8][12] + sp[78] * PI4[0][8][12] + sp[76] * PI2[0][12][8] + sp[78] * PI4[0][12][8] + sp[79] * PI5[0][8][12];
    A[473] = sp[74] * PI0[0][8][13] + sp[75] * PI1[0][8][13] + sp[76] * PI2[0][8][13] + sp[75] * PI1[0][13][8] + sp[77] * PI3[0][8][13] + sp[78] * PI4[0][8][13] + sp[76] * PI2[0][13][8] + sp[78] * PI4[0][13][8] + sp[79] * PI5[0][8][13];
    A[474] = sp[74] * PI0[0][8][14] + sp[75] * PI1[0][8][14] + sp[76] * PI2[0][8][14] + sp[75] * PI1[0][14][8] + sp[77] * PI3[0][8][14] + sp[78] * PI4[0][8][14] + sp[76] * PI2[0][14][8] + sp[78] * PI4[0][14][8] + sp[79] * PI5[0][8][14];
    A[475] = sp[74] * PI0[0][8][15] + sp[75] * PI1[0][8][15] + sp[76] * PI2[0][8][15] + sp[75] * PI1[0][15][8] + sp[77] * PI3[0][8][15] + sp[78] * PI4[0][8][15] + sp[76] * PI2[0][15][8] + sp[78] * PI4[0][15][8] + sp[79] * PI5[0][8][15];
    A[476] = sp[74] * PI0[0][8][16] + sp[75] * PI1[0][8][16] + sp[76] * PI2[0][8][16] + sp[75] * PI1[0][16][8] + sp[77] * PI3[0][8][16] + sp[78] * PI4[0][8][16] + sp[76] * PI2[0][16][8] + sp[78] * PI4[0][16][8] + sp[79] * PI5[0][8][16];
    A[477] = sp[74] * PI0[0][8][17] + sp[75] * PI1[0][8][17] + sp[76] * PI2[0][8][17] + sp[75] * PI1[0][17][8] + sp[77] * PI3[0][8][17] + sp[78] * PI4[0][8][17] + sp[76] * PI2[0][17][8] + sp[78] * PI4[0][17][8] + sp[79] * PI5[0][8][17];
    A[478] = sp[74] * PI0[0][8][18] + sp[75] * PI1[0][8][18] + sp[76] * PI2[0][8][18] + sp[75] * PI1[0][18][8] + sp[77] * PI3[0][8][18] + sp[78] * PI4[0][8][18] + sp[76] * PI2[0][18][8] + sp[78] * PI4[0][18][8] + sp[79] * PI5[0][8][18];
    A[479] = sp[74] * PI0[0][8][19] + sp[75] * PI1[0][8][19] + sp[76] * PI2[0][8][19] + sp[75] * PI1[0][19][8] + sp[77] * PI3[0][8][19] + sp[78] * PI4[0][8][19] + sp[76] * PI2[0][19][8] + sp[78] * PI4[0][19][8] + sp[79] * PI5[0][8][19];
    A[480] = sp[74] * PI0[0][8][20] + sp[75] * PI1[0][8][20] + sp[76] * PI2[0][8][20] + sp[75] * PI1[0][20][8] + sp[77] * PI3[0][8][20] + sp[78] * PI4[0][8][20] + sp[76] * PI2[0][20][8] + sp[78] * PI4[0][20][8] + sp[79] * PI5[0][8][20];
    A[481] = sp[74] * PI0[0][8][21] + sp[75] * PI1[0][8][21] + sp[76] * PI2[0][8][21] + sp[75] * PI1[0][21][8] + sp[77] * PI3[0][8][21] + sp[78] * PI4[0][8][21] + sp[76] * PI2[0][21][8] + sp[78] * PI4[0][21][8] + sp[79] * PI5[0][8][21];
    A[482] = sp[74] * PI0[0][8][22] + sp[75] * PI1[0][8][22] + sp[76] * PI2[0][8][22] + sp[75] * PI1[0][22][8] + sp[77] * PI3[0][8][22] + sp[78] * PI4[0][8][22] + sp[76] * PI2[0][22][8] + sp[78] * PI4[0][22][8] + sp[79] * PI5[0][8][22];
    A[483] = sp[74] * PI0[0][8][23] + sp[75] * PI1[0][8][23] + sp[76] * PI2[0][8][23] + sp[75] * PI1[0][23][8] + sp[77] * PI3[0][8][23] + sp[78] * PI4[0][8][23] + sp[76] * PI2[0][23][8] + sp[78] * PI4[0][23][8] + sp[79] * PI5[0][8][23];
    A[484] = sp[74] * PI0[0][8][24] + sp[75] * PI1[0][8][24] + sp[76] * PI2[0][8][24] + sp[75] * PI1[0][24][8] + sp[77] * PI3[0][8][24] + sp[78] * PI4[0][8][24] + sp[76] * PI2[0][24][8] + sp[78] * PI4[0][24][8] + sp[79] * PI5[0][8][24];
    A[485] = sp[74] * PI0[0][8][25] + sp[75] * PI1[0][8][25] + sp[76] * PI2[0][8][25] + sp[75] * PI1[0][25][8] + sp[77] * PI3[0][8][25] + sp[78] * PI4[0][8][25] + sp[76] * PI2[0][25][8] + sp[78] * PI4[0][25][8] + sp[79] * PI5[0][8][25];
    A[486] = sp[74] * PI0[0][8][26] + sp[75] * PI1[0][8][26] + sp[76] * PI2[0][8][26] + sp[75] * PI1[0][26][8] + sp[77] * PI3[0][8][26] + sp[78] * PI4[0][8][26] + sp[76] * PI2[0][26][8] + sp[78] * PI4[0][26][8] + sp[79] * PI5[0][8][26];
    A[487] = sp[74] * PI0[0][8][27] + sp[75] * PI1[0][8][27] + sp[76] * PI2[0][8][27] + sp[75] * PI1[0][27][8] + sp[77] * PI3[0][8][27] + sp[78] * PI4[0][8][27] + sp[76] * PI2[0][27][8] + sp[78] * PI4[0][27][8] + sp[79] * PI5[0][8][27];
    A[488] = sp[74] * PI0[0][8][28] + sp[75] * PI1[0][8][28] + sp[76] * PI2[0][8][28] + sp[75] * PI1[0][28][8] + sp[77] * PI3[0][8][28] + sp[78] * PI4[0][8][28] + sp[76] * PI2[0][28][8] + sp[78] * PI4[0][28][8] + sp[79] * PI5[0][8][28];
    A[489] = sp[74] * PI0[0][8][29] + sp[75] * PI1[0][8][29] + sp[76] * PI2[0][8][29] + sp[75] * PI1[0][29][8] + sp[77] * PI3[0][8][29] + sp[78] * PI4[0][8][29] + sp[76] * PI2[0][29][8] + sp[78] * PI4[0][29][8] + sp[79] * PI5[0][8][29];
    A[490] = sp[74] * PI0[0][9][0] + sp[75] * PI1[0][9][0] + sp[76] * PI2[0][9][0] + sp[75] * PI1[0][0][9] + sp[77] * PI3[0][9][0] + sp[78] * PI4[0][9][0] + sp[76] * PI2[0][0][9] + sp[78] * PI4[0][0][9] + sp[79] * PI5[0][9][0];
    A[491] = sp[74] * PI0[0][9][1] + sp[75] * PI1[0][1][9] + sp[76] * PI2[0][1][9];
    A[492] = sp[75] * PI1[0][9][1] + sp[77] * PI3[0][9][1] + sp[78] * PI4[0][1][9];
    A[493] = sp[76] * PI2[0][9][1] + sp[78] * PI4[0][9][1] + sp[79] * PI5[0][9][1];
    A[494] = sp[75] * PI1[0][9][2] + sp[76] * PI2[0][9][2] + sp[77] * PI3[0][9][2] + sp[78] * PI4[0][9][2] + sp[78] * PI4[0][2][9] + sp[79] * PI5[0][9][2];
    A[495] = sp[75] * PI1[0][9][3] + sp[76] * PI2[0][9][3] + sp[77] * PI3[0][9][3] + sp[78] * PI4[0][9][3] + sp[78] * PI4[0][3][9] + sp[79] * PI5[0][9][3];
    A[496] = sp[75] * PI1[0][9][4] + sp[76] * PI2[0][9][4] + sp[77] * PI3[0][9][4] + sp[78] * PI4[0][9][4] + sp[78] * PI4[0][4][9] + sp[79] * PI5[0][9][4];
    A[497] = sp[74] * PI0[0][9][2] + sp[76] * PI2[0][9][5] + sp[75] * PI1[0][2][9] + sp[78] * PI4[0][9][5] + sp[76] * PI2[0][2][9] + sp[79] * PI5[0][9][5];
    A[498] = sp[74] * PI0[0][9][3] + sp[76] * PI2[0][9][6] + sp[75] * PI1[0][3][9] + sp[78] * PI4[0][9][6] + sp[76] * PI2[0][3][9] + sp[79] * PI5[0][9][6];
    A[499] = sp[74] * PI0[0][9][4] + sp[76] * PI2[0][9][7] + sp[75] * PI1[0][4][9] + sp[78] * PI4[0][9][7] + sp[76] * PI2[0][4][9] + sp[79] * PI5[0][9][7];
    A[500] = sp[74] * PI0[0][9][5] + sp[75] * PI1[0][9][5] + sp[75] * PI1[0][5][9] + sp[77] * PI3[0][9][5] + sp[76] * PI2[0][5][9] + sp[78] * PI4[0][5][9];
    A[501] = sp[74] * PI0[0][9][6] + sp[75] * PI1[0][9][6] + sp[75] * PI1[0][6][9] + sp[77] * PI3[0][9][6] + sp[76] * PI2[0][6][9] + sp[78] * PI4[0][6][9];
    A[502] = sp[74] * PI0[0][9][7] + sp[75] * PI1[0][9][7] + sp[75] * PI1[0][7][9] + sp[77] * PI3[0][9][7] + sp[76] * PI2[0][7][9] + sp[78] * PI4[0][7][9];
    A[503] = sp[74] * PI0[0][9][8] + sp[75] * PI1[0][9][8] + sp[76] * PI2[0][9][8] + sp[75] * PI1[0][8][9] + sp[77] * PI3[0][9][8] + sp[78] * PI4[0][9][8] + sp[76] * PI2[0][8][9] + sp[78] * PI4[0][8][9] + sp[79] * PI5[0][9][8];
    A[504] = sp[74] * PI0[0][9][9] + sp[75] * PI1[0][9][9] + sp[76] * PI2[0][9][9] + sp[75] * PI1[0][9][9] + sp[77] * PI3[0][9][9] + sp[78] * PI4[0][9][9] + sp[76] * PI2[0][9][9] + sp[78] * PI4[0][9][9] + sp[79] * PI5[0][9][9];
    A[505] = sp[74] * PI0[0][9][10] + sp[75] * PI1[0][9][10] + sp[76] * PI2[0][9][10] + sp[75] * PI1[0][10][9] + sp[77] * PI3[0][9][10] + sp[78] * PI4[0][9][10] + sp[76] * PI2[0][10][9] + sp[78] * PI4[0][10][9] + sp[79] * PI5[0][9][10];
    A[506] = sp[74] * PI0[0][9][11] + sp[75] * PI1[0][9][11] + sp[76] * PI2[0][9][11] + sp[75] * PI1[0][11][9] + sp[77] * PI3[0][9][11] + sp[78] * PI4[0][9][11] + sp[76] * PI2[0][11][9] + sp[78] * PI4[0][11][9] + sp[79] * PI5[0][9][11];
    A[507] = sp[74] * PI0[0][9][12] + sp[75] * PI1[0][9][12] + sp[76] * PI2[0][9][12] + sp[75] * PI1[0][12][9] + sp[77] * PI3[0][9][12] + sp[78] * PI4[0][9][12] + sp[76] * PI2[0][12][9] + sp[78] * PI4[0][12][9] + sp[79] * PI5[0][9][12];
    A[508] = sp[74] * PI0[0][9][13] + sp[75] * PI1[0][9][13] + sp[76] * PI2[0][9][13] + sp[75] * PI1[0][13][9] + sp[77] * PI3[0][9][13] + sp[78] * PI4[0][9][13] + sp[76] * PI2[0][13][9] + sp[78] * PI4[0][13][9] + sp[79] * PI5[0][9][13];
    A[509] = sp[74] * PI0[0][9][14] + sp[75] * PI1[0][9][14] + sp[76] * PI2[0][9][14] + sp[75] * PI1[0][14][9] + sp[77] * PI3[0][9][14] + sp[78] * PI4[0][9][14] + sp[76] * PI2[0][14][9] + sp[78] * PI4[0][14][9] + sp[79] * PI5[0][9][14];
    A[510] = sp[74] * PI0[0][9][15] + sp[75] * PI1[0][9][15] + sp[76] * PI2[0][9][15] + sp[75] * PI1[0][15][9] + sp[77] * PI3[0][9][15] + sp[78] * PI4[0][9][15] + sp[76] * PI2[0][15][9] + sp[78] * PI4[0][15][9] + sp[79] * PI5[0][9][15];
    A[511] = sp[74] * PI0[0][9][16] + sp[75] * PI1[0][9][16] + sp[76] * PI2[0][9][16] + sp[75] * PI1[0][16][9] + sp[77] * PI3[0][9][16] + sp[78] * PI4[0][9][16] + sp[76] * PI2[0][16][9] + sp[78] * PI4[0][16][9] + sp[79] * PI5[0][9][16];
    A[512] = sp[74] * PI0[0][9][17] + sp[75] * PI1[0][9][17] + sp[76] * PI2[0][9][17] + sp[75] * PI1[0][17][9] + sp[77] * PI3[0][9][17] + sp[78] * PI4[0][9][17] + sp[76] * PI2[0][17][9] + sp[78] * PI4[0][17][9] + sp[79] * PI5[0][9][17];
    A[513] = sp[74] * PI0[0][9][18] + sp[75] * PI1[0][9][18] + sp[76] * PI2[0][9][18] + sp[75] * PI1[0][18][9] + sp[77] * PI3[0][9][18] + sp[78] * PI4[0][9][18] + sp[76] * PI2[0][18][9] + sp[78] * PI4[0][18][9] + sp[79] * PI5[0][9][18];
    A[514] = sp[74] * PI0[0][9][19] + sp[75] * PI1[0][9][19] + sp[76] * PI2[0][9][19] + sp[75] * PI1[0][19][9] + sp[77] * PI3[0][9][19] + sp[78] * PI4[0][9][19] + sp[76] * PI2[0][19][9] + sp[78] * PI4[0][19][9] + sp[79] * PI5[0][9][19];
    A[515] = sp[74] * PI0[0][9][20] + sp[75] * PI1[0][9][20] + sp[76] * PI2[0][9][20] + sp[75] * PI1[0][20][9] + sp[77] * PI3[0][9][20] + sp[78] * PI4[0][9][20] + sp[76] * PI2[0][20][9] + sp[78] * PI4[0][20][9] + sp[79] * PI5[0][9][20];
    A[516] = sp[74] * PI0[0][9][21] + sp[75] * PI1[0][9][21] + sp[76] * PI2[0][9][21] + sp[75] * PI1[0][21][9] + sp[77] * PI3[0][9][21] + sp[78] * PI4[0][9][21] + sp[76] * PI2[0][21][9] + sp[78] * PI4[0][21][9] + sp[79] * PI5[0][9][21];
    A[517] = sp[74] * PI0[0][9][22] + sp[75] * PI1[0][9][22] + sp[76] * PI2[0][9][22] + sp[75] * PI1[0][22][9] + sp[77] * PI3[0][9][22] + sp[78] * PI4[0][9][22] + sp[76] * PI2[0][22][9] + sp[78] * PI4[0][22][9] + sp[79] * PI5[0][9][22];
    A[518] = sp[74] * PI0[0][9][23] + sp[75] * PI1[0][9][23] + sp[76] * PI2[0][9][23] + sp[75] * PI1[0][23][9] + sp[77] * PI3[0][9][23] + sp[78] * PI4[0][9][23] + sp[76] * PI2[0][23][9] + sp[78] * PI4[0][23][9] + sp[79] * PI5[0][9][23];
    A[519] = sp[74] * PI0[0][9][24] + sp[75] * PI1[0][9][24] + sp[76] * PI2[0][9][24] + sp[75] * PI1[0][24][9] + sp[77] * PI3[0][9][24] + sp[78] * PI4[0][9][24] + sp[76] * PI2[0][24][9] + sp[78] * PI4[0][24][9] + sp[79] * PI5[0][9][24];
    A[520] = sp[74] * PI0[0][9][25] + sp[75] * PI1[0][9][25] + sp[76] * PI2[0][9][25] + sp[75] * PI1[0][25][9] + sp[77] * PI3[0][9][25] + sp[78] * PI4[0][9][25] + sp[76] * PI2[0][25][9] + sp[78] * PI4[0][25][9] + sp[79] * PI5[0][9][25];
    A[521] = sp[74] * PI0[0][9][26] + sp[75] * PI1[0][9][26] + sp[76] * PI2[0][9][26] + sp[75] * PI1[0][26][9] + sp[77] * PI3[0][9][26] + sp[78] * PI4[0][9][26] + sp[76] * PI2[0][26][9] + sp[78] * PI4[0][26][9] + sp[79] * PI5[0][9][26];
    A[522] = sp[74] * PI0[0][9][27] + sp[75] * PI1[0][9][27] + sp[76] * PI2[0][9][27] + sp[75] * PI1[0][27][9] + sp[77] * PI3[0][9][27] + sp[78] * PI4[0][9][27] + sp[76] * PI2[0][27][9] + sp[78] * PI4[0][27][9] + sp[79] * PI5[0][9][27];
    A[523] = sp[74] * PI0[0][9][28] + sp[75] * PI1[0][9][28] + sp[76] * PI2[0][9][28] + sp[75] * PI1[0][28][9] + sp[77] * PI3[0][9][28] + sp[78] * PI4[0][9][28] + sp[76] * PI2[0][28][9] + sp[78] * PI4[0][28][9] + sp[79] * PI5[0][9][28];
    A[524] = sp[74] * PI0[0][9][29] + sp[75] * PI1[0][9][29] + sp[76] * PI2[0][9][29] + sp[75] * PI1[0][29][9] + sp[77] * PI3[0][9][29] + sp[78] * PI4[0][9][29] + sp[76] * PI2[0][29][9] + sp[78] * PI4[0][29][9] + sp[79] * PI5[0][9][29];
    A[525] = sp[74] * PI0[0][10][0] + sp[75] * PI1[0][10][0] + sp[76] * PI2[0][10][0] + sp[75] * PI1[0][0][10] + sp[77] * PI3[0][10][0] + sp[78] * PI4[0][10][0] + sp[76] * PI2[0][0][10] + sp[78] * PI4[0][0][10] + sp[79] * PI5[0][10][0];
    A[526] = sp[74] * PI0[0][10][1] + sp[75] * PI1[0][1][10] + sp[76] * PI2[0][1][10];
    A[527] = sp[75] * PI1[0][10][1] + sp[77] * PI3[0][10][1] + sp[78] * PI4[0][1][10];
    A[528] = sp[76] * PI2[0][10][1] + sp[78] * PI4[0][10][1] + sp[79] * PI5[0][10][1];
    A[529] = sp[75] * PI1[0][10][2] + sp[76] * PI2[0][10][2] + sp[77] * PI3[0][10][2] + sp[78] * PI4[0][10][2] + sp[78] * PI4[0][2][10] + sp[79] * PI5[0][10][2];
    A[530] = sp[75] * PI1[0][10][3] + sp[76] * PI2[0][10][3] + sp[77] * PI3[0][10][3] + sp[78] * PI4[0][10][3] + sp[78] * PI4[0][3][10] + sp[79] * PI5[0][10][3];
    A[531] = sp[75] * PI1[0][10][4] + sp[76] * PI2[0][10][4] + sp[77] * PI3[0][10][4] + sp[78] * PI4[0][10][4] + sp[78] * PI4[0][4][10] + sp[79] * PI5[0][10][4];
    A[532] = sp[74] * PI0[0][10][2] + sp[76] * PI2[0][10][5] + sp[75] * PI1[0][2][10] + sp[78] * PI4[0][10][5] + sp[76] * PI2[0][2][10] + sp[79] * PI5[0][10][5];
    A[533] = sp[74] * PI0[0][10][3] + sp[76] * PI2[0][10][6] + sp[75] * PI1[0][3][10] + sp[78] * PI4[0][10][6] + sp[76] * PI2[0][3][10] + sp[79] * PI5[0][10][6];
    A[534] = sp[74] * PI0[0][10][4] + sp[76] * PI2[0][10][7] + sp[75] * PI1[0][4][10] + sp[78] * PI4[0][10][7] + sp[76] * PI2[0][4][10] + sp[79] * PI5[0][10][7];
    A[535] = sp[74] * PI0[0][10][5] + sp[75] * PI1[0][10][5] + sp[75] * PI1[0][5][10] + sp[77] * PI3[0][10][5] + sp[76] * PI2[0][5][10] + sp[78] * PI4[0][5][10];
    A[536] = sp[74] * PI0[0][10][6] + sp[75] * PI1[0][10][6] + sp[75] * PI1[0][6][10] + sp[77] * PI3[0][10][6] + sp[76] * PI2[0][6][10] + sp[78] * PI4[0][6][10];
    A[537] = sp[74] * PI0[0][10][7] + sp[75] * PI1[0][10][7] + sp[75] * PI1[0][7][10] + sp[77] * PI3[0][10][7] + sp[76] * PI2[0][7][10] + sp[78] * PI4[0][7][10];
    A[538] = sp[74] * PI0[0][10][8] + sp[75] * PI1[0][10][8] + sp[76] * PI2[0][10][8] + sp[75] * PI1[0][8][10] + sp[77] * PI3[0][10][8] + sp[78] * PI4[0][10][8] + sp[76] * PI2[0][8][10] + sp[78] * PI4[0][8][10] + sp[79] * PI5[0][10][8];
    A[539] = sp[74] * PI0[0][10][9] + sp[75] * PI1[0][10][9] + sp[76] * PI2[0][10][9] + sp[75] * PI1[0][9][10] + sp[77] * PI3[0][10][9] + sp[78] * PI4[0][10][9] + sp[76] * PI2[0][9][10] + sp[78] * PI4[0][9][10] + sp[79] * PI5[0][10][9];
    A[540] = sp[74] * PI0[0][10][10] + sp[75] * PI1[0][10][10] + sp[76] * PI2[0][10][10] + sp[75] * PI1[0][10][10] + sp[77] * PI3[0][10][10] + sp[78] * PI4[0][10][10] + sp[76] * PI2[0][10][10] + sp[78] * PI4[0][10][10] + sp[79] * PI5[0][10][10];
    A[541] = sp[74] * PI0[0][10][11] + sp[75] * PI1[0][10][11] + sp[76] * PI2[0][10][11] + sp[75] * PI1[0][11][10] + sp[77] * PI3[0][10][11] + sp[78] * PI4[0][10][11] + sp[76] * PI2[0][11][10] + sp[78] * PI4[0][11][10] + sp[79] * PI5[0][10][11];
    A[542] = sp[74] * PI0[0][10][12] + sp[75] * PI1[0][10][12] + sp[76] * PI2[0][10][12] + sp[75] * PI1[0][12][10] + sp[77] * PI3[0][10][12] + sp[78] * PI4[0][10][12] + sp[76] * PI2[0][12][10] + sp[78] * PI4[0][12][10] + sp[79] * PI5[0][10][12];
    A[543] = sp[74] * PI0[0][10][13] + sp[75] * PI1[0][10][13] + sp[76] * PI2[0][10][13] + sp[75] * PI1[0][13][10] + sp[77] * PI3[0][10][13] + sp[78] * PI4[0][10][13] + sp[76] * PI2[0][13][10] + sp[78] * PI4[0][13][10] + sp[79] * PI5[0][10][13];
    A[544] = sp[74] * PI0[0][10][14] + sp[75] * PI1[0][10][14] + sp[76] * PI2[0][10][14] + sp[75] * PI1[0][14][10] + sp[77] * PI3[0][10][14] + sp[78] * PI4[0][10][14] + sp[76] * PI2[0][14][10] + sp[78] * PI4[0][14][10] + sp[79] * PI5[0][10][14];
    A[545] = sp[74] * PI0[0][10][15] + sp[75] * PI1[0][10][15] + sp[76] * PI2[0][10][15] + sp[75] * PI1[0][15][10] + sp[77] * PI3[0][10][15] + sp[78] * PI4[0][10][15] + sp[76] * PI2[0][15][10] + sp[78] * PI4[0][15][10] + sp[79] * PI5[0][10][15];
    A[546] = sp[74] * PI0[0][10][16] + sp[75] * PI1[0][10][16] + sp[76] * PI2[0][10][16] + sp[75] * PI1[0][16][10] + sp[77] * PI3[0][10][16] + sp[78] * PI4[0][10][16] + sp[76] * PI2[0][16][10] + sp[78] * PI4[0][16][10] + sp[79] * PI5[0][10][16];
    A[547] = sp[74] * PI0[0][10][17] + sp[75] * PI1[0][10][17] + sp[76] * PI2[0][10][17] + sp[75] * PI1[0][17][10] + sp[77] * PI3[0][10][17] + sp[78] * PI4[0][10][17] + sp[76] * PI2[0][17][10] + sp[78] * PI4[0][17][10] + sp[79] * PI5[0][10][17];
    A[548] = sp[74] * PI0[0][10][18] + sp[75] * PI1[0][10][18] + sp[76] * PI2[0][10][18] + sp[75] * PI1[0][18][10] + sp[77] * PI3[0][10][18] + sp[78] * PI4[0][10][18] + sp[76] * PI2[0][18][10] + sp[78] * PI4[0][18][10] + sp[79] * PI5[0][10][18];
    A[549] = sp[74] * PI0[0][10][19] + sp[75] * PI1[0][10][19] + sp[76] * PI2[0][10][19] + sp[75] * PI1[0][19][10] + sp[77] * PI3[0][10][19] + sp[78] * PI4[0][10][19] + sp[76] * PI2[0][19][10] + sp[78] * PI4[0][19][10] + sp[79] * PI5[0][10][19];
    A[550] = sp[74] * PI0[0][10][20] + sp[75] * PI1[0][10][20] + sp[76] * PI2[0][10][20] + sp[75] * PI1[0][20][10] + sp[77] * PI3[0][10][20] + sp[78] * PI4[0][10][20] + sp[76] * PI2[0][20][10] + sp[78] * PI4[0][20][10] + sp[79] * PI5[0][10][20];
    A[551] = sp[74] * PI0[0][10][21] + sp[75] * PI1[0][10][21] + sp[76] * PI2[0][10][21] + sp[75] * PI1[0][21][10] + sp[77] * PI3[0][10][21] + sp[78] * PI4[0][10][21] + sp[76] * PI2[0][21][10] + sp[78] * PI4[0][21][10] + sp[79] * PI5[0][10][21];
    A[552] = sp[74] * PI0[0][10][22] + sp[75] * PI1[0][10][22] + sp[76] * PI2[0][10][22] + sp[75] * PI1[0][22][10] + sp[77] * PI3[0][10][22] + sp[78] * PI4[0][10][22] + sp[76] * PI2[0][22][10] + sp[78] * PI4[0][22][10] + sp[79] * PI5[0][10][22];
    A[553] = sp[74] * PI0[0][10][23] + sp[75] * PI1[0][10][23] + sp[76] * PI2[0][10][23] + sp[75] * PI1[0][23][10] + sp[77] * PI3[0][10][23] + sp[78] * PI4[0][10][23] + sp[76] * PI2[0][23][10] + sp[78] * PI4[0][23][10] + sp[79] * PI5[0][10][23];
    A[554] = sp[74] * PI0[0][10][24] + sp[75] * PI1[0][10][24] + sp[76] * PI2[0][10][24] + sp[75] * PI1[0][24][10] + sp[77] * PI3[0][10][24] + sp[78] * PI4[0][10][24] + sp[76] * PI2[0][24][10] + sp[78] * PI4[0][24][10] + sp[79] * PI5[0][10][24];
    A[555] = sp[74] * PI0[0][10][25] + sp[75] * PI1[0][10][25] + sp[76] * PI2[0][10][25] + sp[75] * PI1[0][25][10] + sp[77] * PI3[0][10][25] + sp[78] * PI4[0][10][25] + sp[76] * PI2[0][25][10] + sp[78] * PI4[0][25][10] + sp[79] * PI5[0][10][25];
    A[556] = sp[74] * PI0[0][10][26] + sp[75] * PI1[0][10][26] + sp[76] * PI2[0][10][26] + sp[75] * PI1[0][26][10] + sp[77] * PI3[0][10][26] + sp[78] * PI4[0][10][26] + sp[76] * PI2[0][26][10] + sp[78] * PI4[0][26][10] + sp[79] * PI5[0][10][26];
    A[557] = sp[74] * PI0[0][10][27] + sp[75] * PI1[0][10][27] + sp[76] * PI2[0][10][27] + sp[75] * PI1[0][27][10] + sp[77] * PI3[0][10][27] + sp[78] * PI4[0][10][27] + sp[76] * PI2[0][27][10] + sp[78] * PI4[0][27][10] + sp[79] * PI5[0][10][27];
    A[558] = sp[74] * PI0[0][10][28] + sp[75] * PI1[0][10][28] + sp[76] * PI2[0][10][28] + sp[75] * PI1[0][28][10] + sp[77] * PI3[0][10][28] + sp[78] * PI4[0][10][28] + sp[76] * PI2[0][28][10] + sp[78] * PI4[0][28][10] + sp[79] * PI5[0][10][28];
    A[559] = sp[74] * PI0[0][10][29] + sp[75] * PI1[0][10][29] + sp[76] * PI2[0][10][29] + sp[75] * PI1[0][29][10] + sp[77] * PI3[0][10][29] + sp[78] * PI4[0][10][29] + sp[76] * PI2[0][29][10] + sp[78] * PI4[0][29][10] + sp[79] * PI5[0][10][29];
    A[560] = sp[74] * PI0[0][11][0] + sp[75] * PI1[0][11][0] + sp[76] * PI2[0][11][0] + sp[75] * PI1[0][0][11] + sp[77] * PI3[0][11][0] + sp[78] * PI4[0][11][0] + sp[76] * PI2[0][0][11] + sp[78] * PI4[0][0][11] + sp[79] * PI5[0][11][0];
    A[561] = sp[74] * PI0[0][11][1] + sp[75] * PI1[0][1][11] + sp[76] * PI2[0][1][11];
    A[562] = sp[75] * PI1[0][11][1] + sp[77] * PI3[0][11][1] + sp[78] * PI4[0][1][11];
    A[563] = sp[76] * PI2[0][11][1] + sp[78] * PI4[0][11][1] + sp[79] * PI5[0][11][1];
    A[564] = sp[75] * PI1[0][11][2] + sp[76] * PI2[0][11][2] + sp[77] * PI3[0][11][2] + sp[78] * PI4[0][11][2] + sp[78] * PI4[0][2][11] + sp[79] * PI5[0][11][2];
    A[565] = sp[75] * PI1[0][11][3] + sp[76] * PI2[0][11][3] + sp[77] * PI3[0][11][3] + sp[78] * PI4[0][11][3] + sp[78] * PI4[0][3][11] + sp[79] * PI5[0][11][3];
    A[566] = sp[75] * PI1[0][11][4] + sp[76] * PI2[0][11][4] + sp[77] * PI3[0][11][4] + sp[78] * PI4[0][11][4] + sp[78] * PI4[0][4][11] + sp[79] * PI5[0][11][4];
    A[567] = sp[74] * PI0[0][11][2] + sp[76] * PI2[0][11][5] + sp[75] * PI1[0][2][11] + sp[78] * PI4[0][11][5] + sp[76] * PI2[0][2][11] + sp[79] * PI5[0][11][5];
    A[568] = sp[74] * PI0[0][11][3] + sp[76] * PI2[0][11][6] + sp[75] * PI1[0][3][11] + sp[78] * PI4[0][11][6] + sp[76] * PI2[0][3][11] + sp[79] * PI5[0][11][6];
    A[569] = sp[74] * PI0[0][11][4] + sp[76] * PI2[0][11][7] + sp[75] * PI1[0][4][11] + sp[78] * PI4[0][11][7] + sp[76] * PI2[0][4][11] + sp[79] * PI5[0][11][7];
    A[570] = sp[74] * PI0[0][11][5] + sp[75] * PI1[0][11][5] + sp[75] * PI1[0][5][11] + sp[77] * PI3[0][11][5] + sp[76] * PI2[0][5][11] + sp[78] * PI4[0][5][11];
    A[571] = sp[74] * PI0[0][11][6] + sp[75] * PI1[0][11][6] + sp[75] * PI1[0][6][11] + sp[77] * PI3[0][11][6] + sp[76] * PI2[0][6][11] + sp[78] * PI4[0][6][11];
    A[572] = sp[74] * PI0[0][11][7] + sp[75] * PI1[0][11][7] + sp[75] * PI1[0][7][11] + sp[77] * PI3[0][11][7] + sp[76] * PI2[0][7][11] + sp[78] * PI4[0][7][11];
    A[573] = sp[74] * PI0[0][11][8] + sp[75] * PI1[0][11][8] + sp[76] * PI2[0][11][8] + sp[75] * PI1[0][8][11] + sp[77] * PI3[0][11][8] + sp[78] * PI4[0][11][8] + sp[76] * PI2[0][8][11] + sp[78] * PI4[0][8][11] + sp[79] * PI5[0][11][8];
    A[574] = sp[74] * PI0[0][11][9] + sp[75] * PI1[0][11][9] + sp[76] * PI2[0][11][9] + sp[75] * PI1[0][9][11] + sp[77] * PI3[0][11][9] + sp[78] * PI4[0][11][9] + sp[76] * PI2[0][9][11] + sp[78] * PI4[0][9][11] + sp[79] * PI5[0][11][9];
    A[575] = sp[74] * PI0[0][11][10] + sp[75] * PI1[0][11][10] + sp[76] * PI2[0][11][10] + sp[75] * PI1[0][10][11] + sp[77] * PI3[0][11][10] + sp[78] * PI4[0][11][10] + sp[76] * PI2[0][10][11] + sp[78] * PI4[0][10][11] + sp[79] * PI5[0][11][10];
    A[576] = sp[74] * PI0[0][11][11] + sp[75] * PI1[0][11][11] + sp[76] * PI2[0][11][11] + sp[75] * PI1[0][11][11] + sp[77] * PI3[0][11][11] + sp[78] * PI4[0][11][11] + sp[76] * PI2[0][11][11] + sp[78] * PI4[0][11][11] + sp[79] * PI5[0][11][11];
    A[577] = sp[74] * PI0[0][11][12] + sp[75] * PI1[0][11][12] + sp[76] * PI2[0][11][12] + sp[75] * PI1[0][12][11] + sp[77] * PI3[0][11][12] + sp[78] * PI4[0][11][12] + sp[76] * PI2[0][12][11] + sp[78] * PI4[0][12][11] + sp[79] * PI5[0][11][12];
    A[578] = sp[74] * PI0[0][11][13] + sp[75] * PI1[0][11][13] + sp[76] * PI2[0][11][13] + sp[75] * PI1[0][13][11] + sp[77] * PI3[0][11][13] + sp[78] * PI4[0][11][13] + sp[76] * PI2[0][13][11] + sp[78] * PI4[0][13][11] + sp[79] * PI5[0][11][13];
    A[579] = sp[74] * PI0[0][11][14] + sp[75] * PI1[0][11][14] + sp[76] * PI2[0][11][14] + sp[75] * PI1[0][14][11] + sp[77] * PI3[0][11][14] + sp[78] * PI4[0][11][14] + sp[76] * PI2[0][14][11] + sp[78] * PI4[0][14][11] + sp[79] * PI5[0][11][14];
    A[580] = sp[74] * PI0[0][11][15] + sp[75] * PI1[0][11][15] + sp[76] * PI2[0][11][15] + sp[75] * PI1[0][15][11] + sp[77] * PI3[0][11][15] + sp[78] * PI4[0][11][15] + sp[76] * PI2[0][15][11] + sp[78] * PI4[0][15][11] + sp[79] * PI5[0][11][15];
    A[581] = sp[74] * PI0[0][11][16] + sp[75] * PI1[0][11][16] + sp[76] * PI2[0][11][16] + sp[75] * PI1[0][16][11] + sp[77] * PI3[0][11][16] + sp[78] * PI4[0][11][16] + sp[76] * PI2[0][16][11] + sp[78] * PI4[0][16][11] + sp[79] * PI5[0][11][16];
    A[582] = sp[74] * PI0[0][11][17] + sp[75] * PI1[0][11][17] + sp[76] * PI2[0][11][17] + sp[75] * PI1[0][17][11] + sp[77] * PI3[0][11][17] + sp[78] * PI4[0][11][17] + sp[76] * PI2[0][17][11] + sp[78] * PI4[0][17][11] + sp[79] * PI5[0][11][17];
    A[583] = sp[74] * PI0[0][11][18] + sp[75] * PI1[0][11][18] + sp[76] * PI2[0][11][18] + sp[75] * PI1[0][18][11] + sp[77] * PI3[0][11][18] + sp[78] * PI4[0][11][18] + sp[76] * PI2[0][18][11] + sp[78] * PI4[0][18][11] + sp[79] * PI5[0][11][18];
    A[584] = sp[74] * PI0[0][11][19] + sp[75] * PI1[0][11][19] + sp[76] * PI2[0][11][19] + sp[75] * PI1[0][19][11] + sp[77] * PI3[0][11][19] + sp[78] * PI4[0][11][19] + sp[76] * PI2[0][19][11] + sp[78] * PI4[0][19][11] + sp[79] * PI5[0][11][19];
    A[585] = sp[74] * PI0[0][11][20] + sp[75] * PI1[0][11][20] + sp[76] * PI2[0][11][20] + sp[75] * PI1[0][20][11] + sp[77] * PI3[0][11][20] + sp[78] * PI4[0][11][20] + sp[76] * PI2[0][20][11] + sp[78] * PI4[0][20][11] + sp[79] * PI5[0][11][20];
    A[586] = sp[74] * PI0[0][11][21] + sp[75] * PI1[0][11][21] + sp[76] * PI2[0][11][21] + sp[75] * PI1[0][21][11] + sp[77] * PI3[0][11][21] + sp[78] * PI4[0][11][21] + sp[76] * PI2[0][21][11] + sp[78] * PI4[0][21][11] + sp[79] * PI5[0][11][21];
    A[587] = sp[74] * PI0[0][11][22] + sp[75] * PI1[0][11][22] + sp[76] * PI2[0][11][22] + sp[75] * PI1[0][22][11] + sp[77] * PI3[0][11][22] + sp[78] * PI4[0][11][22] + sp[76] * PI2[0][22][11] + sp[78] * PI4[0][22][11] + sp[79] * PI5[0][11][22];
    A[588] = sp[74] * PI0[0][11][23] + sp[75] * PI1[0][11][23] + sp[76] * PI2[0][11][23] + sp[75] * PI1[0][23][11] + sp[77] * PI3[0][11][23] + sp[78] * PI4[0][11][23] + sp[76] * PI2[0][23][11] + sp[78] * PI4[0][23][11] + sp[79] * PI5[0][11][23];
    A[589] = sp[74] * PI0[0][11][24] + sp[75] * PI1[0][11][24] + sp[76] * PI2[0][11][24] + sp[75] * PI1[0][24][11] + sp[77] * PI3[0][11][24] + sp[78] * PI4[0][11][24] + sp[76] * PI2[0][24][11] + sp[78] * PI4[0][24][11] + sp[79] * PI5[0][11][24];
    A[590] = sp[74] * PI0[0][11][25] + sp[75] * PI1[0][11][25] + sp[76] * PI2[0][11][25] + sp[75] * PI1[0][25][11] + sp[77] * PI3[0][11][25] + sp[78] * PI4[0][11][25] + sp[76] * PI2[0][25][11] + sp[78] * PI4[0][25][11] + sp[79] * PI5[0][11][25];
    A[591] = sp[74] * PI0[0][11][26] + sp[75] * PI1[0][11][26] + sp[76] * PI2[0][11][26] + sp[75] * PI1[0][26][11] + sp[77] * PI3[0][11][26] + sp[78] * PI4[0][11][26] + sp[76] * PI2[0][26][11] + sp[78] * PI4[0][26][11] + sp[79] * PI5[0][11][26];
    A[592] = sp[74] * PI0[0][11][27] + sp[75] * PI1[0][11][27] + sp[76] * PI2[0][11][27] + sp[75] * PI1[0][27][11] + sp[77] * PI3[0][11][27] + sp[78] * PI4[0][11][27] + sp[76] * PI2[0][27][11] + sp[78] * PI4[0][27][11] + sp[79] * PI5[0][11][27];
    A[593] = sp[74] * PI0[0][11][28] + sp[75] * PI1[0][11][28] + sp[76] * PI2[0][11][28] + sp[75] * PI1[0][28][11] + sp[77] * PI3[0][11][28] + sp[78] * PI4[0][11][28] + sp[76] * PI2[0][28][11] + sp[78] * PI4[0][28][11] + sp[79] * PI5[0][11][28];
    A[594] = sp[74] * PI0[0][11][29] + sp[75] * PI1[0][11][29] + sp[76] * PI2[0][11][29] + sp[75] * PI1[0][29][11] + sp[77] * PI3[0][11][29] + sp[78] * PI4[0][11][29] + sp[76] * PI2[0][29][11] + sp[78] * PI4[0][29][11] + sp[79] * PI5[0][11][29];
    A[595] = sp[74] * PI0[0][12][0] + sp[75] * PI1[0][12][0] + sp[76] * PI2[0][12][0] + sp[75] * PI1[0][0][12] + sp[77] * PI3[0][12][0] + sp[78] * PI4[0][12][0] + sp[76] * PI2[0][0][12] + sp[78] * PI4[0][0][12] + sp[79] * PI5[0][12][0];
    A[596] = sp[74] * PI0[0][12][1] + sp[75] * PI1[0][1][12] + sp[76] * PI2[0][1][12];
    A[597] = sp[75] * PI1[0][12][1] + sp[77] * PI3[0][12][1] + sp[78] * PI4[0][1][12];
    A[598] = sp[76] * PI2[0][12][1] + sp[78] * PI4[0][12][1] + sp[79] * PI5[0][12][1];
    A[599] = sp[75] * PI1[0][12][2] + sp[76] * PI2[0][12][2] + sp[77] * PI3[0][12][2] + sp[78] * PI4[0][12][2] + sp[78] * PI4[0][2][12] + sp[79] * PI5[0][12][2];
    A[600] = sp[75] * PI1[0][12][3] + sp[76] * PI2[0][12][3] + sp[77] * PI3[0][12][3] + sp[78] * PI4[0][12][3] + sp[78] * PI4[0][3][12] + sp[79] * PI5[0][12][3];
    A[601] = sp[75] * PI1[0][12][4] + sp[76] * PI2[0][12][4] + sp[77] * PI3[0][12][4] + sp[78] * PI4[0][12][4] + sp[78] * PI4[0][4][12] + sp[79] * PI5[0][12][4];
    A[602] = sp[74] * PI0[0][12][2] + sp[76] * PI2[0][12][5] + sp[75] * PI1[0][2][12] + sp[78] * PI4[0][12][5] + sp[76] * PI2[0][2][12] + sp[79] * PI5[0][12][5];
    A[603] = sp[74] * PI0[0][12][3] + sp[76] * PI2[0][12][6] + sp[75] * PI1[0][3][12] + sp[78] * PI4[0][12][6] + sp[76] * PI2[0][3][12] + sp[79] * PI5[0][12][6];
    A[604] = sp[74] * PI0[0][12][4] + sp[76] * PI2[0][12][7] + sp[75] * PI1[0][4][12] + sp[78] * PI4[0][12][7] + sp[76] * PI2[0][4][12] + sp[79] * PI5[0][12][7];
    A[605] = sp[74] * PI0[0][12][5] + sp[75] * PI1[0][12][5] + sp[75] * PI1[0][5][12] + sp[77] * PI3[0][12][5] + sp[76] * PI2[0][5][12] + sp[78] * PI4[0][5][12];
    A[606] = sp[74] * PI0[0][12][6] + sp[75] * PI1[0][12][6] + sp[75] * PI1[0][6][12] + sp[77] * PI3[0][12][6] + sp[76] * PI2[0][6][12] + sp[78] * PI4[0][6][12];
    A[607] = sp[74] * PI0[0][12][7] + sp[75] * PI1[0][12][7] + sp[75] * PI1[0][7][12] + sp[77] * PI3[0][12][7] + sp[76] * PI2[0][7][12] + sp[78] * PI4[0][7][12];
    A[608] = sp[74] * PI0[0][12][8] + sp[75] * PI1[0][12][8] + sp[76] * PI2[0][12][8] + sp[75] * PI1[0][8][12] + sp[77] * PI3[0][12][8] + sp[78] * PI4[0][12][8] + sp[76] * PI2[0][8][12] + sp[78] * PI4[0][8][12] + sp[79] * PI5[0][12][8];
    A[609] = sp[74] * PI0[0][12][9] + sp[75] * PI1[0][12][9] + sp[76] * PI2[0][12][9] + sp[75] * PI1[0][9][12] + sp[77] * PI3[0][12][9] + sp[78] * PI4[0][12][9] + sp[76] * PI2[0][9][12] + sp[78] * PI4[0][9][12] + sp[79] * PI5[0][12][9];
    A[610] = sp[74] * PI0[0][12][10] + sp[75] * PI1[0][12][10] + sp[76] * PI2[0][12][10] + sp[75] * PI1[0][10][12] + sp[77] * PI3[0][12][10] + sp[78] * PI4[0][12][10] + sp[76] * PI2[0][10][12] + sp[78] * PI4[0][10][12] + sp[79] * PI5[0][12][10];
    A[611] = sp[74] * PI0[0][12][11] + sp[75] * PI1[0][12][11] + sp[76] * PI2[0][12][11] + sp[75] * PI1[0][11][12] + sp[77] * PI3[0][12][11] + sp[78] * PI4[0][12][11] + sp[76] * PI2[0][11][12] + sp[78] * PI4[0][11][12] + sp[79] * PI5[0][12][11];
    A[612] = sp[74] * PI0[0][12][12] + sp[75] * PI1[0][12][12] + sp[76] * PI2[0][12][12] + sp[75] * PI1[0][12][12] + sp[77] * PI3[0][12][12] + sp[78] * PI4[0][12][12] + sp[76] * PI2[0][12][12] + sp[78] * PI4[0][12][12] + sp[79] * PI5[0][12][12];
    A[613] = sp[74] * PI0[0][12][13] + sp[75] * PI1[0][12][13] + sp[76] * PI2[0][12][13] + sp[75] * PI1[0][13][12] + sp[77] * PI3[0][12][13] + sp[78] * PI4[0][12][13] + sp[76] * PI2[0][13][12] + sp[78] * PI4[0][13][12] + sp[79] * PI5[0][12][13];
    A[614] = sp[74] * PI0[0][12][14] + sp[75] * PI1[0][12][14] + sp[76] * PI2[0][12][14] + sp[75] * PI1[0][14][12] + sp[77] * PI3[0][12][14] + sp[78] * PI4[0][12][14] + sp[76] * PI2[0][14][12] + sp[78] * PI4[0][14][12] + sp[79] * PI5[0][12][14];
    A[615] = sp[74] * PI0[0][12][15] + sp[75] * PI1[0][12][15] + sp[76] * PI2[0][12][15] + sp[75] * PI1[0][15][12] + sp[77] * PI3[0][12][15] + sp[78] * PI4[0][12][15] + sp[76] * PI2[0][15][12] + sp[78] * PI4[0][15][12] + sp[79] * PI5[0][12][15];
    A[616] = sp[74] * PI0[0][12][16] + sp[75] * PI1[0][12][16] + sp[76] * PI2[0][12][16] + sp[75] * PI1[0][16][12] + sp[77] * PI3[0][12][16] + sp[78] * PI4[0][12][16] + sp[76] * PI2[0][16][12] + sp[78] * PI4[0][16][12] + sp[79] * PI5[0][12][16];
    A[617] = sp[74] * PI0[0][12][17] + sp[75] * PI1[0][12][17] + sp[76] * PI2[0][12][17] + sp[75] * PI1[0][17][12] + sp[77] * PI3[0][12][17] + sp[78] * PI4[0][12][17] + sp[76] * PI2[0][17][12] + sp[78] * PI4[0][17][12] + sp[79] * PI5[0][12][17];
    A[618] = sp[74] * PI0[0][12][18] + sp[75] * PI1[0][12][18] + sp[76] * PI2[0][12][18] + sp[75] * PI1[0][18][12] + sp[77] * PI3[0][12][18] + sp[78] * PI4[0][12][18] + sp[76] * PI2[0][18][12] + sp[78] * PI4[0][18][12] + sp[79] * PI5[0][12][18];
    A[619] = sp[74] * PI0[0][12][19] + sp[75] * PI1[0][12][19] + sp[76] * PI2[0][12][19] + sp[75] * PI1[0][19][12] + sp[77] * PI3[0][12][19] + sp[78] * PI4[0][12][19] + sp[76] * PI2[0][19][12] + sp[78] * PI4[0][19][12] + sp[79] * PI5[0][12][19];
    A[620] = sp[74] * PI0[0][12][20] + sp[75] * PI1[0][12][20] + sp[76] * PI2[0][12][20] + sp[75] * PI1[0][20][12] + sp[77] * PI3[0][12][20] + sp[78] * PI4[0][12][20] + sp[76] * PI2[0][20][12] + sp[78] * PI4[0][20][12] + sp[79] * PI5[0][12][20];
    A[621] = sp[74] * PI0[0][12][21] + sp[75] * PI1[0][12][21] + sp[76] * PI2[0][12][21] + sp[75] * PI1[0][21][12] + sp[77] * PI3[0][12][21] + sp[78] * PI4[0][12][21] + sp[76] * PI2[0][21][12] + sp[78] * PI4[0][21][12] + sp[79] * PI5[0][12][21];
    A[622] = sp[74] * PI0[0][12][22] + sp[75] * PI1[0][12][22] + sp[76] * PI2[0][12][22] + sp[75] * PI1[0][22][12] + sp[77] * PI3[0][12][22] + sp[78] * PI4[0][12][22] + sp[76] * PI2[0][22][12] + sp[78] * PI4[0][22][12] + sp[79] * PI5[0][12][22];
    A[623] = sp[74] * PI0[0][12][23] + sp[75] * PI1[0][12][23] + sp[76] * PI2[0][12][23] + sp[75] * PI1[0][23][12] + sp[77] * PI3[0][12][23] + sp[78] * PI4[0][12][23] + sp[76] * PI2[0][23][12] + sp[78] * PI4[0][23][12] + sp[79] * PI5[0][12][23];
    A[624] = sp[74] * PI0[0][12][24] + sp[75] * PI1[0][12][24] + sp[76] * PI2[0][12][24] + sp[75] * PI1[0][24][12] + sp[77] * PI3[0][12][24] + sp[78] * PI4[0][12][24] + sp[76] * PI2[0][24][12] + sp[78] * PI4[0][24][12] + sp[79] * PI5[0][12][24];
    A[625] = sp[74] * PI0[0][12][25] + sp[75] * PI1[0][12][25] + sp[76] * PI2[0][12][25] + sp[75] * PI1[0][25][12] + sp[77] * PI3[0][12][25] + sp[78] * PI4[0][12][25] + sp[76] * PI2[0][25][12] + sp[78] * PI4[0][25][12] + sp[79] * PI5[0][12][25];
    A[626] = sp[74] * PI0[0][12][26] + sp[75] * PI1[0][12][26] + sp[76] * PI2[0][12][26] + sp[75] * PI1[0][26][12] + sp[77] * PI3[0][12][26] + sp[78] * PI4[0][12][26] + sp[76] * PI2[0][26][12] + sp[78] * PI4[0][26][12] + sp[79] * PI5[0][12][26];
    A[627] = sp[74] * PI0[0][12][27] + sp[75] * PI1[0][12][27] + sp[76] * PI2[0][12][27] + sp[75] * PI1[0][27][12] + sp[77] * PI3[0][12][27] + sp[78] * PI4[0][12][27] + sp[76] * PI2[0][27][12] + sp[78] * PI4[0][27][12] + sp[79] * PI5[0][12][27];
    A[628] = sp[74] * PI0[0][12][28] + sp[75] * PI1[0][12][28] + sp[76] * PI2[0][12][28] + sp[75] * PI1[0][28][12] + sp[77] * PI3[0][12][28] + sp[78] * PI4[0][12][28] + sp[76] * PI2[0][28][12] + sp[78] * PI4[0][28][12] + sp[79] * PI5[0][12][28];
    A[629] = sp[74] * PI0[0][12][29] + sp[75] * PI1[0][12][29] + sp[76] * PI2[0][12][29] + sp[75] * PI1[0][29][12] + sp[77] * PI3[0][12][29] + sp[78] * PI4[0][12][29] + sp[76] * PI2[0][29][12] + sp[78] * PI4[0][29][12] + sp[79] * PI5[0][12][29];
    A[630] = sp[74] * PI0[0][13][0] + sp[75] * PI1[0][13][0] + sp[76] * PI2[0][13][0] + sp[75] * PI1[0][0][13] + sp[77] * PI3[0][13][0] + sp[78] * PI4[0][13][0] + sp[76] * PI2[0][0][13] + sp[78] * PI4[0][0][13] + sp[79] * PI5[0][13][0];
    A[631] = sp[74] * PI0[0][13][1] + sp[75] * PI1[0][1][13] + sp[76] * PI2[0][1][13];
    A[632] = sp[75] * PI1[0][13][1] + sp[77] * PI3[0][13][1] + sp[78] * PI4[0][1][13];
    A[633] = sp[76] * PI2[0][13][1] + sp[78] * PI4[0][13][1] + sp[79] * PI5[0][13][1];
    A[634] = sp[75] * PI1[0][13][2] + sp[76] * PI2[0][13][2] + sp[77] * PI3[0][13][2] + sp[78] * PI4[0][13][2] + sp[78] * PI4[0][2][13] + sp[79] * PI5[0][13][2];
    A[635] = sp[75] * PI1[0][13][3] + sp[76] * PI2[0][13][3] + sp[77] * PI3[0][13][3] + sp[78] * PI4[0][13][3] + sp[78] * PI4[0][3][13] + sp[79] * PI5[0][13][3];
    A[636] = sp[75] * PI1[0][13][4] + sp[76] * PI2[0][13][4] + sp[77] * PI3[0][13][4] + sp[78] * PI4[0][13][4] + sp[78] * PI4[0][4][13] + sp[79] * PI5[0][13][4];
    A[637] = sp[74] * PI0[0][13][2] + sp[76] * PI2[0][13][5] + sp[75] * PI1[0][2][13] + sp[78] * PI4[0][13][5] + sp[76] * PI2[0][2][13] + sp[79] * PI5[0][13][5];
    A[638] = sp[74] * PI0[0][13][3] + sp[76] * PI2[0][13][6] + sp[75] * PI1[0][3][13] + sp[78] * PI4[0][13][6] + sp[76] * PI2[0][3][13] + sp[79] * PI5[0][13][6];
    A[639] = sp[74] * PI0[0][13][4] + sp[76] * PI2[0][13][7] + sp[75] * PI1[0][4][13] + sp[78] * PI4[0][13][7] + sp[76] * PI2[0][4][13] + sp[79] * PI5[0][13][7];
    A[640] = sp[74] * PI0[0][13][5] + sp[75] * PI1[0][13][5] + sp[75] * PI1[0][5][13] + sp[77] * PI3[0][13][5] + sp[76] * PI2[0][5][13] + sp[78] * PI4[0][5][13];
    A[641] = sp[74] * PI0[0][13][6] + sp[75] * PI1[0][13][6] + sp[75] * PI1[0][6][13] + sp[77] * PI3[0][13][6] + sp[76] * PI2[0][6][13] + sp[78] * PI4[0][6][13];
    A[642] = sp[74] * PI0[0][13][7] + sp[75] * PI1[0][13][7] + sp[75] * PI1[0][7][13] + sp[77] * PI3[0][13][7] + sp[76] * PI2[0][7][13] + sp[78] * PI4[0][7][13];
    A[643] = sp[74] * PI0[0][13][8] + sp[75] * PI1[0][13][8] + sp[76] * PI2[0][13][8] + sp[75] * PI1[0][8][13] + sp[77] * PI3[0][13][8] + sp[78] * PI4[0][13][8] + sp[76] * PI2[0][8][13] + sp[78] * PI4[0][8][13] + sp[79] * PI5[0][13][8];
    A[644] = sp[74] * PI0[0][13][9] + sp[75] * PI1[0][13][9] + sp[76] * PI2[0][13][9] + sp[75] * PI1[0][9][13] + sp[77] * PI3[0][13][9] + sp[78] * PI4[0][13][9] + sp[76] * PI2[0][9][13] + sp[78] * PI4[0][9][13] + sp[79] * PI5[0][13][9];
    A[645] = sp[74] * PI0[0][13][10] + sp[75] * PI1[0][13][10] + sp[76] * PI2[0][13][10] + sp[75] * PI1[0][10][13] + sp[77] * PI3[0][13][10] + sp[78] * PI4[0][13][10] + sp[76] * PI2[0][10][13] + sp[78] * PI4[0][10][13] + sp[79] * PI5[0][13][10];
    A[646] = sp[74] * PI0[0][13][11] + sp[75] * PI1[0][13][11] + sp[76] * PI2[0][13][11] + sp[75] * PI1[0][11][13] + sp[77] * PI3[0][13][11] + sp[78] * PI4[0][13][11] + sp[76] * PI2[0][11][13] + sp[78] * PI4[0][11][13] + sp[79] * PI5[0][13][11];
    A[647] = sp[74] * PI0[0][13][12] + sp[75] * PI1[0][13][12] + sp[76] * PI2[0][13][12] + sp[75] * PI1[0][12][13] + sp[77] * PI3[0][13][12] + sp[78] * PI4[0][13][12] + sp[76] * PI2[0][12][13] + sp[78] * PI4[0][12][13] + sp[79] * PI5[0][13][12];
    A[648] = sp[74] * PI0[0][13][13] + sp[75] * PI1[0][13][13] + sp[76] * PI2[0][13][13] + sp[75] * PI1[0][13][13] + sp[77] * PI3[0][13][13] + sp[78] * PI4[0][13][13] + sp[76] * PI2[0][13][13] + sp[78] * PI4[0][13][13] + sp[79] * PI5[0][13][13];
    A[649] = sp[74] * PI0[0][13][14] + sp[75] * PI1[0][13][14] + sp[76] * PI2[0][13][14] + sp[75] * PI1[0][14][13] + sp[77] * PI3[0][13][14] + sp[78] * PI4[0][13][14] + sp[76] * PI2[0][14][13] + sp[78] * PI4[0][14][13] + sp[79] * PI5[0][13][14];
    A[650] = sp[74] * PI0[0][13][15] + sp[75] * PI1[0][13][15] + sp[76] * PI2[0][13][15] + sp[75] * PI1[0][15][13] + sp[77] * PI3[0][13][15] + sp[78] * PI4[0][13][15] + sp[76] * PI2[0][15][13] + sp[78] * PI4[0][15][13] + sp[79] * PI5[0][13][15];
    A[651] = sp[74] * PI0[0][13][16] + sp[75] * PI1[0][13][16] + sp[76] * PI2[0][13][16] + sp[75] * PI1[0][16][13] + sp[77] * PI3[0][13][16] + sp[78] * PI4[0][13][16] + sp[76] * PI2[0][16][13] + sp[78] * PI4[0][16][13] + sp[79] * PI5[0][13][16];
    A[652] = sp[74] * PI0[0][13][17] + sp[75] * PI1[0][13][17] + sp[76] * PI2[0][13][17] + sp[75] * PI1[0][17][13] + sp[77] * PI3[0][13][17] + sp[78] * PI4[0][13][17] + sp[76] * PI2[0][17][13] + sp[78] * PI4[0][17][13] + sp[79] * PI5[0][13][17];
    A[653] = sp[74] * PI0[0][13][18] + sp[75] * PI1[0][13][18] + sp[76] * PI2[0][13][18] + sp[75] * PI1[0][18][13] + sp[77] * PI3[0][13][18] + sp[78] * PI4[0][13][18] + sp[76] * PI2[0][18][13] + sp[78] * PI4[0][18][13] + sp[79] * PI5[0][13][18];
    A[654] = sp[74] * PI0[0][13][19] + sp[75] * PI1[0][13][19] + sp[76] * PI2[0][13][19] + sp[75] * PI1[0][19][13] + sp[77] * PI3[0][13][19] + sp[78] * PI4[0][13][19] + sp[76] * PI2[0][19][13] + sp[78] * PI4[0][19][13] + sp[79] * PI5[0][13][19];
    A[655] = sp[74] * PI0[0][13][20] + sp[75] * PI1[0][13][20] + sp[76] * PI2[0][13][20] + sp[75] * PI1[0][20][13] + sp[77] * PI3[0][13][20] + sp[78] * PI4[0][13][20] + sp[76] * PI2[0][20][13] + sp[78] * PI4[0][20][13] + sp[79] * PI5[0][13][20];
    A[656] = sp[74] * PI0[0][13][21] + sp[75] * PI1[0][13][21] + sp[76] * PI2[0][13][21] + sp[75] * PI1[0][21][13] + sp[77] * PI3[0][13][21] + sp[78] * PI4[0][13][21] + sp[76] * PI2[0][21][13] + sp[78] * PI4[0][21][13] + sp[79] * PI5[0][13][21];
    A[657] = sp[74] * PI0[0][13][22] + sp[75] * PI1[0][13][22] + sp[76] * PI2[0][13][22] + sp[75] * PI1[0][22][13] + sp[77] * PI3[0][13][22] + sp[78] * PI4[0][13][22] + sp[76] * PI2[0][22][13] + sp[78] * PI4[0][22][13] + sp[79] * PI5[0][13][22];
    A[658] = sp[74] * PI0[0][13][23] + sp[75] * PI1[0][13][23] + sp[76] * PI2[0][13][23] + sp[75] * PI1[0][23][13] + sp[77] * PI3[0][13][23] + sp[78] * PI4[0][13][23] + sp[76] * PI2[0][23][13] + sp[78] * PI4[0][23][13] + sp[79] * PI5[0][13][23];
    A[659] = sp[74] * PI0[0][13][24] + sp[75] * PI1[0][13][24] + sp[76] * PI2[0][13][24] + sp[75] * PI1[0][24][13] + sp[77] * PI3[0][13][24] + sp[78] * PI4[0][13][24] + sp[76] * PI2[0][24][13] + sp[78] * PI4[0][24][13] + sp[79] * PI5[0][13][24];
    A[660] = sp[74] * PI0[0][13][25] + sp[75] * PI1[0][13][25] + sp[76] * PI2[0][13][25] + sp[75] * PI1[0][25][13] + sp[77] * PI3[0][13][25] + sp[78] * PI4[0][13][25] + sp[76] * PI2[0][25][13] + sp[78] * PI4[0][25][13] + sp[79] * PI5[0][13][25];
    A[661] = sp[74] * PI0[0][13][26] + sp[75] * PI1[0][13][26] + sp[76] * PI2[0][13][26] + sp[75] * PI1[0][26][13] + sp[77] * PI3[0][13][26] + sp[78] * PI4[0][13][26] + sp[76] * PI2[0][26][13] + sp[78] * PI4[0][26][13] + sp[79] * PI5[0][13][26];
    A[662] = sp[74] * PI0[0][13][27] + sp[75] * PI1[0][13][27] + sp[76] * PI2[0][13][27] + sp[75] * PI1[0][27][13] + sp[77] * PI3[0][13][27] + sp[78] * PI4[0][13][27] + sp[76] * PI2[0][27][13] + sp[78] * PI4[0][27][13] + sp[79] * PI5[0][13][27];
    A[663] = sp[74] * PI0[0][13][28] + sp[75] * PI1[0][13][28] + sp[76] * PI2[0][13][28] + sp[75] * PI1[0][28][13] + sp[77] * PI3[0][13][28] + sp[78] * PI4[0][13][28] + sp[76] * PI2[0][28][13] + sp[78] * PI4[0][28][13] + sp[79] * PI5[0][13][28];
    A[664] = sp[74] * PI0[0][13][29] + sp[75] * PI1[0][13][29] + sp[76] * PI2[0][13][29] + sp[75] * PI1[0][29][13] + sp[77] * PI3[0][13][29] + sp[78] * PI4[0][13][29] + sp[76] * PI2[0][29][13] + sp[78] * PI4[0][29][13] + sp[79] * PI5[0][13][29];
    A[665] = sp[74] * PI0[0][14][0] + sp[75] * PI1[0][14][0] + sp[76] * PI2[0][14][0] + sp[75] * PI1[0][0][14] + sp[77] * PI3[0][14][0] + sp[78] * PI4[0][14][0] + sp[76] * PI2[0][0][14] + sp[78] * PI4[0][0][14] + sp[79] * PI5[0][14][0];
    A[666] = sp[74] * PI0[0][14][1] + sp[75] * PI1[0][1][14] + sp[76] * PI2[0][1][14];
    A[667] = sp[75] * PI1[0][14][1] + sp[77] * PI3[0][14][1] + sp[78] * PI4[0][1][14];
    A[668] = sp[76] * PI2[0][14][1] + sp[78] * PI4[0][14][1] + sp[79] * PI5[0][14][1];
    A[669] = sp[75] * PI1[0][14][2] + sp[76] * PI2[0][14][2] + sp[77] * PI3[0][14][2] + sp[78] * PI4[0][14][2] + sp[78] * PI4[0][2][14] + sp[79] * PI5[0][14][2];
    A[670] = sp[75] * PI1[0][14][3] + sp[76] * PI2[0][14][3] + sp[77] * PI3[0][14][3] + sp[78] * PI4[0][14][3] + sp[78] * PI4[0][3][14] + sp[79] * PI5[0][14][3];
    A[671] = sp[75] * PI1[0][14][4] + sp[76] * PI2[0][14][4] + sp[77] * PI3[0][14][4] + sp[78] * PI4[0][14][4] + sp[78] * PI4[0][4][14] + sp[79] * PI5[0][14][4];
    A[672] = sp[74] * PI0[0][14][2] + sp[76] * PI2[0][14][5] + sp[75] * PI1[0][2][14] + sp[78] * PI4[0][14][5] + sp[76] * PI2[0][2][14] + sp[79] * PI5[0][14][5];
    A[673] = sp[74] * PI0[0][14][3] + sp[76] * PI2[0][14][6] + sp[75] * PI1[0][3][14] + sp[78] * PI4[0][14][6] + sp[76] * PI2[0][3][14] + sp[79] * PI5[0][14][6];
    A[674] = sp[74] * PI0[0][14][4] + sp[76] * PI2[0][14][7] + sp[75] * PI1[0][4][14] + sp[78] * PI4[0][14][7] + sp[76] * PI2[0][4][14] + sp[79] * PI5[0][14][7];
    A[675] = sp[74] * PI0[0][14][5] + sp[75] * PI1[0][14][5] + sp[75] * PI1[0][5][14] + sp[77] * PI3[0][14][5] + sp[76] * PI2[0][5][14] + sp[78] * PI4[0][5][14];
    A[676] = sp[74] * PI0[0][14][6] + sp[75] * PI1[0][14][6] + sp[75] * PI1[0][6][14] + sp[77] * PI3[0][14][6] + sp[76] * PI2[0][6][14] + sp[78] * PI4[0][6][14];
    A[677] = sp[74] * PI0[0][14][7] + sp[75] * PI1[0][14][7] + sp[75] * PI1[0][7][14] + sp[77] * PI3[0][14][7] + sp[76] * PI2[0][7][14] + sp[78] * PI4[0][7][14];
    A[678] = sp[74] * PI0[0][14][8] + sp[75] * PI1[0][14][8] + sp[76] * PI2[0][14][8] + sp[75] * PI1[0][8][14] + sp[77] * PI3[0][14][8] + sp[78] * PI4[0][14][8] + sp[76] * PI2[0][8][14] + sp[78] * PI4[0][8][14] + sp[79] * PI5[0][14][8];
    A[679] = sp[74] * PI0[0][14][9] + sp[75] * PI1[0][14][9] + sp[76] * PI2[0][14][9] + sp[75] * PI1[0][9][14] + sp[77] * PI3[0][14][9] + sp[78] * PI4[0][14][9] + sp[76] * PI2[0][9][14] + sp[78] * PI4[0][9][14] + sp[79] * PI5[0][14][9];
    A[680] = sp[74] * PI0[0][14][10] + sp[75] * PI1[0][14][10] + sp[76] * PI2[0][14][10] + sp[75] * PI1[0][10][14] + sp[77] * PI3[0][14][10] + sp[78] * PI4[0][14][10] + sp[76] * PI2[0][10][14] + sp[78] * PI4[0][10][14] + sp[79] * PI5[0][14][10];
    A[681] = sp[74] * PI0[0][14][11] + sp[75] * PI1[0][14][11] + sp[76] * PI2[0][14][11] + sp[75] * PI1[0][11][14] + sp[77] * PI3[0][14][11] + sp[78] * PI4[0][14][11] + sp[76] * PI2[0][11][14] + sp[78] * PI4[0][11][14] + sp[79] * PI5[0][14][11];
    A[682] = sp[74] * PI0[0][14][12] + sp[75] * PI1[0][14][12] + sp[76] * PI2[0][14][12] + sp[75] * PI1[0][12][14] + sp[77] * PI3[0][14][12] + sp[78] * PI4[0][14][12] + sp[76] * PI2[0][12][14] + sp[78] * PI4[0][12][14] + sp[79] * PI5[0][14][12];
    A[683] = sp[74] * PI0[0][14][13] + sp[75] * PI1[0][14][13] + sp[76] * PI2[0][14][13] + sp[75] * PI1[0][13][14] + sp[77] * PI3[0][14][13] + sp[78] * PI4[0][14][13] + sp[76] * PI2[0][13][14] + sp[78] * PI4[0][13][14] + sp[79] * PI5[0][14][13];
    A[684] = sp[74] * PI0[0][14][14] + sp[75] * PI1[0][14][14] + sp[76] * PI2[0][14][14] + sp[75] * PI1[0][14][14] + sp[77] * PI3[0][14][14] + sp[78] * PI4[0][14][14] + sp[76] * PI2[0][14][14] + sp[78] * PI4[0][14][14] + sp[79] * PI5[0][14][14];
    A[685] = sp[74] * PI0[0][14][15] + sp[75] * PI1[0][14][15] + sp[76] * PI2[0][14][15] + sp[75] * PI1[0][15][14] + sp[77] * PI3[0][14][15] + sp[78] * PI4[0][14][15] + sp[76] * PI2[0][15][14] + sp[78] * PI4[0][15][14] + sp[79] * PI5[0][14][15];
    A[686] = sp[74] * PI0[0][14][16] + sp[75] * PI1[0][14][16] + sp[76] * PI2[0][14][16] + sp[75] * PI1[0][16][14] + sp[77] * PI3[0][14][16] + sp[78] * PI4[0][14][16] + sp[76] * PI2[0][16][14] + sp[78] * PI4[0][16][14] + sp[79] * PI5[0][14][16];
    A[687] = sp[74] * PI0[0][14][17] + sp[75] * PI1[0][14][17] + sp[76] * PI2[0][14][17] + sp[75] * PI1[0][17][14] + sp[77] * PI3[0][14][17] + sp[78] * PI4[0][14][17] + sp[76] * PI2[0][17][14] + sp[78] * PI4[0][17][14] + sp[79] * PI5[0][14][17];
    A[688] = sp[74] * PI0[0][14][18] + sp[75] * PI1[0][14][18] + sp[76] * PI2[0][14][18] + sp[75] * PI1[0][18][14] + sp[77] * PI3[0][14][18] + sp[78] * PI4[0][14][18] + sp[76] * PI2[0][18][14] + sp[78] * PI4[0][18][14] + sp[79] * PI5[0][14][18];
    A[689] = sp[74] * PI0[0][14][19] + sp[75] * PI1[0][14][19] + sp[76] * PI2[0][14][19] + sp[75] * PI1[0][19][14] + sp[77] * PI3[0][14][19] + sp[78] * PI4[0][14][19] + sp[76] * PI2[0][19][14] + sp[78] * PI4[0][19][14] + sp[79] * PI5[0][14][19];
    A[690] = sp[74] * PI0[0][14][20] + sp[75] * PI1[0][14][20] + sp[76] * PI2[0][14][20] + sp[75] * PI1[0][20][14] + sp[77] * PI3[0][14][20] + sp[78] * PI4[0][14][20] + sp[76] * PI2[0][20][14] + sp[78] * PI4[0][20][14] + sp[79] * PI5[0][14][20];
    A[691] = sp[74] * PI0[0][14][21] + sp[75] * PI1[0][14][21] + sp[76] * PI2[0][14][21] + sp[75] * PI1[0][21][14] + sp[77] * PI3[0][14][21] + sp[78] * PI4[0][14][21] + sp[76] * PI2[0][21][14] + sp[78] * PI4[0][21][14] + sp[79] * PI5[0][14][21];
    A[692] = sp[74] * PI0[0][14][22] + sp[75] * PI1[0][14][22] + sp[76] * PI2[0][14][22] + sp[75] * PI1[0][22][14] + sp[77] * PI3[0][14][22] + sp[78] * PI4[0][14][22] + sp[76] * PI2[0][22][14] + sp[78] * PI4[0][22][14] + sp[79] * PI5[0][14][22];
    A[693] = sp[74] * PI0[0][14][23] + sp[75] * PI1[0][14][23] + sp[76] * PI2[0][14][23] + sp[75] * PI1[0][23][14] + sp[77] * PI3[0][14][23] + sp[78] * PI4[0][14][23] + sp[76] * PI2[0][23][14] + sp[78] * PI4[0][23][14] + sp[79] * PI5[0][14][23];
    A[694] = sp[74] * PI0[0][14][24] + sp[75] * PI1[0][14][24] + sp[76] * PI2[0][14][24] + sp[75] * PI1[0][24][14] + sp[77] * PI3[0][14][24] + sp[78] * PI4[0][14][24] + sp[76] * PI2[0][24][14] + sp[78] * PI4[0][24][14] + sp[79] * PI5[0][14][24];
    A[695] = sp[74] * PI0[0][14][25] + sp[75] * PI1[0][14][25] + sp[76] * PI2[0][14][25] + sp[75] * PI1[0][25][14] + sp[77] * PI3[0][14][25] + sp[78] * PI4[0][14][25] + sp[76] * PI2[0][25][14] + sp[78] * PI4[0][25][14] + sp[79] * PI5[0][14][25];
    A[696] = sp[74] * PI0[0][14][26] + sp[75] * PI1[0][14][26] + sp[76] * PI2[0][14][26] + sp[75] * PI1[0][26][14] + sp[77] * PI3[0][14][26] + sp[78] * PI4[0][14][26] + sp[76] * PI2[0][26][14] + sp[78] * PI4[0][26][14] + sp[79] * PI5[0][14][26];
    A[697] = sp[74] * PI0[0][14][27] + sp[75] * PI1[0][14][27] + sp[76] * PI2[0][14][27] + sp[75] * PI1[0][27][14] + sp[77] * PI3[0][14][27] + sp[78] * PI4[0][14][27] + sp[76] * PI2[0][27][14] + sp[78] * PI4[0][27][14] + sp[79] * PI5[0][14][27];
    A[698] = sp[74] * PI0[0][14][28] + sp[75] * PI1[0][14][28] + sp[76] * PI2[0][14][28] + sp[75] * PI1[0][28][14] + sp[77] * PI3[0][14][28] + sp[78] * PI4[0][14][28] + sp[76] * PI2[0][28][14] + sp[78] * PI4[0][28][14] + sp[79] * PI5[0][14][28];
    A[699] = sp[74] * PI0[0][14][29] + sp[75] * PI1[0][14][29] + sp[76] * PI2[0][14][29] + sp[75] * PI1[0][29][14] + sp[77] * PI3[0][14][29] + sp[78] * PI4[0][14][29] + sp[76] * PI2[0][29][14] + sp[78] * PI4[0][29][14] + sp[79] * PI5[0][14][29];
    A[700] = sp[74] * PI0[0][15][0] + sp[75] * PI1[0][15][0] + sp[76] * PI2[0][15][0] + sp[75] * PI1[0][0][15] + sp[77] * PI3[0][15][0] + sp[78] * PI4[0][15][0] + sp[76] * PI2[0][0][15] + sp[78] * PI4[0][0][15] + sp[79] * PI5[0][15][0];
    A[701] = sp[74] * PI0[0][15][1] + sp[75] * PI1[0][1][15] + sp[76] * PI2[0][1][15];
    A[702] = sp[75] * PI1[0][15][1] + sp[77] * PI3[0][15][1] + sp[78] * PI4[0][1][15];
    A[703] = sp[76] * PI2[0][15][1] + sp[78] * PI4[0][15][1] + sp[79] * PI5[0][15][1];
    A[704] = sp[75] * PI1[0][15][2] + sp[76] * PI2[0][15][2] + sp[77] * PI3[0][15][2] + sp[78] * PI4[0][15][2] + sp[78] * PI4[0][2][15] + sp[79] * PI5[0][15][2];
    A[705] = sp[75] * PI1[0][15][3] + sp[76] * PI2[0][15][3] + sp[77] * PI3[0][15][3] + sp[78] * PI4[0][15][3] + sp[78] * PI4[0][3][15] + sp[79] * PI5[0][15][3];
    A[706] = sp[75] * PI1[0][15][4] + sp[76] * PI2[0][15][4] + sp[77] * PI3[0][15][4] + sp[78] * PI4[0][15][4] + sp[78] * PI4[0][4][15] + sp[79] * PI5[0][15][4];
    A[707] = sp[74] * PI0[0][15][2] + sp[76] * PI2[0][15][5] + sp[75] * PI1[0][2][15] + sp[78] * PI4[0][15][5] + sp[76] * PI2[0][2][15] + sp[79] * PI5[0][15][5];
    A[708] = sp[74] * PI0[0][15][3] + sp[76] * PI2[0][15][6] + sp[75] * PI1[0][3][15] + sp[78] * PI4[0][15][6] + sp[76] * PI2[0][3][15] + sp[79] * PI5[0][15][6];
    A[709] = sp[74] * PI0[0][15][4] + sp[76] * PI2[0][15][7] + sp[75] * PI1[0][4][15] + sp[78] * PI4[0][15][7] + sp[76] * PI2[0][4][15] + sp[79] * PI5[0][15][7];
    A[710] = sp[74] * PI0[0][15][5] + sp[75] * PI1[0][15][5] + sp[75] * PI1[0][5][15] + sp[77] * PI3[0][15][5] + sp[76] * PI2[0][5][15] + sp[78] * PI4[0][5][15];
    A[711] = sp[74] * PI0[0][15][6] + sp[75] * PI1[0][15][6] + sp[75] * PI1[0][6][15] + sp[77] * PI3[0][15][6] + sp[76] * PI2[0][6][15] + sp[78] * PI4[0][6][15];
    A[712] = sp[74] * PI0[0][15][7] + sp[75] * PI1[0][15][7] + sp[75] * PI1[0][7][15] + sp[77] * PI3[0][15][7] + sp[76] * PI2[0][7][15] + sp[78] * PI4[0][7][15];
    A[713] = sp[74] * PI0[0][15][8] + sp[75] * PI1[0][15][8] + sp[76] * PI2[0][15][8] + sp[75] * PI1[0][8][15] + sp[77] * PI3[0][15][8] + sp[78] * PI4[0][15][8] + sp[76] * PI2[0][8][15] + sp[78] * PI4[0][8][15] + sp[79] * PI5[0][15][8];
    A[714] = sp[74] * PI0[0][15][9] + sp[75] * PI1[0][15][9] + sp[76] * PI2[0][15][9] + sp[75] * PI1[0][9][15] + sp[77] * PI3[0][15][9] + sp[78] * PI4[0][15][9] + sp[76] * PI2[0][9][15] + sp[78] * PI4[0][9][15] + sp[79] * PI5[0][15][9];
    A[715] = sp[74] * PI0[0][15][10] + sp[75] * PI1[0][15][10] + sp[76] * PI2[0][15][10] + sp[75] * PI1[0][10][15] + sp[77] * PI3[0][15][10] + sp[78] * PI4[0][15][10] + sp[76] * PI2[0][10][15] + sp[78] * PI4[0][10][15] + sp[79] * PI5[0][15][10];
    A[716] = sp[74] * PI0[0][15][11] + sp[75] * PI1[0][15][11] + sp[76] * PI2[0][15][11] + sp[75] * PI1[0][11][15] + sp[77] * PI3[0][15][11] + sp[78] * PI4[0][15][11] + sp[76] * PI2[0][11][15] + sp[78] * PI4[0][11][15] + sp[79] * PI5[0][15][11];
    A[717] = sp[74] * PI0[0][15][12] + sp[75] * PI1[0][15][12] + sp[76] * PI2[0][15][12] + sp[75] * PI1[0][12][15] + sp[77] * PI3[0][15][12] + sp[78] * PI4[0][15][12] + sp[76] * PI2[0][12][15] + sp[78] * PI4[0][12][15] + sp[79] * PI5[0][15][12];
    A[718] = sp[74] * PI0[0][15][13] + sp[75] * PI1[0][15][13] + sp[76] * PI2[0][15][13] + sp[75] * PI1[0][13][15] + sp[77] * PI3[0][15][13] + sp[78] * PI4[0][15][13] + sp[76] * PI2[0][13][15] + sp[78] * PI4[0][13][15] + sp[79] * PI5[0][15][13];
    A[719] = sp[74] * PI0[0][15][14] + sp[75] * PI1[0][15][14] + sp[76] * PI2[0][15][14] + sp[75] * PI1[0][14][15] + sp[77] * PI3[0][15][14] + sp[78] * PI4[0][15][14] + sp[76] * PI2[0][14][15] + sp[78] * PI4[0][14][15] + sp[79] * PI5[0][15][14];
    A[720] = sp[74] * PI0[0][15][15] + sp[75] * PI1[0][15][15] + sp[76] * PI2[0][15][15] + sp[75] * PI1[0][15][15] + sp[77] * PI3[0][15][15] + sp[78] * PI4[0][15][15] + sp[76] * PI2[0][15][15] + sp[78] * PI4[0][15][15] + sp[79] * PI5[0][15][15];
    A[721] = sp[74] * PI0[0][15][16] + sp[75] * PI1[0][15][16] + sp[76] * PI2[0][15][16] + sp[75] * PI1[0][16][15] + sp[77] * PI3[0][15][16] + sp[78] * PI4[0][15][16] + sp[76] * PI2[0][16][15] + sp[78] * PI4[0][16][15] + sp[79] * PI5[0][15][16];
    A[722] = sp[74] * PI0[0][15][17] + sp[75] * PI1[0][15][17] + sp[76] * PI2[0][15][17] + sp[75] * PI1[0][17][15] + sp[77] * PI3[0][15][17] + sp[78] * PI4[0][15][17] + sp[76] * PI2[0][17][15] + sp[78] * PI4[0][17][15] + sp[79] * PI5[0][15][17];
    A[723] = sp[74] * PI0[0][15][18] + sp[75] * PI1[0][15][18] + sp[76] * PI2[0][15][18] + sp[75] * PI1[0][18][15] + sp[77] * PI3[0][15][18] + sp[78] * PI4[0][15][18] + sp[76] * PI2[0][18][15] + sp[78] * PI4[0][18][15] + sp[79] * PI5[0][15][18];
    A[724] = sp[74] * PI0[0][15][19] + sp[75] * PI1[0][15][19] + sp[76] * PI2[0][15][19] + sp[75] * PI1[0][19][15] + sp[77] * PI3[0][15][19] + sp[78] * PI4[0][15][19] + sp[76] * PI2[0][19][15] + sp[78] * PI4[0][19][15] + sp[79] * PI5[0][15][19];
    A[725] = sp[74] * PI0[0][15][20] + sp[75] * PI1[0][15][20] + sp[76] * PI2[0][15][20] + sp[75] * PI1[0][20][15] + sp[77] * PI3[0][15][20] + sp[78] * PI4[0][15][20] + sp[76] * PI2[0][20][15] + sp[78] * PI4[0][20][15] + sp[79] * PI5[0][15][20];
    A[726] = sp[74] * PI0[0][15][21] + sp[75] * PI1[0][15][21] + sp[76] * PI2[0][15][21] + sp[75] * PI1[0][21][15] + sp[77] * PI3[0][15][21] + sp[78] * PI4[0][15][21] + sp[76] * PI2[0][21][15] + sp[78] * PI4[0][21][15] + sp[79] * PI5[0][15][21];
    A[727] = sp[74] * PI0[0][15][22] + sp[75] * PI1[0][15][22] + sp[76] * PI2[0][15][22] + sp[75] * PI1[0][22][15] + sp[77] * PI3[0][15][22] + sp[78] * PI4[0][15][22] + sp[76] * PI2[0][22][15] + sp[78] * PI4[0][22][15] + sp[79] * PI5[0][15][22];
    A[728] = sp[74] * PI0[0][15][23] + sp[75] * PI1[0][15][23] + sp[76] * PI2[0][15][23] + sp[75] * PI1[0][23][15] + sp[77] * PI3[0][15][23] + sp[78] * PI4[0][15][23] + sp[76] * PI2[0][23][15] + sp[78] * PI4[0][23][15] + sp[79] * PI5[0][15][23];
    A[729] = sp[74] * PI0[0][15][24] + sp[75] * PI1[0][15][24] + sp[76] * PI2[0][15][24] + sp[75] * PI1[0][24][15] + sp[77] * PI3[0][15][24] + sp[78] * PI4[0][15][24] + sp[76] * PI2[0][24][15] + sp[78] * PI4[0][24][15] + sp[79] * PI5[0][15][24];
    A[730] = sp[74] * PI0[0][15][25] + sp[75] * PI1[0][15][25] + sp[76] * PI2[0][15][25] + sp[75] * PI1[0][25][15] + sp[77] * PI3[0][15][25] + sp[78] * PI4[0][15][25] + sp[76] * PI2[0][25][15] + sp[78] * PI4[0][25][15] + sp[79] * PI5[0][15][25];
    A[731] = sp[74] * PI0[0][15][26] + sp[75] * PI1[0][15][26] + sp[76] * PI2[0][15][26] + sp[75] * PI1[0][26][15] + sp[77] * PI3[0][15][26] + sp[78] * PI4[0][15][26] + sp[76] * PI2[0][26][15] + sp[78] * PI4[0][26][15] + sp[79] * PI5[0][15][26];
    A[732] = sp[74] * PI0[0][15][27] + sp[75] * PI1[0][15][27] + sp[76] * PI2[0][15][27] + sp[75] * PI1[0][27][15] + sp[77] * PI3[0][15][27] + sp[78] * PI4[0][15][27] + sp[76] * PI2[0][27][15] + sp[78] * PI4[0][27][15] + sp[79] * PI5[0][15][27];
    A[733] = sp[74] * PI0[0][15][28] + sp[75] * PI1[0][15][28] + sp[76] * PI2[0][15][28] + sp[75] * PI1[0][28][15] + sp[77] * PI3[0][15][28] + sp[78] * PI4[0][15][28] + sp[76] * PI2[0][28][15] + sp[78] * PI4[0][28][15] + sp[79] * PI5[0][15][28];
    A[734] = sp[74] * PI0[0][15][29] + sp[75] * PI1[0][15][29] + sp[76] * PI2[0][15][29] + sp[75] * PI1[0][29][15] + sp[77] * PI3[0][15][29] + sp[78] * PI4[0][15][29] + sp[76] * PI2[0][29][15] + sp[78] * PI4[0][29][15] + sp[79] * PI5[0][15][29];
    A[735] = sp[74] * PI0[0][16][0] + sp[75] * PI1[0][16][0] + sp[76] * PI2[0][16][0] + sp[75] * PI1[0][0][16] + sp[77] * PI3[0][16][0] + sp[78] * PI4[0][16][0] + sp[76] * PI2[0][0][16] + sp[78] * PI4[0][0][16] + sp[79] * PI5[0][16][0];
    A[736] = sp[74] * PI0[0][16][1] + sp[75] * PI1[0][1][16] + sp[76] * PI2[0][1][16];
    A[737] = sp[75] * PI1[0][16][1] + sp[77] * PI3[0][16][1] + sp[78] * PI4[0][1][16];
    A[738] = sp[76] * PI2[0][16][1] + sp[78] * PI4[0][16][1] + sp[79] * PI5[0][16][1];
    A[739] = sp[75] * PI1[0][16][2] + sp[76] * PI2[0][16][2] + sp[77] * PI3[0][16][2] + sp[78] * PI4[0][16][2] + sp[78] * PI4[0][2][16] + sp[79] * PI5[0][16][2];
    A[740] = sp[75] * PI1[0][16][3] + sp[76] * PI2[0][16][3] + sp[77] * PI3[0][16][3] + sp[78] * PI4[0][16][3] + sp[78] * PI4[0][3][16] + sp[79] * PI5[0][16][3];
    A[741] = sp[75] * PI1[0][16][4] + sp[76] * PI2[0][16][4] + sp[77] * PI3[0][16][4] + sp[78] * PI4[0][16][4] + sp[78] * PI4[0][4][16] + sp[79] * PI5[0][16][4];
    A[742] = sp[74] * PI0[0][16][2] + sp[76] * PI2[0][16][5] + sp[75] * PI1[0][2][16] + sp[78] * PI4[0][16][5] + sp[76] * PI2[0][2][16] + sp[79] * PI5[0][16][5];
    A[743] = sp[74] * PI0[0][16][3] + sp[76] * PI2[0][16][6] + sp[75] * PI1[0][3][16] + sp[78] * PI4[0][16][6] + sp[76] * PI2[0][3][16] + sp[79] * PI5[0][16][6];
    A[744] = sp[74] * PI0[0][16][4] + sp[76] * PI2[0][16][7] + sp[75] * PI1[0][4][16] + sp[78] * PI4[0][16][7] + sp[76] * PI2[0][4][16] + sp[79] * PI5[0][16][7];
    A[745] = sp[74] * PI0[0][16][5] + sp[75] * PI1[0][16][5] + sp[75] * PI1[0][5][16] + sp[77] * PI3[0][16][5] + sp[76] * PI2[0][5][16] + sp[78] * PI4[0][5][16];
    A[746] = sp[74] * PI0[0][16][6] + sp[75] * PI1[0][16][6] + sp[75] * PI1[0][6][16] + sp[77] * PI3[0][16][6] + sp[76] * PI2[0][6][16] + sp[78] * PI4[0][6][16];
    A[747] = sp[74] * PI0[0][16][7] + sp[75] * PI1[0][16][7] + sp[75] * PI1[0][7][16] + sp[77] * PI3[0][16][7] + sp[76] * PI2[0][7][16] + sp[78] * PI4[0][7][16];
    A[748] = sp[74] * PI0[0][16][8] + sp[75] * PI1[0][16][8] + sp[76] * PI2[0][16][8] + sp[75] * PI1[0][8][16] + sp[77] * PI3[0][16][8] + sp[78] * PI4[0][16][8] + sp[76] * PI2[0][8][16] + sp[78] * PI4[0][8][16] + sp[79] * PI5[0][16][8];
    A[749] = sp[74] * PI0[0][16][9] + sp[75] * PI1[0][16][9] + sp[76] * PI2[0][16][9] + sp[75] * PI1[0][9][16] + sp[77] * PI3[0][16][9] + sp[78] * PI4[0][16][9] + sp[76] * PI2[0][9][16] + sp[78] * PI4[0][9][16] + sp[79] * PI5[0][16][9];
    A[750] = sp[74] * PI0[0][16][10] + sp[75] * PI1[0][16][10] + sp[76] * PI2[0][16][10] + sp[75] * PI1[0][10][16] + sp[77] * PI3[0][16][10] + sp[78] * PI4[0][16][10] + sp[76] * PI2[0][10][16] + sp[78] * PI4[0][10][16] + sp[79] * PI5[0][16][10];
    A[751] = sp[74] * PI0[0][16][11] + sp[75] * PI1[0][16][11] + sp[76] * PI2[0][16][11] + sp[75] * PI1[0][11][16] + sp[77] * PI3[0][16][11] + sp[78] * PI4[0][16][11] + sp[76] * PI2[0][11][16] + sp[78] * PI4[0][11][16] + sp[79] * PI5[0][16][11];
    A[752] = sp[74] * PI0[0][16][12] + sp[75] * PI1[0][16][12] + sp[76] * PI2[0][16][12] + sp[75] * PI1[0][12][16] + sp[77] * PI3[0][16][12] + sp[78] * PI4[0][16][12] + sp[76] * PI2[0][12][16] + sp[78] * PI4[0][12][16] + sp[79] * PI5[0][16][12];
    A[753] = sp[74] * PI0[0][16][13] + sp[75] * PI1[0][16][13] + sp[76] * PI2[0][16][13] + sp[75] * PI1[0][13][16] + sp[77] * PI3[0][16][13] + sp[78] * PI4[0][16][13] + sp[76] * PI2[0][13][16] + sp[78] * PI4[0][13][16] + sp[79] * PI5[0][16][13];
    A[754] = sp[74] * PI0[0][16][14] + sp[75] * PI1[0][16][14] + sp[76] * PI2[0][16][14] + sp[75] * PI1[0][14][16] + sp[77] * PI3[0][16][14] + sp[78] * PI4[0][16][14] + sp[76] * PI2[0][14][16] + sp[78] * PI4[0][14][16] + sp[79] * PI5[0][16][14];
    A[755] = sp[74] * PI0[0][16][15] + sp[75] * PI1[0][16][15] + sp[76] * PI2[0][16][15] + sp[75] * PI1[0][15][16] + sp[77] * PI3[0][16][15] + sp[78] * PI4[0][16][15] + sp[76] * PI2[0][15][16] + sp[78] * PI4[0][15][16] + sp[79] * PI5[0][16][15];
    A[756] = sp[74] * PI0[0][16][16] + sp[75] * PI1[0][16][16] + sp[76] * PI2[0][16][16] + sp[75] * PI1[0][16][16] + sp[77] * PI3[0][16][16] + sp[78] * PI4[0][16][16] + sp[76] * PI2[0][16][16] + sp[78] * PI4[0][16][16] + sp[79] * PI5[0][16][16];
    A[757] = sp[74] * PI0[0][16][17] + sp[75] * PI1[0][16][17] + sp[76] * PI2[0][16][17] + sp[75] * PI1[0][17][16] + sp[77] * PI3[0][16][17] + sp[78] * PI4[0][16][17] + sp[76] * PI2[0][17][16] + sp[78] * PI4[0][17][16] + sp[79] * PI5[0][16][17];
    A[758] = sp[74] * PI0[0][16][18] + sp[75] * PI1[0][16][18] + sp[76] * PI2[0][16][18] + sp[75] * PI1[0][18][16] + sp[77] * PI3[0][16][18] + sp[78] * PI4[0][16][18] + sp[76] * PI2[0][18][16] + sp[78] * PI4[0][18][16] + sp[79] * PI5[0][16][18];
    A[759] = sp[74] * PI0[0][16][19] + sp[75] * PI1[0][16][19] + sp[76] * PI2[0][16][19] + sp[75] * PI1[0][19][16] + sp[77] * PI3[0][16][19] + sp[78] * PI4[0][16][19] + sp[76] * PI2[0][19][16] + sp[78] * PI4[0][19][16] + sp[79] * PI5[0][16][19];
    A[760] = sp[74] * PI0[0][16][20] + sp[75] * PI1[0][16][20] + sp[76] * PI2[0][16][20] + sp[75] * PI1[0][20][16] + sp[77] * PI3[0][16][20] + sp[78] * PI4[0][16][20] + sp[76] * PI2[0][20][16] + sp[78] * PI4[0][20][16] + sp[79] * PI5[0][16][20];
    A[761] = sp[74] * PI0[0][16][21] + sp[75] * PI1[0][16][21] + sp[76] * PI2[0][16][21] + sp[75] * PI1[0][21][16] + sp[77] * PI3[0][16][21] + sp[78] * PI4[0][16][21] + sp[76] * PI2[0][21][16] + sp[78] * PI4[0][21][16] + sp[79] * PI5[0][16][21];
    A[762] = sp[74] * PI0[0][16][22] + sp[75] * PI1[0][16][22] + sp[76] * PI2[0][16][22] + sp[75] * PI1[0][22][16] + sp[77] * PI3[0][16][22] + sp[78] * PI4[0][16][22] + sp[76] * PI2[0][22][16] + sp[78] * PI4[0][22][16] + sp[79] * PI5[0][16][22];
    A[763] = sp[74] * PI0[0][16][23] + sp[75] * PI1[0][16][23] + sp[76] * PI2[0][16][23] + sp[75] * PI1[0][23][16] + sp[77] * PI3[0][16][23] + sp[78] * PI4[0][16][23] + sp[76] * PI2[0][23][16] + sp[78] * PI4[0][23][16] + sp[79] * PI5[0][16][23];
    A[764] = sp[74] * PI0[0][16][24] + sp[75] * PI1[0][16][24] + sp[76] * PI2[0][16][24] + sp[75] * PI1[0][24][16] + sp[77] * PI3[0][16][24] + sp[78] * PI4[0][16][24] + sp[76] * PI2[0][24][16] + sp[78] * PI4[0][24][16] + sp[79] * PI5[0][16][24];
    A[765] = sp[74] * PI0[0][16][25] + sp[75] * PI1[0][16][25] + sp[76] * PI2[0][16][25] + sp[75] * PI1[0][25][16] + sp[77] * PI3[0][16][25] + sp[78] * PI4[0][16][25] + sp[76] * PI2[0][25][16] + sp[78] * PI4[0][25][16] + sp[79] * PI5[0][16][25];
    A[766] = sp[74] * PI0[0][16][26] + sp[75] * PI1[0][16][26] + sp[76] * PI2[0][16][26] + sp[75] * PI1[0][26][16] + sp[77] * PI3[0][16][26] + sp[78] * PI4[0][16][26] + sp[76] * PI2[0][26][16] + sp[78] * PI4[0][26][16] + sp[79] * PI5[0][16][26];
    A[767] = sp[74] * PI0[0][16][27] + sp[75] * PI1[0][16][27] + sp[76] * PI2[0][16][27] + sp[75] * PI1[0][27][16] + sp[77] * PI3[0][16][27] + sp[78] * PI4[0][16][27] + sp[76] * PI2[0][27][16] + sp[78] * PI4[0][27][16] + sp[79] * PI5[0][16][27];
    A[768] = sp[74] * PI0[0][16][28] + sp[75] * PI1[0][16][28] + sp[76] * PI2[0][16][28] + sp[75] * PI1[0][28][16] + sp[77] * PI3[0][16][28] + sp[78] * PI4[0][16][28] + sp[76] * PI2[0][28][16] + sp[78] * PI4[0][28][16] + sp[79] * PI5[0][16][28];
    A[769] = sp[74] * PI0[0][16][29] + sp[75] * PI1[0][16][29] + sp[76] * PI2[0][16][29] + sp[75] * PI1[0][29][16] + sp[77] * PI3[0][16][29] + sp[78] * PI4[0][16][29] + sp[76] * PI2[0][29][16] + sp[78] * PI4[0][29][16] + sp[79] * PI5[0][16][29];
    A[770] = sp[74] * PI0[0][17][0] + sp[75] * PI1[0][17][0] + sp[76] * PI2[0][17][0] + sp[75] * PI1[0][0][17] + sp[77] * PI3[0][17][0] + sp[78] * PI4[0][17][0] + sp[76] * PI2[0][0][17] + sp[78] * PI4[0][0][17] + sp[79] * PI5[0][17][0];
    A[771] = sp[74] * PI0[0][17][1] + sp[75] * PI1[0][1][17] + sp[76] * PI2[0][1][17];
    A[772] = sp[75] * PI1[0][17][1] + sp[77] * PI3[0][17][1] + sp[78] * PI4[0][1][17];
    A[773] = sp[76] * PI2[0][17][1] + sp[78] * PI4[0][17][1] + sp[79] * PI5[0][17][1];
    A[774] = sp[75] * PI1[0][17][2] + sp[76] * PI2[0][17][2] + sp[77] * PI3[0][17][2] + sp[78] * PI4[0][17][2] + sp[78] * PI4[0][2][17] + sp[79] * PI5[0][17][2];
    A[775] = sp[75] * PI1[0][17][3] + sp[76] * PI2[0][17][3] + sp[77] * PI3[0][17][3] + sp[78] * PI4[0][17][3] + sp[78] * PI4[0][3][17] + sp[79] * PI5[0][17][3];
    A[776] = sp[75] * PI1[0][17][4] + sp[76] * PI2[0][17][4] + sp[77] * PI3[0][17][4] + sp[78] * PI4[0][17][4] + sp[78] * PI4[0][4][17] + sp[79] * PI5[0][17][4];
    A[777] = sp[74] * PI0[0][17][2] + sp[76] * PI2[0][17][5] + sp[75] * PI1[0][2][17] + sp[78] * PI4[0][17][5] + sp[76] * PI2[0][2][17] + sp[79] * PI5[0][17][5];
    A[778] = sp[74] * PI0[0][17][3] + sp[76] * PI2[0][17][6] + sp[75] * PI1[0][3][17] + sp[78] * PI4[0][17][6] + sp[76] * PI2[0][3][17] + sp[79] * PI5[0][17][6];
    A[779] = sp[74] * PI0[0][17][4] + sp[76] * PI2[0][17][7] + sp[75] * PI1[0][4][17] + sp[78] * PI4[0][17][7] + sp[76] * PI2[0][4][17] + sp[79] * PI5[0][17][7];
    A[780] = sp[74] * PI0[0][17][5] + sp[75] * PI1[0][17][5] + sp[75] * PI1[0][5][17] + sp[77] * PI3[0][17][5] + sp[76] * PI2[0][5][17] + sp[78] * PI4[0][5][17];
    A[781] = sp[74] * PI0[0][17][6] + sp[75] * PI1[0][17][6] + sp[75] * PI1[0][6][17] + sp[77] * PI3[0][17][6] + sp[76] * PI2[0][6][17] + sp[78] * PI4[0][6][17];
    A[782] = sp[74] * PI0[0][17][7] + sp[75] * PI1[0][17][7] + sp[75] * PI1[0][7][17] + sp[77] * PI3[0][17][7] + sp[76] * PI2[0][7][17] + sp[78] * PI4[0][7][17];
    A[783] = sp[74] * PI0[0][17][8] + sp[75] * PI1[0][17][8] + sp[76] * PI2[0][17][8] + sp[75] * PI1[0][8][17] + sp[77] * PI3[0][17][8] + sp[78] * PI4[0][17][8] + sp[76] * PI2[0][8][17] + sp[78] * PI4[0][8][17] + sp[79] * PI5[0][17][8];
    A[784] = sp[74] * PI0[0][17][9] + sp[75] * PI1[0][17][9] + sp[76] * PI2[0][17][9] + sp[75] * PI1[0][9][17] + sp[77] * PI3[0][17][9] + sp[78] * PI4[0][17][9] + sp[76] * PI2[0][9][17] + sp[78] * PI4[0][9][17] + sp[79] * PI5[0][17][9];
    A[785] = sp[74] * PI0[0][17][10] + sp[75] * PI1[0][17][10] + sp[76] * PI2[0][17][10] + sp[75] * PI1[0][10][17] + sp[77] * PI3[0][17][10] + sp[78] * PI4[0][17][10] + sp[76] * PI2[0][10][17] + sp[78] * PI4[0][10][17] + sp[79] * PI5[0][17][10];
    A[786] = sp[74] * PI0[0][17][11] + sp[75] * PI1[0][17][11] + sp[76] * PI2[0][17][11] + sp[75] * PI1[0][11][17] + sp[77] * PI3[0][17][11] + sp[78] * PI4[0][17][11] + sp[76] * PI2[0][11][17] + sp[78] * PI4[0][11][17] + sp[79] * PI5[0][17][11];
    A[787] = sp[74] * PI0[0][17][12] + sp[75] * PI1[0][17][12] + sp[76] * PI2[0][17][12] + sp[75] * PI1[0][12][17] + sp[77] * PI3[0][17][12] + sp[78] * PI4[0][17][12] + sp[76] * PI2[0][12][17] + sp[78] * PI4[0][12][17] + sp[79] * PI5[0][17][12];
    A[788] = sp[74] * PI0[0][17][13] + sp[75] * PI1[0][17][13] + sp[76] * PI2[0][17][13] + sp[75] * PI1[0][13][17] + sp[77] * PI3[0][17][13] + sp[78] * PI4[0][17][13] + sp[76] * PI2[0][13][17] + sp[78] * PI4[0][13][17] + sp[79] * PI5[0][17][13];
    A[789] = sp[74] * PI0[0][17][14] + sp[75] * PI1[0][17][14] + sp[76] * PI2[0][17][14] + sp[75] * PI1[0][14][17] + sp[77] * PI3[0][17][14] + sp[78] * PI4[0][17][14] + sp[76] * PI2[0][14][17] + sp[78] * PI4[0][14][17] + sp[79] * PI5[0][17][14];
    A[790] = sp[74] * PI0[0][17][15] + sp[75] * PI1[0][17][15] + sp[76] * PI2[0][17][15] + sp[75] * PI1[0][15][17] + sp[77] * PI3[0][17][15] + sp[78] * PI4[0][17][15] + sp[76] * PI2[0][15][17] + sp[78] * PI4[0][15][17] + sp[79] * PI5[0][17][15];
    A[791] = sp[74] * PI0[0][17][16] + sp[75] * PI1[0][17][16] + sp[76] * PI2[0][17][16] + sp[75] * PI1[0][16][17] + sp[77] * PI3[0][17][16] + sp[78] * PI4[0][17][16] + sp[76] * PI2[0][16][17] + sp[78] * PI4[0][16][17] + sp[79] * PI5[0][17][16];
    A[792] = sp[74] * PI0[0][17][17] + sp[75] * PI1[0][17][17] + sp[76] * PI2[0][17][17] + sp[75] * PI1[0][17][17] + sp[77] * PI3[0][17][17] + sp[78] * PI4[0][17][17] + sp[76] * PI2[0][17][17] + sp[78] * PI4[0][17][17] + sp[79] * PI5[0][17][17];
    A[793] = sp[74] * PI0[0][17][18] + sp[75] * PI1[0][17][18] + sp[76] * PI2[0][17][18] + sp[75] * PI1[0][18][17] + sp[77] * PI3[0][17][18] + sp[78] * PI4[0][17][18] + sp[76] * PI2[0][18][17] + sp[78] * PI4[0][18][17] + sp[79] * PI5[0][17][18];
    A[794] = sp[74] * PI0[0][17][19] + sp[75] * PI1[0][17][19] + sp[76] * PI2[0][17][19] + sp[75] * PI1[0][19][17] + sp[77] * PI3[0][17][19] + sp[78] * PI4[0][17][19] + sp[76] * PI2[0][19][17] + sp[78] * PI4[0][19][17] + sp[79] * PI5[0][17][19];
    A[795] = sp[74] * PI0[0][17][20] + sp[75] * PI1[0][17][20] + sp[76] * PI2[0][17][20] + sp[75] * PI1[0][20][17] + sp[77] * PI3[0][17][20] + sp[78] * PI4[0][17][20] + sp[76] * PI2[0][20][17] + sp[78] * PI4[0][20][17] + sp[79] * PI5[0][17][20];
    A[796] = sp[74] * PI0[0][17][21] + sp[75] * PI1[0][17][21] + sp[76] * PI2[0][17][21] + sp[75] * PI1[0][21][17] + sp[77] * PI3[0][17][21] + sp[78] * PI4[0][17][21] + sp[76] * PI2[0][21][17] + sp[78] * PI4[0][21][17] + sp[79] * PI5[0][17][21];
    A[797] = sp[74] * PI0[0][17][22] + sp[75] * PI1[0][17][22] + sp[76] * PI2[0][17][22] + sp[75] * PI1[0][22][17] + sp[77] * PI3[0][17][22] + sp[78] * PI4[0][17][22] + sp[76] * PI2[0][22][17] + sp[78] * PI4[0][22][17] + sp[79] * PI5[0][17][22];
    A[798] = sp[74] * PI0[0][17][23] + sp[75] * PI1[0][17][23] + sp[76] * PI2[0][17][23] + sp[75] * PI1[0][23][17] + sp[77] * PI3[0][17][23] + sp[78] * PI4[0][17][23] + sp[76] * PI2[0][23][17] + sp[78] * PI4[0][23][17] + sp[79] * PI5[0][17][23];
    A[799] = sp[74] * PI0[0][17][24] + sp[75] * PI1[0][17][24] + sp[76] * PI2[0][17][24] + sp[75] * PI1[0][24][17] + sp[77] * PI3[0][17][24] + sp[78] * PI4[0][17][24] + sp[76] * PI2[0][24][17] + sp[78] * PI4[0][24][17] + sp[79] * PI5[0][17][24];
    A[800] = sp[74] * PI0[0][17][25] + sp[75] * PI1[0][17][25] + sp[76] * PI2[0][17][25] + sp[75] * PI1[0][25][17] + sp[77] * PI3[0][17][25] + sp[78] * PI4[0][17][25] + sp[76] * PI2[0][25][17] + sp[78] * PI4[0][25][17] + sp[79] * PI5[0][17][25];
    A[801] = sp[74] * PI0[0][17][26] + sp[75] * PI1[0][17][26] + sp[76] * PI2[0][17][26] + sp[75] * PI1[0][26][17] + sp[77] * PI3[0][17][26] + sp[78] * PI4[0][17][26] + sp[76] * PI2[0][26][17] + sp[78] * PI4[0][26][17] + sp[79] * PI5[0][17][26];
    A[802] = sp[74] * PI0[0][17][27] + sp[75] * PI1[0][17][27] + sp[76] * PI2[0][17][27] + sp[75] * PI1[0][27][17] + sp[77] * PI3[0][17][27] + sp[78] * PI4[0][17][27] + sp[76] * PI2[0][27][17] + sp[78] * PI4[0][27][17] + sp[79] * PI5[0][17][27];
    A[803] = sp[74] * PI0[0][17][28] + sp[75] * PI1[0][17][28] + sp[76] * PI2[0][17][28] + sp[75] * PI1[0][28][17] + sp[77] * PI3[0][17][28] + sp[78] * PI4[0][17][28] + sp[76] * PI2[0][28][17] + sp[78] * PI4[0][28][17] + sp[79] * PI5[0][17][28];
    A[804] = sp[74] * PI0[0][17][29] + sp[75] * PI1[0][17][29] + sp[76] * PI2[0][17][29] + sp[75] * PI1[0][29][17] + sp[77] * PI3[0][17][29] + sp[78] * PI4[0][17][29] + sp[76] * PI2[0][29][17] + sp[78] * PI4[0][29][17] + sp[79] * PI5[0][17][29];
    A[805] = sp[74] * PI0[0][18][0] + sp[75] * PI1[0][18][0] + sp[76] * PI2[0][18][0] + sp[75] * PI1[0][0][18] + sp[77] * PI3[0][18][0] + sp[78] * PI4[0][18][0] + sp[76] * PI2[0][0][18] + sp[78] * PI4[0][0][18] + sp[79] * PI5[0][18][0];
    A[806] = sp[74] * PI0[0][18][1] + sp[75] * PI1[0][1][18] + sp[76] * PI2[0][1][18];
    A[807] = sp[75] * PI1[0][18][1] + sp[77] * PI3[0][18][1] + sp[78] * PI4[0][1][18];
    A[808] = sp[76] * PI2[0][18][1] + sp[78] * PI4[0][18][1] + sp[79] * PI5[0][18][1];
    A[809] = sp[75] * PI1[0][18][2] + sp[76] * PI2[0][18][2] + sp[77] * PI3[0][18][2] + sp[78] * PI4[0][18][2] + sp[78] * PI4[0][2][18] + sp[79] * PI5[0][18][2];
    A[810] = sp[75] * PI1[0][18][3] + sp[76] * PI2[0][18][3] + sp[77] * PI3[0][18][3] + sp[78] * PI4[0][18][3] + sp[78] * PI4[0][3][18] + sp[79] * PI5[0][18][3];
    A[811] = sp[75] * PI1[0][18][4] + sp[76] * PI2[0][18][4] + sp[77] * PI3[0][18][4] + sp[78] * PI4[0][18][4] + sp[78] * PI4[0][4][18] + sp[79] * PI5[0][18][4];
    A[812] = sp[74] * PI0[0][18][2] + sp[76] * PI2[0][18][5] + sp[75] * PI1[0][2][18] + sp[78] * PI4[0][18][5] + sp[76] * PI2[0][2][18] + sp[79] * PI5[0][18][5];
    A[813] = sp[74] * PI0[0][18][3] + sp[76] * PI2[0][18][6] + sp[75] * PI1[0][3][18] + sp[78] * PI4[0][18][6] + sp[76] * PI2[0][3][18] + sp[79] * PI5[0][18][6];
    A[814] = sp[74] * PI0[0][18][4] + sp[76] * PI2[0][18][7] + sp[75] * PI1[0][4][18] + sp[78] * PI4[0][18][7] + sp[76] * PI2[0][4][18] + sp[79] * PI5[0][18][7];
    A[815] = sp[74] * PI0[0][18][5] + sp[75] * PI1[0][18][5] + sp[75] * PI1[0][5][18] + sp[77] * PI3[0][18][5] + sp[76] * PI2[0][5][18] + sp[78] * PI4[0][5][18];
    A[816] = sp[74] * PI0[0][18][6] + sp[75] * PI1[0][18][6] + sp[75] * PI1[0][6][18] + sp[77] * PI3[0][18][6] + sp[76] * PI2[0][6][18] + sp[78] * PI4[0][6][18];
    A[817] = sp[74] * PI0[0][18][7] + sp[75] * PI1[0][18][7] + sp[75] * PI1[0][7][18] + sp[77] * PI3[0][18][7] + sp[76] * PI2[0][7][18] + sp[78] * PI4[0][7][18];
    A[818] = sp[74] * PI0[0][18][8] + sp[75] * PI1[0][18][8] + sp[76] * PI2[0][18][8] + sp[75] * PI1[0][8][18] + sp[77] * PI3[0][18][8] + sp[78] * PI4[0][18][8] + sp[76] * PI2[0][8][18] + sp[78] * PI4[0][8][18] + sp[79] * PI5[0][18][8];
    A[819] = sp[74] * PI0[0][18][9] + sp[75] * PI1[0][18][9] + sp[76] * PI2[0][18][9] + sp[75] * PI1[0][9][18] + sp[77] * PI3[0][18][9] + sp[78] * PI4[0][18][9] + sp[76] * PI2[0][9][18] + sp[78] * PI4[0][9][18] + sp[79] * PI5[0][18][9];
    A[820] = sp[74] * PI0[0][18][10] + sp[75] * PI1[0][18][10] + sp[76] * PI2[0][18][10] + sp[75] * PI1[0][10][18] + sp[77] * PI3[0][18][10] + sp[78] * PI4[0][18][10] + sp[76] * PI2[0][10][18] + sp[78] * PI4[0][10][18] + sp[79] * PI5[0][18][10];
    A[821] = sp[74] * PI0[0][18][11] + sp[75] * PI1[0][18][11] + sp[76] * PI2[0][18][11] + sp[75] * PI1[0][11][18] + sp[77] * PI3[0][18][11] + sp[78] * PI4[0][18][11] + sp[76] * PI2[0][11][18] + sp[78] * PI4[0][11][18] + sp[79] * PI5[0][18][11];
    A[822] = sp[74] * PI0[0][18][12] + sp[75] * PI1[0][18][12] + sp[76] * PI2[0][18][12] + sp[75] * PI1[0][12][18] + sp[77] * PI3[0][18][12] + sp[78] * PI4[0][18][12] + sp[76] * PI2[0][12][18] + sp[78] * PI4[0][12][18] + sp[79] * PI5[0][18][12];
    A[823] = sp[74] * PI0[0][18][13] + sp[75] * PI1[0][18][13] + sp[76] * PI2[0][18][13] + sp[75] * PI1[0][13][18] + sp[77] * PI3[0][18][13] + sp[78] * PI4[0][18][13] + sp[76] * PI2[0][13][18] + sp[78] * PI4[0][13][18] + sp[79] * PI5[0][18][13];
    A[824] = sp[74] * PI0[0][18][14] + sp[75] * PI1[0][18][14] + sp[76] * PI2[0][18][14] + sp[75] * PI1[0][14][18] + sp[77] * PI3[0][18][14] + sp[78] * PI4[0][18][14] + sp[76] * PI2[0][14][18] + sp[78] * PI4[0][14][18] + sp[79] * PI5[0][18][14];
    A[825] = sp[74] * PI0[0][18][15] + sp[75] * PI1[0][18][15] + sp[76] * PI2[0][18][15] + sp[75] * PI1[0][15][18] + sp[77] * PI3[0][18][15] + sp[78] * PI4[0][18][15] + sp[76] * PI2[0][15][18] + sp[78] * PI4[0][15][18] + sp[79] * PI5[0][18][15];
    A[826] = sp[74] * PI0[0][18][16] + sp[75] * PI1[0][18][16] + sp[76] * PI2[0][18][16] + sp[75] * PI1[0][16][18] + sp[77] * PI3[0][18][16] + sp[78] * PI4[0][18][16] + sp[76] * PI2[0][16][18] + sp[78] * PI4[0][16][18] + sp[79] * PI5[0][18][16];
    A[827] = sp[74] * PI0[0][18][17] + sp[75] * PI1[0][18][17] + sp[76] * PI2[0][18][17] + sp[75] * PI1[0][17][18] + sp[77] * PI3[0][18][17] + sp[78] * PI4[0][18][17] + sp[76] * PI2[0][17][18] + sp[78] * PI4[0][17][18] + sp[79] * PI5[0][18][17];
    A[828] = sp[74] * PI0[0][18][18] + sp[75] * PI1[0][18][18] + sp[76] * PI2[0][18][18] + sp[75] * PI1[0][18][18] + sp[77] * PI3[0][18][18] + sp[78] * PI4[0][18][18] + sp[76] * PI2[0][18][18] + sp[78] * PI4[0][18][18] + sp[79] * PI5[0][18][18];
    A[829] = sp[74] * PI0[0][18][19] + sp[75] * PI1[0][18][19] + sp[76] * PI2[0][18][19] + sp[75] * PI1[0][19][18] + sp[77] * PI3[0][18][19] + sp[78] * PI4[0][18][19] + sp[76] * PI2[0][19][18] + sp[78] * PI4[0][19][18] + sp[79] * PI5[0][18][19];
    A[830] = sp[74] * PI0[0][18][20] + sp[75] * PI1[0][18][20] + sp[76] * PI2[0][18][20] + sp[75] * PI1[0][20][18] + sp[77] * PI3[0][18][20] + sp[78] * PI4[0][18][20] + sp[76] * PI2[0][20][18] + sp[78] * PI4[0][20][18] + sp[79] * PI5[0][18][20];
    A[831] = sp[74] * PI0[0][18][21] + sp[75] * PI1[0][18][21] + sp[76] * PI2[0][18][21] + sp[75] * PI1[0][21][18] + sp[77] * PI3[0][18][21] + sp[78] * PI4[0][18][21] + sp[76] * PI2[0][21][18] + sp[78] * PI4[0][21][18] + sp[79] * PI5[0][18][21];
    A[832] = sp[74] * PI0[0][18][22] + sp[75] * PI1[0][18][22] + sp[76] * PI2[0][18][22] + sp[75] * PI1[0][22][18] + sp[77] * PI3[0][18][22] + sp[78] * PI4[0][18][22] + sp[76] * PI2[0][22][18] + sp[78] * PI4[0][22][18] + sp[79] * PI5[0][18][22];
    A[833] = sp[74] * PI0[0][18][23] + sp[75] * PI1[0][18][23] + sp[76] * PI2[0][18][23] + sp[75] * PI1[0][23][18] + sp[77] * PI3[0][18][23] + sp[78] * PI4[0][18][23] + sp[76] * PI2[0][23][18] + sp[78] * PI4[0][23][18] + sp[79] * PI5[0][18][23];
    A[834] = sp[74] * PI0[0][18][24] + sp[75] * PI1[0][18][24] + sp[76] * PI2[0][18][24] + sp[75] * PI1[0][24][18] + sp[77] * PI3[0][18][24] + sp[78] * PI4[0][18][24] + sp[76] * PI2[0][24][18] + sp[78] * PI4[0][24][18] + sp[79] * PI5[0][18][24];
    A[835] = sp[74] * PI0[0][18][25] + sp[75] * PI1[0][18][25] + sp[76] * PI2[0][18][25] + sp[75] * PI1[0][25][18] + sp[77] * PI3[0][18][25] + sp[78] * PI4[0][18][25] + sp[76] * PI2[0][25][18] + sp[78] * PI4[0][25][18] + sp[79] * PI5[0][18][25];
    A[836] = sp[74] * PI0[0][18][26] + sp[75] * PI1[0][18][26] + sp[76] * PI2[0][18][26] + sp[75] * PI1[0][26][18] + sp[77] * PI3[0][18][26] + sp[78] * PI4[0][18][26] + sp[76] * PI2[0][26][18] + sp[78] * PI4[0][26][18] + sp[79] * PI5[0][18][26];
    A[837] = sp[74] * PI0[0][18][27] + sp[75] * PI1[0][18][27] + sp[76] * PI2[0][18][27] + sp[75] * PI1[0][27][18] + sp[77] * PI3[0][18][27] + sp[78] * PI4[0][18][27] + sp[76] * PI2[0][27][18] + sp[78] * PI4[0][27][18] + sp[79] * PI5[0][18][27];
    A[838] = sp[74] * PI0[0][18][28] + sp[75] * PI1[0][18][28] + sp[76] * PI2[0][18][28] + sp[75] * PI1[0][28][18] + sp[77] * PI3[0][18][28] + sp[78] * PI4[0][18][28] + sp[76] * PI2[0][28][18] + sp[78] * PI4[0][28][18] + sp[79] * PI5[0][18][28];
    A[839] = sp[74] * PI0[0][18][29] + sp[75] * PI1[0][18][29] + sp[76] * PI2[0][18][29] + sp[75] * PI1[0][29][18] + sp[77] * PI3[0][18][29] + sp[78] * PI4[0][18][29] + sp[76] * PI2[0][29][18] + sp[78] * PI4[0][29][18] + sp[79] * PI5[0][18][29];
    A[840] = sp[74] * PI0[0][19][0] + sp[75] * PI1[0][19][0] + sp[76] * PI2[0][19][0] + sp[75] * PI1[0][0][19] + sp[77] * PI3[0][19][0] + sp[78] * PI4[0][19][0] + sp[76] * PI2[0][0][19] + sp[78] * PI4[0][0][19] + sp[79] * PI5[0][19][0];
    A[841] = sp[74] * PI0[0][19][1] + sp[75] * PI1[0][1][19] + sp[76] * PI2[0][1][19];
    A[842] = sp[75] * PI1[0][19][1] + sp[77] * PI3[0][19][1] + sp[78] * PI4[0][1][19];
    A[843] = sp[76] * PI2[0][19][1] + sp[78] * PI4[0][19][1] + sp[79] * PI5[0][19][1];
    A[844] = sp[75] * PI1[0][19][2] + sp[76] * PI2[0][19][2] + sp[77] * PI3[0][19][2] + sp[78] * PI4[0][19][2] + sp[78] * PI4[0][2][19] + sp[79] * PI5[0][19][2];
    A[845] = sp[75] * PI1[0][19][3] + sp[76] * PI2[0][19][3] + sp[77] * PI3[0][19][3] + sp[78] * PI4[0][19][3] + sp[78] * PI4[0][3][19] + sp[79] * PI5[0][19][3];
    A[846] = sp[75] * PI1[0][19][4] + sp[76] * PI2[0][19][4] + sp[77] * PI3[0][19][4] + sp[78] * PI4[0][19][4] + sp[78] * PI4[0][4][19] + sp[79] * PI5[0][19][4];
    A[847] = sp[74] * PI0[0][19][2] + sp[76] * PI2[0][19][5] + sp[75] * PI1[0][2][19] + sp[78] * PI4[0][19][5] + sp[76] * PI2[0][2][19] + sp[79] * PI5[0][19][5];
    A[848] = sp[74] * PI0[0][19][3] + sp[76] * PI2[0][19][6] + sp[75] * PI1[0][3][19] + sp[78] * PI4[0][19][6] + sp[76] * PI2[0][3][19] + sp[79] * PI5[0][19][6];
    A[849] = sp[74] * PI0[0][19][4] + sp[76] * PI2[0][19][7] + sp[75] * PI1[0][4][19] + sp[78] * PI4[0][19][7] + sp[76] * PI2[0][4][19] + sp[79] * PI5[0][19][7];
    A[850] = sp[74] * PI0[0][19][5] + sp[75] * PI1[0][19][5] + sp[75] * PI1[0][5][19] + sp[77] * PI3[0][19][5] + sp[76] * PI2[0][5][19] + sp[78] * PI4[0][5][19];
    A[851] = sp[74] * PI0[0][19][6] + sp[75] * PI1[0][19][6] + sp[75] * PI1[0][6][19] + sp[77] * PI3[0][19][6] + sp[76] * PI2[0][6][19] + sp[78] * PI4[0][6][19];
    A[852] = sp[74] * PI0[0][19][7] + sp[75] * PI1[0][19][7] + sp[75] * PI1[0][7][19] + sp[77] * PI3[0][19][7] + sp[76] * PI2[0][7][19] + sp[78] * PI4[0][7][19];
    A[853] = sp[74] * PI0[0][19][8] + sp[75] * PI1[0][19][8] + sp[76] * PI2[0][19][8] + sp[75] * PI1[0][8][19] + sp[77] * PI3[0][19][8] + sp[78] * PI4[0][19][8] + sp[76] * PI2[0][8][19] + sp[78] * PI4[0][8][19] + sp[79] * PI5[0][19][8];
    A[854] = sp[74] * PI0[0][19][9] + sp[75] * PI1[0][19][9] + sp[76] * PI2[0][19][9] + sp[75] * PI1[0][9][19] + sp[77] * PI3[0][19][9] + sp[78] * PI4[0][19][9] + sp[76] * PI2[0][9][19] + sp[78] * PI4[0][9][19] + sp[79] * PI5[0][19][9];
    A[855] = sp[74] * PI0[0][19][10] + sp[75] * PI1[0][19][10] + sp[76] * PI2[0][19][10] + sp[75] * PI1[0][10][19] + sp[77] * PI3[0][19][10] + sp[78] * PI4[0][19][10] + sp[76] * PI2[0][10][19] + sp[78] * PI4[0][10][19] + sp[79] * PI5[0][19][10];
    A[856] = sp[74] * PI0[0][19][11] + sp[75] * PI1[0][19][11] + sp[76] * PI2[0][19][11] + sp[75] * PI1[0][11][19] + sp[77] * PI3[0][19][11] + sp[78] * PI4[0][19][11] + sp[76] * PI2[0][11][19] + sp[78] * PI4[0][11][19] + sp[79] * PI5[0][19][11];
    A[857] = sp[74] * PI0[0][19][12] + sp[75] * PI1[0][19][12] + sp[76] * PI2[0][19][12] + sp[75] * PI1[0][12][19] + sp[77] * PI3[0][19][12] + sp[78] * PI4[0][19][12] + sp[76] * PI2[0][12][19] + sp[78] * PI4[0][12][19] + sp[79] * PI5[0][19][12];
    A[858] = sp[74] * PI0[0][19][13] + sp[75] * PI1[0][19][13] + sp[76] * PI2[0][19][13] + sp[75] * PI1[0][13][19] + sp[77] * PI3[0][19][13] + sp[78] * PI4[0][19][13] + sp[76] * PI2[0][13][19] + sp[78] * PI4[0][13][19] + sp[79] * PI5[0][19][13];
    A[859] = sp[74] * PI0[0][19][14] + sp[75] * PI1[0][19][14] + sp[76] * PI2[0][19][14] + sp[75] * PI1[0][14][19] + sp[77] * PI3[0][19][14] + sp[78] * PI4[0][19][14] + sp[76] * PI2[0][14][19] + sp[78] * PI4[0][14][19] + sp[79] * PI5[0][19][14];
    A[860] = sp[74] * PI0[0][19][15] + sp[75] * PI1[0][19][15] + sp[76] * PI2[0][19][15] + sp[75] * PI1[0][15][19] + sp[77] * PI3[0][19][15] + sp[78] * PI4[0][19][15] + sp[76] * PI2[0][15][19] + sp[78] * PI4[0][15][19] + sp[79] * PI5[0][19][15];
    A[861] = sp[74] * PI0[0][19][16] + sp[75] * PI1[0][19][16] + sp[76] * PI2[0][19][16] + sp[75] * PI1[0][16][19] + sp[77] * PI3[0][19][16] + sp[78] * PI4[0][19][16] + sp[76] * PI2[0][16][19] + sp[78] * PI4[0][16][19] + sp[79] * PI5[0][19][16];
    A[862] = sp[74] * PI0[0][19][17] + sp[75] * PI1[0][19][17] + sp[76] * PI2[0][19][17] + sp[75] * PI1[0][17][19] + sp[77] * PI3[0][19][17] + sp[78] * PI4[0][19][17] + sp[76] * PI2[0][17][19] + sp[78] * PI4[0][17][19] + sp[79] * PI5[0][19][17];
    A[863] = sp[74] * PI0[0][19][18] + sp[75] * PI1[0][19][18] + sp[76] * PI2[0][19][18] + sp[75] * PI1[0][18][19] + sp[77] * PI3[0][19][18] + sp[78] * PI4[0][19][18] + sp[76] * PI2[0][18][19] + sp[78] * PI4[0][18][19] + sp[79] * PI5[0][19][18];
    A[864] = sp[74] * PI0[0][19][19] + sp[75] * PI1[0][19][19] + sp[76] * PI2[0][19][19] + sp[75] * PI1[0][19][19] + sp[77] * PI3[0][19][19] + sp[78] * PI4[0][19][19] + sp[76] * PI2[0][19][19] + sp[78] * PI4[0][19][19] + sp[79] * PI5[0][19][19];
    A[865] = sp[74] * PI0[0][19][20] + sp[75] * PI1[0][19][20] + sp[76] * PI2[0][19][20] + sp[75] * PI1[0][20][19] + sp[77] * PI3[0][19][20] + sp[78] * PI4[0][19][20] + sp[76] * PI2[0][20][19] + sp[78] * PI4[0][20][19] + sp[79] * PI5[0][19][20];
    A[866] = sp[74] * PI0[0][19][21] + sp[75] * PI1[0][19][21] + sp[76] * PI2[0][19][21] + sp[75] * PI1[0][21][19] + sp[77] * PI3[0][19][21] + sp[78] * PI4[0][19][21] + sp[76] * PI2[0][21][19] + sp[78] * PI4[0][21][19] + sp[79] * PI5[0][19][21];
    A[867] = sp[74] * PI0[0][19][22] + sp[75] * PI1[0][19][22] + sp[76] * PI2[0][19][22] + sp[75] * PI1[0][22][19] + sp[77] * PI3[0][19][22] + sp[78] * PI4[0][19][22] + sp[76] * PI2[0][22][19] + sp[78] * PI4[0][22][19] + sp[79] * PI5[0][19][22];
    A[868] = sp[74] * PI0[0][19][23] + sp[75] * PI1[0][19][23] + sp[76] * PI2[0][19][23] + sp[75] * PI1[0][23][19] + sp[77] * PI3[0][19][23] + sp[78] * PI4[0][19][23] + sp[76] * PI2[0][23][19] + sp[78] * PI4[0][23][19] + sp[79] * PI5[0][19][23];
    A[869] = sp[74] * PI0[0][19][24] + sp[75] * PI1[0][19][24] + sp[76] * PI2[0][19][24] + sp[75] * PI1[0][24][19] + sp[77] * PI3[0][19][24] + sp[78] * PI4[0][19][24] + sp[76] * PI2[0][24][19] + sp[78] * PI4[0][24][19] + sp[79] * PI5[0][19][24];
    A[870] = sp[74] * PI0[0][19][25] + sp[75] * PI1[0][19][25] + sp[76] * PI2[0][19][25] + sp[75] * PI1[0][25][19] + sp[77] * PI3[0][19][25] + sp[78] * PI4[0][19][25] + sp[76] * PI2[0][25][19] + sp[78] * PI4[0][25][19] + sp[79] * PI5[0][19][25];
    A[871] = sp[74] * PI0[0][19][26] + sp[75] * PI1[0][19][26] + sp[76] * PI2[0][19][26] + sp[75] * PI1[0][26][19] + sp[77] * PI3[0][19][26] + sp[78] * PI4[0][19][26] + sp[76] * PI2[0][26][19] + sp[78] * PI4[0][26][19] + sp[79] * PI5[0][19][26];
    A[872] = sp[74] * PI0[0][19][27] + sp[75] * PI1[0][19][27] + sp[76] * PI2[0][19][27] + sp[75] * PI1[0][27][19] + sp[77] * PI3[0][19][27] + sp[78] * PI4[0][19][27] + sp[76] * PI2[0][27][19] + sp[78] * PI4[0][27][19] + sp[79] * PI5[0][19][27];
    A[873] = sp[74] * PI0[0][19][28] + sp[75] * PI1[0][19][28] + sp[76] * PI2[0][19][28] + sp[75] * PI1[0][28][19] + sp[77] * PI3[0][19][28] + sp[78] * PI4[0][19][28] + sp[76] * PI2[0][28][19] + sp[78] * PI4[0][28][19] + sp[79] * PI5[0][19][28];
    A[874] = sp[74] * PI0[0][19][29] + sp[75] * PI1[0][19][29] + sp[76] * PI2[0][19][29] + sp[75] * PI1[0][29][19] + sp[77] * PI3[0][19][29] + sp[78] * PI4[0][19][29] + sp[76] * PI2[0][29][19] + sp[78] * PI4[0][29][19] + sp[79] * PI5[0][19][29];
    A[875] = sp[74] * PI0[0][20][0] + sp[75] * PI1[0][20][0] + sp[76] * PI2[0][20][0] + sp[75] * PI1[0][0][20] + sp[77] * PI3[0][20][0] + sp[78] * PI4[0][20][0] + sp[76] * PI2[0][0][20] + sp[78] * PI4[0][0][20] + sp[79] * PI5[0][20][0];
    A[876] = sp[74] * PI0[0][20][1] + sp[75] * PI1[0][1][20] + sp[76] * PI2[0][1][20];
    A[877] = sp[75] * PI1[0][20][1] + sp[77] * PI3[0][20][1] + sp[78] * PI4[0][1][20];
    A[878] = sp[76] * PI2[0][20][1] + sp[78] * PI4[0][20][1] + sp[79] * PI5[0][20][1];
    A[879] = sp[75] * PI1[0][20][2] + sp[76] * PI2[0][20][2] + sp[77] * PI3[0][20][2] + sp[78] * PI4[0][20][2] + sp[78] * PI4[0][2][20] + sp[79] * PI5[0][20][2];
    A[880] = sp[75] * PI1[0][20][3] + sp[76] * PI2[0][20][3] + sp[77] * PI3[0][20][3] + sp[78] * PI4[0][20][3] + sp[78] * PI4[0][3][20] + sp[79] * PI5[0][20][3];
    A[881] = sp[75] * PI1[0][20][4] + sp[76] * PI2[0][20][4] + sp[77] * PI3[0][20][4] + sp[78] * PI4[0][20][4] + sp[78] * PI4[0][4][20] + sp[79] * PI5[0][20][4];
    A[882] = sp[74] * PI0[0][20][2] + sp[76] * PI2[0][20][5] + sp[75] * PI1[0][2][20] + sp[78] * PI4[0][20][5] + sp[76] * PI2[0][2][20] + sp[79] * PI5[0][20][5];
    A[883] = sp[74] * PI0[0][20][3] + sp[76] * PI2[0][20][6] + sp[75] * PI1[0][3][20] + sp[78] * PI4[0][20][6] + sp[76] * PI2[0][3][20] + sp[79] * PI5[0][20][6];
    A[884] = sp[74] * PI0[0][20][4] + sp[76] * PI2[0][20][7] + sp[75] * PI1[0][4][20] + sp[78] * PI4[0][20][7] + sp[76] * PI2[0][4][20] + sp[79] * PI5[0][20][7];
    A[885] = sp[74] * PI0[0][20][5] + sp[75] * PI1[0][20][5] + sp[75] * PI1[0][5][20] + sp[77] * PI3[0][20][5] + sp[76] * PI2[0][5][20] + sp[78] * PI4[0][5][20];
    A[886] = sp[74] * PI0[0][20][6] + sp[75] * PI1[0][20][6] + sp[75] * PI1[0][6][20] + sp[77] * PI3[0][20][6] + sp[76] * PI2[0][6][20] + sp[78] * PI4[0][6][20];
    A[887] = sp[74] * PI0[0][20][7] + sp[75] * PI1[0][20][7] + sp[75] * PI1[0][7][20] + sp[77] * PI3[0][20][7] + sp[76] * PI2[0][7][20] + sp[78] * PI4[0][7][20];
    A[888] = sp[74] * PI0[0][20][8] + sp[75] * PI1[0][20][8] + sp[76] * PI2[0][20][8] + sp[75] * PI1[0][8][20] + sp[77] * PI3[0][20][8] + sp[78] * PI4[0][20][8] + sp[76] * PI2[0][8][20] + sp[78] * PI4[0][8][20] + sp[79] * PI5[0][20][8];
    A[889] = sp[74] * PI0[0][20][9] + sp[75] * PI1[0][20][9] + sp[76] * PI2[0][20][9] + sp[75] * PI1[0][9][20] + sp[77] * PI3[0][20][9] + sp[78] * PI4[0][20][9] + sp[76] * PI2[0][9][20] + sp[78] * PI4[0][9][20] + sp[79] * PI5[0][20][9];
    A[890] = sp[74] * PI0[0][20][10] + sp[75] * PI1[0][20][10] + sp[76] * PI2[0][20][10] + sp[75] * PI1[0][10][20] + sp[77] * PI3[0][20][10] + sp[78] * PI4[0][20][10] + sp[76] * PI2[0][10][20] + sp[78] * PI4[0][10][20] + sp[79] * PI5[0][20][10];
    A[891] = sp[74] * PI0[0][20][11] + sp[75] * PI1[0][20][11] + sp[76] * PI2[0][20][11] + sp[75] * PI1[0][11][20] + sp[77] * PI3[0][20][11] + sp[78] * PI4[0][20][11] + sp[76] * PI2[0][11][20] + sp[78] * PI4[0][11][20] + sp[79] * PI5[0][20][11];
    A[892] = sp[74] * PI0[0][20][12] + sp[75] * PI1[0][20][12] + sp[76] * PI2[0][20][12] + sp[75] * PI1[0][12][20] + sp[77] * PI3[0][20][12] + sp[78] * PI4[0][20][12] + sp[76] * PI2[0][12][20] + sp[78] * PI4[0][12][20] + sp[79] * PI5[0][20][12];
    A[893] = sp[74] * PI0[0][20][13] + sp[75] * PI1[0][20][13] + sp[76] * PI2[0][20][13] + sp[75] * PI1[0][13][20] + sp[77] * PI3[0][20][13] + sp[78] * PI4[0][20][13] + sp[76] * PI2[0][13][20] + sp[78] * PI4[0][13][20] + sp[79] * PI5[0][20][13];
    A[894] = sp[74] * PI0[0][20][14] + sp[75] * PI1[0][20][14] + sp[76] * PI2[0][20][14] + sp[75] * PI1[0][14][20] + sp[77] * PI3[0][20][14] + sp[78] * PI4[0][20][14] + sp[76] * PI2[0][14][20] + sp[78] * PI4[0][14][20] + sp[79] * PI5[0][20][14];
    A[895] = sp[74] * PI0[0][20][15] + sp[75] * PI1[0][20][15] + sp[76] * PI2[0][20][15] + sp[75] * PI1[0][15][20] + sp[77] * PI3[0][20][15] + sp[78] * PI4[0][20][15] + sp[76] * PI2[0][15][20] + sp[78] * PI4[0][15][20] + sp[79] * PI5[0][20][15];
    A[896] = sp[74] * PI0[0][20][16] + sp[75] * PI1[0][20][16] + sp[76] * PI2[0][20][16] + sp[75] * PI1[0][16][20] + sp[77] * PI3[0][20][16] + sp[78] * PI4[0][20][16] + sp[76] * PI2[0][16][20] + sp[78] * PI4[0][16][20] + sp[79] * PI5[0][20][16];
    A[897] = sp[74] * PI0[0][20][17] + sp[75] * PI1[0][20][17] + sp[76] * PI2[0][20][17] + sp[75] * PI1[0][17][20] + sp[77] * PI3[0][20][17] + sp[78] * PI4[0][20][17] + sp[76] * PI2[0][17][20] + sp[78] * PI4[0][17][20] + sp[79] * PI5[0][20][17];
    A[898] = sp[74] * PI0[0][20][18] + sp[75] * PI1[0][20][18] + sp[76] * PI2[0][20][18] + sp[75] * PI1[0][18][20] + sp[77] * PI3[0][20][18] + sp[78] * PI4[0][20][18] + sp[76] * PI2[0][18][20] + sp[78] * PI4[0][18][20] + sp[79] * PI5[0][20][18];
    A[899] = sp[74] * PI0[0][20][19] + sp[75] * PI1[0][20][19] + sp[76] * PI2[0][20][19] + sp[75] * PI1[0][19][20] + sp[77] * PI3[0][20][19] + sp[78] * PI4[0][20][19] + sp[76] * PI2[0][19][20] + sp[78] * PI4[0][19][20] + sp[79] * PI5[0][20][19];
    A[900] = sp[74] * PI0[0][20][20] + sp[75] * PI1[0][20][20] + sp[76] * PI2[0][20][20] + sp[75] * PI1[0][20][20] + sp[77] * PI3[0][20][20] + sp[78] * PI4[0][20][20] + sp[76] * PI2[0][20][20] + sp[78] * PI4[0][20][20] + sp[79] * PI5[0][20][20];
    A[901] = sp[74] * PI0[0][20][21] + sp[75] * PI1[0][20][21] + sp[76] * PI2[0][20][21] + sp[75] * PI1[0][21][20] + sp[77] * PI3[0][20][21] + sp[78] * PI4[0][20][21] + sp[76] * PI2[0][21][20] + sp[78] * PI4[0][21][20] + sp[79] * PI5[0][20][21];
    A[902] = sp[74] * PI0[0][20][22] + sp[75] * PI1[0][20][22] + sp[76] * PI2[0][20][22] + sp[75] * PI1[0][22][20] + sp[77] * PI3[0][20][22] + sp[78] * PI4[0][20][22] + sp[76] * PI2[0][22][20] + sp[78] * PI4[0][22][20] + sp[79] * PI5[0][20][22];
    A[903] = sp[74] * PI0[0][20][23] + sp[75] * PI1[0][20][23] + sp[76] * PI2[0][20][23] + sp[75] * PI1[0][23][20] + sp[77] * PI3[0][20][23] + sp[78] * PI4[0][20][23] + sp[76] * PI2[0][23][20] + sp[78] * PI4[0][23][20] + sp[79] * PI5[0][20][23];
    A[904] = sp[74] * PI0[0][20][24] + sp[75] * PI1[0][20][24] + sp[76] * PI2[0][20][24] + sp[75] * PI1[0][24][20] + sp[77] * PI3[0][20][24] + sp[78] * PI4[0][20][24] + sp[76] * PI2[0][24][20] + sp[78] * PI4[0][24][20] + sp[79] * PI5[0][20][24];
    A[905] = sp[74] * PI0[0][20][25] + sp[75] * PI1[0][20][25] + sp[76] * PI2[0][20][25] + sp[75] * PI1[0][25][20] + sp[77] * PI3[0][20][25] + sp[78] * PI4[0][20][25] + sp[76] * PI2[0][25][20] + sp[78] * PI4[0][25][20] + sp[79] * PI5[0][20][25];
    A[906] = sp[74] * PI0[0][20][26] + sp[75] * PI1[0][20][26] + sp[76] * PI2[0][20][26] + sp[75] * PI1[0][26][20] + sp[77] * PI3[0][20][26] + sp[78] * PI4[0][20][26] + sp[76] * PI2[0][26][20] + sp[78] * PI4[0][26][20] + sp[79] * PI5[0][20][26];
    A[907] = sp[74] * PI0[0][20][27] + sp[75] * PI1[0][20][27] + sp[76] * PI2[0][20][27] + sp[75] * PI1[0][27][20] + sp[77] * PI3[0][20][27] + sp[78] * PI4[0][20][27] + sp[76] * PI2[0][27][20] + sp[78] * PI4[0][27][20] + sp[79] * PI5[0][20][27];
    A[908] = sp[74] * PI0[0][20][28] + sp[75] * PI1[0][20][28] + sp[76] * PI2[0][20][28] + sp[75] * PI1[0][28][20] + sp[77] * PI3[0][20][28] + sp[78] * PI4[0][20][28] + sp[76] * PI2[0][28][20] + sp[78] * PI4[0][28][20] + sp[79] * PI5[0][20][28];
    A[909] = sp[74] * PI0[0][20][29] + sp[75] * PI1[0][20][29] + sp[76] * PI2[0][20][29] + sp[75] * PI1[0][29][20] + sp[77] * PI3[0][20][29] + sp[78] * PI4[0][20][29] + sp[76] * PI2[0][29][20] + sp[78] * PI4[0][29][20] + sp[79] * PI5[0][20][29];
    A[910] = sp[74] * PI0[0][21][0] + sp[75] * PI1[0][21][0] + sp[76] * PI2[0][21][0] + sp[75] * PI1[0][0][21] + sp[77] * PI3[0][21][0] + sp[78] * PI4[0][21][0] + sp[76] * PI2[0][0][21] + sp[78] * PI4[0][0][21] + sp[79] * PI5[0][21][0];
    A[911] = sp[74] * PI0[0][21][1] + sp[75] * PI1[0][1][21] + sp[76] * PI2[0][1][21];
    A[912] = sp[75] * PI1[0][21][1] + sp[77] * PI3[0][21][1] + sp[78] * PI4[0][1][21];
    A[913] = sp[76] * PI2[0][21][1] + sp[78] * PI4[0][21][1] + sp[79] * PI5[0][21][1];
    A[914] = sp[75] * PI1[0][21][2] + sp[76] * PI2[0][21][2] + sp[77] * PI3[0][21][2] + sp[78] * PI4[0][21][2] + sp[78] * PI4[0][2][21] + sp[79] * PI5[0][21][2];
    A[915] = sp[75] * PI1[0][21][3] + sp[76] * PI2[0][21][3] + sp[77] * PI3[0][21][3] + sp[78] * PI4[0][21][3] + sp[78] * PI4[0][3][21] + sp[79] * PI5[0][21][3];
    A[916] = sp[75] * PI1[0][21][4] + sp[76] * PI2[0][21][4] + sp[77] * PI3[0][21][4] + sp[78] * PI4[0][21][4] + sp[78] * PI4[0][4][21] + sp[79] * PI5[0][21][4];
    A[917] = sp[74] * PI0[0][21][2] + sp[76] * PI2[0][21][5] + sp[75] * PI1[0][2][21] + sp[78] * PI4[0][21][5] + sp[76] * PI2[0][2][21] + sp[79] * PI5[0][21][5];
    A[918] = sp[74] * PI0[0][21][3] + sp[76] * PI2[0][21][6] + sp[75] * PI1[0][3][21] + sp[78] * PI4[0][21][6] + sp[76] * PI2[0][3][21] + sp[79] * PI5[0][21][6];
    A[919] = sp[74] * PI0[0][21][4] + sp[76] * PI2[0][21][7] + sp[75] * PI1[0][4][21] + sp[78] * PI4[0][21][7] + sp[76] * PI2[0][4][21] + sp[79] * PI5[0][21][7];
    A[920] = sp[74] * PI0[0][21][5] + sp[75] * PI1[0][21][5] + sp[75] * PI1[0][5][21] + sp[77] * PI3[0][21][5] + sp[76] * PI2[0][5][21] + sp[78] * PI4[0][5][21];
    A[921] = sp[74] * PI0[0][21][6] + sp[75] * PI1[0][21][6] + sp[75] * PI1[0][6][21] + sp[77] * PI3[0][21][6] + sp[76] * PI2[0][6][21] + sp[78] * PI4[0][6][21];
    A[922] = sp[74] * PI0[0][21][7] + sp[75] * PI1[0][21][7] + sp[75] * PI1[0][7][21] + sp[77] * PI3[0][21][7] + sp[76] * PI2[0][7][21] + sp[78] * PI4[0][7][21];
    A[923] = sp[74] * PI0[0][21][8] + sp[75] * PI1[0][21][8] + sp[76] * PI2[0][21][8] + sp[75] * PI1[0][8][21] + sp[77] * PI3[0][21][8] + sp[78] * PI4[0][21][8] + sp[76] * PI2[0][8][21] + sp[78] * PI4[0][8][21] + sp[79] * PI5[0][21][8];
    A[924] = sp[74] * PI0[0][21][9] + sp[75] * PI1[0][21][9] + sp[76] * PI2[0][21][9] + sp[75] * PI1[0][9][21] + sp[77] * PI3[0][21][9] + sp[78] * PI4[0][21][9] + sp[76] * PI2[0][9][21] + sp[78] * PI4[0][9][21] + sp[79] * PI5[0][21][9];
    A[925] = sp[74] * PI0[0][21][10] + sp[75] * PI1[0][21][10] + sp[76] * PI2[0][21][10] + sp[75] * PI1[0][10][21] + sp[77] * PI3[0][21][10] + sp[78] * PI4[0][21][10] + sp[76] * PI2[0][10][21] + sp[78] * PI4[0][10][21] + sp[79] * PI5[0][21][10];
    A[926] = sp[74] * PI0[0][21][11] + sp[75] * PI1[0][21][11] + sp[76] * PI2[0][21][11] + sp[75] * PI1[0][11][21] + sp[77] * PI3[0][21][11] + sp[78] * PI4[0][21][11] + sp[76] * PI2[0][11][21] + sp[78] * PI4[0][11][21] + sp[79] * PI5[0][21][11];
    A[927] = sp[74] * PI0[0][21][12] + sp[75] * PI1[0][21][12] + sp[76] * PI2[0][21][12] + sp[75] * PI1[0][12][21] + sp[77] * PI3[0][21][12] + sp[78] * PI4[0][21][12] + sp[76] * PI2[0][12][21] + sp[78] * PI4[0][12][21] + sp[79] * PI5[0][21][12];
    A[928] = sp[74] * PI0[0][21][13] + sp[75] * PI1[0][21][13] + sp[76] * PI2[0][21][13] + sp[75] * PI1[0][13][21] + sp[77] * PI3[0][21][13] + sp[78] * PI4[0][21][13] + sp[76] * PI2[0][13][21] + sp[78] * PI4[0][13][21] + sp[79] * PI5[0][21][13];
    A[929] = sp[74] * PI0[0][21][14] + sp[75] * PI1[0][21][14] + sp[76] * PI2[0][21][14] + sp[75] * PI1[0][14][21] + sp[77] * PI3[0][21][14] + sp[78] * PI4[0][21][14] + sp[76] * PI2[0][14][21] + sp[78] * PI4[0][14][21] + sp[79] * PI5[0][21][14];
    A[930] = sp[74] * PI0[0][21][15] + sp[75] * PI1[0][21][15] + sp[76] * PI2[0][21][15] + sp[75] * PI1[0][15][21] + sp[77] * PI3[0][21][15] + sp[78] * PI4[0][21][15] + sp[76] * PI2[0][15][21] + sp[78] * PI4[0][15][21] + sp[79] * PI5[0][21][15];
    A[931] = sp[74] * PI0[0][21][16] + sp[75] * PI1[0][21][16] + sp[76] * PI2[0][21][16] + sp[75] * PI1[0][16][21] + sp[77] * PI3[0][21][16] + sp[78] * PI4[0][21][16] + sp[76] * PI2[0][16][21] + sp[78] * PI4[0][16][21] + sp[79] * PI5[0][21][16];
    A[932] = sp[74] * PI0[0][21][17] + sp[75] * PI1[0][21][17] + sp[76] * PI2[0][21][17] + sp[75] * PI1[0][17][21] + sp[77] * PI3[0][21][17] + sp[78] * PI4[0][21][17] + sp[76] * PI2[0][17][21] + sp[78] * PI4[0][17][21] + sp[79] * PI5[0][21][17];
    A[933] = sp[74] * PI0[0][21][18] + sp[75] * PI1[0][21][18] + sp[76] * PI2[0][21][18] + sp[75] * PI1[0][18][21] + sp[77] * PI3[0][21][18] + sp[78] * PI4[0][21][18] + sp[76] * PI2[0][18][21] + sp[78] * PI4[0][18][21] + sp[79] * PI5[0][21][18];
    A[934] = sp[74] * PI0[0][21][19] + sp[75] * PI1[0][21][19] + sp[76] * PI2[0][21][19] + sp[75] * PI1[0][19][21] + sp[77] * PI3[0][21][19] + sp[78] * PI4[0][21][19] + sp[76] * PI2[0][19][21] + sp[78] * PI4[0][19][21] + sp[79] * PI5[0][21][19];
    A[935] = sp[74] * PI0[0][21][20] + sp[75] * PI1[0][21][20] + sp[76] * PI2[0][21][20] + sp[75] * PI1[0][20][21] + sp[77] * PI3[0][21][20] + sp[78] * PI4[0][21][20] + sp[76] * PI2[0][20][21] + sp[78] * PI4[0][20][21] + sp[79] * PI5[0][21][20];
    A[936] = sp[74] * PI0[0][21][21] + sp[75] * PI1[0][21][21] + sp[76] * PI2[0][21][21] + sp[75] * PI1[0][21][21] + sp[77] * PI3[0][21][21] + sp[78] * PI4[0][21][21] + sp[76] * PI2[0][21][21] + sp[78] * PI4[0][21][21] + sp[79] * PI5[0][21][21];
    A[937] = sp[74] * PI0[0][21][22] + sp[75] * PI1[0][21][22] + sp[76] * PI2[0][21][22] + sp[75] * PI1[0][22][21] + sp[77] * PI3[0][21][22] + sp[78] * PI4[0][21][22] + sp[76] * PI2[0][22][21] + sp[78] * PI4[0][22][21] + sp[79] * PI5[0][21][22];
    A[938] = sp[74] * PI0[0][21][23] + sp[75] * PI1[0][21][23] + sp[76] * PI2[0][21][23] + sp[75] * PI1[0][23][21] + sp[77] * PI3[0][21][23] + sp[78] * PI4[0][21][23] + sp[76] * PI2[0][23][21] + sp[78] * PI4[0][23][21] + sp[79] * PI5[0][21][23];
    A[939] = sp[74] * PI0[0][21][24] + sp[75] * PI1[0][21][24] + sp[76] * PI2[0][21][24] + sp[75] * PI1[0][24][21] + sp[77] * PI3[0][21][24] + sp[78] * PI4[0][21][24] + sp[76] * PI2[0][24][21] + sp[78] * PI4[0][24][21] + sp[79] * PI5[0][21][24];
    A[940] = sp[74] * PI0[0][21][25] + sp[75] * PI1[0][21][25] + sp[76] * PI2[0][21][25] + sp[75] * PI1[0][25][21] + sp[77] * PI3[0][21][25] + sp[78] * PI4[0][21][25] + sp[76] * PI2[0][25][21] + sp[78] * PI4[0][25][21] + sp[79] * PI5[0][21][25];
    A[941] = sp[74] * PI0[0][21][26] + sp[75] * PI1[0][21][26] + sp[76] * PI2[0][21][26] + sp[75] * PI1[0][26][21] + sp[77] * PI3[0][21][26] + sp[78] * PI4[0][21][26] + sp[76] * PI2[0][26][21] + sp[78] * PI4[0][26][21] + sp[79] * PI5[0][21][26];
    A[942] = sp[74] * PI0[0][21][27] + sp[75] * PI1[0][21][27] + sp[76] * PI2[0][21][27] + sp[75] * PI1[0][27][21] + sp[77] * PI3[0][21][27] + sp[78] * PI4[0][21][27] + sp[76] * PI2[0][27][21] + sp[78] * PI4[0][27][21] + sp[79] * PI5[0][21][27];
    A[943] = sp[74] * PI0[0][21][28] + sp[75] * PI1[0][21][28] + sp[76] * PI2[0][21][28] + sp[75] * PI1[0][28][21] + sp[77] * PI3[0][21][28] + sp[78] * PI4[0][21][28] + sp[76] * PI2[0][28][21] + sp[78] * PI4[0][28][21] + sp[79] * PI5[0][21][28];
    A[944] = sp[74] * PI0[0][21][29] + sp[75] * PI1[0][21][29] + sp[76] * PI2[0][21][29] + sp[75] * PI1[0][29][21] + sp[77] * PI3[0][21][29] + sp[78] * PI4[0][21][29] + sp[76] * PI2[0][29][21] + sp[78] * PI4[0][29][21] + sp[79] * PI5[0][21][29];
    A[945] = sp[74] * PI0[0][22][0] + sp[75] * PI1[0][22][0] + sp[76] * PI2[0][22][0] + sp[75] * PI1[0][0][22] + sp[77] * PI3[0][22][0] + sp[78] * PI4[0][22][0] + sp[76] * PI2[0][0][22] + sp[78] * PI4[0][0][22] + sp[79] * PI5[0][22][0];
    A[946] = sp[74] * PI0[0][22][1] + sp[75] * PI1[0][1][22] + sp[76] * PI2[0][1][22];
    A[947] = sp[75] * PI1[0][22][1] + sp[77] * PI3[0][22][1] + sp[78] * PI4[0][1][22];
    A[948] = sp[76] * PI2[0][22][1] + sp[78] * PI4[0][22][1] + sp[79] * PI5[0][22][1];
    A[949] = sp[75] * PI1[0][22][2] + sp[76] * PI2[0][22][2] + sp[77] * PI3[0][22][2] + sp[78] * PI4[0][22][2] + sp[78] * PI4[0][2][22] + sp[79] * PI5[0][22][2];
    A[950] = sp[75] * PI1[0][22][3] + sp[76] * PI2[0][22][3] + sp[77] * PI3[0][22][3] + sp[78] * PI4[0][22][3] + sp[78] * PI4[0][3][22] + sp[79] * PI5[0][22][3];
    A[951] = sp[75] * PI1[0][22][4] + sp[76] * PI2[0][22][4] + sp[77] * PI3[0][22][4] + sp[78] * PI4[0][22][4] + sp[78] * PI4[0][4][22] + sp[79] * PI5[0][22][4];
    A[952] = sp[74] * PI0[0][22][2] + sp[76] * PI2[0][22][5] + sp[75] * PI1[0][2][22] + sp[78] * PI4[0][22][5] + sp[76] * PI2[0][2][22] + sp[79] * PI5[0][22][5];
    A[953] = sp[74] * PI0[0][22][3] + sp[76] * PI2[0][22][6] + sp[75] * PI1[0][3][22] + sp[78] * PI4[0][22][6] + sp[76] * PI2[0][3][22] + sp[79] * PI5[0][22][6];
    A[954] = sp[74] * PI0[0][22][4] + sp[76] * PI2[0][22][7] + sp[75] * PI1[0][4][22] + sp[78] * PI4[0][22][7] + sp[76] * PI2[0][4][22] + sp[79] * PI5[0][22][7];
    A[955] = sp[74] * PI0[0][22][5] + sp[75] * PI1[0][22][5] + sp[75] * PI1[0][5][22] + sp[77] * PI3[0][22][5] + sp[76] * PI2[0][5][22] + sp[78] * PI4[0][5][22];
    A[956] = sp[74] * PI0[0][22][6] + sp[75] * PI1[0][22][6] + sp[75] * PI1[0][6][22] + sp[77] * PI3[0][22][6] + sp[76] * PI2[0][6][22] + sp[78] * PI4[0][6][22];
    A[957] = sp[74] * PI0[0][22][7] + sp[75] * PI1[0][22][7] + sp[75] * PI1[0][7][22] + sp[77] * PI3[0][22][7] + sp[76] * PI2[0][7][22] + sp[78] * PI4[0][7][22];
    A[958] = sp[74] * PI0[0][22][8] + sp[75] * PI1[0][22][8] + sp[76] * PI2[0][22][8] + sp[75] * PI1[0][8][22] + sp[77] * PI3[0][22][8] + sp[78] * PI4[0][22][8] + sp[76] * PI2[0][8][22] + sp[78] * PI4[0][8][22] + sp[79] * PI5[0][22][8];
    A[959] = sp[74] * PI0[0][22][9] + sp[75] * PI1[0][22][9] + sp[76] * PI2[0][22][9] + sp[75] * PI1[0][9][22] + sp[77] * PI3[0][22][9] + sp[78] * PI4[0][22][9] + sp[76] * PI2[0][9][22] + sp[78] * PI4[0][9][22] + sp[79] * PI5[0][22][9];
    A[960] = sp[74] * PI0[0][22][10] + sp[75] * PI1[0][22][10] + sp[76] * PI2[0][22][10] + sp[75] * PI1[0][10][22] + sp[77] * PI3[0][22][10] + sp[78] * PI4[0][22][10] + sp[76] * PI2[0][10][22] + sp[78] * PI4[0][10][22] + sp[79] * PI5[0][22][10];
    A[961] = sp[74] * PI0[0][22][11] + sp[75] * PI1[0][22][11] + sp[76] * PI2[0][22][11] + sp[75] * PI1[0][11][22] + sp[77] * PI3[0][22][11] + sp[78] * PI4[0][22][11] + sp[76] * PI2[0][11][22] + sp[78] * PI4[0][11][22] + sp[79] * PI5[0][22][11];
    A[962] = sp[74] * PI0[0][22][12] + sp[75] * PI1[0][22][12] + sp[76] * PI2[0][22][12] + sp[75] * PI1[0][12][22] + sp[77] * PI3[0][22][12] + sp[78] * PI4[0][22][12] + sp[76] * PI2[0][12][22] + sp[78] * PI4[0][12][22] + sp[79] * PI5[0][22][12];
    A[963] = sp[74] * PI0[0][22][13] + sp[75] * PI1[0][22][13] + sp[76] * PI2[0][22][13] + sp[75] * PI1[0][13][22] + sp[77] * PI3[0][22][13] + sp[78] * PI4[0][22][13] + sp[76] * PI2[0][13][22] + sp[78] * PI4[0][13][22] + sp[79] * PI5[0][22][13];
    A[964] = sp[74] * PI0[0][22][14] + sp[75] * PI1[0][22][14] + sp[76] * PI2[0][22][14] + sp[75] * PI1[0][14][22] + sp[77] * PI3[0][22][14] + sp[78] * PI4[0][22][14] + sp[76] * PI2[0][14][22] + sp[78] * PI4[0][14][22] + sp[79] * PI5[0][22][14];
    A[965] = sp[74] * PI0[0][22][15] + sp[75] * PI1[0][22][15] + sp[76] * PI2[0][22][15] + sp[75] * PI1[0][15][22] + sp[77] * PI3[0][22][15] + sp[78] * PI4[0][22][15] + sp[76] * PI2[0][15][22] + sp[78] * PI4[0][15][22] + sp[79] * PI5[0][22][15];
    A[966] = sp[74] * PI0[0][22][16] + sp[75] * PI1[0][22][16] + sp[76] * PI2[0][22][16] + sp[75] * PI1[0][16][22] + sp[77] * PI3[0][22][16] + sp[78] * PI4[0][22][16] + sp[76] * PI2[0][16][22] + sp[78] * PI4[0][16][22] + sp[79] * PI5[0][22][16];
    A[967] = sp[74] * PI0[0][22][17] + sp[75] * PI1[0][22][17] + sp[76] * PI2[0][22][17] + sp[75] * PI1[0][17][22] + sp[77] * PI3[0][22][17] + sp[78] * PI4[0][22][17] + sp[76] * PI2[0][17][22] + sp[78] * PI4[0][17][22] + sp[79] * PI5[0][22][17];
    A[968] = sp[74] * PI0[0][22][18] + sp[75] * PI1[0][22][18] + sp[76] * PI2[0][22][18] + sp[75] * PI1[0][18][22] + sp[77] * PI3[0][22][18] + sp[78] * PI4[0][22][18] + sp[76] * PI2[0][18][22] + sp[78] * PI4[0][18][22] + sp[79] * PI5[0][22][18];
    A[969] = sp[74] * PI0[0][22][19] + sp[75] * PI1[0][22][19] + sp[76] * PI2[0][22][19] + sp[75] * PI1[0][19][22] + sp[77] * PI3[0][22][19] + sp[78] * PI4[0][22][19] + sp[76] * PI2[0][19][22] + sp[78] * PI4[0][19][22] + sp[79] * PI5[0][22][19];
    A[970] = sp[74] * PI0[0][22][20] + sp[75] * PI1[0][22][20] + sp[76] * PI2[0][22][20] + sp[75] * PI1[0][20][22] + sp[77] * PI3[0][22][20] + sp[78] * PI4[0][22][20] + sp[76] * PI2[0][20][22] + sp[78] * PI4[0][20][22] + sp[79] * PI5[0][22][20];
    A[971] = sp[74] * PI0[0][22][21] + sp[75] * PI1[0][22][21] + sp[76] * PI2[0][22][21] + sp[75] * PI1[0][21][22] + sp[77] * PI3[0][22][21] + sp[78] * PI4[0][22][21] + sp[76] * PI2[0][21][22] + sp[78] * PI4[0][21][22] + sp[79] * PI5[0][22][21];
    A[972] = sp[74] * PI0[0][22][22] + sp[75] * PI1[0][22][22] + sp[76] * PI2[0][22][22] + sp[75] * PI1[0][22][22] + sp[77] * PI3[0][22][22] + sp[78] * PI4[0][22][22] + sp[76] * PI2[0][22][22] + sp[78] * PI4[0][22][22] + sp[79] * PI5[0][22][22];
    A[973] = sp[74] * PI0[0][22][23] + sp[75] * PI1[0][22][23] + sp[76] * PI2[0][22][23] + sp[75] * PI1[0][23][22] + sp[77] * PI3[0][22][23] + sp[78] * PI4[0][22][23] + sp[76] * PI2[0][23][22] + sp[78] * PI4[0][23][22] + sp[79] * PI5[0][22][23];
    A[974] = sp[74] * PI0[0][22][24] + sp[75] * PI1[0][22][24] + sp[76] * PI2[0][22][24] + sp[75] * PI1[0][24][22] + sp[77] * PI3[0][22][24] + sp[78] * PI4[0][22][24] + sp[76] * PI2[0][24][22] + sp[78] * PI4[0][24][22] + sp[79] * PI5[0][22][24];
    A[975] = sp[74] * PI0[0][22][25] + sp[75] * PI1[0][22][25] + sp[76] * PI2[0][22][25] + sp[75] * PI1[0][25][22] + sp[77] * PI3[0][22][25] + sp[78] * PI4[0][22][25] + sp[76] * PI2[0][25][22] + sp[78] * PI4[0][25][22] + sp[79] * PI5[0][22][25];
    A[976] = sp[74] * PI0[0][22][26] + sp[75] * PI1[0][22][26] + sp[76] * PI2[0][22][26] + sp[75] * PI1[0][26][22] + sp[77] * PI3[0][22][26] + sp[78] * PI4[0][22][26] + sp[76] * PI2[0][26][22] + sp[78] * PI4[0][26][22] + sp[79] * PI5[0][22][26];
    A[977] = sp[74] * PI0[0][22][27] + sp[75] * PI1[0][22][27] + sp[76] * PI2[0][22][27] + sp[75] * PI1[0][27][22] + sp[77] * PI3[0][22][27] + sp[78] * PI4[0][22][27] + sp[76] * PI2[0][27][22] + sp[78] * PI4[0][27][22] + sp[79] * PI5[0][22][27];
    A[978] = sp[74] * PI0[0][22][28] + sp[75] * PI1[0][22][28] + sp[76] * PI2[0][22][28] + sp[75] * PI1[0][28][22] + sp[77] * PI3[0][22][28] + sp[78] * PI4[0][22][28] + sp[76] * PI2[0][28][22] + sp[78] * PI4[0][28][22] + sp[79] * PI5[0][22][28];
    A[979] = sp[74] * PI0[0][22][29] + sp[75] * PI1[0][22][29] + sp[76] * PI2[0][22][29] + sp[75] * PI1[0][29][22] + sp[77] * PI3[0][22][29] + sp[78] * PI4[0][22][29] + sp[76] * PI2[0][29][22] + sp[78] * PI4[0][29][22] + sp[79] * PI5[0][22][29];
    A[980] = sp[74] * PI0[0][23][0] + sp[75] * PI1[0][23][0] + sp[76] * PI2[0][23][0] + sp[75] * PI1[0][0][23] + sp[77] * PI3[0][23][0] + sp[78] * PI4[0][23][0] + sp[76] * PI2[0][0][23] + sp[78] * PI4[0][0][23] + sp[79] * PI5[0][23][0];
    A[981] = sp[74] * PI0[0][23][1] + sp[75] * PI1[0][1][23] + sp[76] * PI2[0][1][23];
    A[982] = sp[75] * PI1[0][23][1] + sp[77] * PI3[0][23][1] + sp[78] * PI4[0][1][23];
    A[983] = sp[76] * PI2[0][23][1] + sp[78] * PI4[0][23][1] + sp[79] * PI5[0][23][1];
    A[984] = sp[75] * PI1[0][23][2] + sp[76] * PI2[0][23][2] + sp[77] * PI3[0][23][2] + sp[78] * PI4[0][23][2] + sp[78] * PI4[0][2][23] + sp[79] * PI5[0][23][2];
    A[985] = sp[75] * PI1[0][23][3] + sp[76] * PI2[0][23][3] + sp[77] * PI3[0][23][3] + sp[78] * PI4[0][23][3] + sp[78] * PI4[0][3][23] + sp[79] * PI5[0][23][3];
    A[986] = sp[75] * PI1[0][23][4] + sp[76] * PI2[0][23][4] + sp[77] * PI3[0][23][4] + sp[78] * PI4[0][23][4] + sp[78] * PI4[0][4][23] + sp[79] * PI5[0][23][4];
    A[987] = sp[74] * PI0[0][23][2] + sp[76] * PI2[0][23][5] + sp[75] * PI1[0][2][23] + sp[78] * PI4[0][23][5] + sp[76] * PI2[0][2][23] + sp[79] * PI5[0][23][5];
    A[988] = sp[74] * PI0[0][23][3] + sp[76] * PI2[0][23][6] + sp[75] * PI1[0][3][23] + sp[78] * PI4[0][23][6] + sp[76] * PI2[0][3][23] + sp[79] * PI5[0][23][6];
    A[989] = sp[74] * PI0[0][23][4] + sp[76] * PI2[0][23][7] + sp[75] * PI1[0][4][23] + sp[78] * PI4[0][23][7] + sp[76] * PI2[0][4][23] + sp[79] * PI5[0][23][7];
    A[990] = sp[74] * PI0[0][23][5] + sp[75] * PI1[0][23][5] + sp[75] * PI1[0][5][23] + sp[77] * PI3[0][23][5] + sp[76] * PI2[0][5][23] + sp[78] * PI4[0][5][23];
    A[991] = sp[74] * PI0[0][23][6] + sp[75] * PI1[0][23][6] + sp[75] * PI1[0][6][23] + sp[77] * PI3[0][23][6] + sp[76] * PI2[0][6][23] + sp[78] * PI4[0][6][23];
    A[992] = sp[74] * PI0[0][23][7] + sp[75] * PI1[0][23][7] + sp[75] * PI1[0][7][23] + sp[77] * PI3[0][23][7] + sp[76] * PI2[0][7][23] + sp[78] * PI4[0][7][23];
    A[993] = sp[74] * PI0[0][23][8] + sp[75] * PI1[0][23][8] + sp[76] * PI2[0][23][8] + sp[75] * PI1[0][8][23] + sp[77] * PI3[0][23][8] + sp[78] * PI4[0][23][8] + sp[76] * PI2[0][8][23] + sp[78] * PI4[0][8][23] + sp[79] * PI5[0][23][8];
    A[994] = sp[74] * PI0[0][23][9] + sp[75] * PI1[0][23][9] + sp[76] * PI2[0][23][9] + sp[75] * PI1[0][9][23] + sp[77] * PI3[0][23][9] + sp[78] * PI4[0][23][9] + sp[76] * PI2[0][9][23] + sp[78] * PI4[0][9][23] + sp[79] * PI5[0][23][9];
    A[995] = sp[74] * PI0[0][23][10] + sp[75] * PI1[0][23][10] + sp[76] * PI2[0][23][10] + sp[75] * PI1[0][10][23] + sp[77] * PI3[0][23][10] + sp[78] * PI4[0][23][10] + sp[76] * PI2[0][10][23] + sp[78] * PI4[0][10][23] + sp[79] * PI5[0][23][10];
    A[996] = sp[74] * PI0[0][23][11] + sp[75] * PI1[0][23][11] + sp[76] * PI2[0][23][11] + sp[75] * PI1[0][11][23] + sp[77] * PI3[0][23][11] + sp[78] * PI4[0][23][11] + sp[76] * PI2[0][11][23] + sp[78] * PI4[0][11][23] + sp[79] * PI5[0][23][11];
    A[997] = sp[74] * PI0[0][23][12] + sp[75] * PI1[0][23][12] + sp[76] * PI2[0][23][12] + sp[75] * PI1[0][12][23] + sp[77] * PI3[0][23][12] + sp[78] * PI4[0][23][12] + sp[76] * PI2[0][12][23] + sp[78] * PI4[0][12][23] + sp[79] * PI5[0][23][12];
    A[998] = sp[74] * PI0[0][23][13] + sp[75] * PI1[0][23][13] + sp[76] * PI2[0][23][13] + sp[75] * PI1[0][13][23] + sp[77] * PI3[0][23][13] + sp[78] * PI4[0][23][13] + sp[76] * PI2[0][13][23] + sp[78] * PI4[0][13][23] + sp[79] * PI5[0][23][13];
    A[999] = sp[74] * PI0[0][23][14] + sp[75] * PI1[0][23][14] + sp[76] * PI2[0][23][14] + sp[75] * PI1[0][14][23] + sp[77] * PI3[0][23][14] + sp[78] * PI4[0][23][14] + sp[76] * PI2[0][14][23] + sp[78] * PI4[0][14][23] + sp[79] * PI5[0][23][14];
    A[1000] = sp[74] * PI0[0][23][15] + sp[75] * PI1[0][23][15] + sp[76] * PI2[0][23][15] + sp[75] * PI1[0][15][23] + sp[77] * PI3[0][23][15] + sp[78] * PI4[0][23][15] + sp[76] * PI2[0][15][23] + sp[78] * PI4[0][15][23] + sp[79] * PI5[0][23][15];
    A[1001] = sp[74] * PI0[0][23][16] + sp[75] * PI1[0][23][16] + sp[76] * PI2[0][23][16] + sp[75] * PI1[0][16][23] + sp[77] * PI3[0][23][16] + sp[78] * PI4[0][23][16] + sp[76] * PI2[0][16][23] + sp[78] * PI4[0][16][23] + sp[79] * PI5[0][23][16];
    A[1002] = sp[74] * PI0[0][23][17] + sp[75] * PI1[0][23][17] + sp[76] * PI2[0][23][17] + sp[75] * PI1[0][17][23] + sp[77] * PI3[0][23][17] + sp[78] * PI4[0][23][17] + sp[76] * PI2[0][17][23] + sp[78] * PI4[0][17][23] + sp[79] * PI5[0][23][17];
    A[1003] = sp[74] * PI0[0][23][18] + sp[75] * PI1[0][23][18] + sp[76] * PI2[0][23][18] + sp[75] * PI1[0][18][23] + sp[77] * PI3[0][23][18] + sp[78] * PI4[0][23][18] + sp[76] * PI2[0][18][23] + sp[78] * PI4[0][18][23] + sp[79] * PI5[0][23][18];
    A[1004] = sp[74] * PI0[0][23][19] + sp[75] * PI1[0][23][19] + sp[76] * PI2[0][23][19] + sp[75] * PI1[0][19][23] + sp[77] * PI3[0][23][19] + sp[78] * PI4[0][23][19] + sp[76] * PI2[0][19][23] + sp[78] * PI4[0][19][23] + sp[79] * PI5[0][23][19];
    A[1005] = sp[74] * PI0[0][23][20] + sp[75] * PI1[0][23][20] + sp[76] * PI2[0][23][20] + sp[75] * PI1[0][20][23] + sp[77] * PI3[0][23][20] + sp[78] * PI4[0][23][20] + sp[76] * PI2[0][20][23] + sp[78] * PI4[0][20][23] + sp[79] * PI5[0][23][20];
    A[1006] = sp[74] * PI0[0][23][21] + sp[75] * PI1[0][23][21] + sp[76] * PI2[0][23][21] + sp[75] * PI1[0][21][23] + sp[77] * PI3[0][23][21] + sp[78] * PI4[0][23][21] + sp[76] * PI2[0][21][23] + sp[78] * PI4[0][21][23] + sp[79] * PI5[0][23][21];
    A[1007] = sp[74] * PI0[0][23][22] + sp[75] * PI1[0][23][22] + sp[76] * PI2[0][23][22] + sp[75] * PI1[0][22][23] + sp[77] * PI3[0][23][22] + sp[78] * PI4[0][23][22] + sp[76] * PI2[0][22][23] + sp[78] * PI4[0][22][23] + sp[79] * PI5[0][23][22];
    A[1008] = sp[74] * PI0[0][23][23] + sp[75] * PI1[0][23][23] + sp[76] * PI2[0][23][23] + sp[75] * PI1[0][23][23] + sp[77] * PI3[0][23][23] + sp[78] * PI4[0][23][23] + sp[76] * PI2[0][23][23] + sp[78] * PI4[0][23][23] + sp[79] * PI5[0][23][23];
    A[1009] = sp[74] * PI0[0][23][24] + sp[75] * PI1[0][23][24] + sp[76] * PI2[0][23][24] + sp[75] * PI1[0][24][23] + sp[77] * PI3[0][23][24] + sp[78] * PI4[0][23][24] + sp[76] * PI2[0][24][23] + sp[78] * PI4[0][24][23] + sp[79] * PI5[0][23][24];
    A[1010] = sp[74] * PI0[0][23][25] + sp[75] * PI1[0][23][25] + sp[76] * PI2[0][23][25] + sp[75] * PI1[0][25][23] + sp[77] * PI3[0][23][25] + sp[78] * PI4[0][23][25] + sp[76] * PI2[0][25][23] + sp[78] * PI4[0][25][23] + sp[79] * PI5[0][23][25];
    A[1011] = sp[74] * PI0[0][23][26] + sp[75] * PI1[0][23][26] + sp[76] * PI2[0][23][26] + sp[75] * PI1[0][26][23] + sp[77] * PI3[0][23][26] + sp[78] * PI4[0][23][26] + sp[76] * PI2[0][26][23] + sp[78] * PI4[0][26][23] + sp[79] * PI5[0][23][26];
    A[1012] = sp[74] * PI0[0][23][27] + sp[75] * PI1[0][23][27] + sp[76] * PI2[0][23][27] + sp[75] * PI1[0][27][23] + sp[77] * PI3[0][23][27] + sp[78] * PI4[0][23][27] + sp[76] * PI2[0][27][23] + sp[78] * PI4[0][27][23] + sp[79] * PI5[0][23][27];
    A[1013] = sp[74] * PI0[0][23][28] + sp[75] * PI1[0][23][28] + sp[76] * PI2[0][23][28] + sp[75] * PI1[0][28][23] + sp[77] * PI3[0][23][28] + sp[78] * PI4[0][23][28] + sp[76] * PI2[0][28][23] + sp[78] * PI4[0][28][23] + sp[79] * PI5[0][23][28];
    A[1014] = sp[74] * PI0[0][23][29] + sp[75] * PI1[0][23][29] + sp[76] * PI2[0][23][29] + sp[75] * PI1[0][29][23] + sp[77] * PI3[0][23][29] + sp[78] * PI4[0][23][29] + sp[76] * PI2[0][29][23] + sp[78] * PI4[0][29][23] + sp[79] * PI5[0][23][29];
    A[1015] = sp[74] * PI0[0][24][0] + sp[75] * PI1[0][24][0] + sp[76] * PI2[0][24][0] + sp[75] * PI1[0][0][24] + sp[77] * PI3[0][24][0] + sp[78] * PI4[0][24][0] + sp[76] * PI2[0][0][24] + sp[78] * PI4[0][0][24] + sp[79] * PI5[0][24][0];
    A[1016] = sp[74] * PI0[0][24][1] + sp[75] * PI1[0][1][24] + sp[76] * PI2[0][1][24];
    A[1017] = sp[75] * PI1[0][24][1] + sp[77] * PI3[0][24][1] + sp[78] * PI4[0][1][24];
    A[1018] = sp[76] * PI2[0][24][1] + sp[78] * PI4[0][24][1] + sp[79] * PI5[0][24][1];
    A[1019] = sp[75] * PI1[0][24][2] + sp[76] * PI2[0][24][2] + sp[77] * PI3[0][24][2] + sp[78] * PI4[0][24][2] + sp[78] * PI4[0][2][24] + sp[79] * PI5[0][24][2];
    A[1020] = sp[75] * PI1[0][24][3] + sp[76] * PI2[0][24][3] + sp[77] * PI3[0][24][3] + sp[78] * PI4[0][24][3] + sp[78] * PI4[0][3][24] + sp[79] * PI5[0][24][3];
    A[1021] = sp[75] * PI1[0][24][4] + sp[76] * PI2[0][24][4] + sp[77] * PI3[0][24][4] + sp[78] * PI4[0][24][4] + sp[78] * PI4[0][4][24] + sp[79] * PI5[0][24][4];
    A[1022] = sp[74] * PI0[0][24][2] + sp[76] * PI2[0][24][5] + sp[75] * PI1[0][2][24] + sp[78] * PI4[0][24][5] + sp[76] * PI2[0][2][24] + sp[79] * PI5[0][24][5];
    A[1023] = sp[74] * PI0[0][24][3] + sp[76] * PI2[0][24][6] + sp[75] * PI1[0][3][24] + sp[78] * PI4[0][24][6] + sp[76] * PI2[0][3][24] + sp[79] * PI5[0][24][6];
    A[1024] = sp[74] * PI0[0][24][4] + sp[76] * PI2[0][24][7] + sp[75] * PI1[0][4][24] + sp[78] * PI4[0][24][7] + sp[76] * PI2[0][4][24] + sp[79] * PI5[0][24][7];
    A[1025] = sp[74] * PI0[0][24][5] + sp[75] * PI1[0][24][5] + sp[75] * PI1[0][5][24] + sp[77] * PI3[0][24][5] + sp[76] * PI2[0][5][24] + sp[78] * PI4[0][5][24];
    A[1026] = sp[74] * PI0[0][24][6] + sp[75] * PI1[0][24][6] + sp[75] * PI1[0][6][24] + sp[77] * PI3[0][24][6] + sp[76] * PI2[0][6][24] + sp[78] * PI4[0][6][24];
    A[1027] = sp[74] * PI0[0][24][7] + sp[75] * PI1[0][24][7] + sp[75] * PI1[0][7][24] + sp[77] * PI3[0][24][7] + sp[76] * PI2[0][7][24] + sp[78] * PI4[0][7][24];
    A[1028] = sp[74] * PI0[0][24][8] + sp[75] * PI1[0][24][8] + sp[76] * PI2[0][24][8] + sp[75] * PI1[0][8][24] + sp[77] * PI3[0][24][8] + sp[78] * PI4[0][24][8] + sp[76] * PI2[0][8][24] + sp[78] * PI4[0][8][24] + sp[79] * PI5[0][24][8];
    A[1029] = sp[74] * PI0[0][24][9] + sp[75] * PI1[0][24][9] + sp[76] * PI2[0][24][9] + sp[75] * PI1[0][9][24] + sp[77] * PI3[0][24][9] + sp[78] * PI4[0][24][9] + sp[76] * PI2[0][9][24] + sp[78] * PI4[0][9][24] + sp[79] * PI5[0][24][9];
    A[1030] = sp[74] * PI0[0][24][10] + sp[75] * PI1[0][24][10] + sp[76] * PI2[0][24][10] + sp[75] * PI1[0][10][24] + sp[77] * PI3[0][24][10] + sp[78] * PI4[0][24][10] + sp[76] * PI2[0][10][24] + sp[78] * PI4[0][10][24] + sp[79] * PI5[0][24][10];
    A[1031] = sp[74] * PI0[0][24][11] + sp[75] * PI1[0][24][11] + sp[76] * PI2[0][24][11] + sp[75] * PI1[0][11][24] + sp[77] * PI3[0][24][11] + sp[78] * PI4[0][24][11] + sp[76] * PI2[0][11][24] + sp[78] * PI4[0][11][24] + sp[79] * PI5[0][24][11];
    A[1032] = sp[74] * PI0[0][24][12] + sp[75] * PI1[0][24][12] + sp[76] * PI2[0][24][12] + sp[75] * PI1[0][12][24] + sp[77] * PI3[0][24][12] + sp[78] * PI4[0][24][12] + sp[76] * PI2[0][12][24] + sp[78] * PI4[0][12][24] + sp[79] * PI5[0][24][12];
    A[1033] = sp[74] * PI0[0][24][13] + sp[75] * PI1[0][24][13] + sp[76] * PI2[0][24][13] + sp[75] * PI1[0][13][24] + sp[77] * PI3[0][24][13] + sp[78] * PI4[0][24][13] + sp[76] * PI2[0][13][24] + sp[78] * PI4[0][13][24] + sp[79] * PI5[0][24][13];
    A[1034] = sp[74] * PI0[0][24][14] + sp[75] * PI1[0][24][14] + sp[76] * PI2[0][24][14] + sp[75] * PI1[0][14][24] + sp[77] * PI3[0][24][14] + sp[78] * PI4[0][24][14] + sp[76] * PI2[0][14][24] + sp[78] * PI4[0][14][24] + sp[79] * PI5[0][24][14];
    A[1035] = sp[74] * PI0[0][24][15] + sp[75] * PI1[0][24][15] + sp[76] * PI2[0][24][15] + sp[75] * PI1[0][15][24] + sp[77] * PI3[0][24][15] + sp[78] * PI4[0][24][15] + sp[76] * PI2[0][15][24] + sp[78] * PI4[0][15][24] + sp[79] * PI5[0][24][15];
    A[1036] = sp[74] * PI0[0][24][16] + sp[75] * PI1[0][24][16] + sp[76] * PI2[0][24][16] + sp[75] * PI1[0][16][24] + sp[77] * PI3[0][24][16] + sp[78] * PI4[0][24][16] + sp[76] * PI2[0][16][24] + sp[78] * PI4[0][16][24] + sp[79] * PI5[0][24][16];
    A[1037] = sp[74] * PI0[0][24][17] + sp[75] * PI1[0][24][17] + sp[76] * PI2[0][24][17] + sp[75] * PI1[0][17][24] + sp[77] * PI3[0][24][17] + sp[78] * PI4[0][24][17] + sp[76] * PI2[0][17][24] + sp[78] * PI4[0][17][24] + sp[79] * PI5[0][24][17];
    A[1038] = sp[74] * PI0[0][24][18] + sp[75] * PI1[0][24][18] + sp[76] * PI2[0][24][18] + sp[75] * PI1[0][18][24] + sp[77] * PI3[0][24][18] + sp[78] * PI4[0][24][18] + sp[76] * PI2[0][18][24] + sp[78] * PI4[0][18][24] + sp[79] * PI5[0][24][18];
    A[1039] = sp[74] * PI0[0][24][19] + sp[75] * PI1[0][24][19] + sp[76] * PI2[0][24][19] + sp[75] * PI1[0][19][24] + sp[77] * PI3[0][24][19] + sp[78] * PI4[0][24][19] + sp[76] * PI2[0][19][24] + sp[78] * PI4[0][19][24] + sp[79] * PI5[0][24][19];
    A[1040] = sp[74] * PI0[0][24][20] + sp[75] * PI1[0][24][20] + sp[76] * PI2[0][24][20] + sp[75] * PI1[0][20][24] + sp[77] * PI3[0][24][20] + sp[78] * PI4[0][24][20] + sp[76] * PI2[0][20][24] + sp[78] * PI4[0][20][24] + sp[79] * PI5[0][24][20];
    A[1041] = sp[74] * PI0[0][24][21] + sp[75] * PI1[0][24][21] + sp[76] * PI2[0][24][21] + sp[75] * PI1[0][21][24] + sp[77] * PI3[0][24][21] + sp[78] * PI4[0][24][21] + sp[76] * PI2[0][21][24] + sp[78] * PI4[0][21][24] + sp[79] * PI5[0][24][21];
    A[1042] = sp[74] * PI0[0][24][22] + sp[75] * PI1[0][24][22] + sp[76] * PI2[0][24][22] + sp[75] * PI1[0][22][24] + sp[77] * PI3[0][24][22] + sp[78] * PI4[0][24][22] + sp[76] * PI2[0][22][24] + sp[78] * PI4[0][22][24] + sp[79] * PI5[0][24][22];
    A[1043] = sp[74] * PI0[0][24][23] + sp[75] * PI1[0][24][23] + sp[76] * PI2[0][24][23] + sp[75] * PI1[0][23][24] + sp[77] * PI3[0][24][23] + sp[78] * PI4[0][24][23] + sp[76] * PI2[0][23][24] + sp[78] * PI4[0][23][24] + sp[79] * PI5[0][24][23];
    A[1044] = sp[74] * PI0[0][24][24] + sp[75] * PI1[0][24][24] + sp[76] * PI2[0][24][24] + sp[75] * PI1[0][24][24] + sp[77] * PI3[0][24][24] + sp[78] * PI4[0][24][24] + sp[76] * PI2[0][24][24] + sp[78] * PI4[0][24][24] + sp[79] * PI5[0][24][24];
    A[1045] = sp[74] * PI0[0][24][25] + sp[75] * PI1[0][24][25] + sp[76] * PI2[0][24][25] + sp[75] * PI1[0][25][24] + sp[77] * PI3[0][24][25] + sp[78] * PI4[0][24][25] + sp[76] * PI2[0][25][24] + sp[78] * PI4[0][25][24] + sp[79] * PI5[0][24][25];
    A[1046] = sp[74] * PI0[0][24][26] + sp[75] * PI1[0][24][26] + sp[76] * PI2[0][24][26] + sp[75] * PI1[0][26][24] + sp[77] * PI3[0][24][26] + sp[78] * PI4[0][24][26] + sp[76] * PI2[0][26][24] + sp[78] * PI4[0][26][24] + sp[79] * PI5[0][24][26];
    A[1047] = sp[74] * PI0[0][24][27] + sp[75] * PI1[0][24][27] + sp[76] * PI2[0][24][27] + sp[75] * PI1[0][27][24] + sp[77] * PI3[0][24][27] + sp[78] * PI4[0][24][27] + sp[76] * PI2[0][27][24] + sp[78] * PI4[0][27][24] + sp[79] * PI5[0][24][27];
    A[1048] = sp[74] * PI0[0][24][28] + sp[75] * PI1[0][24][28] + sp[76] * PI2[0][24][28] + sp[75] * PI1[0][28][24] + sp[77] * PI3[0][24][28] + sp[78] * PI4[0][24][28] + sp[76] * PI2[0][28][24] + sp[78] * PI4[0][28][24] + sp[79] * PI5[0][24][28];
    A[1049] = sp[74] * PI0[0][24][29] + sp[75] * PI1[0][24][29] + sp[76] * PI2[0][24][29] + sp[75] * PI1[0][29][24] + sp[77] * PI3[0][24][29] + sp[78] * PI4[0][24][29] + sp[76] * PI2[0][29][24] + sp[78] * PI4[0][29][24] + sp[79] * PI5[0][24][29];
    A[1050] = sp[74] * PI0[0][25][0] + sp[75] * PI1[0][25][0] + sp[76] * PI2[0][25][0] + sp[75] * PI1[0][0][25] + sp[77] * PI3[0][25][0] + sp[78] * PI4[0][25][0] + sp[76] * PI2[0][0][25] + sp[78] * PI4[0][0][25] + sp[79] * PI5[0][25][0];
    A[1051] = sp[74] * PI0[0][25][1] + sp[75] * PI1[0][1][25] + sp[76] * PI2[0][1][25];
    A[1052] = sp[75] * PI1[0][25][1] + sp[77] * PI3[0][25][1] + sp[78] * PI4[0][1][25];
    A[1053] = sp[76] * PI2[0][25][1] + sp[78] * PI4[0][25][1] + sp[79] * PI5[0][25][1];
    A[1054] = sp[75] * PI1[0][25][2] + sp[76] * PI2[0][25][2] + sp[77] * PI3[0][25][2] + sp[78] * PI4[0][25][2] + sp[78] * PI4[0][2][25] + sp[79] * PI5[0][25][2];
    A[1055] = sp[75] * PI1[0][25][3] + sp[76] * PI2[0][25][3] + sp[77] * PI3[0][25][3] + sp[78] * PI4[0][25][3] + sp[78] * PI4[0][3][25] + sp[79] * PI5[0][25][3];
    A[1056] = sp[75] * PI1[0][25][4] + sp[76] * PI2[0][25][4] + sp[77] * PI3[0][25][4] + sp[78] * PI4[0][25][4] + sp[78] * PI4[0][4][25] + sp[79] * PI5[0][25][4];
    A[1057] = sp[74] * PI0[0][25][2] + sp[76] * PI2[0][25][5] + sp[75] * PI1[0][2][25] + sp[78] * PI4[0][25][5] + sp[76] * PI2[0][2][25] + sp[79] * PI5[0][25][5];
    A[1058] = sp[74] * PI0[0][25][3] + sp[76] * PI2[0][25][6] + sp[75] * PI1[0][3][25] + sp[78] * PI4[0][25][6] + sp[76] * PI2[0][3][25] + sp[79] * PI5[0][25][6];
    A[1059] = sp[74] * PI0[0][25][4] + sp[76] * PI2[0][25][7] + sp[75] * PI1[0][4][25] + sp[78] * PI4[0][25][7] + sp[76] * PI2[0][4][25] + sp[79] * PI5[0][25][7];
    A[1060] = sp[74] * PI0[0][25][5] + sp[75] * PI1[0][25][5] + sp[75] * PI1[0][5][25] + sp[77] * PI3[0][25][5] + sp[76] * PI2[0][5][25] + sp[78] * PI4[0][5][25];
    A[1061] = sp[74] * PI0[0][25][6] + sp[75] * PI1[0][25][6] + sp[75] * PI1[0][6][25] + sp[77] * PI3[0][25][6] + sp[76] * PI2[0][6][25] + sp[78] * PI4[0][6][25];
    A[1062] = sp[74] * PI0[0][25][7] + sp[75] * PI1[0][25][7] + sp[75] * PI1[0][7][25] + sp[77] * PI3[0][25][7] + sp[76] * PI2[0][7][25] + sp[78] * PI4[0][7][25];
    A[1063] = sp[74] * PI0[0][25][8] + sp[75] * PI1[0][25][8] + sp[76] * PI2[0][25][8] + sp[75] * PI1[0][8][25] + sp[77] * PI3[0][25][8] + sp[78] * PI4[0][25][8] + sp[76] * PI2[0][8][25] + sp[78] * PI4[0][8][25] + sp[79] * PI5[0][25][8];
    A[1064] = sp[74] * PI0[0][25][9] + sp[75] * PI1[0][25][9] + sp[76] * PI2[0][25][9] + sp[75] * PI1[0][9][25] + sp[77] * PI3[0][25][9] + sp[78] * PI4[0][25][9] + sp[76] * PI2[0][9][25] + sp[78] * PI4[0][9][25] + sp[79] * PI5[0][25][9];
    A[1065] = sp[74] * PI0[0][25][10] + sp[75] * PI1[0][25][10] + sp[76] * PI2[0][25][10] + sp[75] * PI1[0][10][25] + sp[77] * PI3[0][25][10] + sp[78] * PI4[0][25][10] + sp[76] * PI2[0][10][25] + sp[78] * PI4[0][10][25] + sp[79] * PI5[0][25][10];
    A[1066] = sp[74] * PI0[0][25][11] + sp[75] * PI1[0][25][11] + sp[76] * PI2[0][25][11] + sp[75] * PI1[0][11][25] + sp[77] * PI3[0][25][11] + sp[78] * PI4[0][25][11] + sp[76] * PI2[0][11][25] + sp[78] * PI4[0][11][25] + sp[79] * PI5[0][25][11];
    A[1067] = sp[74] * PI0[0][25][12] + sp[75] * PI1[0][25][12] + sp[76] * PI2[0][25][12] + sp[75] * PI1[0][12][25] + sp[77] * PI3[0][25][12] + sp[78] * PI4[0][25][12] + sp[76] * PI2[0][12][25] + sp[78] * PI4[0][12][25] + sp[79] * PI5[0][25][12];
    A[1068] = sp[74] * PI0[0][25][13] + sp[75] * PI1[0][25][13] + sp[76] * PI2[0][25][13] + sp[75] * PI1[0][13][25] + sp[77] * PI3[0][25][13] + sp[78] * PI4[0][25][13] + sp[76] * PI2[0][13][25] + sp[78] * PI4[0][13][25] + sp[79] * PI5[0][25][13];
    A[1069] = sp[74] * PI0[0][25][14] + sp[75] * PI1[0][25][14] + sp[76] * PI2[0][25][14] + sp[75] * PI1[0][14][25] + sp[77] * PI3[0][25][14] + sp[78] * PI4[0][25][14] + sp[76] * PI2[0][14][25] + sp[78] * PI4[0][14][25] + sp[79] * PI5[0][25][14];
    A[1070] = sp[74] * PI0[0][25][15] + sp[75] * PI1[0][25][15] + sp[76] * PI2[0][25][15] + sp[75] * PI1[0][15][25] + sp[77] * PI3[0][25][15] + sp[78] * PI4[0][25][15] + sp[76] * PI2[0][15][25] + sp[78] * PI4[0][15][25] + sp[79] * PI5[0][25][15];
    A[1071] = sp[74] * PI0[0][25][16] + sp[75] * PI1[0][25][16] + sp[76] * PI2[0][25][16] + sp[75] * PI1[0][16][25] + sp[77] * PI3[0][25][16] + sp[78] * PI4[0][25][16] + sp[76] * PI2[0][16][25] + sp[78] * PI4[0][16][25] + sp[79] * PI5[0][25][16];
    A[1072] = sp[74] * PI0[0][25][17] + sp[75] * PI1[0][25][17] + sp[76] * PI2[0][25][17] + sp[75] * PI1[0][17][25] + sp[77] * PI3[0][25][17] + sp[78] * PI4[0][25][17] + sp[76] * PI2[0][17][25] + sp[78] * PI4[0][17][25] + sp[79] * PI5[0][25][17];
    A[1073] = sp[74] * PI0[0][25][18] + sp[75] * PI1[0][25][18] + sp[76] * PI2[0][25][18] + sp[75] * PI1[0][18][25] + sp[77] * PI3[0][25][18] + sp[78] * PI4[0][25][18] + sp[76] * PI2[0][18][25] + sp[78] * PI4[0][18][25] + sp[79] * PI5[0][25][18];
    A[1074] = sp[74] * PI0[0][25][19] + sp[75] * PI1[0][25][19] + sp[76] * PI2[0][25][19] + sp[75] * PI1[0][19][25] + sp[77] * PI3[0][25][19] + sp[78] * PI4[0][25][19] + sp[76] * PI2[0][19][25] + sp[78] * PI4[0][19][25] + sp[79] * PI5[0][25][19];
    A[1075] = sp[74] * PI0[0][25][20] + sp[75] * PI1[0][25][20] + sp[76] * PI2[0][25][20] + sp[75] * PI1[0][20][25] + sp[77] * PI3[0][25][20] + sp[78] * PI4[0][25][20] + sp[76] * PI2[0][20][25] + sp[78] * PI4[0][20][25] + sp[79] * PI5[0][25][20];
    A[1076] = sp[74] * PI0[0][25][21] + sp[75] * PI1[0][25][21] + sp[76] * PI2[0][25][21] + sp[75] * PI1[0][21][25] + sp[77] * PI3[0][25][21] + sp[78] * PI4[0][25][21] + sp[76] * PI2[0][21][25] + sp[78] * PI4[0][21][25] + sp[79] * PI5[0][25][21];
    A[1077] = sp[74] * PI0[0][25][22] + sp[75] * PI1[0][25][22] + sp[76] * PI2[0][25][22] + sp[75] * PI1[0][22][25] + sp[77] * PI3[0][25][22] + sp[78] * PI4[0][25][22] + sp[76] * PI2[0][22][25] + sp[78] * PI4[0][22][25] + sp[79] * PI5[0][25][22];
    A[1078] = sp[74] * PI0[0][25][23] + sp[75] * PI1[0][25][23] + sp[76] * PI2[0][25][23] + sp[75] * PI1[0][23][25] + sp[77] * PI3[0][25][23] + sp[78] * PI4[0][25][23] + sp[76] * PI2[0][23][25] + sp[78] * PI4[0][23][25] + sp[79] * PI5[0][25][23];
    A[1079] = sp[74] * PI0[0][25][24] + sp[75] * PI1[0][25][24] + sp[76] * PI2[0][25][24] + sp[75] * PI1[0][24][25] + sp[77] * PI3[0][25][24] + sp[78] * PI4[0][25][24] + sp[76] * PI2[0][24][25] + sp[78] * PI4[0][24][25] + sp[79] * PI5[0][25][24];
    A[1080] = sp[74] * PI0[0][25][25] + sp[75] * PI1[0][25][25] + sp[76] * PI2[0][25][25] + sp[75] * PI1[0][25][25] + sp[77] * PI3[0][25][25] + sp[78] * PI4[0][25][25] + sp[76] * PI2[0][25][25] + sp[78] * PI4[0][25][25] + sp[79] * PI5[0][25][25];
    A[1081] = sp[74] * PI0[0][25][26] + sp[75] * PI1[0][25][26] + sp[76] * PI2[0][25][26] + sp[75] * PI1[0][26][25] + sp[77] * PI3[0][25][26] + sp[78] * PI4[0][25][26] + sp[76] * PI2[0][26][25] + sp[78] * PI4[0][26][25] + sp[79] * PI5[0][25][26];
    A[1082] = sp[74] * PI0[0][25][27] + sp[75] * PI1[0][25][27] + sp[76] * PI2[0][25][27] + sp[75] * PI1[0][27][25] + sp[77] * PI3[0][25][27] + sp[78] * PI4[0][25][27] + sp[76] * PI2[0][27][25] + sp[78] * PI4[0][27][25] + sp[79] * PI5[0][25][27];
    A[1083] = sp[74] * PI0[0][25][28] + sp[75] * PI1[0][25][28] + sp[76] * PI2[0][25][28] + sp[75] * PI1[0][28][25] + sp[77] * PI3[0][25][28] + sp[78] * PI4[0][25][28] + sp[76] * PI2[0][28][25] + sp[78] * PI4[0][28][25] + sp[79] * PI5[0][25][28];
    A[1084] = sp[74] * PI0[0][25][29] + sp[75] * PI1[0][25][29] + sp[76] * PI2[0][25][29] + sp[75] * PI1[0][29][25] + sp[77] * PI3[0][25][29] + sp[78] * PI4[0][25][29] + sp[76] * PI2[0][29][25] + sp[78] * PI4[0][29][25] + sp[79] * PI5[0][25][29];
    A[1085] = sp[74] * PI0[0][26][0] + sp[75] * PI1[0][26][0] + sp[76] * PI2[0][26][0] + sp[75] * PI1[0][0][26] + sp[77] * PI3[0][26][0] + sp[78] * PI4[0][26][0] + sp[76] * PI2[0][0][26] + sp[78] * PI4[0][0][26] + sp[79] * PI5[0][26][0];
    A[1086] = sp[74] * PI0[0][26][1] + sp[75] * PI1[0][1][26] + sp[76] * PI2[0][1][26];
    A[1087] = sp[75] * PI1[0][26][1] + sp[77] * PI3[0][26][1] + sp[78] * PI4[0][1][26];
    A[1088] = sp[76] * PI2[0][26][1] + sp[78] * PI4[0][26][1] + sp[79] * PI5[0][26][1];
    A[1089] = sp[75] * PI1[0][26][2] + sp[76] * PI2[0][26][2] + sp[77] * PI3[0][26][2] + sp[78] * PI4[0][26][2] + sp[78] * PI4[0][2][26] + sp[79] * PI5[0][26][2];
    A[1090] = sp[75] * PI1[0][26][3] + sp[76] * PI2[0][26][3] + sp[77] * PI3[0][26][3] + sp[78] * PI4[0][26][3] + sp[78] * PI4[0][3][26] + sp[79] * PI5[0][26][3];
    A[1091] = sp[75] * PI1[0][26][4] + sp[76] * PI2[0][26][4] + sp[77] * PI3[0][26][4] + sp[78] * PI4[0][26][4] + sp[78] * PI4[0][4][26] + sp[79] * PI5[0][26][4];
    A[1092] = sp[74] * PI0[0][26][2] + sp[76] * PI2[0][26][5] + sp[75] * PI1[0][2][26] + sp[78] * PI4[0][26][5] + sp[76] * PI2[0][2][26] + sp[79] * PI5[0][26][5];
    A[1093] = sp[74] * PI0[0][26][3] + sp[76] * PI2[0][26][6] + sp[75] * PI1[0][3][26] + sp[78] * PI4[0][26][6] + sp[76] * PI2[0][3][26] + sp[79] * PI5[0][26][6];
    A[1094] = sp[74] * PI0[0][26][4] + sp[76] * PI2[0][26][7] + sp[75] * PI1[0][4][26] + sp[78] * PI4[0][26][7] + sp[76] * PI2[0][4][26] + sp[79] * PI5[0][26][7];
    A[1095] = sp[74] * PI0[0][26][5] + sp[75] * PI1[0][26][5] + sp[75] * PI1[0][5][26] + sp[77] * PI3[0][26][5] + sp[76] * PI2[0][5][26] + sp[78] * PI4[0][5][26];
    A[1096] = sp[74] * PI0[0][26][6] + sp[75] * PI1[0][26][6] + sp[75] * PI1[0][6][26] + sp[77] * PI3[0][26][6] + sp[76] * PI2[0][6][26] + sp[78] * PI4[0][6][26];
    A[1097] = sp[74] * PI0[0][26][7] + sp[75] * PI1[0][26][7] + sp[75] * PI1[0][7][26] + sp[77] * PI3[0][26][7] + sp[76] * PI2[0][7][26] + sp[78] * PI4[0][7][26];
    A[1098] = sp[74] * PI0[0][26][8] + sp[75] * PI1[0][26][8] + sp[76] * PI2[0][26][8] + sp[75] * PI1[0][8][26] + sp[77] * PI3[0][26][8] + sp[78] * PI4[0][26][8] + sp[76] * PI2[0][8][26] + sp[78] * PI4[0][8][26] + sp[79] * PI5[0][26][8];
    A[1099] = sp[74] * PI0[0][26][9] + sp[75] * PI1[0][26][9] + sp[76] * PI2[0][26][9] + sp[75] * PI1[0][9][26] + sp[77] * PI3[0][26][9] + sp[78] * PI4[0][26][9] + sp[76] * PI2[0][9][26] + sp[78] * PI4[0][9][26] + sp[79] * PI5[0][26][9];
    A[1100] = sp[74] * PI0[0][26][10] + sp[75] * PI1[0][26][10] + sp[76] * PI2[0][26][10] + sp[75] * PI1[0][10][26] + sp[77] * PI3[0][26][10] + sp[78] * PI4[0][26][10] + sp[76] * PI2[0][10][26] + sp[78] * PI4[0][10][26] + sp[79] * PI5[0][26][10];
    A[1101] = sp[74] * PI0[0][26][11] + sp[75] * PI1[0][26][11] + sp[76] * PI2[0][26][11] + sp[75] * PI1[0][11][26] + sp[77] * PI3[0][26][11] + sp[78] * PI4[0][26][11] + sp[76] * PI2[0][11][26] + sp[78] * PI4[0][11][26] + sp[79] * PI5[0][26][11];
    A[1102] = sp[74] * PI0[0][26][12] + sp[75] * PI1[0][26][12] + sp[76] * PI2[0][26][12] + sp[75] * PI1[0][12][26] + sp[77] * PI3[0][26][12] + sp[78] * PI4[0][26][12] + sp[76] * PI2[0][12][26] + sp[78] * PI4[0][12][26] + sp[79] * PI5[0][26][12];
    A[1103] = sp[74] * PI0[0][26][13] + sp[75] * PI1[0][26][13] + sp[76] * PI2[0][26][13] + sp[75] * PI1[0][13][26] + sp[77] * PI3[0][26][13] + sp[78] * PI4[0][26][13] + sp[76] * PI2[0][13][26] + sp[78] * PI4[0][13][26] + sp[79] * PI5[0][26][13];
    A[1104] = sp[74] * PI0[0][26][14] + sp[75] * PI1[0][26][14] + sp[76] * PI2[0][26][14] + sp[75] * PI1[0][14][26] + sp[77] * PI3[0][26][14] + sp[78] * PI4[0][26][14] + sp[76] * PI2[0][14][26] + sp[78] * PI4[0][14][26] + sp[79] * PI5[0][26][14];
    A[1105] = sp[74] * PI0[0][26][15] + sp[75] * PI1[0][26][15] + sp[76] * PI2[0][26][15] + sp[75] * PI1[0][15][26] + sp[77] * PI3[0][26][15] + sp[78] * PI4[0][26][15] + sp[76] * PI2[0][15][26] + sp[78] * PI4[0][15][26] + sp[79] * PI5[0][26][15];
    A[1106] = sp[74] * PI0[0][26][16] + sp[75] * PI1[0][26][16] + sp[76] * PI2[0][26][16] + sp[75] * PI1[0][16][26] + sp[77] * PI3[0][26][16] + sp[78] * PI4[0][26][16] + sp[76] * PI2[0][16][26] + sp[78] * PI4[0][16][26] + sp[79] * PI5[0][26][16];
    A[1107] = sp[74] * PI0[0][26][17] + sp[75] * PI1[0][26][17] + sp[76] * PI2[0][26][17] + sp[75] * PI1[0][17][26] + sp[77] * PI3[0][26][17] + sp[78] * PI4[0][26][17] + sp[76] * PI2[0][17][26] + sp[78] * PI4[0][17][26] + sp[79] * PI5[0][26][17];
    A[1108] = sp[74] * PI0[0][26][18] + sp[75] * PI1[0][26][18] + sp[76] * PI2[0][26][18] + sp[75] * PI1[0][18][26] + sp[77] * PI3[0][26][18] + sp[78] * PI4[0][26][18] + sp[76] * PI2[0][18][26] + sp[78] * PI4[0][18][26] + sp[79] * PI5[0][26][18];
    A[1109] = sp[74] * PI0[0][26][19] + sp[75] * PI1[0][26][19] + sp[76] * PI2[0][26][19] + sp[75] * PI1[0][19][26] + sp[77] * PI3[0][26][19] + sp[78] * PI4[0][26][19] + sp[76] * PI2[0][19][26] + sp[78] * PI4[0][19][26] + sp[79] * PI5[0][26][19];
    A[1110] = sp[74] * PI0[0][26][20] + sp[75] * PI1[0][26][20] + sp[76] * PI2[0][26][20] + sp[75] * PI1[0][20][26] + sp[77] * PI3[0][26][20] + sp[78] * PI4[0][26][20] + sp[76] * PI2[0][20][26] + sp[78] * PI4[0][20][26] + sp[79] * PI5[0][26][20];
    A[1111] = sp[74] * PI0[0][26][21] + sp[75] * PI1[0][26][21] + sp[76] * PI2[0][26][21] + sp[75] * PI1[0][21][26] + sp[77] * PI3[0][26][21] + sp[78] * PI4[0][26][21] + sp[76] * PI2[0][21][26] + sp[78] * PI4[0][21][26] + sp[79] * PI5[0][26][21];
    A[1112] = sp[74] * PI0[0][26][22] + sp[75] * PI1[0][26][22] + sp[76] * PI2[0][26][22] + sp[75] * PI1[0][22][26] + sp[77] * PI3[0][26][22] + sp[78] * PI4[0][26][22] + sp[76] * PI2[0][22][26] + sp[78] * PI4[0][22][26] + sp[79] * PI5[0][26][22];
    A[1113] = sp[74] * PI0[0][26][23] + sp[75] * PI1[0][26][23] + sp[76] * PI2[0][26][23] + sp[75] * PI1[0][23][26] + sp[77] * PI3[0][26][23] + sp[78] * PI4[0][26][23] + sp[76] * PI2[0][23][26] + sp[78] * PI4[0][23][26] + sp[79] * PI5[0][26][23];
    A[1114] = sp[74] * PI0[0][26][24] + sp[75] * PI1[0][26][24] + sp[76] * PI2[0][26][24] + sp[75] * PI1[0][24][26] + sp[77] * PI3[0][26][24] + sp[78] * PI4[0][26][24] + sp[76] * PI2[0][24][26] + sp[78] * PI4[0][24][26] + sp[79] * PI5[0][26][24];
    A[1115] = sp[74] * PI0[0][26][25] + sp[75] * PI1[0][26][25] + sp[76] * PI2[0][26][25] + sp[75] * PI1[0][25][26] + sp[77] * PI3[0][26][25] + sp[78] * PI4[0][26][25] + sp[76] * PI2[0][25][26] + sp[78] * PI4[0][25][26] + sp[79] * PI5[0][26][25];
    A[1116] = sp[74] * PI0[0][26][26] + sp[75] * PI1[0][26][26] + sp[76] * PI2[0][26][26] + sp[75] * PI1[0][26][26] + sp[77] * PI3[0][26][26] + sp[78] * PI4[0][26][26] + sp[76] * PI2[0][26][26] + sp[78] * PI4[0][26][26] + sp[79] * PI5[0][26][26];
    A[1117] = sp[74] * PI0[0][26][27] + sp[75] * PI1[0][26][27] + sp[76] * PI2[0][26][27] + sp[75] * PI1[0][27][26] + sp[77] * PI3[0][26][27] + sp[78] * PI4[0][26][27] + sp[76] * PI2[0][27][26] + sp[78] * PI4[0][27][26] + sp[79] * PI5[0][26][27];
    A[1118] = sp[74] * PI0[0][26][28] + sp[75] * PI1[0][26][28] + sp[76] * PI2[0][26][28] + sp[75] * PI1[0][28][26] + sp[77] * PI3[0][26][28] + sp[78] * PI4[0][26][28] + sp[76] * PI2[0][28][26] + sp[78] * PI4[0][28][26] + sp[79] * PI5[0][26][28];
    A[1119] = sp[74] * PI0[0][26][29] + sp[75] * PI1[0][26][29] + sp[76] * PI2[0][26][29] + sp[75] * PI1[0][29][26] + sp[77] * PI3[0][26][29] + sp[78] * PI4[0][26][29] + sp[76] * PI2[0][29][26] + sp[78] * PI4[0][29][26] + sp[79] * PI5[0][26][29];
    A[1120] = sp[74] * PI0[0][27][0] + sp[75] * PI1[0][27][0] + sp[76] * PI2[0][27][0] + sp[75] * PI1[0][0][27] + sp[77] * PI3[0][27][0] + sp[78] * PI4[0][27][0] + sp[76] * PI2[0][0][27] + sp[78] * PI4[0][0][27] + sp[79] * PI5[0][27][0];
    A[1121] = sp[74] * PI0[0][27][1] + sp[75] * PI1[0][1][27] + sp[76] * PI2[0][1][27];
    A[1122] = sp[75] * PI1[0][27][1] + sp[77] * PI3[0][27][1] + sp[78] * PI4[0][1][27];
    A[1123] = sp[76] * PI2[0][27][1] + sp[78] * PI4[0][27][1] + sp[79] * PI5[0][27][1];
    A[1124] = sp[75] * PI1[0][27][2] + sp[76] * PI2[0][27][2] + sp[77] * PI3[0][27][2] + sp[78] * PI4[0][27][2] + sp[78] * PI4[0][2][27] + sp[79] * PI5[0][27][2];
    A[1125] = sp[75] * PI1[0][27][3] + sp[76] * PI2[0][27][3] + sp[77] * PI3[0][27][3] + sp[78] * PI4[0][27][3] + sp[78] * PI4[0][3][27] + sp[79] * PI5[0][27][3];
    A[1126] = sp[75] * PI1[0][27][4] + sp[76] * PI2[0][27][4] + sp[77] * PI3[0][27][4] + sp[78] * PI4[0][27][4] + sp[78] * PI4[0][4][27] + sp[79] * PI5[0][27][4];
    A[1127] = sp[74] * PI0[0][27][2] + sp[76] * PI2[0][27][5] + sp[75] * PI1[0][2][27] + sp[78] * PI4[0][27][5] + sp[76] * PI2[0][2][27] + sp[79] * PI5[0][27][5];
    A[1128] = sp[74] * PI0[0][27][3] + sp[76] * PI2[0][27][6] + sp[75] * PI1[0][3][27] + sp[78] * PI4[0][27][6] + sp[76] * PI2[0][3][27] + sp[79] * PI5[0][27][6];
    A[1129] = sp[74] * PI0[0][27][4] + sp[76] * PI2[0][27][7] + sp[75] * PI1[0][4][27] + sp[78] * PI4[0][27][7] + sp[76] * PI2[0][4][27] + sp[79] * PI5[0][27][7];
    A[1130] = sp[74] * PI0[0][27][5] + sp[75] * PI1[0][27][5] + sp[75] * PI1[0][5][27] + sp[77] * PI3[0][27][5] + sp[76] * PI2[0][5][27] + sp[78] * PI4[0][5][27];
    A[1131] = sp[74] * PI0[0][27][6] + sp[75] * PI1[0][27][6] + sp[75] * PI1[0][6][27] + sp[77] * PI3[0][27][6] + sp[76] * PI2[0][6][27] + sp[78] * PI4[0][6][27];
    A[1132] = sp[74] * PI0[0][27][7] + sp[75] * PI1[0][27][7] + sp[75] * PI1[0][7][27] + sp[77] * PI3[0][27][7] + sp[76] * PI2[0][7][27] + sp[78] * PI4[0][7][27];
    A[1133] = sp[74] * PI0[0][27][8] + sp[75] * PI1[0][27][8] + sp[76] * PI2[0][27][8] + sp[75] * PI1[0][8][27] + sp[77] * PI3[0][27][8] + sp[78] * PI4[0][27][8] + sp[76] * PI2[0][8][27] + sp[78] * PI4[0][8][27] + sp[79] * PI5[0][27][8];
    A[1134] = sp[74] * PI0[0][27][9] + sp[75] * PI1[0][27][9] + sp[76] * PI2[0][27][9] + sp[75] * PI1[0][9][27] + sp[77] * PI3[0][27][9] + sp[78] * PI4[0][27][9] + sp[76] * PI2[0][9][27] + sp[78] * PI4[0][9][27] + sp[79] * PI5[0][27][9];
    A[1135] = sp[74] * PI0[0][27][10] + sp[75] * PI1[0][27][10] + sp[76] * PI2[0][27][10] + sp[75] * PI1[0][10][27] + sp[77] * PI3[0][27][10] + sp[78] * PI4[0][27][10] + sp[76] * PI2[0][10][27] + sp[78] * PI4[0][10][27] + sp[79] * PI5[0][27][10];
    A[1136] = sp[74] * PI0[0][27][11] + sp[75] * PI1[0][27][11] + sp[76] * PI2[0][27][11] + sp[75] * PI1[0][11][27] + sp[77] * PI3[0][27][11] + sp[78] * PI4[0][27][11] + sp[76] * PI2[0][11][27] + sp[78] * PI4[0][11][27] + sp[79] * PI5[0][27][11];
    A[1137] = sp[74] * PI0[0][27][12] + sp[75] * PI1[0][27][12] + sp[76] * PI2[0][27][12] + sp[75] * PI1[0][12][27] + sp[77] * PI3[0][27][12] + sp[78] * PI4[0][27][12] + sp[76] * PI2[0][12][27] + sp[78] * PI4[0][12][27] + sp[79] * PI5[0][27][12];
    A[1138] = sp[74] * PI0[0][27][13] + sp[75] * PI1[0][27][13] + sp[76] * PI2[0][27][13] + sp[75] * PI1[0][13][27] + sp[77] * PI3[0][27][13] + sp[78] * PI4[0][27][13] + sp[76] * PI2[0][13][27] + sp[78] * PI4[0][13][27] + sp[79] * PI5[0][27][13];
    A[1139] = sp[74] * PI0[0][27][14] + sp[75] * PI1[0][27][14] + sp[76] * PI2[0][27][14] + sp[75] * PI1[0][14][27] + sp[77] * PI3[0][27][14] + sp[78] * PI4[0][27][14] + sp[76] * PI2[0][14][27] + sp[78] * PI4[0][14][27] + sp[79] * PI5[0][27][14];
    A[1140] = sp[74] * PI0[0][27][15] + sp[75] * PI1[0][27][15] + sp[76] * PI2[0][27][15] + sp[75] * PI1[0][15][27] + sp[77] * PI3[0][27][15] + sp[78] * PI4[0][27][15] + sp[76] * PI2[0][15][27] + sp[78] * PI4[0][15][27] + sp[79] * PI5[0][27][15];
    A[1141] = sp[74] * PI0[0][27][16] + sp[75] * PI1[0][27][16] + sp[76] * PI2[0][27][16] + sp[75] * PI1[0][16][27] + sp[77] * PI3[0][27][16] + sp[78] * PI4[0][27][16] + sp[76] * PI2[0][16][27] + sp[78] * PI4[0][16][27] + sp[79] * PI5[0][27][16];
    A[1142] = sp[74] * PI0[0][27][17] + sp[75] * PI1[0][27][17] + sp[76] * PI2[0][27][17] + sp[75] * PI1[0][17][27] + sp[77] * PI3[0][27][17] + sp[78] * PI4[0][27][17] + sp[76] * PI2[0][17][27] + sp[78] * PI4[0][17][27] + sp[79] * PI5[0][27][17];
    A[1143] = sp[74] * PI0[0][27][18] + sp[75] * PI1[0][27][18] + sp[76] * PI2[0][27][18] + sp[75] * PI1[0][18][27] + sp[77] * PI3[0][27][18] + sp[78] * PI4[0][27][18] + sp[76] * PI2[0][18][27] + sp[78] * PI4[0][18][27] + sp[79] * PI5[0][27][18];
    A[1144] = sp[74] * PI0[0][27][19] + sp[75] * PI1[0][27][19] + sp[76] * PI2[0][27][19] + sp[75] * PI1[0][19][27] + sp[77] * PI3[0][27][19] + sp[78] * PI4[0][27][19] + sp[76] * PI2[0][19][27] + sp[78] * PI4[0][19][27] + sp[79] * PI5[0][27][19];
    A[1145] = sp[74] * PI0[0][27][20] + sp[75] * PI1[0][27][20] + sp[76] * PI2[0][27][20] + sp[75] * PI1[0][20][27] + sp[77] * PI3[0][27][20] + sp[78] * PI4[0][27][20] + sp[76] * PI2[0][20][27] + sp[78] * PI4[0][20][27] + sp[79] * PI5[0][27][20];
    A[1146] = sp[74] * PI0[0][27][21] + sp[75] * PI1[0][27][21] + sp[76] * PI2[0][27][21] + sp[75] * PI1[0][21][27] + sp[77] * PI3[0][27][21] + sp[78] * PI4[0][27][21] + sp[76] * PI2[0][21][27] + sp[78] * PI4[0][21][27] + sp[79] * PI5[0][27][21];
    A[1147] = sp[74] * PI0[0][27][22] + sp[75] * PI1[0][27][22] + sp[76] * PI2[0][27][22] + sp[75] * PI1[0][22][27] + sp[77] * PI3[0][27][22] + sp[78] * PI4[0][27][22] + sp[76] * PI2[0][22][27] + sp[78] * PI4[0][22][27] + sp[79] * PI5[0][27][22];
    A[1148] = sp[74] * PI0[0][27][23] + sp[75] * PI1[0][27][23] + sp[76] * PI2[0][27][23] + sp[75] * PI1[0][23][27] + sp[77] * PI3[0][27][23] + sp[78] * PI4[0][27][23] + sp[76] * PI2[0][23][27] + sp[78] * PI4[0][23][27] + sp[79] * PI5[0][27][23];
    A[1149] = sp[74] * PI0[0][27][24] + sp[75] * PI1[0][27][24] + sp[76] * PI2[0][27][24] + sp[75] * PI1[0][24][27] + sp[77] * PI3[0][27][24] + sp[78] * PI4[0][27][24] + sp[76] * PI2[0][24][27] + sp[78] * PI4[0][24][27] + sp[79] * PI5[0][27][24];
    A[1150] = sp[74] * PI0[0][27][25] + sp[75] * PI1[0][27][25] + sp[76] * PI2[0][27][25] + sp[75] * PI1[0][25][27] + sp[77] * PI3[0][27][25] + sp[78] * PI4[0][27][25] + sp[76] * PI2[0][25][27] + sp[78] * PI4[0][25][27] + sp[79] * PI5[0][27][25];
    A[1151] = sp[74] * PI0[0][27][26] + sp[75] * PI1[0][27][26] + sp[76] * PI2[0][27][26] + sp[75] * PI1[0][26][27] + sp[77] * PI3[0][27][26] + sp[78] * PI4[0][27][26] + sp[76] * PI2[0][26][27] + sp[78] * PI4[0][26][27] + sp[79] * PI5[0][27][26];
    A[1152] = sp[74] * PI0[0][27][27] + sp[75] * PI1[0][27][27] + sp[76] * PI2[0][27][27] + sp[75] * PI1[0][27][27] + sp[77] * PI3[0][27][27] + sp[78] * PI4[0][27][27] + sp[76] * PI2[0][27][27] + sp[78] * PI4[0][27][27] + sp[79] * PI5[0][27][27];
    A[1153] = sp[74] * PI0[0][27][28] + sp[75] * PI1[0][27][28] + sp[76] * PI2[0][27][28] + sp[75] * PI1[0][28][27] + sp[77] * PI3[0][27][28] + sp[78] * PI4[0][27][28] + sp[76] * PI2[0][28][27] + sp[78] * PI4[0][28][27] + sp[79] * PI5[0][27][28];
    A[1154] = sp[74] * PI0[0][27][29] + sp[75] * PI1[0][27][29] + sp[76] * PI2[0][27][29] + sp[75] * PI1[0][29][27] + sp[77] * PI3[0][27][29] + sp[78] * PI4[0][27][29] + sp[76] * PI2[0][29][27] + sp[78] * PI4[0][29][27] + sp[79] * PI5[0][27][29];
    A[1155] = sp[74] * PI0[0][28][0] + sp[75] * PI1[0][28][0] + sp[76] * PI2[0][28][0] + sp[75] * PI1[0][0][28] + sp[77] * PI3[0][28][0] + sp[78] * PI4[0][28][0] + sp[76] * PI2[0][0][28] + sp[78] * PI4[0][0][28] + sp[79] * PI5[0][28][0];
    A[1156] = sp[74] * PI0[0][28][1] + sp[75] * PI1[0][1][28] + sp[76] * PI2[0][1][28];
    A[1157] = sp[75] * PI1[0][28][1] + sp[77] * PI3[0][28][1] + sp[78] * PI4[0][1][28];
    A[1158] = sp[76] * PI2[0][28][1] + sp[78] * PI4[0][28][1] + sp[79] * PI5[0][28][1];
    A[1159] = sp[75] * PI1[0][28][2] + sp[76] * PI2[0][28][2] + sp[77] * PI3[0][28][2] + sp[78] * PI4[0][28][2] + sp[78] * PI4[0][2][28] + sp[79] * PI5[0][28][2];
    A[1160] = sp[75] * PI1[0][28][3] + sp[76] * PI2[0][28][3] + sp[77] * PI3[0][28][3] + sp[78] * PI4[0][28][3] + sp[78] * PI4[0][3][28] + sp[79] * PI5[0][28][3];
    A[1161] = sp[75] * PI1[0][28][4] + sp[76] * PI2[0][28][4] + sp[77] * PI3[0][28][4] + sp[78] * PI4[0][28][4] + sp[78] * PI4[0][4][28] + sp[79] * PI5[0][28][4];
    A[1162] = sp[74] * PI0[0][28][2] + sp[76] * PI2[0][28][5] + sp[75] * PI1[0][2][28] + sp[78] * PI4[0][28][5] + sp[76] * PI2[0][2][28] + sp[79] * PI5[0][28][5];
    A[1163] = sp[74] * PI0[0][28][3] + sp[76] * PI2[0][28][6] + sp[75] * PI1[0][3][28] + sp[78] * PI4[0][28][6] + sp[76] * PI2[0][3][28] + sp[79] * PI5[0][28][6];
    A[1164] = sp[74] * PI0[0][28][4] + sp[76] * PI2[0][28][7] + sp[75] * PI1[0][4][28] + sp[78] * PI4[0][28][7] + sp[76] * PI2[0][4][28] + sp[79] * PI5[0][28][7];
    A[1165] = sp[74] * PI0[0][28][5] + sp[75] * PI1[0][28][5] + sp[75] * PI1[0][5][28] + sp[77] * PI3[0][28][5] + sp[76] * PI2[0][5][28] + sp[78] * PI4[0][5][28];
    A[1166] = sp[74] * PI0[0][28][6] + sp[75] * PI1[0][28][6] + sp[75] * PI1[0][6][28] + sp[77] * PI3[0][28][6] + sp[76] * PI2[0][6][28] + sp[78] * PI4[0][6][28];
    A[1167] = sp[74] * PI0[0][28][7] + sp[75] * PI1[0][28][7] + sp[75] * PI1[0][7][28] + sp[77] * PI3[0][28][7] + sp[76] * PI2[0][7][28] + sp[78] * PI4[0][7][28];
    A[1168] = sp[74] * PI0[0][28][8] + sp[75] * PI1[0][28][8] + sp[76] * PI2[0][28][8] + sp[75] * PI1[0][8][28] + sp[77] * PI3[0][28][8] + sp[78] * PI4[0][28][8] + sp[76] * PI2[0][8][28] + sp[78] * PI4[0][8][28] + sp[79] * PI5[0][28][8];
    A[1169] = sp[74] * PI0[0][28][9] + sp[75] * PI1[0][28][9] + sp[76] * PI2[0][28][9] + sp[75] * PI1[0][9][28] + sp[77] * PI3[0][28][9] + sp[78] * PI4[0][28][9] + sp[76] * PI2[0][9][28] + sp[78] * PI4[0][9][28] + sp[79] * PI5[0][28][9];
    A[1170] = sp[74] * PI0[0][28][10] + sp[75] * PI1[0][28][10] + sp[76] * PI2[0][28][10] + sp[75] * PI1[0][10][28] + sp[77] * PI3[0][28][10] + sp[78] * PI4[0][28][10] + sp[76] * PI2[0][10][28] + sp[78] * PI4[0][10][28] + sp[79] * PI5[0][28][10];
    A[1171] = sp[74] * PI0[0][28][11] + sp[75] * PI1[0][28][11] + sp[76] * PI2[0][28][11] + sp[75] * PI1[0][11][28] + sp[77] * PI3[0][28][11] + sp[78] * PI4[0][28][11] + sp[76] * PI2[0][11][28] + sp[78] * PI4[0][11][28] + sp[79] * PI5[0][28][11];
    A[1172] = sp[74] * PI0[0][28][12] + sp[75] * PI1[0][28][12] + sp[76] * PI2[0][28][12] + sp[75] * PI1[0][12][28] + sp[77] * PI3[0][28][12] + sp[78] * PI4[0][28][12] + sp[76] * PI2[0][12][28] + sp[78] * PI4[0][12][28] + sp[79] * PI5[0][28][12];
    A[1173] = sp[74] * PI0[0][28][13] + sp[75] * PI1[0][28][13] + sp[76] * PI2[0][28][13] + sp[75] * PI1[0][13][28] + sp[77] * PI3[0][28][13] + sp[78] * PI4[0][28][13] + sp[76] * PI2[0][13][28] + sp[78] * PI4[0][13][28] + sp[79] * PI5[0][28][13];
    A[1174] = sp[74] * PI0[0][28][14] + sp[75] * PI1[0][28][14] + sp[76] * PI2[0][28][14] + sp[75] * PI1[0][14][28] + sp[77] * PI3[0][28][14] + sp[78] * PI4[0][28][14] + sp[76] * PI2[0][14][28] + sp[78] * PI4[0][14][28] + sp[79] * PI5[0][28][14];
    A[1175] = sp[74] * PI0[0][28][15] + sp[75] * PI1[0][28][15] + sp[76] * PI2[0][28][15] + sp[75] * PI1[0][15][28] + sp[77] * PI3[0][28][15] + sp[78] * PI4[0][28][15] + sp[76] * PI2[0][15][28] + sp[78] * PI4[0][15][28] + sp[79] * PI5[0][28][15];
    A[1176] = sp[74] * PI0[0][28][16] + sp[75] * PI1[0][28][16] + sp[76] * PI2[0][28][16] + sp[75] * PI1[0][16][28] + sp[77] * PI3[0][28][16] + sp[78] * PI4[0][28][16] + sp[76] * PI2[0][16][28] + sp[78] * PI4[0][16][28] + sp[79] * PI5[0][28][16];
    A[1177] = sp[74] * PI0[0][28][17] + sp[75] * PI1[0][28][17] + sp[76] * PI2[0][28][17] + sp[75] * PI1[0][17][28] + sp[77] * PI3[0][28][17] + sp[78] * PI4[0][28][17] + sp[76] * PI2[0][17][28] + sp[78] * PI4[0][17][28] + sp[79] * PI5[0][28][17];
    A[1178] = sp[74] * PI0[0][28][18] + sp[75] * PI1[0][28][18] + sp[76] * PI2[0][28][18] + sp[75] * PI1[0][18][28] + sp[77] * PI3[0][28][18] + sp[78] * PI4[0][28][18] + sp[76] * PI2[0][18][28] + sp[78] * PI4[0][18][28] + sp[79] * PI5[0][28][18];
    A[1179] = sp[74] * PI0[0][28][19] + sp[75] * PI1[0][28][19] + sp[76] * PI2[0][28][19] + sp[75] * PI1[0][19][28] + sp[77] * PI3[0][28][19] + sp[78] * PI4[0][28][19] + sp[76] * PI2[0][19][28] + sp[78] * PI4[0][19][28] + sp[79] * PI5[0][28][19];
    A[1180] = sp[74] * PI0[0][28][20] + sp[75] * PI1[0][28][20] + sp[76] * PI2[0][28][20] + sp[75] * PI1[0][20][28] + sp[77] * PI3[0][28][20] + sp[78] * PI4[0][28][20] + sp[76] * PI2[0][20][28] + sp[78] * PI4[0][20][28] + sp[79] * PI5[0][28][20];
    A[1181] = sp[74] * PI0[0][28][21] + sp[75] * PI1[0][28][21] + sp[76] * PI2[0][28][21] + sp[75] * PI1[0][21][28] + sp[77] * PI3[0][28][21] + sp[78] * PI4[0][28][21] + sp[76] * PI2[0][21][28] + sp[78] * PI4[0][21][28] + sp[79] * PI5[0][28][21];
    A[1182] = sp[74] * PI0[0][28][22] + sp[75] * PI1[0][28][22] + sp[76] * PI2[0][28][22] + sp[75] * PI1[0][22][28] + sp[77] * PI3[0][28][22] + sp[78] * PI4[0][28][22] + sp[76] * PI2[0][22][28] + sp[78] * PI4[0][22][28] + sp[79] * PI5[0][28][22];
    A[1183] = sp[74] * PI0[0][28][23] + sp[75] * PI1[0][28][23] + sp[76] * PI2[0][28][23] + sp[75] * PI1[0][23][28] + sp[77] * PI3[0][28][23] + sp[78] * PI4[0][28][23] + sp[76] * PI2[0][23][28] + sp[78] * PI4[0][23][28] + sp[79] * PI5[0][28][23];
    A[1184] = sp[74] * PI0[0][28][24] + sp[75] * PI1[0][28][24] + sp[76] * PI2[0][28][24] + sp[75] * PI1[0][24][28] + sp[77] * PI3[0][28][24] + sp[78] * PI4[0][28][24] + sp[76] * PI2[0][24][28] + sp[78] * PI4[0][24][28] + sp[79] * PI5[0][28][24];
    A[1185] = sp[74] * PI0[0][28][25] + sp[75] * PI1[0][28][25] + sp[76] * PI2[0][28][25] + sp[75] * PI1[0][25][28] + sp[77] * PI3[0][28][25] + sp[78] * PI4[0][28][25] + sp[76] * PI2[0][25][28] + sp[78] * PI4[0][25][28] + sp[79] * PI5[0][28][25];
    A[1186] = sp[74] * PI0[0][28][26] + sp[75] * PI1[0][28][26] + sp[76] * PI2[0][28][26] + sp[75] * PI1[0][26][28] + sp[77] * PI3[0][28][26] + sp[78] * PI4[0][28][26] + sp[76] * PI2[0][26][28] + sp[78] * PI4[0][26][28] + sp[79] * PI5[0][28][26];
    A[1187] = sp[74] * PI0[0][28][27] + sp[75] * PI1[0][28][27] + sp[76] * PI2[0][28][27] + sp[75] * PI1[0][27][28] + sp[77] * PI3[0][28][27] + sp[78] * PI4[0][28][27] + sp[76] * PI2[0][27][28] + sp[78] * PI4[0][27][28] + sp[79] * PI5[0][28][27];
    A[1188] = sp[74] * PI0[0][28][28] + sp[75] * PI1[0][28][28] + sp[76] * PI2[0][28][28] + sp[75] * PI1[0][28][28] + sp[77] * PI3[0][28][28] + sp[78] * PI4[0][28][28] + sp[76] * PI2[0][28][28] + sp[78] * PI4[0][28][28] + sp[79] * PI5[0][28][28];
    A[1189] = sp[74] * PI0[0][28][29] + sp[75] * PI1[0][28][29] + sp[76] * PI2[0][28][29] + sp[75] * PI1[0][29][28] + sp[77] * PI3[0][28][29] + sp[78] * PI4[0][28][29] + sp[76] * PI2[0][29][28] + sp[78] * PI4[0][29][28] + sp[79] * PI5[0][28][29];
    A[1190] = sp[74] * PI0[0][29][0] + sp[75] * PI1[0][29][0] + sp[76] * PI2[0][29][0] + sp[75] * PI1[0][0][29] + sp[77] * PI3[0][29][0] + sp[78] * PI4[0][29][0] + sp[76] * PI2[0][0][29] + sp[78] * PI4[0][0][29] + sp[79] * PI5[0][29][0];
    A[1191] = sp[74] * PI0[0][29][1] + sp[75] * PI1[0][1][29] + sp[76] * PI2[0][1][29];
    A[1192] = sp[75] * PI1[0][29][1] + sp[77] * PI3[0][29][1] + sp[78] * PI4[0][1][29];
    A[1193] = sp[76] * PI2[0][29][1] + sp[78] * PI4[0][29][1] + sp[79] * PI5[0][29][1];
    A[1194] = sp[75] * PI1[0][29][2] + sp[76] * PI2[0][29][2] + sp[77] * PI3[0][29][2] + sp[78] * PI4[0][29][2] + sp[78] * PI4[0][2][29] + sp[79] * PI5[0][29][2];
    A[1195] = sp[75] * PI1[0][29][3] + sp[76] * PI2[0][29][3] + sp[77] * PI3[0][29][3] + sp[78] * PI4[0][29][3] + sp[78] * PI4[0][3][29] + sp[79] * PI5[0][29][3];
    A[1196] = sp[75] * PI1[0][29][4] + sp[76] * PI2[0][29][4] + sp[77] * PI3[0][29][4] + sp[78] * PI4[0][29][4] + sp[78] * PI4[0][4][29] + sp[79] * PI5[0][29][4];
    A[1197] = sp[74] * PI0[0][29][2] + sp[76] * PI2[0][29][5] + sp[75] * PI1[0][2][29] + sp[78] * PI4[0][29][5] + sp[76] * PI2[0][2][29] + sp[79] * PI5[0][29][5];
    A[1198] = sp[74] * PI0[0][29][3] + sp[76] * PI2[0][29][6] + sp[75] * PI1[0][3][29] + sp[78] * PI4[0][29][6] + sp[76] * PI2[0][3][29] + sp[79] * PI5[0][29][6];
    A[1199] = sp[74] * PI0[0][29][4] + sp[76] * PI2[0][29][7] + sp[75] * PI1[0][4][29] + sp[78] * PI4[0][29][7] + sp[76] * PI2[0][4][29] + sp[79] * PI5[0][29][7];
    A[1200] = sp[74] * PI0[0][29][5] + sp[75] * PI1[0][29][5] + sp[75] * PI1[0][5][29] + sp[77] * PI3[0][29][5] + sp[76] * PI2[0][5][29] + sp[78] * PI4[0][5][29];
    A[1201] = sp[74] * PI0[0][29][6] + sp[75] * PI1[0][29][6] + sp[75] * PI1[0][6][29] + sp[77] * PI3[0][29][6] + sp[76] * PI2[0][6][29] + sp[78] * PI4[0][6][29];
    A[1202] = sp[74] * PI0[0][29][7] + sp[75] * PI1[0][29][7] + sp[75] * PI1[0][7][29] + sp[77] * PI3[0][29][7] + sp[76] * PI2[0][7][29] + sp[78] * PI4[0][7][29];
    A[1203] = sp[74] * PI0[0][29][8] + sp[75] * PI1[0][29][8] + sp[76] * PI2[0][29][8] + sp[75] * PI1[0][8][29] + sp[77] * PI3[0][29][8] + sp[78] * PI4[0][29][8] + sp[76] * PI2[0][8][29] + sp[78] * PI4[0][8][29] + sp[79] * PI5[0][29][8];
    A[1204] = sp[74] * PI0[0][29][9] + sp[75] * PI1[0][29][9] + sp[76] * PI2[0][29][9] + sp[75] * PI1[0][9][29] + sp[77] * PI3[0][29][9] + sp[78] * PI4[0][29][9] + sp[76] * PI2[0][9][29] + sp[78] * PI4[0][9][29] + sp[79] * PI5[0][29][9];
    A[1205] = sp[74] * PI0[0][29][10] + sp[75] * PI1[0][29][10] + sp[76] * PI2[0][29][10] + sp[75] * PI1[0][10][29] + sp[77] * PI3[0][29][10] + sp[78] * PI4[0][29][10] + sp[76] * PI2[0][10][29] + sp[78] * PI4[0][10][29] + sp[79] * PI5[0][29][10];
    A[1206] = sp[74] * PI0[0][29][11] + sp[75] * PI1[0][29][11] + sp[76] * PI2[0][29][11] + sp[75] * PI1[0][11][29] + sp[77] * PI3[0][29][11] + sp[78] * PI4[0][29][11] + sp[76] * PI2[0][11][29] + sp[78] * PI4[0][11][29] + sp[79] * PI5[0][29][11];
    A[1207] = sp[74] * PI0[0][29][12] + sp[75] * PI1[0][29][12] + sp[76] * PI2[0][29][12] + sp[75] * PI1[0][12][29] + sp[77] * PI3[0][29][12] + sp[78] * PI4[0][29][12] + sp[76] * PI2[0][12][29] + sp[78] * PI4[0][12][29] + sp[79] * PI5[0][29][12];
    A[1208] = sp[74] * PI0[0][29][13] + sp[75] * PI1[0][29][13] + sp[76] * PI2[0][29][13] + sp[75] * PI1[0][13][29] + sp[77] * PI3[0][29][13] + sp[78] * PI4[0][29][13] + sp[76] * PI2[0][13][29] + sp[78] * PI4[0][13][29] + sp[79] * PI5[0][29][13];
    A[1209] = sp[74] * PI0[0][29][14] + sp[75] * PI1[0][29][14] + sp[76] * PI2[0][29][14] + sp[75] * PI1[0][14][29] + sp[77] * PI3[0][29][14] + sp[78] * PI4[0][29][14] + sp[76] * PI2[0][14][29] + sp[78] * PI4[0][14][29] + sp[79] * PI5[0][29][14];
    A[1210] = sp[74] * PI0[0][29][15] + sp[75] * PI1[0][29][15] + sp[76] * PI2[0][29][15] + sp[75] * PI1[0][15][29] + sp[77] * PI3[0][29][15] + sp[78] * PI4[0][29][15] + sp[76] * PI2[0][15][29] + sp[78] * PI4[0][15][29] + sp[79] * PI5[0][29][15];
    A[1211] = sp[74] * PI0[0][29][16] + sp[75] * PI1[0][29][16] + sp[76] * PI2[0][29][16] + sp[75] * PI1[0][16][29] + sp[77] * PI3[0][29][16] + sp[78] * PI4[0][29][16] + sp[76] * PI2[0][16][29] + sp[78] * PI4[0][16][29] + sp[79] * PI5[0][29][16];
    A[1212] = sp[74] * PI0[0][29][17] + sp[75] * PI1[0][29][17] + sp[76] * PI2[0][29][17] + sp[75] * PI1[0][17][29] + sp[77] * PI3[0][29][17] + sp[78] * PI4[0][29][17] + sp[76] * PI2[0][17][29] + sp[78] * PI4[0][17][29] + sp[79] * PI5[0][29][17];
    A[1213] = sp[74] * PI0[0][29][18] + sp[75] * PI1[0][29][18] + sp[76] * PI2[0][29][18] + sp[75] * PI1[0][18][29] + sp[77] * PI3[0][29][18] + sp[78] * PI4[0][29][18] + sp[76] * PI2[0][18][29] + sp[78] * PI4[0][18][29] + sp[79] * PI5[0][29][18];
    A[1214] = sp[74] * PI0[0][29][19] + sp[75] * PI1[0][29][19] + sp[76] * PI2[0][29][19] + sp[75] * PI1[0][19][29] + sp[77] * PI3[0][29][19] + sp[78] * PI4[0][29][19] + sp[76] * PI2[0][19][29] + sp[78] * PI4[0][19][29] + sp[79] * PI5[0][29][19];
    A[1215] = sp[74] * PI0[0][29][20] + sp[75] * PI1[0][29][20] + sp[76] * PI2[0][29][20] + sp[75] * PI1[0][20][29] + sp[77] * PI3[0][29][20] + sp[78] * PI4[0][29][20] + sp[76] * PI2[0][20][29] + sp[78] * PI4[0][20][29] + sp[79] * PI5[0][29][20];
    A[1216] = sp[74] * PI0[0][29][21] + sp[75] * PI1[0][29][21] + sp[76] * PI2[0][29][21] + sp[75] * PI1[0][21][29] + sp[77] * PI3[0][29][21] + sp[78] * PI4[0][29][21] + sp[76] * PI2[0][21][29] + sp[78] * PI4[0][21][29] + sp[79] * PI5[0][29][21];
    A[1217] = sp[74] * PI0[0][29][22] + sp[75] * PI1[0][29][22] + sp[76] * PI2[0][29][22] + sp[75] * PI1[0][22][29] + sp[77] * PI3[0][29][22] + sp[78] * PI4[0][29][22] + sp[76] * PI2[0][22][29] + sp[78] * PI4[0][22][29] + sp[79] * PI5[0][29][22];
    A[1218] = sp[74] * PI0[0][29][23] + sp[75] * PI1[0][29][23] + sp[76] * PI2[0][29][23] + sp[75] * PI1[0][23][29] + sp[77] * PI3[0][29][23] + sp[78] * PI4[0][29][23] + sp[76] * PI2[0][23][29] + sp[78] * PI4[0][23][29] + sp[79] * PI5[0][29][23];
    A[1219] = sp[74] * PI0[0][29][24] + sp[75] * PI1[0][29][24] + sp[76] * PI2[0][29][24] + sp[75] * PI1[0][24][29] + sp[77] * PI3[0][29][24] + sp[78] * PI4[0][29][24] + sp[76] * PI2[0][24][29] + sp[78] * PI4[0][24][29] + sp[79] * PI5[0][29][24];
    A[1220] = sp[74] * PI0[0][29][25] + sp[75] * PI1[0][29][25] + sp[76] * PI2[0][29][25] + sp[75] * PI1[0][25][29] + sp[77] * PI3[0][29][25] + sp[78] * PI4[0][29][25] + sp[76] * PI2[0][25][29] + sp[78] * PI4[0][25][29] + sp[79] * PI5[0][29][25];
    A[1221] = sp[74] * PI0[0][29][26] + sp[75] * PI1[0][29][26] + sp[76] * PI2[0][29][26] + sp[75] * PI1[0][26][29] + sp[77] * PI3[0][29][26] + sp[78] * PI4[0][29][26] + sp[76] * PI2[0][26][29] + sp[78] * PI4[0][26][29] + sp[79] * PI5[0][29][26];
    A[1222] = sp[74] * PI0[0][29][27] + sp[75] * PI1[0][29][27] + sp[76] * PI2[0][29][27] + sp[75] * PI1[0][27][29] + sp[77] * PI3[0][29][27] + sp[78] * PI4[0][29][27] + sp[76] * PI2[0][27][29] + sp[78] * PI4[0][27][29] + sp[79] * PI5[0][29][27];
    A[1223] = sp[74] * PI0[0][29][28] + sp[75] * PI1[0][29][28] + sp[76] * PI2[0][29][28] + sp[75] * PI1[0][28][29] + sp[77] * PI3[0][29][28] + sp[78] * PI4[0][29][28] + sp[76] * PI2[0][28][29] + sp[78] * PI4[0][28][29] + sp[79] * PI5[0][29][28];
    A[1224] = sp[74] * PI0[0][29][29] + sp[75] * PI1[0][29][29] + sp[76] * PI2[0][29][29] + sp[75] * PI1[0][29][29] + sp[77] * PI3[0][29][29] + sp[78] * PI4[0][29][29] + sp[76] * PI2[0][29][29] + sp[78] * PI4[0][29][29] + sp[79] * PI5[0][29][29];
}


poisson3d_4_cell_integral_1_otherwise::poisson3d_4_cell_integral_1_otherwise() : ufc::cell_integral()
{

}

poisson3d_4_cell_integral_1_otherwise::~poisson3d_4_cell_integral_1_otherwise()
{

}

const std::vector<bool> & poisson3d_4_cell_integral_1_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true});
return enabled;
}

void poisson3d_4_cell_integral_1_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation,
                                    std::size_t local_facet) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 8
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 8
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           8
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights125[125] = { 0.0009374398217669896, 0.00144688123847005, 0.001022687015780538, 0.0003675200380073259, 4.716533650593668e-5, 0.00161927658526932, 0.002499254732643926, 0.001766527408224398, 0.0006348317815652555, 8.147053631288457e-5, 0.001417924532550919, 0.00218848010941899, 0.001546865169503061, 0.000555892406098535, 7.133992621705589e-5, 0.0007158915019438664, 0.0011049349077046, 0.0007809919386245139, 0.0002806627859136635, 3.601859320129841e-5, 0.0001525364704986181, 0.0002354307468301134, 0.0001664075540527897, 5.980139538929234e-5, 7.674555521798026e-6, 0.001893772314860291, 0.002922922163836156, 0.002065984730200279, 0.0007424468824279085, 9.528121850813992e-5, 0.003271187222988238, 0.005048878136564872, 0.003568656484883998, 0.00128245763045955, 0.0001645829871568122, 0.002864425173708474, 0.004421065701079484, 0.003124905049696836, 0.001122987976685449, 0.0001441175999536503, 0.001446210706378578, 0.002232138094997412, 0.001577723579854278, 0.000566981902660168, 7.276308627071377e-5, 0.0003081470811558803, 0.0004756062416607817, 0.0003361687988193031, 0.0001208079967893717, 1.550378001720074e-5, 0.00225090157446144, 0.00347412941301363, 0.002455589959537544, 0.0008824581727683852, 0.0001132494350422472, 0.003888070605322779, 0.006001000045085255, 0.004241636883961954, 0.001524304625709162, 0.0001956201925721813, 0.00340460100870312, 0.00525479418474413, 0.003714202410295571, 0.00133476204345559, 0.0001712954245332323, 0.001718938401647658, 0.002653076672955637, 0.001875252089225375, 0.0006739038517854064, 8.648481349327676e-5, 0.0003662577305079242, 0.0005652964877443141, 0.000399563808494583, 0.0001435900757693727, 1.842749657758908e-5, 0.001893772314860291, 0.002922922163836156, 0.002065984730200279, 0.0007424468824279085, 9.528121850813992e-5, 0.003271187222988238, 0.005048878136564872, 0.003568656484883998, 0.00128245763045955, 0.0001645829871568122, 0.002864425173708474, 0.004421065701079484, 0.003124905049696836, 0.001122987976685449, 0.0001441175999536503, 0.001446210706378578, 0.002232138094997412, 0.001577723579854278, 0.000566981902660168, 7.276308627071377e-5, 0.0003081470811558803, 0.0004756062416607817, 0.0003361687988193031, 0.0001208079967893717, 1.550378001720074e-5, 0.0009374398217669897, 0.00144688123847005, 0.001022687015780538, 0.000367520038007326, 4.716533650593669e-5, 0.00161927658526932, 0.002499254732643926, 0.001766527408224398, 0.0006348317815652555, 8.147053631288457e-5, 0.001417924532550919, 0.002188480109418991, 0.001546865169503061, 0.0005558924060985351, 7.133992621705591e-5, 0.0007158915019438664, 0.0011049349077046, 0.0007809919386245139, 0.0002806627859136635, 3.601859320129841e-5, 0.0001525364704986181, 0.0002354307468301134, 0.0001664075540527897, 5.980139538929235e-5, 7.674555521798026e-6 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE11_C0_Q125[1][125][35] =
        { { { 0.3056635451225205, -0.03089560263777416, -0.02848613965062151, -0.02645673874857107, 0.005537192654111608, 0.003876453322753298, 0.005685150503339718, 0.006048490355209445, 0.004281258226563886, 0.006432425094469118, 0.006722684097752893, 0.00467332883378226, 0.006963348270947767, 0.3166833328790707, -0.2668309357797836, 0.1306900334822618, 0.3519823759222686, -0.2912668752815561, 0.1414770021125195, 0.3982480791604772, -0.3216828895127888, 0.1545408181032159, -0.001527638682314783, -0.001565007970466901, -0.001593519373486215, 0.09521062210316281, -0.03179686371104683, -0.0323761407582662, 0.1077254145719855, -0.03511730259792308, -0.0366317655360565, 0.1197330059133174, -0.03903164556221926, -0.03998644254854866, 0.0130709476216939 },
            { 0.006690843711503973, -0.02786989772001719, -0.02552167167239564, -0.02665480921729695, 0.02469686349179391, 0.00606875645427749, 0.006085065396913796, 0.0271328435929706, 0.006729661048754705, 0.00688490609661099, 0.005146226673233657, 0.003621314230994803, 0.005299906069221728, 0.7268804203624042, -0.3254097733326217, 0.1398832625446331, 0.1378658080824755, -0.1751070424701735, 0.1076802125896523, 0.1559873363173107, -0.1941766903899369, 0.1183012720309062, -0.005787538089367496, -0.005905180159076243, -0.002081391283241411, 0.2798538357535026, -0.1199777970787531, -0.042288420386018, 0.3166387301139674, -0.1330437155946825, -0.04784694729483119, 0.06005617041604525, -0.02523410845433293, -0.02574703687052499, 0.04114858503609625 },
            { -0.0205345190513156, -0.02226886746828297, -0.02018790612716786, 0.02306868295823357, 0.04338357691568694, -0.01913588053374865, -0.006223641760033597, 0.04806699603416351, -0.02134491891810018, -0.007041697385620329, 0.002994402956018411, 0.002145536639303129, 0.003057886690550222, 0.1670937202553854, 0.600939576151325, -0.1430688509517217, 0.01040934468859255, -0.060404908708583, 0.06212824993743097, 0.01177758266074904, -0.06737802717601755, 0.06883522649955144, -0.007412255565028225, -0.007518602030932689, 0.004659710472515604, 0.208682812741731, -0.1527583044857083, 0.09467311452944316, 0.2361127573800835, -0.170392661971493, 0.1071172552622836, 0.01470898531187721, -0.01061485702848246, -0.01076715244263242, 0.03719763351994392 },
            { 0.02075076579393017, -0.01455188986905507, -0.01305200265879769, -0.04040605971477434, 0.04503040295118441, -0.053477017443967, 0.02034110872501623, 0.05033608982018092, -0.06001447776471445, 0.0230148099219636, 0.001155148111690011, 0.0008437068147440096, 0.001169221522662121, -0.1267610567651158, 0.4419282599752036, 0.4676006692834358, -0.002909002186724304, -0.006212798952127439, 0.02375551952812923, -0.003291370853728214, -0.006972301418263519, 0.02655450287640673, -0.004546253438393212, -0.004583503422845726, 0.007482043536301602, 0.03347721993536691, -0.09312478684172516, 0.1520155316096513, 0.03787757412557805, -0.1045091090787255, 0.1719969453228311, 0.0008692413014771672, -0.002398348787876948, -0.002417999794199141, 0.01302921783528146 },
            { -0.03689485245927265, -0.006383645426197193, -0.00567499956394, 0.1935656134956629, 0.02596384270286388, -0.04737889847365285, 0.04543103359859856, 0.0292366119663367, -0.05343535173275061, 0.05140263576410631, 0.0002036988886703899, 0.0001511791554585275, 0.0002046743201538218, 0.2046595848769283, -0.5073439612622466, 1.044366951876962, 0.001425915220381544, 0.001435376190171714, 0.004158446209790452, 0.001613342134175689, 0.001618860591140806, 0.004682622661441337, -0.001054299169240844, -0.001057676664449246, 0.002604661531928951, -0.01001008320397225, -0.0214892201090949, 0.05291990156409584, -0.0113258409537499, -0.02423619104674849, 0.05987586478454041, -7.891000565286171e-5, -0.0001688596882398592, -0.0001694006379102162, 0.001181372863711394 },
            { -0.01102591150869183, -0.0273944922839774, -0.02070490865233475, -0.02645673874857108, 0.005124628831690048, 0.005361881137819107, 0.02827782277230293, 0.00530923083978029, 0.003699925586712538, 0.005372601098003439, 0.02935156902481187, 0.00558638072303244, 0.00538270721270635, 0.1263970029757738, -0.1716559976004298, 0.1091571852097642, 0.6987736019265388, -0.2591770384333493, 0.1093625149958886, 0.1327624071766725, -0.1788431580894692, 0.1133020276008207, -0.006566685471276698, -0.001808044170493847, -0.006620201507015402, 0.3046577340766969, -0.0367347228625227, -0.1345051584596099, 0.05788297386950383, -0.02534851809399213, -0.02555509905575228, 0.3200004208071714, -0.1401368297904486, -0.03858469836607792, 0.04535558722832286 },
            { -0.0400796207547674, -0.02447531302518721, -0.02972368152675249, -0.02665480921729695, 0.03517748253151893, 0.01200475223875574, 0.0302669913049301, 0.02362472601947019, 0.005782904813926475, 0.005750530089516051, 0.02228765531784871, 0.006155630695156026, 0.006305230771333844, 0.2352233128815211, -0.2049044215683626, 0.1168357126437117, 0.2219105574348303, -0.218111137493024, 0.1281057779168782, 0.04216155232787773, -0.1050680532087431, 0.08603412430339932, -0.02473721008368836, -0.009756555131284528, -0.008647042476714786, 0.8765082404964715, -0.1982276510107366, -0.1756852593240497, 0.1665308242865408, -0.0954898205714344, -0.03337904847723595, 0.1571058055207387, -0.0900854556156692, -0.03553043011995621, 0.1427836980104776 },
            { 0.01027233067587238, -0.01928018940651666, -0.03971898125558406, 0.02306868295823358, 0.098449796596541, -0.05447853760033655, -0.03095626731168383, 0.04135680830732877, -0.01819084089180309, -0.00588148801582178, 0.01281487216264313, 0.005205604765194725, 0.005795897743911525, -0.05647858358663613, 0.3521773959096306, -0.1194964347698701, -0.0175005242960599, -0.1007812855516265, 0.1177574645778425, -0.003324984982250367, -0.03365171700808808, 0.04946757695458787, -0.03142046823202626, -0.017878206394361, 0.01935854863497287, 0.6083049566555484, -0.3632383367030433, 0.3933150144955553, 0.1155739571735887, -0.1212883289423592, 0.07472727641569867, 0.03581189040276758, -0.03758255276052104, -0.02138442464058183, 0.1290740779192519 },
            { 0.009125117282784721, -0.01241026984982749, -0.03974059720891043, -0.04040605971477432, 0.1488137364235412, -0.2006373486991843, 0.1011762603611384, 0.04276983431439069, -0.05070882241035076, 0.0192228267319274, 0.00488202238539685, 0.002674629643387005, 0.003227333514336785, -0.04921064378975348, 0.1286635315904432, 0.3905575008373497, -0.005617217565431104, -0.006786339718755398, 0.06557096567043821, -0.001067234542870035, -0.001715170669099043, 0.01884543325743416, -0.01910667596866295, -0.01436322691643363, 0.03108379899154526, 0.04847938268392309, -0.291823158304032, 0.6315413971091548, 0.00921076515456765, -0.07375500526501377, 0.1199887286536977, 0.001051375634067024, -0.008418867936032911, -0.006328788468651257, 0.04521078678825963 },
            { -0.04061590762108393, -0.005376068580257596, -0.02351675082611384, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.2259730354911518, 0.02458542446408936, -0.0448339756433932, 0.04293339654805567, 0.0008520073250234741, 0.0005700081743521259, 0.0007315781665420256, 0.2173467560795984, -0.5074589290345995, 0.8722941892004588, 0.007532146883223945, 0.006451708409676869, 0.01486375257793088, 0.00143105856985457, 0.001358583804479194, 0.003288892575872799, -0.004399936871003775, -0.003969843364122205, 0.01082094418545809, -0.0498012326664732, -0.08065682142534478, 0.2198532493014447, -0.009461907992714669, -0.01698450152286387, 0.04177067725855748, -0.0003279022060516035, -0.0005885975135588242, -0.0005310621497185047, 0.004099309516037208 },
            { -0.005880697701746446, -0.02096141170324607, 0.01968046068523607, -0.02645673874857107, -0.008320196683643416, -0.03483895378318299, 0.06254613548872683, 0.004001525804963156, 0.002724744548458473, 0.003765071908764953, 0.048930521949722, -0.02673075685123101, -0.006124358617264864, 0.003493026207668122, -0.06586001995159924, 0.07649640168257889, 0.04271260610471726, 0.6461112769413262, -0.1244309293917707, 0.002571158587791474, -0.05053217701368583, 0.05984396689510608, -0.01069629891074976, 0.008232763448964708, -0.01026158390310875, 0.2585411025297017, 0.1672681943427365, -0.2084885131474687, 0.01556332513255152, -0.01308199733844669, -0.01255032366137412, 0.1903078123510854, -0.1599662201655966, 0.1231233402728501, 0.04926774268973658 },
            { 0.0160155329372754, -0.01847186527917361, 0.0231559130793076, -0.02665480921729691, -0.04141279782232506, -0.03444320211700807, 0.06694586617356141, 0.01760211513184495, 0.004224851213614605, 0.004029921244030243, 0.03672966543223819, -0.01290292730949439, -0.005201869839526974, -0.03616904734717485, -0.0724944037069558, 0.08187744662056612, -0.07547257804609396, 0.2214018847247754, -0.1056883731273781, -0.004543201290743685, -0.02715746399531475, 0.04492183599540926, -0.03997335545981984, 0.01961713137447249, -0.01340327054917025, 0.6859045257943287, 0.3985687386177594, -0.2723193587359519, 0.04128919943628457, -0.04888899740905708, -0.01639273089820837, 0.08615660503867575, -0.102014814964114, 0.05006429918812088, 0.1550995351125427 },
            { 0.01962515553554528, -0.01425387190434589, 0.005514304491642043, 0.02306868295823361, -0.01781289440329105, 0.01605628554003021, -0.068470437243077, 0.03028903273713738, -0.01313358888935425, -0.00412169541459865, 0.02075903594430436, -0.001107698265463549, -0.0007349013810425645, -0.07232353807336959, 0.08762601645679226, -0.08374205743970017, -0.04956800501072153, 0.007390454144437782, -0.01493127159416139, -0.002983831083744904, -0.00604518312760946, 0.02538912340035497, -0.05017620467325394, 0.003692600015718238, 0.0300065444910836, 0.3347707144999613, 0.07502396259627722, 0.6096544066403048, 0.02015209737887202, -0.06136748621798301, 0.03669919272486225, 0.01381153757769885, -0.04205911305476372, 0.003095241709461053, 0.1402073889337639 },
            { -0.01905813911559164, -0.008973334256543787, -0.03076743722716242, -0.0404060597147743, 0.1323516525356927, -0.2245148383223398, 0.2237861146434755, 0.03075310074582997, -0.03615546366635028, 0.01347118902282393, 0.007764359267656338, 0.00213396519922825, 0.002011494612634434, 0.08726677047625239, -0.1654221201286565, 0.2736992842641159, 0.0220325931913584, 0.009763532582370006, 0.04086830307602303, 0.001326289738827762, 0.001572301635717819, 0.009496118996089705, -0.03013214590133498, -0.01126351571166099, 0.04818116352517546, -0.1378636298243346, -0.2288451437624543, 0.9789150719739977, -0.008298937669546732, -0.03685280822573024, 0.05892747185347924, -0.002095266234738406, -0.009304376994420979, -0.0034780130431812, 0.04911045245807286 },
            { -0.04079742454249172, -0.003814784988892786, -0.03827576649250268, 0.193565613495663, 0.1902826731863672, -0.3945927279594243, 0.4998171255416421, 0.01740627747298313, -0.03163480281153048, 0.03008734918939354, 0.001334215658241331, 0.0007454053268318352, 0.000877995254786795, 0.2072217899598285, -0.4445986454400345, 0.6112961465086305, 0.0158838417532036, 0.01047600013781174, 0.01783856439214644, 0.0009561550992872366, 0.0008398689968948264, 0.001631798609562686, -0.006866870205113554, -0.005156031690991478, 0.01677290737332812, -0.09650767257172142, -0.1047570619844014, 0.3407815550156929, -0.005809444886416232, -0.008398454315489605, 0.02051393023388382, -0.0004453021242006575, -0.0006437533395720129, -0.000483366150934932, 0.004452896297538811 },
            { 0.00932435981520424, -0.01243849295391368, -0.04065529414352139, -0.02645673874857107, 0.07155728382479913, -0.1348907822337634, 0.09931759007824138, 0.002336892767461166, 0.001553087517671501, 0.0020401201414411, 0.04537521571298812, -0.05899273903177218, 0.02854061558263115, -0.002745301598304301, -0.004036158982654265, 0.04144989886038814, -0.05330524958387275, 0.1533101456584002, 0.5798705700134292, -0.001094963271208401, -0.001765161930352012, 0.01893721042355126, -0.00968120372976675, 0.01727210517714618, -0.008829224515081693, 0.02515948196878589, 0.3509239471519603, -0.179386721267945, 0.0005168104247426105, -0.004040421390908826, -0.003684850416502176, 0.0100348568971314, -0.07845246249062315, 0.1399659816452209, 0.02296959262756684 },
            { -0.003430005826947772, -0.01081123142856233, -0.02610225289337149, -0.02665480921729689, 0.1033929806787119, -0.1586234197313438, 0.1063039633401007, 0.0101628551970844, 0.002389400914954846, 0.002183629874167342, 0.03367390981544242, -0.03360699223188834, 0.007037176325370063, 0.004666028929683264, 0.002059050198733383, 0.04436564082388975, 0.01546056047511851, -0.02896059995658499, 0.1429769948466229, 0.0003175812139460936, 0.0004362438040430617, 0.01405370544114444, -0.03589830175085731, 0.04895327562976873, -0.01153237999439367, -0.03093512055330215, 0.9946023680278826, -0.2343077619191356, -0.0006354499990281013, -0.01498204875551777, -0.004813004262493604, -0.002105519122779005, -0.04964197057423283, 0.06769504265664233, 0.0723104600244301 },
            { -0.02548023059023469, -0.008169392142769998, 0.01944774835584482, 0.02306868295823362, -0.09312492294621706, 0.2581706538315075, -0.1087248439164006, 0.01718712183196388, -0.007340695513560857, -0.002233358096729242, 0.01870469467558207, -0.009954903623483844, -0.002081818985837005, 0.06936039437777927, -0.04507031899996932, -0.04537598808424596, 0.07548471536412338, -0.06112100428297339, -0.04229711018275138, 0.001550560057528215, 0.001737884129221046, 0.00780634832064037, -0.04453252212150095, 0.03217188645597298, 0.02581809209329897, -0.2734202738938532, 0.6536484850377734, 0.5245560221171675, -0.005616429148247912, -0.01858551477618485, 0.0107751034352765, -0.006112343498353418, -0.02022656164748478, 0.01461239143254009, 0.06536744797634625 },
            { -0.0413033167094809, -0.00502599423716689, 0.001423206570284007, -0.0404060597147743, -0.007285068764193915, 0.01709393778786679, 0.3553520521402794, 0.0171227627066026, -0.01995099403091122, 0.007299420760236737, 0.006864615891585801, -8.965510136615135e-5, -5.999369754556904e-5, 0.1627674341250553, -0.2382425061571529, 0.1483051150298992, 0.06525441799743263, -0.001070606106449921, -0.001218914830070009, 0.001340415654162565, 0.001249545675449842, 0.002864926889562002, -0.02640257935344726, 0.0004646794937181312, 0.04145581366174601, -0.3152833720682105, 0.009441070467300075, 0.8422735742615278, -0.006476354864340778, -0.01101903744333312, 0.01730145971223012, -0.002596408610168801, -0.004417596671728349, 7.774871376726387e-5, 0.02289626082163525 },
            { -0.03078128641256878, -0.002094760627224309, -0.04145451836505643, 0.193565613495663, 0.2183125263152957, -0.4965181115031936, 0.7936642608011621, 0.009535077667581531, -0.01726677661017415, 0.01630295743912865, 0.001160566572255408, 0.0005119465825091365, 0.0005458257854893735, 0.1482609575943981, -0.2926412638196375, 0.3312334029993755, 0.01804565388488191, 0.008676587315397373, 0.01108975062024659, 0.0003706825943624315, 0.0003017346023090994, 0.000484358984172333, -0.005951557980299531, -0.003515475406071466, 0.0144316673106305, -0.1008683605731344, -0.07142525436022992, 0.2932136878908867, -0.002071975104080696, -0.00248386490399933, 0.006023013143403511, -0.0002521914480588849, -0.0003023248135020359, -0.000178577685041502, 0.002076028013123676 },
            { -0.04158768254624894, -0.004317839866583549, 0.256494600498464, -0.02645673874857105, 0.2949230850789766, -0.2573608213043342, 0.1287360490666404, 0.0008010667001295432, 0.0005223619461848066, 0.0006600979641717331, 0.02016148887177387, -0.0378559651934284, 0.03806018604376972, 0.008724298463542321, 0.006887021968319472, 0.01341146204925834, 0.2195757810907698, -0.49910768926269, 0.7732833131128736, 0.001125881422727003, 0.001013032452250423, 0.002100383263435251, -0.004220646359933529, 0.01066247643713025, -0.003702961645709968, -0.05564663431873065, 0.2166335996311235, -0.07523448378396147, -0.0002853297914072885, -0.0004396984286061908, -0.0003857670787737302, -0.007181266445498188, -0.01106646297224574, 0.02795683187392457, 0.003116969811257864 },
            { -0.04053297281954694, -0.003714268244648684, -0.004745786847815184, -0.02665480921729686, 0.6691449677790836, -0.3133858744525398, 0.1377918275075795, 0.003454141374027596, 0.0007990346536139566, 0.0007065317405396436, 0.01483514921867701, -0.02220334174223485, 0.01473602139519543, 0.04183159066463683, 0.01136753316963876, 0.01435487479003833, 0.1796619832154952, -0.3158776939024006, 0.2993973658845058, 0.0009212222234518685, 0.0008053880034402771, 0.001545495936716202, -0.01556053398424051, 0.03129295068592951, -0.00483666042584443, -0.2213732350694795, 0.6357908118385215, -0.09826827420648958, -0.001135097922073226, -0.001621065059156897, -0.0005038735320575567, -0.004875118076632331, -0.006962292344662645, 0.01400149064442245, 0.00981251712160619 },
            { -0.03611689332502446, -0.002762156689831453, -0.01759858691004864, 0.02306868295823363, 0.1372262556288499, 0.5759284463220431, -0.1409297872628409, 0.005765290649501523, -0.002433180766941241, -0.0007226217235794548, 0.008132848419400105, -0.007360984100622841, 0.0009925831573749187, 0.08131331741585235, -0.0385404156710592, -0.01468178111095556, 0.1147052117968851, -0.1165944556362292, 0.02016669050414508, 0.000588154424001286, 0.0004925879053167759, 0.0008472637518393142, -0.01913323741442666, 0.02322153007914405, 0.01082806362252895, -0.3030612986523167, 0.4718006815442325, 0.2199978976192234, -0.00155395592539949, -0.001993262099648666, 0.001128045837924874, -0.002192099021546062, -0.002811809412935253, 0.003412622518866996, 0.008870351568043097 },
            { -0.02632578093983306, -0.001669343251192159, 0.02005278463846163, -0.0404060597147743, -0.1210392777590415, 0.4095876032623191, 0.4606094366992161, 0.005660331185964151, -0.006548500987363714, 0.002361788742530327, 0.002941428182952812, -0.0007051102844327467, -0.0003225157641577734, 0.09333673492099281, -0.1155536995952478, 0.04798536248866891, 0.048503045772689, -0.01244225237899162, -0.006552675763389419, 0.0002487008262471992, 0.0001989271680586111, 0.0003064320579380281, -0.01123305069058625, 0.003602556841827002, 0.01738649727605503, -0.198216441830415, 0.07319452109670838, 0.3532480950459386, -0.001016360768147374, -0.001170236574187574, 0.001811290233605429, -0.0005281585315870729, -0.0006081211022726696, 0.0001950307977767839, 0.003107018697670522 },
            { -0.01259644450649985, -0.0006849996747423588, -0.03732553226575729, 0.193565613495663, 0.2063633124252942, -0.508716820740598, 1.028752320112142, 0.003112039978153497, -0.005619251595900313, 0.005274958467859939, 0.00049098134743168, 0.000170699739526335, 0.0001669400476844186, 0.05826131060272247, -0.108078195915314, 0.1071733426596648, 0.009191789624705963, 0.003283163171530944, 0.003391784607045336, 4.713117780416436e-5, 3.62655983429188e-5, 5.114944691656411e-5, -0.002510567367867775, -0.001165407253343902, 0.006052616562601487, -0.04828714059377436, -0.02367802356392189, 0.1229733187102095, -0.0002475937659477089, -0.0002615458468731096, 0.0006305493909169661, -3.906245474799314e-5, -4.126365124294004e-5, -1.91546178260131e-5, 0.0002817166481421385 },
            { -0.02771404479110617, -0.01262713981557431, -0.02848613965062154, -0.02645673874857109, 0.005537192654111667, 0.00387645332275328, 0.005685150503339728, 0.003257949451411054, 0.00367985906664883, 0.03164311145346185, 0.003621096121848034, 0.004016854525083762, 0.03425488866031785, 0.1038019607210039, -0.1574201661900564, 0.105479347123269, 0.1153722250798742, -0.1718364468440879, 0.1141854617231493, 0.6421529517453903, -0.1631217647297312, 0.06718394782667172, -0.001313047416948637, -0.007698763826667223, -0.007839020338041649, 0.05617066818259877, -0.02566310785484643, -0.02613063979371076, 0.3126416288668672, -0.02436160383093973, -0.1454411359658686, 0.3474901641975258, -0.02707706502812901, -0.1587603966773187, 0.0518963102768919 },
            { -0.03618205086727391, -0.02345996111730947, -0.02552167167239568, -0.02665480921729698, 0.02469686349179403, 0.006068756454277413, 0.006085065396913824, 0.02871844888648756, 0.01040295457869597, 0.03386900706375957, 0.005446964936319001, 0.005597959122650815, 0.02607189605448595, 0.1799523328936179, -0.1869606183277103, 0.1128991615774846, 0.03413116256224902, -0.1006058318362079, 0.08690822260438813, 0.18997143177811, -0.1724567309347759, 0.1010601750910157, -0.008946586675016006, -0.02904942866526284, -0.0102390148950972, 0.1607869537476217, -0.09683354857256633, -0.03413079677416213, 0.8949278466260236, -0.165990349931469, -0.189969395829684, 0.1697389932295777, -0.03148302401072419, -0.1022248923961468, 0.1633745156276257 },
            { 0.01425169802776677, -0.03713344901196349, -0.02018790612716788, 0.02306868295823356, 0.04338357691568697, -0.01913588053374866, -0.006223641760033625, 0.09419353716058984, -0.05417748655495013, -0.0346403124672737, 0.005867922470358362, 0.005445782337005173, 0.01504270130472868, -0.07424487525474924, 0.3155958032078606, -0.1154702358700684, -0.004625191758894811, -0.0317228826959173, 0.05014343532325249, -0.02574346241746148, -0.08981379496549513, 0.1088704038318376, -0.01881372226134984, -0.03698635561937595, 0.02292257362615271, 0.109594079865224, -0.1232905508972649, 0.07641025137580618, 0.6099922388646908, -0.3490600890723919, 0.4252935958425977, 0.03800034772105289, -0.02174520250451073, -0.04274942415300014, 0.1476878330927724 },
            { 0.006384739309514918, -0.04093237841029056, -0.01305200265879767, -0.0404060597147743, 0.04503040295118435, -0.05347701744396697, 0.02034110872501614, 0.1552508497133713, -0.2136211186622524, 0.1132170502952495, 0.003562806060727574, 0.003003168573676463, 0.0057517664663045, -0.03375646270612686, 0.08464280865275219, 0.3773984289101496, -0.0007746671283292054, -0.001189941446452223, 0.01917297458448684, -0.00431173779245636, -0.004753380706020113, 0.06610246412854216, -0.01618235768107819, -0.02254768730710069, 0.03680651294679133, 0.006411913828218136, -0.07516060295747026, 0.1226910621991617, 0.03568822035179411, -0.3002391092571212, 0.6828890375428205, 0.0008189984660355322, -0.006890098959867986, -0.009600319058806843, 0.05173062818511512 },
            { -0.04099979151831713, -0.02557815590343041, -0.00567499956394, 0.193565613495663, 0.02596384270286382, -0.04737889847365274, 0.04543103359859844, 0.1214420892979637, -0.2344553949722824, 0.2528656468745969, 0.0008461178284370283, 0.0006633205818854272, 0.001006857014138652, 0.2180859889617277, -0.5041765291597239, 0.8429039407664709, 0.001519460381977688, 0.001426414899664528, 0.003356263515805615, 0.008457199890802455, 0.007058641704834681, 0.01569843332739837, -0.004625891289715098, -0.005203042411434773, 0.01281314495589472, -0.009947588602064886, -0.01734385436210945, 0.04271141814013017, -0.05536751483420205, -0.08582639858272297, 0.2377284759215496, -0.0003857595145824369, -0.0005979742806730403, -0.0006725807738298812, 0.004690470382278045 },
            { -0.032404199130908, -0.02495652929806445, -0.02070490865233482, -0.0264567387485711, 0.005124628831690096, 0.0053618811378191, 0.02827782277230296, 0.006041846787381748, 0.006075743364837894, 0.02642950564403647, 0.03340176540986727, 0.009173540066134403, 0.02647922078400471, 0.02902548365002291, -0.09812408341868216, 0.0881002806637313, 0.1604645781172022, -0.1481539223502044, 0.08826600142459004, 0.1499761670891585, -0.1678786208714963, 0.104064055106665, -0.01078332381180038, -0.008894334929592008, -0.03256684237349032, 0.1741521492437129, -0.02964843210342454, -0.1085585175931349, 0.1627690805059435, -0.03359572135228232, -0.1014628310156252, 0.899853113520492, -0.1857306950794884, -0.1531949737923248, 0.1800778104018305 },
            { -0.003357685596893402, -0.03280377145867342, -0.02972368152675255, -0.02665480921729697, 0.03517748253151903, 0.01200475223875572, 0.03026699130493015, 0.03812711034200981, 0.01261027312837111, 0.02828865659010953, 0.03596925919343841, 0.01342304375412996, 0.03101740278463072, 0.009703884312667204, -0.1125841458311087, 0.09429758614311824, 0.009154680931611718, -0.1198405379588697, 0.1033936059035812, 0.008556305529588791, -0.1258853065399807, 0.1120631477085378, -0.05394226355550381, -0.04799554707392446, -0.04253750720995729, 0.4815949349209143, -0.1599886590680968, -0.1417947945908068, 0.4501165508080966, -0.1680585028466757, -0.1325266925289346, 0.4246416457486893, -0.158547023215991, -0.1410684427130845, 0.5669020570578502 },
            { 0.02343428556274769, -0.04071692449822361, -0.0397189812555841, 0.02306868295823357, 0.09844979659654107, -0.05447853760033652, -0.03095626731168381, 0.09967243709134711, -0.05402994244200255, -0.02893287960039829, 0.03088462557296402, 0.01546154614358796, 0.02851183427556081, -0.09782049610383131, 0.1660499124006588, -0.09644504318529368, -0.03031078083060847, -0.0475178811355841, 0.0950415280461932, -0.0283295839106241, -0.04712660243482115, 0.0962218415145261, -0.09332422289736521, -0.08794849053294104, 0.09523075714638916, 0.2868127992844251, -0.2931680525644633, 0.3174428059841393, 0.2680659171856126, -0.2907540052212063, 0.2966938614748698, 0.08306323917376715, -0.09009339840729294, -0.08490377043501753, 0.5124699899557139 },
            { -0.008454146485977755, -0.03882422922489413, -0.03974059720891044, -0.0404060597147743, 0.1488137364235411, -0.2006373486991842, 0.1011762603611383, 0.1443738861696729, -0.1925204755329317, 0.09456309864408384, 0.01647975858325762, 0.0101544651668788, 0.01587626324315244, 0.04090465035196583, -0.08593400912262328, 0.3152172289251931, 0.004669118360786727, 0.004532577118721222, 0.05292203594162254, 0.004363931801353416, 0.004349209695719574, 0.05134310969222116, -0.07254016497511584, -0.07065720680352421, 0.1529109319488566, -0.03237924268300441, -0.2355291784169416, 0.5097142641518436, -0.0302628453445958, -0.2260007407628518, 0.4763979224893451, -0.003454394686967683, -0.02579716973907673, -0.02512754082961969, 0.1795029011616399 },
            { -0.04162279872719073, -0.02232219308626746, -0.02351675082611384, 0.193565613495663, 0.111110855045382, -0.212909749655552, 0.2259730354911517, 0.1051854336230484, -0.2007330594015491, 0.2112028095304114, 0.003645198807265551, 0.002552070903363391, 0.00359886187881335, 0.2153019879091377, -0.4756336109937084, 0.7040247762181031, 0.007461285488833442, 0.006047089118740993, 0.01199646886565955, 0.006973595121758779, 0.005701245251767693, 0.01135671018879672, -0.01969963128666869, -0.01952890149186877, 0.05323160983041297, -0.04667794528742533, -0.0650977632975982, 0.1774425836564898, -0.04362694498652749, -0.06137470551754963, 0.1658444429758223, -0.001511890785176895, -0.002126939022285072, -0.00210850558779384, 0.01627571655265392 },
            { 0.02047850070830769, -0.03902719790271408, 0.01968046068523606, -0.02645673874857108, -0.008320196683643416, -0.03483895378318297, 0.0625461354887268, 0.008639841861519722, 0.00744901063083606, 0.01852156663927379, 0.1056476935180241, -0.07307756320414237, -0.03012763607208076, -0.008515715793572945, -0.03330536168236859, 0.06173990695207003, -0.1041298841652333, 0.326737978236299, -0.100427651936955, -0.03083561556019457, -0.06986072798072832, 0.1042858797995484, -0.02924195016441222, 0.0404995390633586, -0.05047994160310085, 0.13074403767017, 0.1350014187283426, -0.1682701554474764, 0.03871677102787953, -0.02886501728909019, -0.04982924801298241, 0.4734273641949983, -0.3529604533078609, 0.4888434453307887, 0.1956104588029306 },
            { 0.02291807830838187, -0.04122892014780988, 0.02315591307930759, -0.02665480921729694, -0.04141279782232504, -0.03444320211700808, 0.06694586617356145, 0.0445075575635088, 0.01300536454864516, 0.01982444337877612, 0.09287223076709838, -0.03971909658354184, -0.02558962516953212, -0.04050038720119487, -0.03258267678117451, 0.06608292448582029, -0.08451062049268937, 0.0995092818183706, -0.08530061779737315, -0.02502583216294536, -0.03757358220136975, 0.09167509457119553, -0.1230500279660215, 0.09650280654078491, -0.06593488110619024, 0.3082804233695211, 0.3216830634514469, -0.2197877481789316, 0.09128999514368441, -0.1214638956941006, -0.06508497115902041, 0.1904913673057358, -0.2534541001194388, 0.1987730713685734, 0.6158003100435522 },
            { 0.004450038028120743, -0.04072125066349084, 0.005514304491642019, 0.02306868295823359, -0.017812894403291, 0.01605628554003023, -0.068470437243077, 0.0946630119350779, -0.04719525032977095, -0.0202759092357741, 0.06487869336768073, -0.003980488301318862, -0.003615209810624805, -0.01427315562842482, 0.01267802473855684, -0.06758784361852477, -0.00978231801921603, 0.001069275590298596, -0.0120509631645792, -0.00289680335425575, -0.003142989020084413, 0.06404239782991013, -0.1803070402235227, 0.01816505472421175, 0.1476115800370624, 0.04843574513361225, 0.06055150788778362, 0.4920493710943263, 0.01434310647980431, -0.1779828569618005, 0.1457088458835142, 0.009830259868357316, -0.1219831797603041, 0.0122892102994556, 0.5566731938503816 },
            { -0.03136678397027903, -0.03258424621130708, -0.03076743722716243, -0.0404060597147743, 0.1323516525356927, -0.2245148383223397, 0.2237861146434754, 0.1176773535525722, -0.1499002116504073, 0.06626899332669947, 0.02971047564278809, 0.00884739960662248, 0.009895171304887432, 0.1344592595949341, -0.2267129190140598, 0.2209014799602403, 0.0339474710854873, 0.01338103374516327, 0.03298462638377003, 0.01005274495429053, 0.00893401881804122, 0.02932750340775412, -0.1249275929572682, -0.05540875762834391, 0.2370182170788946, -0.1889436909588625, -0.1846999018457715, 0.7900780184202788, -0.0559512292137643, -0.1233172586069367, 0.2339630187229396, -0.01412623230005718, -0.03113440519836284, -0.01380894861336869, 0.1949859606485339 },
            { -0.03807444216141936, -0.01669492344707432, -0.03827576649250269, 0.193565613495663, 0.1902826731863672, -0.3945927279594243, 0.4998171255416421, 0.07778091366060153, -0.1458880708144912, 0.148009083628169, 0.005962016466724238, 0.003437535101900868, 0.00431913334314866, 0.1890496669371281, -0.3912790452831659, 0.4933744120698551, 0.01449092295606224, 0.009219639723041287, 0.01439742630378457, 0.004291145937284411, 0.003408667614719766, 0.005885165230849716, -0.03166747878044049, -0.02536413297621129, 0.08251117885059832, -0.08493374951466567, -0.08454896069918162, 0.2750432835384226, -0.02515113186877561, -0.03125928049804828, 0.08144759807997604, -0.001927869644379674, -0.002396067830734566, -0.001919135511233513, 0.01767958181581009 },
            { -0.008250213363943867, -0.03886092696465369, -0.04065529414352134, -0.02645673874857106, 0.07155728382479916, -0.1348907822337634, 0.09931759007824138, 0.007879570167104234, 0.005891740649325166, 0.01003598923671567, 0.1529968345301562, -0.2237928736235231, 0.1404002171137844, 0.002178398618789444, 0.002570504009016249, 0.03345402976511359, 0.04229775050561464, -0.09763845917155858, 0.4680109684822759, 0.004274165014245769, 0.004264638912402896, 0.05153528848523029, -0.03672628934303902, 0.08496688902390814, -0.0434337176531757, -0.01602329084247592, 0.2832291633051983, -0.144782228129851, -0.001619144950105633, -0.01237084363279743, -0.01463016653982641, -0.03143877733913168, -0.2402034471610155, 0.5557147210669311, 0.09119745105210092 },
            { -0.01984886518320744, -0.03635734686787392, -0.02610225289337147, -0.0266548092172969, 0.1033929806787118, -0.1586234197313438, 0.1063039633401006, 0.03646275517499342, 0.009470543015015266, 0.01074195850967586, 0.1208167887443207, -0.1332034584675041, 0.03461807195746707, 0.02475565406210106, 0.009274242332480937, 0.03580731218838124, 0.0820261281050842, -0.1304424837513083, 0.1153960992145259, 0.008288696273676711, 0.007788012359363593, 0.0406957966216645, -0.1422852099744591, 0.2408164780802118, -0.05673138515053368, -0.139335993251802, 0.8027391655774395, -0.1891087567629955, -0.01407982742493583, -0.0479271964399369, -0.01910933849630178, -0.04665252330470007, -0.1588034129511558, 0.2687733926869819, 0.2870982409465317 },
            { -0.0353856505415784, -0.03062008488988919, 0.01944774835584482, 0.0230686829582336, -0.09312492294621702, 0.2581706538315074, -0.1087248439164006, 0.06753193549861401, -0.03099862159280474, -0.01098658719416138, 0.07349480888670291, -0.04203801803890881, -0.01024111889797479, 0.09090396072936997, -0.05341828190673394, -0.03662275898681382, 0.09893051593325777, -0.07244188880075993, -0.03413781027061361, 0.009996875601861818, 0.008698117563231631, 0.02475591204075903, -0.1880539520086902, 0.1582635745995425, 0.1270072723157652, -0.3240634101100588, 0.5275567968942039, 0.4233668418947012, -0.03274643387254738, -0.06334389007012622, 0.04278099242128479, -0.03563784869209466, -0.06893697123399879, 0.05801639036575178, 0.2595320140797409 },
            { -0.04133309679808713, -0.02112183444024169, 0.001423206570283997, -0.0404060597147743, -0.007285068764193901, 0.01709393778786679, 0.3553520521402793, 0.07399278649510696, -0.08993600866935415, 0.03590813437695323, 0.02966414163067068, -0.0004041513902125574, -0.000295127767531048, 0.1578649471058828, -0.2196489795143268, 0.1196964014131827, 0.06328898222770561, -0.000987051146063782, -0.000983780760084529, 0.006395317727097072, 0.005193153358291006, 0.009992037425467294, -0.1190187617692604, 0.002285903806714728, 0.2039341170440556, -0.290677226535459, 0.007619846154303408, 0.6797952708792181, -0.02937277791950103, -0.04009015115750481, 0.06869294770784687, -0.01177571876344897, -0.01607237648780605, 0.0003086900422275664, 0.09090629770469683 },
            { -0.02662785624763448, -0.009682098480128354, -0.04145451836505643, 0.193565613495663, 0.2183125263152957, -0.4965181115031936, 0.7936642608011621, 0.04456863824272096, -0.08208288517114518, 0.08019934809827164, 0.005424693276627218, 0.002433694110636844, 0.002685087802928729, 0.126759861966115, -0.2457156461655036, 0.2673370123402324, 0.01542863767138076, 0.007285279016660698, 0.00895048860280725, 0.001559055565939375, 0.001204380478999973, 0.001827247823874308, -0.0282925447705457, -0.01729372335511222, 0.07099388651446931, -0.08469391524757193, -0.05764700641118917, 0.2366514686870479, -0.008558274734317878, -0.009530030220618347, 0.02391350405024046, -0.001041674532615143, -0.001159952219816408, -0.0007090169144324732, 0.008242569477807382 },
            { -0.03987149506809752, -0.01858506351847899, 0.256494600498464, -0.02645673874857105, 0.2949230850789766, -0.2573608213043342, 0.1287360490666404, 0.003530822036592008, 0.002386623605427022, 0.003247228400443894, 0.0888647963864357, -0.1729604171910535, 0.1872299624535174, 0.008148134771083181, 0.006168625717409582, 0.0108243316129862, 0.2050747191043495, -0.4470449697859732, 0.6241135367031259, 0.005172789260791639, 0.004145650733360885, 0.007471893318004171, -0.0192837443583845, 0.05245205739902615, -0.01821602682382556, -0.0498420450994394, 0.1748440186692276, -0.06072141860584585, -0.001257211989621508, -0.001621407874395315, -0.001531632487106091, -0.03164189141068938, -0.04080808353529601, 0.110998564394833, 0.01237547859041788 },
            { -0.03763593792610802, -0.01630849757557707, -0.004745786847815187, -0.02665480921729687, 0.6691449677790836, -0.31338587445254, 0.1377918275075795, 0.01547691146568509, 0.003691624224627559, 0.003475650673418262, 0.06647159631742797, -0.1025817764881591, 0.07249109947501954, 0.0379956047588088, 0.009971627173580851, 0.01158575585715975, 0.1631868546230182, -0.2770886655037876, 0.2416422878046817, 0.004116212923674867, 0.003264050211996657, 0.005589037465426262, -0.07189130527011729, 0.153939814567603, -0.02379304580618461, -0.1941891291083414, 0.513143947956848, -0.07931188882614951, -0.00489821195904217, -0.006044735208017391, -0.002000557107013412, -0.02103727017761506, -0.02596145874995379, 0.05559089699173422, 0.038959182446345 },
            { -0.03209534726556353, -0.0125039973795695, -0.01759858691004863, 0.02306868295823362, 0.1372262556288499, 0.5759284463220431, -0.140929787262841, 0.02649074818163194, -0.01143434379185622, -0.003554802333816423, 0.03736936306868303, -0.03459176728522117, 0.004882827085332019, 0.07112435886035044, -0.03288994993426015, -0.01184960050071856, 0.1003320846605092, -0.09950037491078513, 0.01627644657618795, 0.002530768942712185, 0.001975456328671058, 0.00314207544005123, -0.08991358859160323, 0.1142339714217735, 0.05326663256871261, -0.2586290460580443, 0.380788240201603, 0.1775593286730396, -0.006523639568157383, -0.007560077433519298, 0.00447874312604062, -0.009202618736179214, -0.01066467721120918, 0.01354932497802123, 0.03521845015094731 },
            { -0.02241723928834146, -0.007816863792841517, 0.02005278463846163, -0.04040605971477431, -0.1210392777590415, 0.4095876032623191, 0.4606094366992161, 0.02674179126429892, -0.03135470659495641, 0.01161837772097448, 0.01389654702228352, -0.003376120142324944, -0.001586555944432165, 0.07875024653515715, -0.09612767010257042, 0.03872877351022475, 0.04092308152345898, -0.01035055334628001, -0.005288635583115031, 0.001032240724490925, 0.0007923544577110595, 0.001168443760199596, -0.0537846767144484, 0.01772210418141998, 0.0855296195465344, -0.1648937662395976, 0.05907497375711544, 0.2851049727754591, -0.004159267933663268, -0.004522301101170779, 0.007191466348520577, -0.00216139083007457, -0.002350043393885882, 0.0007743416229574364, 0.01233596913071523 },
            { -0.01037776598911566, -0.003303304988079737, -0.03732553226575729, 0.193565613495663, 0.2063633124252942, -0.508716820740598, 1.028752320112142, 0.015061569398905, -0.02734367440406581, 0.02594917099841551, 0.002376238637621272, 0.0008306369662952609, 0.0008212303225207512, 0.04782410688948838, -0.08822672903069137, 0.08649913012910923, 0.007545129434439588, 0.002680121971365731, 0.002737494332209013, 0.0001903177762730326, 0.0001440573214024298, 0.0001997979213413634, -0.01221659779863534, -0.005733002882217224, 0.02977471446036035, -0.03941790879052025, -0.01911042793504857, 0.09925122081245068, -0.0009942743609013503, -0.001027190959436855, 0.002503505314459829, -0.0001568650045818662, -0.000162058201332267, -7.605064442973999e-5, 0.001118515275655485 },
            { 0.0110397084453418, 0.01103970844534148, -0.02848613965062157, -0.02645673874857109, 0.005537192654111695, 0.003876453322753249, 0.005685150503339721, -0.005329609463948142, -0.04717471444980509, 0.0685612292883655, -0.005923673294718666, -0.05149489743361096, 0.07422017519173364, -0.005329609463947861, -0.04717471444980515, 0.0685612292883654, -0.00592367329471869, -0.05149489743361101, 0.0742201751917336, -0.07143774342473305, 0.6266700201944331, -0.07143774342473283, 0.01683288295331643, -0.01668093584075689, -0.01698483006587612, 0.01683288295331651, -0.01668093584075684, -0.01698483006587621, 0.2029995770681192, 0.2029995770681193, -0.2048320141896659, 0.2256268834802782, 0.2256268834802784, -0.2235901941291008, 0.0730881651359091 },
            { 0.02264726276258686, 0.0226472627625866, -0.02552167167239572, -0.02665480921729697, 0.02469686349179407, 0.006068756454277389, 0.006085065396913782, -0.04449539832045495, -0.04949183678180918, 0.07338408432062209, -0.008439344180357402, -0.02663217234234903, 0.05649005932943705, -0.04449539832045451, -0.04949183678180934, 0.07338408432062192, -0.008439344180357407, -0.02663217234234913, 0.05649005932943705, -0.1017759883494755, 0.2171903151235437, -0.1017759883494754, 0.04256319722677191, -0.06294148861891459, -0.02218490583462945, 0.04256319722677209, -0.06294148861891462, -0.02218490583462954, 0.513299537557785, 0.5132995375577848, -0.2675433860150799, 0.09735639253906826, 0.09735639253906825, -0.1439684204250058, 0.2300884882466873 },
            { 0.01269123850780221, 0.01269123850780188, -0.0201879061271679, 0.0230686829582336, 0.043383576915687, -0.01913588053374862, -0.006223641760033729, -0.04330148207643078, 0.0438748525012584, -0.0750552741686711, -0.002697528379711601, -0.004410187920912841, 0.0325930683139906, -0.04330148207643059, 0.04387485250125833, -0.07505527416867129, -0.00269752837971165, -0.004410187920912903, 0.03259306831399058, -0.03253139237820259, 0.01011170320548501, -0.03253139237820239, 0.01523602037867034, -0.08013845325832039, 0.04966641250097968, 0.01523602037867046, -0.08013845325832053, 0.04966641250097953, 0.1837418879255007, 0.1837418879255003, 0.5989622074929914, 0.01144646634371458, 0.01144646634371446, -0.06020614867008661, 0.2079961499393057 },
            { -0.02598176496926855, -0.02598176496926896, -0.01305200265879768, -0.04040605971477423, 0.04503040295118435, -0.05347701744396686, 0.02034110872501598, 0.1147618624713508, -0.2039180015952689, 0.2453077396026995, 0.00263363620816367, 0.00286675838902452, 0.01246237052539569, 0.1147618624713508, -0.2039180015952687, 0.2453077396026994, 0.002633636208163687, 0.002866758389024456, 0.01246237052539567, 0.03176087173487874, 0.01093149299806988, 0.03176087173487892, -0.01544732122034545, -0.04885414513228543, 0.07974878757297663, -0.01544732122034548, -0.04885414513228556, 0.07974878757297646, -0.1862901134203921, -0.1862901134203922, 0.9617467307238582, -0.004275116988880682, -0.004275116988880727, -0.01352060870963154, 0.07285482677294575 },
            { -0.03958128003666915, -0.03958128003666952, -0.005674999563939993, 0.193565613495663, 0.02596384270286374, -0.04737889847365274, 0.04543103359859839, 0.1985923017186838, -0.4178541657524038, 0.5478847938205339, 0.001383642920225592, 0.001182191897963855, 0.00218156026497215, 0.1985923017186838, -0.4178541657524035, 0.5478847938205338, 0.001383642920225647, 0.00118219189796377, 0.002181560264972133, 0.01668632333499112, 0.01042624090464429, 0.01668632333499121, -0.008244416580620013, -0.01127344838677203, 0.02776228154801271, -0.008244416580620183, -0.01127344838677221, 0.0277622815480123, -0.09942521929730086, -0.09942521929730057, 0.3348048832943506, -0.0006927207126459866, -0.0006927207126459566, -0.0009472290882075099, 0.006605823651738008 },
            { 0.02319260896167063, 0.02319260896167035, -0.02070490865233489, -0.02645673874857109, 0.005124628831690107, 0.005361881137819068, 0.02827782277230296, -0.008840301102126974, -0.0253079998695848, 0.05726489315388386, -0.04887274933593432, -0.03821161244909588, 0.05737261110429743, -0.0088403011021267, -0.0253079998695849, 0.05726489315388381, -0.04887274933593425, -0.03821161244909605, 0.05737261110429738, -0.09897129603627185, 0.1803582470445572, -0.09897129603627172, 0.04491703174991026, -0.01927138351650833, -0.07056267998331242, 0.04491703174991039, -0.0192713835165082, -0.07056267998331248, 0.09096064589765986, 0.09096064589765988, -0.1428951713302998, 0.5028671303199711, 0.502867130319971, -0.215752131178203, 0.2536125723339224 },
            { 0.02031186795647098, 0.02031186795647075, -0.02972368152675259, -0.02665480921729693, 0.0351774825315191, 0.01200475223875573, 0.03026699130493014, -0.03367369525999778, -0.02292830329986512, 0.06129312136661385, -0.03176789066736997, -0.02440610249032675, 0.06720550434410598, -0.0336736952599975, -0.02292830329986514, 0.06129312136661375, -0.03176789066737, -0.02440610249032688, 0.06720550434410597, -0.06433256476071521, 0.04661408325106745, -0.06433256476071504, 0.09807912698569601, -0.1039921030710106, -0.09216615090038179, 0.0980791269856963, -0.1039921030710106, -0.0921661509003818, 0.1986182165680467, 0.1986182165680465, -0.1866439586319419, 0.1873771719962443, 0.1873771719962442, -0.1986737319371707, 0.7983964744518682 },
            { -0.001801091269247283, -0.00180109126924754, -0.03971898125558412, 0.02306868295823361, 0.09844979659654111, -0.05447853760033648, -0.03095626731168385, 0.005558310115915822, -0.004567474346681718, -0.06268896139284603, 0.001722304899509487, 0.001307057016517763, 0.06177668116087705, 0.005558310115916057, -0.004567474346681772, -0.06268896139284616, 0.001722304899509442, 0.001307057016517736, 0.061776681160877, 0.00348780763084152, 0.0001095835104164636, 0.003487807630841624, -0.007889255008281101, -0.1905582715487022, 0.2063367815652646, -0.007889255008281078, -0.1905582715487022, 0.2063367815652645, -0.01597638363995486, -0.01597638363995484, 0.4178487801268895, -0.004950462145094498, -0.004950462145094517, -0.1195742194600493, 0.7217370763593358 },
            { -0.03447148749511583, -0.03447148749511619, -0.03974059720891045, -0.04040605971477426, 0.1488137364235411, -0.2006373486991841, 0.1011762603611383, 0.1449618774546607, -0.2364957723510664, 0.2048901637846385, 0.01654687566850579, 0.01247393595826753, 0.03439914959238751, 0.1449618774546609, -0.2364957723510664, 0.2048901637846383, 0.01654687566850583, 0.01247393595826746, 0.03439914959238747, 0.03350877027617851, 0.0147033099162971, 0.03350877027617857, -0.08910970272005847, -0.1530931926102329, 0.3313125980503505, -0.08910970272005858, -0.153093192610233, 0.33131259805035, -0.1804544022475654, -0.1804544022475653, 0.6709349825359229, -0.02059821940950584, -0.02059821940950582, -0.03538837046055468, 0.2528028989436364 },
            { -0.0368397808547019, -0.03683978085470227, -0.02351675082611384, 0.193565613495663, 0.111110855045382, -0.2129097496555519, 0.2259730354911516, 0.1816824192751107, -0.372044618841556, 0.4576137928742574, 0.006296200103296842, 0.004730084069506001, 0.007797665372236479, 0.1816824192751108, -0.3720446188415557, 0.4576137928742569, 0.00629620010329689, 0.004730084069505909, 0.00779766537223644, 0.0127503177700058, 0.008265484918257486, 0.01275031777000586, -0.03651188217435878, -0.0423133323947335, 0.1153370967434516, -0.03651188217435893, -0.04231333239473355, 0.1153370967434512, -0.07393953376105648, -0.07393953376105614, 0.2335670102636765, -0.00256237285897837, -0.002562372858978326, -0.002969513704701335, 0.02292190432727753 },
            { 0.006746848191584881, 0.006746848191584609, 0.01968046068523601, -0.02645673874857107, -0.008320196683643465, -0.03483895378318298, 0.06254613548872681, -0.001949418458884993, -0.002754290465431858, 0.0401307367956719, -0.02383742285838817, 0.02702061327942567, -0.06527764400451773, -0.001949418458884884, -0.002754290465431875, 0.04013073679567188, -0.0238374228583882, 0.02702061327942565, -0.06527764400451781, -0.01529452355676766, 0.002136189794584701, -0.01529452355676745, 0.01081228481471877, 0.08775047889585046, -0.1093750485252885, 0.01081228481471893, 0.08775047889585075, -0.1093750485252886, 0.006937358362252933, 0.006937358362253007, -0.07017701813365125, 0.0848297829783525, 0.08482978297835225, 0.6884626338040942, 0.2754879766792506 },
            { -0.006091448329735702, -0.006091448329735957, 0.02315591307930756, -0.0266548092172969, -0.04141279782232504, -0.03444320211700801, 0.06694586617356137, 0.008164340325242462, 0.003500065711416351, 0.04295368393229818, 0.01703621902112007, -0.01068939263643952, -0.05544512148345256, 0.008164340325242544, 0.003500065711416453, 0.04295368393229809, 0.01703621902111989, -0.01068939263643948, -0.0554451214834526, 0.0109307476183433, 0.001086239790237147, 0.01093074761834357, -0.03311581017677783, 0.2090929349961157, -0.1428613146425606, -0.03311581017677746, 0.2090929349961159, -0.1428613146425608, -0.02124770541929362, -0.02124770541929378, -0.0916624148143826, -0.04433678029076669, -0.04433678029076708, 0.2799420418762812, 0.8672623258006065 },
            { -0.02730591606035827, -0.02730591606035853, 0.005514304491641999, 0.0230686829582336, -0.01781289440329098, 0.01605628554003027, -0.06847043724307705, 0.07360606878045113, -0.04700871157106169, -0.04393187642714944, 0.05044700637332809, -0.00396475546079792, -0.007833086487601998, 0.07360606878045127, -0.04700871157106166, -0.04393187642714955, 0.05044700637332802, -0.003964755460797923, -0.007833086487602, 0.03236771575219853, 0.01160779343651927, 0.0323677157521987, -0.1795943784358461, 0.03935828130599762, 0.3198304755656945, -0.179594378435846, 0.03935828130599766, 0.3198304755656944, -0.1152310158681227, -0.1152310158681228, 0.2052090434344233, -0.07897527864506898, -0.07897527864506906, 0.01730750851003121, 0.783990655632163 },
            { -0.04149525727604112, -0.04149525727604148, -0.03076743722716244, -0.04040605971477428, 0.1323516525356927, -0.2245148383223397, 0.2237861146434754, 0.1626704441286401, -0.2360759569199992, 0.1435852366434698, 0.04107006252419114, 0.01393365830101785, 0.02143989884432873, 0.1626704441286404, -0.2360759569199992, 0.1435852366434698, 0.04107006252419119, 0.01393365830101779, 0.02143989884432874, 0.0263512982290835, 0.01465115509241519, 0.02635129822908357, -0.1967468940062643, -0.1200543297370577, 0.5135481177495866, -0.1967468940062645, -0.1200543297370578, 0.5135481177495869, -0.1262363814652377, -0.1262363814652377, 0.3295018018984709, -0.0318714079092635, -0.03187140790926345, -0.01944783186361857, 0.2746084647449319 },
            { -0.0301489032012278, -0.03014890320122814, -0.03827576649250266, 0.1935656134956629, 0.1902826731863671, -0.3945927279594243, 0.4998171255416419, 0.1449328843728633, -0.2852131186853867, 0.320691747849012, 0.0111093095019601, 0.006720426841824125, 0.009358279823466632, 0.1449328843728635, -0.2852131186853867, 0.320691747849012, 0.01110930950196016, 0.006720426841824025, 0.009358279823466611, 0.007127934797589124, 0.004857549981637821, 0.007127934797589165, -0.06191034217840682, -0.05495654683769644, 0.1787772311945106, -0.06191034217840708, -0.05495654683769647, 0.1787772311945102, -0.03972280025741076, -0.03972280025741044, 0.1147067193530922, -0.003044808528124045, -0.003044808528123973, -0.00270281436993951, 0.02489903787751768 },
            { -0.03437691823049981, -0.03437691823050009, -0.04065529414352131, -0.02645673874857105, 0.07155728382479908, -0.1348907822337634, 0.09931759007824136, 0.007885389847846827, 0.007218236097192306, 0.02174500950091465, 0.153109834695484, -0.274178701139661, 0.3042055927980302, 0.007885389847846791, 0.007218236097192283, 0.0217450095009146, 0.1531098346954839, -0.274178701139661, 0.3042055927980302, 0.03352250902900384, 0.01467177048627335, 0.03352250902900408, -0.04499502663652025, 0.184098026164553, -0.09410797289151325, -0.04499502663652003, 0.1840980261645534, -0.09410797289151329, -0.009851399746351496, -0.00985139974635158, -0.02060439407586966, -0.191283654427672, -0.1912836544276721, 0.7826407905511716, 0.1284379241396261 },
            { -0.03891874703260562, -0.0389187470326059, -0.02610225289337146, -0.0266548092172969, 0.1033929806787118, -0.1586234197313437, 0.1063039633401004, 0.0432694866595338, 0.01327404122741961, 0.02327463534902856, 0.1433704173952627, -0.1866997696467037, 0.07500708558599645, 0.04326948665953378, 0.01327404122741971, 0.02327463534902852, 0.1433704173952625, -0.1866997696467037, 0.07500708558599654, 0.0313901201786517, 0.01562354691153126, 0.03139012017865198, -0.1994288754360307, 0.521777821828825, -0.1229200709567643, -0.1994288754360306, 0.5217778218288261, -0.1229200709567647, -0.04366379397342294, -0.04366379397342306, -0.02691263560364516, -0.144676927098488, -0.1446769270984883, 0.3785269897615769, 0.4043347885923316 },
            { -0.0416440845330913, -0.04164408453309155, 0.01944774835584481, 0.02306868295823359, -0.09312492294621708, 0.2581706538315076, -0.1087248439164008, 0.09883718681790246, -0.05094325945844261, -0.02380467309048757, 0.1075642227998954, -0.0690854479984976, -0.02218946458429422, 0.09883718681790263, -0.05094325945844266, -0.02380467309048766, 0.1075642227998953, -0.06908544799849761, -0.02218946458429424, 0.02355056183803472, 0.01363221516449799, 0.02355056183803495, -0.3090486214260532, 0.3429101857468729, 0.2751870571052332, -0.3090486214260532, 0.3429101857468736, 0.2751870571052332, -0.06766440067524729, -0.06766440067524748, 0.0602506078386311, -0.0736389703529616, -0.07363897035296182, 0.08170737952307836, 0.3655118948130984 },
            { -0.03560394004953681, -0.03560394004953715, 0.001423206570283979, -0.04040605971477431, -0.007285068764193887, 0.01709393778786679, 0.3553520521402793, 0.130111458040874, -0.1688178744117102, 0.0778022678950679, 0.0521624458534588, -0.000758628047271419, -0.0006394542638077854, 0.1301114580408743, -0.1688178744117103, 0.0778022678950679, 0.05216244585345884, -0.0007586280472714775, -0.0006394542638077933, 0.01142066455479672, 0.007492128262006916, 0.0114206645547968, -0.2234087844710729, 0.004952874980509031, 0.441864693961637, -0.223408784471073, 0.004952874980509092, 0.4418646939616369, -0.04891405577888235, -0.04891405577888222, 0.09674370834758626, -0.01960993154989822, -0.01960993154989816, 0.0004347436004941548, 0.1280278783421232 },
            { -0.01909146182069386, -0.0190914618206942, -0.04145451836505644, 0.193565613495663, 0.2183125263152957, -0.4965181115031936, 0.7936642608011621, 0.08935742916864638, -0.1687818045646287, 0.173768180219252, 0.01087618254315904, 0.005004250068636704, 0.005817788202868, 0.08935742916864663, -0.1687818045646289, 0.173768180219252, 0.01087618254315912, 0.005004250068636586, 0.005817788202867978, 0.002381276997844638, 0.00170109878674951, 0.002381276997844678, -0.05817615635880381, -0.03747036488315077, 0.1538226776007589, -0.05817615635880412, -0.03747036488315068, 0.1538226776007586, -0.01273733154169681, -0.01273733154169652, 0.03367858184284937, -0.00155033044537091, -0.001550330445370808, -0.0009985439244082491, 0.01160842217729752 },
            { -0.03264061575451467, -0.03264061575451492, 0.256494600498464, -0.02645673874857105, 0.2949230850789766, -0.2573608213043341, 0.1287360490666404, 0.006427220519096373, 0.004590345673672606, 0.007035780006715074, 0.1617622289769978, -0.3326658216922727, 0.4056717495783216, 0.006427220519096357, 0.004590345673672546, 0.007035780006715022, 0.1617622289769978, -0.332665821692273, 0.4056717495783219, 0.008840751791977439, 0.005933502650654667, 0.008840751791977661, -0.03708965765964579, 0.1136480380341264, -0.03946872271483573, -0.03708965765964566, 0.1136480380341271, -0.03946872271483577, -0.002027052047267092, -0.002027052047267271, -0.002157074511614722, -0.05101745870459796, -0.05101745870459796, 0.1563248208023522, 0.01742900445188511 },
            { -0.02961172058828922, -0.02961172058828945, -0.004745786847815173, -0.02665480921729688, 0.6691449677790836, -0.31338587445254, 0.1377918275075795, 0.02897053398713006, 0.007240089380074923, 0.00753070326528903, 0.1244251893901746, -0.2011854905454442, 0.1570666936398505, 0.0289705339871301, 0.007240089380074984, 0.007530703265289006, 0.1244251893901746, -0.2011854905454445, 0.1570666936398507, 0.006800179640358069, 0.004647946995275012, 0.006800179640358272, -0.1409947069730294, 0.3335418812622253, -0.05155246731616701, -0.1409947069730295, 0.3335418812622261, -0.05155246731616722, -0.007705749458412915, -0.00770574945841299, -0.002817484468955106, -0.03309532838373604, -0.03309532838373608, 0.07829143609067613, 0.05486816201394512 },
            { -0.02385873900776727, -0.02385873900776749, -0.01759858691004863, 0.02306868295823361, 0.1372262556288499, 0.5759284463220431, -0.1409297872628411, 0.05168309597268539, -0.02307659409226839, -0.007702201417267468, 0.07290712835570375, -0.069812504075992, 0.01057963683076001, 0.05168309597268558, -0.02307659409226846, -0.007702201417267506, 0.07290712835570379, -0.06981250407599215, 0.01057963683075997, 0.003984575569555632, 0.002797282942724663, 0.003984575569555881, -0.1814620432162821, 0.2475111058116879, 0.1154129806208762, -0.1814620432162823, 0.2475111058116886, 0.115412980620876, -0.009917400952532646, -0.009917400952532669, 0.00630763758446101, -0.01399005246480184, -0.01399005246480196, 0.01908219093399911, 0.04959990193386406 },
            { -0.01572782937938795, -0.01572782937938825, 0.02005278463846162, -0.04040605971477431, -0.1210392777590415, 0.4095876032623191, 0.4606094366992161, 0.05451857796946841, -0.06520950575194888, 0.02517357561559961, 0.02833093620591499, -0.007021437919486728, -0.003437595763773585, 0.05451857796946857, -0.065209505751949, 0.02517357561559961, 0.028330936205915, -0.007021437919486774, -0.003437595763773616, 0.0015483637720302, 0.001117867075934223, 0.00154836377203035, -0.1118579175651322, 0.03839853896926768, 0.185317296160997, -0.1118579175651323, 0.03839853896926774, 0.1853172961609967, -0.006113343587157498, -0.006113343587157392, 0.01012810115489158, -0.003176839045023971, -0.003176839045023954, 0.001090543973325985, 0.01737336130693386 },
            { -0.006949591278799636, -0.006949591278799968, -0.03732553226575729, 0.193565613495663, 0.2063633124252943, -0.508716820740598, 1.028752320112142, 0.03185557075892952, -0.05829635483192312, 0.05622415056376237, 0.005025800171020047, 0.001770907106634592, 0.001779362327364901, 0.03185557075892978, -0.05829635483192327, 0.05622415056376237, 0.005025800171020093, 0.001770907106634467, 0.001779362327364871, 0.0002746738354748295, 0.0002029369284713158, 0.0002746738354748843, -0.02604562611388621, -0.01242171540863293, 0.06451296763640561, -0.0260456261138865, -0.01242171540863287, 0.0645129676364052, -0.001423465274902221, -0.0014234652749019, 0.003525811543548994, -0.000224577737946769, -0.0002245777379466593, -0.0001071059200377993, 0.001575260914272569 },
            { -0.01262713981557398, -0.02771404479110652, -0.02848613965062149, -0.02645673874857107, 0.005537192654111733, 0.003876453322753239, 0.005685150503339718, 0.1038019607210035, -0.1574201661900563, 0.1054793471232692, 0.1153722250798742, -0.1718364468440878, 0.1141854617231493, 0.003257949451411315, 0.003679859066648808, 0.03164311145346171, 0.003621096121848084, 0.004016854525083658, 0.03425488866031788, 0.06718394782667139, -0.1631217647297305, 0.6421529517453904, 0.0561706681825987, -0.02566310785484647, -0.0261306397937105, -0.001313047416948515, -0.007698763826667383, -0.007839020338041645, -0.02436160383093958, 0.3126416288668674, -0.1454411359658688, -0.0270770650281289, 0.3474901641975258, -0.1587603966773186, 0.05189631027689204 },
            { -0.02345996111730924, -0.03618205086727425, -0.02552167167239569, -0.02665480921729694, 0.02469686349179407, 0.006068756454277406, 0.006085065396913751, 0.1799523328936171, -0.1869606183277099, 0.1128991615774846, 0.03413116256224907, -0.1006058318362078, 0.08690822260438809, 0.02871844888648786, 0.01040295457869594, 0.03386900706375923, 0.00544696493631903, 0.005597959122650668, 0.02607189605448597, 0.1010601750910153, -0.1724567309347756, 0.18997143177811, 0.1607869537476213, -0.09683354857256637, -0.03413079677416168, -0.008946586675015921, -0.02904942866526295, -0.01023901489509699, -0.1659903499314685, 0.8949278466260236, -0.1899693958296844, -0.03148302401072412, 0.1697389932295778, -0.1022248923961468, 0.1633745156276257 },
            { -0.03713344901196319, 0.01425169802776642, -0.02018790612716789, 0.02306868295823367, 0.04338357691568698, -0.01913588053374859, -0.006223641760033812, -0.07424487525474961, 0.3155958032078607, -0.1154702358700685, -0.004625191758894717, -0.0317228826959173, 0.05014343532325256, 0.09419353716058995, -0.05417748655495015, -0.03464031246727418, 0.005867922470358386, 0.005445782337005063, 0.01504270130472867, 0.1088704038318373, -0.08981379496549513, -0.02574346241746133, 0.1095940798652238, -0.1232905508972648, 0.07641025137580656, -0.01881372226134989, -0.03698635561937614, 0.0229225736261529, -0.3490600890723916, 0.6099922388646907, 0.4252935958425975, -0.02174520250451064, 0.03800034772105284, -0.04274942415300018, 0.1476878330927723 },
            { -0.04093237841029021, 0.006384739309514542, -0.0130520026587977, -0.04040605971477414, 0.04503040295118432, -0.05347701744396683, 0.02034110872501586, -0.03375646270612702, 0.08464280865275234, 0.3773984289101495, -0.0007746671283291694, -0.001189941446452143, 0.01917297458448691, 0.1552508497133713, -0.2136211186622522, 0.113217050295249, 0.003562806060727672, 0.003003168573676412, 0.00575176646630448, 0.06610246412854204, -0.004753380706020118, -0.004311737792456213, 0.006411913828218056, -0.07516060295747026, 0.1226910621991621, -0.0161823576810785, -0.02254768730710087, 0.03680651294679119, -0.3002391092571213, 0.03568822035179416, 0.6828890375428202, -0.006890098959867958, 0.0008189984660355179, -0.009600319058806803, 0.05173062818511476 },
            { -0.02557815590343008, -0.04099979151831754, -0.005674999563939986, 0.1935656134956631, 0.02596384270286371, -0.04737889847365268, 0.04543103359859833, 0.2180859889617275, -0.5041765291597239, 0.8429039407664713, 0.001519460381977646, 0.00142641489966466, 0.003356263515805636, 0.1214420892979636, -0.2344553949722816, 0.2528656468745961, 0.0008461178284371317, 0.0006633205818853926, 0.001006857014138655, 0.01569843332739829, 0.007058641704834775, 0.008457199890802529, -0.009947588602064872, -0.01734385436210938, 0.04271141814013069, -0.004625891289715499, -0.005203042411435026, 0.01281314495589428, -0.08582639858272327, -0.05536751483420172, 0.237728475921549, -0.0005979742806730294, -0.0003857595145824521, -0.0006725807738298795, 0.004690470382277767 },
            { -0.02495652929806417, -0.03240419913090825, -0.02070490865233475, -0.02645673874857106, 0.005124628831690131, 0.005361881137819041, 0.02827782277230293, 0.02902548365002269, -0.09812408341868203, 0.08810028066373127, 0.1604645781172019, -0.1481539223502042, 0.08826600142459001, 0.006041846787382009, 0.006075743364837837, 0.02642950564403634, 0.0334017654098673, 0.009173540066134241, 0.02647922078400471, 0.1040640551066647, -0.167878620871496, 0.1499761670891584, 0.1741521492437127, -0.02964843210342461, -0.1085585175931346, -0.01078332381180033, -0.008894334929591951, -0.03256684237349022, -0.03359572135228224, 0.1627690805059437, -0.1014628310156253, -0.1857306950794881, 0.8998531135204924, -0.1531949737923246, 0.1800778104018307 },
            { -0.03280377145867323, -0.003357685596893681, -0.0297236815267525, -0.02665480921729686, 0.03517748253151906, 0.01200475223875577, 0.03026699130493011, 0.009703884312666779, -0.1125841458311084, 0.09429758614311817, 0.009154680931611734, -0.1198405379588696, 0.1033936059035812, 0.03812711034200998, 0.01261027312837124, 0.0282886565901092, 0.03596925919343843, 0.01342304375412978, 0.03101740278463073, 0.1120631477085375, -0.1258853065399805, 0.008556305529588817, 0.4815949349209138, -0.1599886590680968, -0.1417947945908063, -0.05394226355550374, -0.04799554707392446, -0.04253750720995688, -0.1680585028466756, 0.4501165508080966, -0.1325266925289348, -0.1585470232159909, 0.4246416457486893, -0.1410684427130844, 0.5669020570578502 },
            { -0.04071692449822336, 0.02343428556274735, -0.0397189812555841, 0.02306868295823368, 0.0984497965965411, -0.05447853760033644, -0.03095626731168392, -0.09782049610383155, 0.1660499124006589, -0.09644504318529377, -0.03031078083060836, -0.0475178811355841, 0.09504152804619324, 0.09967243709134721, -0.05402994244200247, -0.02893287960039872, 0.03088462557296403, 0.01546154614358784, 0.02851183427556081, 0.09622184151452594, -0.0471266024348212, -0.02832958391062401, 0.2868127992844248, -0.2931680525644633, 0.3174428059841398, -0.09332422289736518, -0.08794849053294117, 0.09523075714638954, -0.290754005221206, 0.2680659171856125, 0.2966938614748696, -0.0900933984072928, 0.08306323917376714, -0.08490377043501754, 0.5124699899557136 },
            { -0.03882422922489381, -0.008454146485978158, -0.03974059720891045, -0.04040605971477419, 0.1488137364235411, -0.2006373486991841, 0.1011762603611382, 0.04090465035196563, -0.08593400912262308, 0.3152172289251929, 0.004669118360786719, 0.00453257711872131, 0.05292203594162259, 0.1443738861696729, -0.1925204755329315, 0.09456309864408348, 0.01647975858325771, 0.01015446516687872, 0.01587626324315243, 0.05134310969222106, 0.004349209695719572, 0.004363931801353486, -0.03237924268300435, -0.2355291784169416, 0.509714264151844, -0.07254016497511605, -0.07065720680352437, 0.1529109319488565, -0.226000740762852, -0.03026284534459565, 0.4763979224893448, -0.02579716973907676, -0.003454394686967619, -0.02512754082961971, 0.1795029011616394 },
            { -0.02232219308626713, -0.04162279872719115, -0.02351675082611384, 0.1935656134956631, 0.111110855045382, -0.2129097496555519, 0.2259730354911516, 0.2153019879091375, -0.4756336109937084, 0.7040247762181034, 0.007461285488833403, 0.006047089118741128, 0.01199646886565959, 0.1051854336230482, -0.2007330594015486, 0.2112028095304107, 0.003645198807265647, 0.002552070903363329, 0.00359886187881335, 0.01135671018879663, 0.005701245251767776, 0.006973595121758819, -0.04667794528742526, -0.06509776329759823, 0.1774425836564904, -0.01969963128666903, -0.01952890149186888, 0.05323160983041249, -0.06137470551754996, -0.0436269449865272, 0.1658444429758217, -0.002126939022285105, -0.001511890785176816, -0.002108505587793855, 0.0162757165526537 },
            { -0.03902719790271379, 0.02047850070830743, 0.01968046068523603, -0.02645673874857104, -0.00832019668364352, -0.03483895378318298, 0.0625461354887268, -0.008515715793573035, -0.03330536168236854, 0.06173990695207004, -0.1041298841652333, 0.3267379782362987, -0.1004276519369547, 0.008639841861519889, 0.007449010630836028, 0.01852156663927369, 0.1056476935180242, -0.07307756320414256, -0.03012763607208067, 0.1042858797995482, -0.06986072798072832, -0.03083561556019442, 0.1307440376701697, 0.1350014187283424, -0.1682701554474762, -0.02924195016441225, 0.04049953906335887, -0.05047994160310094, -0.02886501728909037, 0.03871677102787957, -0.04982924801298245, -0.3529604533078607, 0.4734273641949984, 0.4888434453307892, 0.1956104588029308 },
            { -0.04122892014780962, 0.02291807830838162, 0.0231559130793076, -0.02665480921729685, -0.04141279782232516, -0.03444320211700796, 0.0669458661735613, -0.040500387201195, -0.0325826767811745, 0.06608292448582027, -0.08451062049268922, 0.09950928181837054, -0.08530061779737301, 0.0445075575635089, 0.01300536454864521, 0.01982444337877589, 0.09287223076709843, -0.0397190965835419, -0.02558962516953212, 0.09167509457119534, -0.03757358220136973, -0.0250258321629452, 0.3082804233695204, 0.3216830634514467, -0.2197877481789312, -0.1230500279660215, 0.09650280654078523, -0.06593488110619014, -0.1214638956941007, 0.0912899951436842, -0.06508497115902054, -0.2534541001194386, 0.1904913673057358, 0.1987730713685737, 0.6158003100435523 },
            { -0.04072125066349058, 0.00445003802812041, 0.005514304491642003, 0.02306868295823366, -0.01781289440329102, 0.01605628554003031, -0.06847043724307712, -0.01427315562842497, 0.01267802473855683, -0.0675878436185248, -0.009782318019215943, 0.001069275590298621, -0.01205096316457914, 0.09466301193507801, -0.04719525032977099, -0.02027590923577437, 0.06487869336768078, -0.003980488301318865, -0.003615209810624828, 0.06404239782990989, -0.003142989020084431, -0.002896803354255636, 0.04843574513361197, 0.06055150788778351, 0.4920493710943266, -0.1803070402235226, 0.0181650547242118, 0.1476115800370625, -0.1779828569618004, 0.01434310647980413, 0.145708845883514, -0.1219831797603039, 0.009830259868357283, 0.01228921029945565, 0.5566731938503815 },
            { -0.0325842462113068, -0.03136678397027944, -0.03076743722716246, -0.04040605971477426, 0.1323516525356927, -0.2245148383223397, 0.2237861146434754, 0.1344592595949338, -0.2267129190140597, 0.2209014799602402, 0.03394747108548725, 0.01338103374516337, 0.03298462638377007, 0.1176773535525723, -0.1499002116504072, 0.06626899332669925, 0.02971047564278817, 0.008847399606622432, 0.009895171304887427, 0.02932750340775404, 0.008934018818041237, 0.01005274495429056, -0.1889436909588624, -0.1846999018457715, 0.790078018420279, -0.1249275929572683, -0.055408757628344, 0.2370182170788944, -0.1233172586069368, -0.05595122921376421, 0.2339630187229395, -0.03113440519836287, -0.01412623230005709, -0.01380894861336873, 0.1949859606485335 },
            { -0.01669492344707398, -0.03807444216141978, -0.03827576649250269, 0.193565613495663, 0.1902826731863671, -0.3945927279594243, 0.499817125541642, 0.189049666937128, -0.3912790452831661, 0.4933744120698553, 0.01449092295606218, 0.009219639723041425, 0.01439742630378461, 0.07778091366060151, -0.1458880708144908, 0.1480090836281685, 0.005962016466724318, 0.003437535101900785, 0.004319133343148648, 0.005885165230849661, 0.003408667614719809, 0.004291145937284419, -0.08493374951466552, -0.08454896069918175, 0.2750432835384232, -0.0316674787804407, -0.02536413297621134, 0.08251117885059782, -0.03125928049804865, -0.02515113186877524, 0.08144759807997562, -0.002396067830734657, -0.001927869644379564, -0.001919135511233522, 0.01767958181580986 },
            { -0.03886092696465344, -0.008250213363944183, -0.04065529414352134, -0.02645673874857105, 0.07155728382479908, -0.1348907822337634, 0.0993175900782413, 0.002178398618789459, 0.002570504009016228, 0.03345402976511364, 0.04229775050561493, -0.09763845917155889, 0.468010968482276, 0.007879570167104236, 0.005891740649325081, 0.0100359892367156, 0.1529968345301563, -0.2237928736235234, 0.1404002171137849, 0.05153528848523008, 0.004264638912402918, 0.004274165014245968, -0.01602329084247625, 0.2832291633051979, -0.1447822281298507, -0.036726289343039, 0.08496688902390849, -0.04343371765317588, -0.0123708436327974, -0.001619144950105701, -0.01463016653982644, -0.2402034471610155, -0.03143877733913179, 0.5557147210669321, 0.09119745105210089 },
            { -0.03635734686787367, -0.0198488651832077, -0.02610225289337146, -0.02665480921729689, 0.1033929806787117, -0.1586234197313437, 0.1063039633401004, 0.02475565406210101, 0.009274242332480706, 0.03580731218838131, 0.08202612810508432, -0.1304424837513082, 0.115396099214526, 0.03646275517499351, 0.009470543015015116, 0.01074195850967578, 0.1208167887443206, -0.1332034584675043, 0.03461807195746709, 0.04069579662166427, 0.00778801235936363, 0.00828869627367693, -0.1393359932518023, 0.8027391655774392, -0.1891087567629952, -0.1422852099744591, 0.2408164780802123, -0.05673138515053398, -0.04792719643993697, -0.01407982742493606, -0.0191093384963019, -0.1588034129511557, -0.04665252330470013, 0.2687733926869821, 0.2870982409465317 },
            { -0.03062008488988899, -0.03538565054157872, 0.0194477483558448, 0.02306868295823359, -0.09312492294621713, 0.2581706538315076, -0.1087248439164009, 0.09090396072936986, -0.0534182819067341, -0.03662275898681376, 0.09893051593325783, -0.07244188880075983, -0.03413781027061361, 0.06753193549861436, -0.03099862159280502, -0.01098658719416151, 0.07349480888670298, -0.04203801803890882, -0.01024111889797487, 0.02475591204075881, 0.008698117563231675, 0.009996875601862028, -0.324063410110059, 0.5275567968942034, 0.4233668418947011, -0.1880539520086906, 0.1582635745995432, 0.1270072723157652, -0.06334389007012629, -0.03274643387254768, 0.04278099242128469, -0.0689369712339987, -0.03563784869209483, 0.05801639036575189, 0.2595320140797413 },
            { -0.02112183444024142, -0.04133309679808753, 0.001423206570283969, -0.04040605971477432, -0.007285068764193874, 0.01709393778786679, 0.3553520521402793, 0.1578649471058824, -0.2196489795143267, 0.1196964014131826, 0.06328898222770554, -0.000987051146063666, -0.0009837807600845279, 0.07399278649510713, -0.08993600866935425, 0.03590813437695315, 0.02966414163067071, -0.0004041513902125657, -0.0002951277675310628, 0.009992037425467181, 0.005193153358291034, 0.006395317727097126, -0.2906772265354589, 0.007619846154303334, 0.6797952708792184, -0.1190187617692606, 0.00228590380671476, 0.2039341170440555, -0.04009015115750493, -0.02937277791950092, 0.06869294770784665, -0.01607237648780609, -0.01177571876344888, 0.0003086900422275108, 0.09090629770469663 },
            { -0.009682098480128012, -0.0266278562476349, -0.04145451836505644, 0.193565613495663, 0.2183125263152957, -0.4965181115031936, 0.793664260801162, 0.1267598619661149, -0.2457156461655037, 0.2673370123402328, 0.0154286376713807, 0.007285279016660843, 0.008950488602807279, 0.04456863824272091, -0.08208288517114468, 0.08019934809827109, 0.005424693276627277, 0.002433694110636731, 0.002685087802928699, 0.001827247823874247, 0.001204380479000014, 0.001559055565939391, -0.08469391524757178, -0.05764700641118937, 0.2366514686870487, -0.02829254477054592, -0.01729372335511216, 0.07099388651446865, -0.009530030220618647, -0.008558274734317578, 0.0239135040502404, -0.001159952219816498, -0.001041674532615043, -0.0007090169144325062, 0.008242569477807105 },
            { -0.01858506351847872, -0.03987149506809779, 0.2564946004984641, -0.02645673874857105, 0.2949230850789766, -0.2573608213043341, 0.1287360490666404, 0.00814813477108319, 0.006168625717409591, 0.01082433161298627, 0.2050747191043496, -0.4470449697859731, 0.6241135367031262, 0.003530822036591976, 0.002386623605426892, 0.003247228400443828, 0.08886479638643557, -0.1729604171910535, 0.1872299624535174, 0.007471893318003931, 0.00414565073336088, 0.005172789260791834, -0.04984204509943963, 0.1748440186692272, -0.06072141860584582, -0.01928374435838446, 0.05245205739902629, -0.01821602682382562, -0.001621407874395139, -0.001257211989621653, -0.001531632487106146, -0.040808083535296, -0.03164189141068936, 0.1109985643948329, 0.01237547859041777 },
            { -0.01630849757557681, -0.03763593792610827, -0.004745786847815173, -0.02665480921729689, 0.6691449677790836, -0.31338587445254, 0.1377918275075794, 0.03799560475880879, 0.009971627173580652, 0.01158575585715982, 0.1631868546230181, -0.2770886655037875, 0.2416422878046817, 0.01547691146568509, 0.003691624224627456, 0.003475650673418238, 0.06647159631742781, -0.1025817764881592, 0.07249109947501955, 0.00558903746542606, 0.003264050211996669, 0.004116212923675061, -0.1941891291083415, 0.5131439479568478, -0.07931188882614942, -0.07189130527011724, 0.1539398145676034, -0.0237930458061849, -0.00604473520801741, -0.00489821195904228, -0.002000557107013468, -0.02596145874995374, -0.02103727017761507, 0.05559089699173424, 0.03895918244634489 },
            { -0.01250399737956933, -0.03209534726556374, -0.01759858691004865, 0.0230686829582336, 0.1372262556288499, 0.575928446322043, -0.140929787262841, 0.07112435886035016, -0.03288994993426016, -0.01184960050071848, 0.100332084660509, -0.0995003749107848, 0.01627644657618798, 0.02649074818163221, -0.01143434379185644, -0.003554802333816465, 0.03736936306868319, -0.03459176728522134, 0.004882827085332012, 0.003142075440051004, 0.001975456328671059, 0.002530768942712428, -0.2586290460580438, 0.3807882402016019, 0.1775593286730394, -0.08991358859160389, 0.1142339714217745, 0.05326663256871259, -0.007560077433519291, -0.006523639568157541, 0.004478743126040637, -0.01066467721120918, -0.009202618736179339, 0.01354932497802134, 0.03521845015094746 },
            { -0.007816863792841236, -0.02241723928834179, 0.02005278463846161, -0.04040605971477432, -0.1210392777590415, 0.4095876032623191, 0.4606094366992161, 0.07875024653515691, -0.0961276701025703, 0.03872877351022472, 0.04092308152345897, -0.01035055334627994, -0.005288635583114993, 0.02674179126429911, -0.03135470659495657, 0.01161837772097445, 0.01389654702228353, -0.003376120142324958, -0.001586555944432214, 0.001168443760199449, 0.0007923544577110595, 0.001032240724491057, -0.1648937662395974, 0.0590749737571153, 0.2851049727754594, -0.05378467671444844, 0.0177221041814201, 0.08552961954653407, -0.004522301101170871, -0.004159267933663179, 0.007191466348520493, -0.002350043393885912, -0.00216139083007454, 0.0007743416229574086, 0.01233596913071516 },
            { -0.003303304988079357, -0.01037776598911605, -0.03732553226575729, 0.193565613495663, 0.2063633124252943, -0.508716820740598, 1.028752320112142, 0.04782410688948842, -0.08822672903069159, 0.08649913012910967, 0.007545129434439587, 0.002680121971365884, 0.002737494332209058, 0.01506156939890499, -0.02734367440406558, 0.02594917099841506, 0.002376238637621272, 0.0008306369662951135, 0.0008212303225207034, 0.0001997979213412947, 0.0001440573214024368, 0.0001903177762730874, -0.03941790879052024, -0.01911042793504877, 0.09925122081245137, -0.01221659779863536, -0.005733002882217081, 0.02977471446035949, -0.001027190959437232, -0.0009942743609010012, 0.002503505314459829, -0.000162058201332375, -0.0001568650045817513, -7.605064442973305e-5, 0.001118515275655374 },
            { -0.03089560263777393, 0.3056635451225197, -0.02848613965062136, -0.02645673874857107, 0.005537192654111733, 0.003876453322753228, 0.005685150503339728, 0.3166833328790705, -0.2668309357797834, 0.130690033482262, 0.3519823759222679, -0.291266875281556, 0.1414770021125193, 0.006048490355209601, 0.004281258226563898, 0.006432425094468993, 0.006722684097752743, 0.004673328833782378, 0.006963348270947678, 0.154540818103216, -0.3216828895127889, 0.3982480791604779, 0.09521062210316285, -0.03179686371104688, -0.03237614075826598, -0.001527638682314717, -0.001565007970466996, -0.001593519373486234, -0.03511730259792287, 0.1077254145719857, -0.03663176553605672, -0.0390316455622193, 0.1197330059133176, -0.03998644254854876, 0.01307094762169391 },
            { -0.02786989772001701, 0.006690843711503397, -0.02552167167239558, -0.02665480921729691, 0.02469686349179404, 0.006068756454277406, 0.006085065396913789, 0.7268804203624041, -0.3254097733326216, 0.1398832625446332, 0.1378658080824755, -0.1751070424701734, 0.1076802125896524, 0.02713284359297085, 0.00672966104875472, 0.00688490609661065, 0.005146226673233548, 0.003621314230994787, 0.005299906069221694, 0.1183012720309059, -0.1941766903899369, 0.1559873363173107, 0.2798538357535025, -0.1199777970787532, -0.04228842038601757, -0.005787538089367391, -0.005905180159076302, -0.002081391283241151, -0.1330437155946821, 0.3166387301139673, -0.04784694729483167, -0.02523410845433287, 0.06005617041604539, -0.02574703687052513, 0.04114858503609602 },
            { -0.02226886746828277, -0.02053451905131599, -0.02018790612716784, 0.02306868295823371, 0.04338357691568698, -0.01913588053374861, -0.006223641760033819, 0.1670937202553848, 0.6009395761513249, -0.1430688509517218, 0.01040934468859261, -0.06040490870858282, 0.06212824993743104, 0.04806699603416371, -0.02134491891810025, -0.007041697385620891, 0.002994402956018402, 0.002145536639303074, 0.003057886690550215, 0.06883522649955144, -0.06737802717601774, 0.01177758266074922, 0.2086828127417308, -0.1527583044857082, 0.0946731145294438, -0.007412255565028346, -0.007518602030932794, 0.004659710472515878, -0.1703926619714931, 0.2361127573800839, 0.1071172552622834, -0.01061485702848241, 0.01470898531187737, -0.01076715244263252, 0.03719763351994348 },
            { -0.0145518898690548, 0.02075076579392983, -0.01305200265879766, -0.0404060597147741, 0.04503040295118432, -0.05347701744396683, 0.02034110872501579, -0.1267610567651161, 0.441928259975204, 0.4676006692834354, -0.00290900218672428, -0.006212798952127298, 0.02375551952812927, 0.05033608982018081, -0.0600144777647142, 0.02301480992196296, 0.001155148111690141, 0.0008437068147439767, 0.001169221522662102, 0.0265545028764066, -0.006972301418263481, -0.003291370853728053, 0.03347721993536692, -0.09312478684172523, 0.1520155316096518, -0.004546253438393701, -0.004583503422845893, 0.007482043536301484, -0.1045091090787257, 0.03787757412557792, 0.1719969453228304, -0.002398348787876912, 0.0008692413014772188, -0.002417999794199154, 0.01302921783528067 },
            { -0.006383645426196906, -0.03689485245927305, -0.005674999563939986, 0.1935656134956631, 0.02596384270286371, -0.04737889847365263, 0.04543103359859822, 0.204659584876928, -0.5073439612622462, 1.044366951876962, 0.00142591522038154, 0.001435376190171875, 0.00415844620979048, 0.0292366119663365, -0.05343535173274973, 0.05140263576410553, 0.0002036988886705125, 0.0001511791554585155, 0.0002046743201538356, 0.004682622661441193, 0.001618860591140965, 0.00161334213417575, -0.01001008320397236, -0.02148922010909489, 0.05291990156409657, -0.001054299169241377, -0.00105767666444954, 0.002604661531928535, -0.02423619104674888, -0.01132584095374976, 0.05987586478453951, -0.000168859688239864, -7.891000565282832e-5, -0.0001694006379102023, 0.001181372863710728 },
            { -0.02739449228397716, -0.01102591150869224, -0.02070490865233443, -0.02645673874857105, 0.005124628831690131, 0.005361881137819048, 0.02827782277230293, 0.1263970029757736, -0.1716559976004297, 0.1091571852097644, 0.6987736019265384, -0.2591770384333489, 0.1093625149958881, 0.005309230839780429, 0.003699925586712595, 0.005372601098003259, 0.02935156902481155, 0.005586380723032804, 0.005382707212706088, 0.1133020276008208, -0.1788431580894695, 0.1327624071766728, 0.3046577340766968, -0.03673472286252275, -0.1345051584596096, -0.006566685471276678, -0.00180804417049376, -0.006620201507015201, -0.02534851809399205, 0.05788297386950394, -0.0255550990557524, -0.1401368297904492, 0.3200004208071719, -0.03858469836607781, 0.04535558722832278 },
            { -0.02447531302518702, -0.04007962075476785, -0.0297236815267523, -0.02665480921729679, 0.03517748253151899, 0.01200475223875582, 0.03026699130493009, 0.2352233128815206, -0.2049044215683622, 0.1168357126437116, 0.2219105574348301, -0.2181111374930238, 0.128105777916878, 0.02362472601947034, 0.005782904813926601, 0.005750530089515638, 0.02228765531784854, 0.006155630695156082, 0.00630523077133364, 0.0860341243033993, -0.1050680532087434, 0.04216155232787785, 0.8765082404964709, -0.1982276510107367, -0.1756852593240489, -0.02473721008368841, -0.009756555131284492, -0.008647042476714169, -0.09548982057143447, 0.1665308242865413, -0.03337904847723623, -0.09008545561566944, 0.1571058055207392, -0.03553043011995619, 0.1427836980104772 },
            { -0.01928018940651645, 0.01027233067587199, -0.03971898125558403, 0.02306868295823376, 0.09844979659654109, -0.05447853760033641, -0.03095626731168393, -0.05647858358663643, 0.3521773959096309, -0.1194964347698703, -0.01750052429605988, -0.1007812855516264, 0.1177574645778426, 0.04135680830732886, -0.01819084089180306, -0.005881488015822322, 0.01281487216264315, 0.005205604765194612, 0.005795897743911448, 0.04946757695458771, -0.03365171700808822, -0.003324984982250314, 0.6083049566555483, -0.3632383367030433, 0.3933150144955561, -0.0314204682320263, -0.01787820639436113, 0.01935854863497332, -0.1212883289423594, 0.1155739571735889, 0.0747272764156984, -0.03758255276052101, 0.03581189040276771, -0.0213844246405819, 0.1290740779192513 },
            { -0.01241026984982724, 0.009125117282784324, -0.03974059720891046, -0.04040605971477415, 0.1488137364235411, -0.2006373486991842, 0.1011762603611381, -0.04921064378975373, 0.1286635315904435, 0.3905575008373495, -0.005617217565431131, -0.006786339718755276, 0.06557096567043828, 0.04276983431439064, -0.0507088224103505, 0.01922282673192688, 0.004882022385396994, 0.002674629643386927, 0.003227333514336778, 0.01884543325743407, -0.001715170669099031, -0.001067234542869981, 0.04847938268392309, -0.2918231583040322, 0.6315413971091551, -0.01910667596866331, -0.01436322691643385, 0.03108379899154526, -0.07375500526501395, 0.009210765154567695, 0.1199887286536972, -0.008418867936032913, 0.001051375634067119, -0.006328788468651271, 0.0452107867882589 },
            { -0.005376068580257251, -0.04061590762108436, -0.02351675082611384, 0.1935656134956631, 0.111110855045382, -0.2129097496555519, 0.2259730354911514, 0.2173467560795982, -0.5074589290345994, 0.8722941892004596, 0.007532146883223916, 0.006451708409677027, 0.01486375257793093, 0.02458542446408886, -0.04483397564339194, 0.04293339654805436, 0.0008520073250235732, 0.0005700081743520861, 0.0007315781665420247, 0.003288892575872651, 0.001358583804479317, 0.001431058569854597, -0.04980123266647318, -0.08065682142534487, 0.2198532493014453, -0.004399936871004093, -0.003969843364122354, 0.01082094418545756, -0.01698450152286406, -0.009461907992714317, 0.04177067725855619, -0.0005885975135588637, -0.0003279022060515103, -0.0005310621497184596, 0.004099309516036376 },
            { -0.02096141170324584, -0.005880697701746651, 0.01968046068523617, -0.02645673874857101, -0.008320196683643569, -0.03483895378318298, 0.06254613548872674, 0.003493026207667973, -0.06586001995159908, 0.07649640168257887, 0.04271260610471697, 0.6461112769413261, -0.1244309293917706, 0.004001525804963333, 0.002724744548458424, 0.003765071908764832, 0.04893052194972215, -0.02673075685123112, -0.00612435861726494, 0.05984396689510615, -0.05053217701368599, 0.002571158587791562, 0.2585411025297012, 0.1672681943427363, -0.2084885131474684, -0.01069629891074992, 0.008232763448965083, -0.0102615839031088, -0.0130819973384469, 0.01556332513255172, -0.01255032366137422, -0.1599662201655972, 0.1903078123510864, 0.123123340272851, 0.04926774268973663 },
            { -0.01847186527917339, 0.01601553293727513, 0.02315591307930768, -0.02665480921729677, -0.04141279782232526, -0.03444320211700788, 0.06694586617356121, -0.03616904734717508, -0.07249440370695562, 0.08187744662056605, -0.07547257804609404, 0.2214018847247755, -0.1056883731273781, 0.01760211513184511, 0.004224851213614526, 0.004029921244029958, 0.03672966543223823, -0.01290292730949442, -0.005201869839527107, 0.04492183599540914, -0.02715746399531481, -0.004543201290743632, 0.6859045257943279, 0.3985687386177591, -0.2723193587359512, -0.03997335545982009, 0.01961713137447287, -0.01340327054917005, -0.04888899740905735, 0.0412891994362846, -0.01639273089820859, -0.1020148149641142, 0.08615660503867625, 0.05006429918812137, 0.1550995351125429 },
            { -0.01425387190434575, 0.01962515553554491, 0.005514304491642037, 0.02306868295823371, -0.01781289440329107, 0.01605628554003034, -0.06847043724307719, -0.07232353807336976, 0.0876260164567923, -0.08374205743970024, -0.04956800501072154, 0.007390454144437919, -0.01493127159416132, 0.03028903273713768, -0.01313358888935454, -0.004121695414599032, 0.0207590359443045, -0.001107698265463551, -0.000734901381042661, 0.02538912340035491, -0.006045183127609518, -0.002983831083744874, 0.3347707144999606, 0.07502396259627708, 0.6096544066403051, -0.05017620467325432, 0.003692600015718302, 0.03000654449108392, -0.06136748621798337, 0.02015209737887204, 0.03669919272486213, -0.04205911305476382, 0.01381153757769905, 0.003095241709461084, 0.1402073889337642 },
            { -0.008973334256543564, -0.01905813911559209, -0.03076743722716247, -0.04040605971477423, 0.1323516525356928, -0.2245148383223397, 0.2237861146434753, 0.0872667704762521, -0.1654221201286562, 0.2736992842641157, 0.02203259319135831, 0.009763532582370159, 0.04086830307602309, 0.03075310074583002, -0.03615546366635018, 0.0134711890228236, 0.00776435926765645, 0.002133965199228203, 0.002011494612634431, 0.009496118996089611, 0.001572301635717846, 0.00132628973882776, -0.1378636298243344, -0.2288451437624544, 0.9789150719739982, -0.03013214590133516, -0.01126351571166114, 0.04818116352517526, -0.0368528082257305, -0.008298937669546608, 0.05892747185347877, -0.009304376994420981, -0.002095266234738277, -0.003478013043181277, 0.04911045245807232 },
            { -0.003814784988892538, -0.04079742454249215, -0.03827576649250269, 0.193565613495663, 0.1902826731863672, -0.3945927279594243, 0.499817125541642, 0.2072217899598282, -0.4445986454400342, 0.6112961465086305, 0.01588384175320354, 0.01047600013781191, 0.01783856439214648, 0.01740627747298323, -0.03163480281153027, 0.03008734918939329, 0.001334215658241447, 0.0007454053268317573, 0.0008779952547867932, 0.001631798609562625, 0.0008398689968949339, 0.0009561550992872541, -0.09650767257172123, -0.1047570619844014, 0.3407815550156932, -0.006866870205113955, -0.005156031690991605, 0.01677290737332784, -0.008398454315489988, -0.005809444886415919, 0.02051393023388354, -0.0006437533395720732, -0.0004453021242005417, -0.0004833661509349754, 0.004452896297538478 },
            { -0.01243849295391352, 0.009324359815203943, -0.04065529414352137, -0.02645673874857104, 0.07155728382479905, -0.1348907822337635, 0.09931759007824127, -0.002745301598304378, -0.004036158982654206, 0.04144989886038817, -0.05330524958387257, 0.1533101456583997, 0.5798705700134292, 0.002336892767461264, 0.001553087517671305, 0.002040120141441035, 0.04537521571298862, -0.0589927390317729, 0.02854061558263179, 0.01893721042355121, -0.001765161930352006, -0.001094963271208243, 0.02515948196878552, 0.3509239471519598, -0.1793867212679447, -0.009681203729766857, 0.01727210517714657, -0.008829224515081883, -0.004040421390908827, 0.0005168104247425836, -0.003684850416502221, -0.07845246249062374, 0.0100348568971316, 0.1399659816452226, 0.02296959262756681 },
            { -0.01081123142856212, -0.003430005826948045, -0.02610225289337146, -0.02665480921729687, 0.1033929806787116, -0.1586234197313437, 0.1063039633401003, 0.00466602892968319, 0.00205905019873316, 0.04436564082388982, 0.01546056047511859, -0.02896059995658493, 0.142976994846623, 0.01016285519708458, 0.002389400914954494, 0.002183629874167248, 0.03367390981544261, -0.03360699223188855, 0.007037176325370131, 0.01405370544114427, 0.0004362438040431207, 0.0003175812139462533, -0.03093512055330267, 0.9946023680278822, -0.2343077619191353, -0.03589830175085763, 0.04895327562976961, -0.01153237999439406, -0.01498204875551806, -0.0006354499990283152, -0.004813004262493802, -0.04964197057423306, -0.00210551912277896, 0.06769504265664324, 0.0723104600244304 },
            { -0.008169392142769891, -0.02548023059023507, 0.0194477483558448, 0.02306868295823361, -0.09312492294621717, 0.2581706538315076, -0.108724843916401, 0.06936039437777922, -0.04507031899996954, -0.04537598808424589, 0.07548471536412339, -0.06112100428297322, -0.04229711018275135, 0.01718712183196434, -0.00734069551356139, -0.002233358096729409, 0.01870469467558231, -0.009954903623483816, -0.002081818985837077, 0.007806348320640253, 0.001737884129221119, 0.001550560057528413, -0.2734202738938537, 0.6536484850377728, 0.5245560221171671, -0.0445325221215017, 0.03217188645597377, 0.025818092093299, -0.01858551477618519, -0.005616429148248243, 0.01077510343527638, -0.0202265616474849, -0.006112343498353576, 0.01461239143254037, 0.06536744797634711 },
            { -0.005025994237166671, -0.04130331670948133, 0.001423206570283962, -0.0404060597147743, -0.00728506876419386, 0.01709393778786676, 0.3553520521402793, 0.1627674341250549, -0.2382425061571528, 0.1483051150298991, 0.06525441799743252, -0.001070606106449747, -0.001218914830069993, 0.01712276270660278, -0.01995099403091134, 0.007299420760236605, 0.006864615891585824, -8.965510136613015e-5, -5.999369754558045e-5, 0.002864926889561879, 0.001249545675449876, 0.00134041565416259, -0.3152833720682103, 0.009441070467299986, 0.842273574261528, -0.02640257935344736, 0.0004646794937180796, 0.04145581366174565, -0.01101903744333327, -0.006476354864340644, 0.01730145971222978, -0.004417596671728381, -0.002596408610168716, 7.774871376719795e-5, 0.02289626082163504 },
            { -0.00209476062722397, -0.0307812864125692, -0.04145451836505644, 0.193565613495663, 0.2183125263152957, -0.4965181115031936, 0.793664260801162, 0.1482609575943981, -0.2926412638196377, 0.3312334029993758, 0.01804565388488185, 0.008676587315397539, 0.01108975062024664, 0.009535077667581581, -0.01726677661017364, 0.01630295743912804, 0.00116056657225547, 0.0005119465825090343, 0.0005458257854893544, 0.000484358984172293, 0.0003017346023091584, 0.0003706825943624541, -0.1008683605731342, -0.07142525436023013, 0.2932136878908876, -0.0059515579802998, -0.003515475406071426, 0.01443166731062981, -0.002483864903999603, -0.002071975104080395, 0.006023013143403234, -0.0003023248135021291, -0.0002521914480587345, -0.0001785776850415202, 0.002076028013123399 },
            { -0.004317839866583295, -0.04158768254624921, 0.2564946004984641, -0.02645673874857105, 0.2949230850789766, -0.2573608213043341, 0.1287360490666404, 0.008724298463542316, 0.006887021968319459, 0.01341146204925843, 0.2195757810907697, -0.4991076892626898, 0.7732833131128738, 0.0008010667001295383, 0.0005223619461846315, 0.0006600979641716863, 0.02016148887177371, -0.03785596519342837, 0.03806018604376982, 0.002100383263435022, 0.001013032452250416, 0.00112588142272718, -0.05564663431873073, 0.2166335996311229, -0.07523448378396148, -0.00422064635993346, 0.01066247643713048, -0.003702961645710027, -0.000439698428606046, -0.0002853297914074472, -0.0003857670787737372, -0.01106646297224565, -0.007181266445498107, 0.02795683187392465, 0.003116969811257753 },
            { -0.003714268244648456, -0.04053297281954721, -0.004745786847815159, -0.02665480921729689, 0.6691449677790836, -0.31338587445254, 0.1377918275075793, 0.0418315906646368, 0.01136753316963847, 0.0143548747900384, 0.1796619832154951, -0.3158776939024001, 0.2993973658845057, 0.003454141374027662, 0.0007990346536137327, 0.0007065317405396608, 0.01483514921867706, -0.02220334174223517, 0.01473602139519565, 0.001545495936715992, 0.0008053880034403233, 0.0009212222234520575, -0.2213732350694796, 0.6357908118385213, -0.09826827420648949, -0.01556053398424068, 0.03129295068593033, -0.004836660425844868, -0.001621065059156993, -0.001135097922073378, -0.0005038735320576779, -0.00696229234466269, -0.004875118076632448, 0.01400149064442285, 0.009812517121606468 },
            { -0.002762156689831338, -0.03611689332502471, -0.01759858691004864, 0.0230686829582336, 0.1372262556288498, 0.5759284463220432, -0.1409297872628411, 0.08131331741585214, -0.03854041567105933, -0.01468178111095546, 0.1147052117968849, -0.1165944556362289, 0.02016669050414503, 0.005765290649501824, -0.002433180766941622, -0.0007226217235794756, 0.008132848419400278, -0.007360984100623039, 0.0009925831573748857, 0.0008472637518390781, 0.000492587905316821, 0.0005881544240015222, -0.3030612986523162, 0.4718006815442315, 0.2199978976192231, -0.01913323741442733, 0.02322153007914513, 0.01082806362252889, -0.001993262099648706, -0.001553955925399669, 0.001128045837924721, -0.002811809412935284, -0.002192099021546197, 0.003412622518867086, 0.008870351568043389 },
            { -0.001669343251191899, -0.02632578093983341, 0.02005278463846161, -0.04040605971477432, -0.1210392777590415, 0.4095876032623191, 0.460609436699216, 0.09333673492099259, -0.1155536995952477, 0.04798536248866888, 0.04850304577268898, -0.01244225237899151, -0.006552675763389385, 0.00566033118596433, -0.006548500987363887, 0.002361788742530293, 0.002941428182952788, -0.0007051102844327536, -0.0003225157641578277, 0.0003064320579378885, 0.0001989271680586388, 0.0002487008262473215, -0.1982164418304149, 0.07319452109670824, 0.3532480950459388, -0.01123305069058644, 0.003602556841827082, 0.01738649727605476, -0.001170236574187662, -0.001016360768147286, 0.001811290233605318, -0.0006081211022726579, -0.000528158531587043, 0.0001950307977767423, 0.003107018697670424 },
            { -0.0006849996747420623, -0.01259644450650021, -0.03732553226575729, 0.193565613495663, 0.2063633124252943, -0.508716820740598, 1.028752320112142, 0.05826131060272223, -0.1080781959153138, 0.1071733426596648, 0.009191789624705916, 0.00328316317153109, 0.003391784607045398, 0.003112039978153761, -0.005619251595900412, 0.005274958467859939, 0.0004909813474317401, 0.0001706997395262154, 0.0001669400476843778, 5.114944691649547e-5, 3.626559834292574e-5, 4.713117780420524e-5, -0.04828714059377404, -0.02367802356392201, 0.1229733187102097, -0.002510567367868072, -0.001165407253343869, 0.006052616562601099, -0.0002615458468734032, -0.0002475937659473875, 0.0006305493909169661, -4.126365124304282e-5, -3.906245474785045e-5, -1.915461782605473e-5, 0.0002817166481419746 } } };
    alignas(32) static const double FE8_C0_D001_Q125[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q125[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q125[0][0][1];
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q125[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q125[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q125[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q125[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q125[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q125[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q125[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q125[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q125[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q125[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q125[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q125[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q125[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q125[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q125[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q125[0][0][1];
    alignas(32) double sp[15];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = std::abs(sp[13]);
    alignas(32) double BF0[35] = {};
    for (int iq = 0; iq < 125; ++iq)
    {
        // Quadrature loop body setup (num_points=125)
        // Unstructured varying computations for num_points=125
        double w0 = 0.0;
        for (int ic = 0; ic < 35; ++ic)
            w0 += w[0][ic] * FE11_C0_Q125[0][iq][ic];
        alignas(32) double sv125[1];
        sv125[0] = sp[14] * w0;
        const double fw0 = sv125[0] * weights125[iq];
        for (int i = 0; i < 35; ++i)
            BF0[i] += fw0 * FE11_C0_Q125[0][iq][i];
    }
    std::fill_n(A, 35, 0.0);
    for (int i = 0; i < 35; ++i)
        A[i] += BF0[i];
}


poisson3d_4_form_0::poisson3d_4_form_0() : ufc::form()
{
    // Do nothing
}

poisson3d_4_form_0::~poisson3d_4_form_0()
{
    // Do nothing
}

const char * poisson3d_4_form_0::signature() const
{
    return "4fb038492a75c26e521b5aceae6bbdc68821562f5ff20bf723acfa6c7e3d01c46ef0ecaccfaf5a357f0462a3f5b358082f8ef9e31ad5688e47fb69d031e37483";
}

std::size_t poisson3d_4_form_0::rank() const
{
    return 2;
}

std::size_t poisson3d_4_form_0::num_coefficients() const
{
    return 0;
}

std::size_t poisson3d_4_form_0::original_coefficient_position(std::size_t i) const
{
    throw std::runtime_error("Invalid original coefficient index.");
    return i;
}

ufc::finite_element * poisson3d_4_form_0::create_coordinate_finite_element() const
{
    return new poisson3d_4_finite_element_1();
}

ufc::dofmap * poisson3d_4_form_0::create_coordinate_dofmap() const
{
    return new poisson3d_4_dofmap_1();
}

ufc::coordinate_mapping * poisson3d_4_form_0::create_coordinate_mapping() const
{
    return new poisson3d_4_coordinate_mapping_1();
}

ufc::finite_element * poisson3d_4_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_4_finite_element_2();
    case 1:
        return new poisson3d_4_finite_element_2();
    default:
        return nullptr;
    }
}

ufc::dofmap * poisson3d_4_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_4_dofmap_2();
    case 1:
        return new poisson3d_4_dofmap_2();
    default:
        return nullptr;
    }
}

std::size_t poisson3d_4_form_0::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_0::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_0::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_0::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_0::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_0::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_0::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_0::max_overlap_subdomain_id() const
{
    return 0;
}

bool poisson3d_4_form_0::has_cell_integrals() const
{
    return true;
}

bool poisson3d_4_form_0::has_exterior_facet_integrals() const
{
    return false;
}

bool poisson3d_4_form_0::has_interior_facet_integrals() const
{
    return false;
}

bool poisson3d_4_form_0::has_vertex_integrals() const
{
    return false;
}

bool poisson3d_4_form_0::has_custom_integrals() const
{
    return false;
}

bool poisson3d_4_form_0::has_cutcell_integrals() const
{
    return false;
}

bool poisson3d_4_form_0::has_interface_integrals() const
{
    return false;
}

bool poisson3d_4_form_0::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * poisson3d_4_form_0::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * poisson3d_4_form_0::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson3d_4_form_0::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * poisson3d_4_form_0::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * poisson3d_4_form_0::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * poisson3d_4_form_0::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * poisson3d_4_form_0::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * poisson3d_4_form_0::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * poisson3d_4_form_0::create_default_cell_integral() const
{
    return new poisson3d_4_cell_integral_0_otherwise();
}

ufc::exterior_facet_integral * poisson3d_4_form_0::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson3d_4_form_0::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * poisson3d_4_form_0::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * poisson3d_4_form_0::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * poisson3d_4_form_0::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * poisson3d_4_form_0::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * poisson3d_4_form_0::create_default_overlap_integral() const
{
    return nullptr;
}


poisson3d_4_form_1::poisson3d_4_form_1() : ufc::form()
{
    // Do nothing
}

poisson3d_4_form_1::~poisson3d_4_form_1()
{
    // Do nothing
}

const char * poisson3d_4_form_1::signature() const
{
    return "599cc5df723d427da9257e7fde40f77a43d3018b56e0f0538747d8935fb0fa4b93a7068e93a44726f348d35a76743c478da2682ff5dd0f6a0a29a41e5ab0bf40";
}

std::size_t poisson3d_4_form_1::rank() const
{
    return 1;
}

std::size_t poisson3d_4_form_1::num_coefficients() const
{
    return 1;
}

std::size_t poisson3d_4_form_1::original_coefficient_position(std::size_t i) const
{
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
}

ufc::finite_element * poisson3d_4_form_1::create_coordinate_finite_element() const
{
    return new poisson3d_4_finite_element_1();
}

ufc::dofmap * poisson3d_4_form_1::create_coordinate_dofmap() const
{
    return new poisson3d_4_dofmap_1();
}

ufc::coordinate_mapping * poisson3d_4_form_1::create_coordinate_mapping() const
{
    return new poisson3d_4_coordinate_mapping_1();
}

ufc::finite_element * poisson3d_4_form_1::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_4_finite_element_2();
    case 1:
        return new poisson3d_4_finite_element_2();
    default:
        return nullptr;
    }
}

ufc::dofmap * poisson3d_4_form_1::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return new poisson3d_4_dofmap_2();
    case 1:
        return new poisson3d_4_dofmap_2();
    default:
        return nullptr;
    }
}

std::size_t poisson3d_4_form_1::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_1::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_1::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_1::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_1::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_1::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_1::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t poisson3d_4_form_1::max_overlap_subdomain_id() const
{
    return 0;
}

bool poisson3d_4_form_1::has_cell_integrals() const
{
    return true;
}

bool poisson3d_4_form_1::has_exterior_facet_integrals() const
{
    return false;
}

bool poisson3d_4_form_1::has_interior_facet_integrals() const
{
    return false;
}

bool poisson3d_4_form_1::has_vertex_integrals() const
{
    return false;
}

bool poisson3d_4_form_1::has_custom_integrals() const
{
    return false;
}

bool poisson3d_4_form_1::has_cutcell_integrals() const
{
    return false;
}

bool poisson3d_4_form_1::has_interface_integrals() const
{
    return false;
}

bool poisson3d_4_form_1::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * poisson3d_4_form_1::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * poisson3d_4_form_1::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson3d_4_form_1::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * poisson3d_4_form_1::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * poisson3d_4_form_1::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * poisson3d_4_form_1::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * poisson3d_4_form_1::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * poisson3d_4_form_1::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * poisson3d_4_form_1::create_default_cell_integral() const
{
    return new poisson3d_4_cell_integral_1_otherwise();
}

ufc::exterior_facet_integral * poisson3d_4_form_1::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * poisson3d_4_form_1::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * poisson3d_4_form_1::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * poisson3d_4_form_1::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * poisson3d_4_form_1::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * poisson3d_4_form_1::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * poisson3d_4_form_1::create_default_overlap_integral() const
{
    return nullptr;
}

